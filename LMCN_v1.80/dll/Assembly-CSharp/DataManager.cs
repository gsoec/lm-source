using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using UnityEngine;

// Token: 0x02000172 RID: 370
public class DataManager
{
	// Token: 0x0600034A RID: 842 RVA: 0x00028BCC File Offset: 0x00026DCC
	private DataManager()
	{
		this.TableAB = null;
		this.TableABKey = 0;
		this.InitialQueueBarData();
		this.InitialMailData();
		this.InitialTalkData();
		this.RoleAttr.UserId = 0L;
		this.RoleAttr.Name = new CString(13);
		this.RoleAttr.NickName = new CString(41);
		this.RoleAlliance.Leader = new CString(13);
		this.RoleAlliance.Tag = new CString(4);
		this.RoleAlliance.Name = new CString(21);
		byte b = 0;
		while ((int)b < this.Resource.Length)
		{
			this.Resource[(int)b] = new ResourceData((ResourceType)b);
			b += 1;
		}
		this.WorldCameraLimit = 0f;
		this.RoleAttr.m_Soldier = new uint[16];
		this.curHeroData = new CHashTable<uint, CurHeroData>(this.MaxCurHeroData, false);
		this.sortHeroData = new uint[this.MaxCurHeroData];
		this.heroDAtaComparer = new HeroDAtaComparer();
		this.Medal = new byte[]
		{
			10,
			20,
			50,
			100,
			150
		};
		this.LegionBattleHero = new List<ushort>();
		this.MaxMarchEventNum = 0;
		this.MarchEventData = new MarchEventDataType[8];
		this.MarchEventTime = new TimeEventDataType[8];
		this.RallyCountDown = new TimeEventDataType[8];
		this.JoinedRallyDataType = new ClientJoinedRallyDataType[8];
		for (int i = 0; i < 8; i++)
		{
			this.MarchEventData[i] = default(MarchEventDataType);
			this.MarchEventData[i].Type = EMarchEventType.EMET_Standby;
			this.MarchEventData[i].HeroID = new ushort[10];
			Array.Clear(this.MarchEventData[i].HeroID, 0, this.MarchEventData[i].HeroID.Length);
			this.MarchEventData[i].TroopData = new uint[4][];
			for (int j = 0; j < 4; j++)
			{
				this.MarchEventData[i].TroopData[j] = new uint[4];
			}
			for (int k = 0; k < 4; k++)
			{
				for (int l = 0; l < 4; l++)
				{
					this.MarchEventData[i].TroopData[k][l] = 0u;
				}
			}
			this.MarchEventData[i].Point.zoneID = 2048;
			this.MarchEventData[i].Point.pointID = 0;
			this.MarchEventData[i].ResourceGetCount = new uint[5];
			Array.Clear(this.MarchEventData[i].ResourceGetCount, 0, this.MarchEventData[i].ResourceGetCount.Length);
			this.MarchEventData[i].Crystal = 0u;
			this.MarchEventData[i].MaxOverLoad = 0u;
			this.MarchEventData[i].PointKind = POINT_KIND.PK_NONE;
			this.MarchEventData[i].DesPointLevel = 1;
			this.MarchEventData[i].DesPlayerName = string.Empty;
			this.MarchEventData[i].bRallyHost = 0;
			this.MarchEventTime[i] = default(TimeEventDataType);
			this.MarchEventTime[i].BeginTime = 0L;
			this.MarchEventTime[i].RequireTime = 0u;
		}
		this.FightHeroID = new uint[this.MaxCurHeroData];
		this.NonFightHeroID = new uint[this.MaxCurHeroData];
		this.SortNonFightHeroID = new uint[this.MaxCurHeroData];
		this.SortFightHeroID = new uint[this.MaxCurHeroData];
		this.SelectHeroID = new ushort[5];
		Array.Clear(this.SelectHeroID, 0, 5);
		this.sortNonFightHeroIDComparer = new SortNonFightHeroIDComparer();
		this.FightHeroCount = 0u;
		this.NonFightHeroCount = 0u;
		this.TempFightHeroID = new byte[65535];
		this.AllianceMember = new AllianceMemberClientDataType[100];
		this.allianceMemberComparer = new AllianceMemberComparer();
		this.PlayerName_War[0] = new CString(30);
		this.PlayerName_War[1] = new CString(30);
		this.AllianceTag_War[0] = new CString(4);
		this.AllianceTag_War[1] = new CString(4);
		this.InitWallInfo();
		this.m_DefendersID = new ushort[5];
		this.InitDefendersID();
		this.mFS_DetailData.mFS_Hero = new FS_Hero_Info[2];
		this.mFS_DetailData.mFS_Info = new FS_Info[2];
		for (int m = 0; m < 2; m++)
		{
			this.mFS_DetailData.mFS_Info[m].Name = new CString(13);
			this.mFS_DetailData.mFS_Hero[m].HeroID = new ushort[5];
			this.mFS_DetailData.mFS_Hero[m].Rank = new byte[5];
			this.mFS_DetailData.mFS_Hero[m].Star = new byte[5];
			this.mFS_DetailData.mFS_Info[m].Troops_L = new uint[16];
			this.mFS_DetailData.mFS_Info[m].Troops_D = new uint[16];
			this.mFS_DetailData.mFS_Info[m].Troops_H = new uint[16];
		}
		this.mFS_DetailData.mTraps_L = new uint[12];
		this.mFS_DetailData.mTraps_D = new uint[12];
		this.mFS_DetailData.mTraps_S = new uint[12];
		this.InitSearchPlayerData();
		this.Letter_ReplyName_KTN = new CString(50);
		this.Letter_ReplyTitle_Alliance = new CString(60);
		for (int n = 0; n < 10; n++)
		{
			this.tmpChatAllyRank[n] = 0;
			this.tmpChatNickName[n] = new CString(11);
			this.tmpChatKingdom[n] = 0;
			this.tmpChatWTitleID[n] = 0;
			this.tmpChatNTitleID[n] = 0;
			this.tmpbCheckDirtyWord[n] = 0;
		}
		this.KingdomMsg = new CString(200);
		this.mKingdomClassifieds = string.Empty;
		this.OwnedPageIDArray = new int[16];
		this.NoOwnedPageIDArray = new int[16];
		for (int num = 0; num < 16; num++)
		{
			this.OwnedPageIDArray[num] = num;
			this.NoOwnedPageIDArray[num] = num;
		}
		this.RoleAlliance.Notice = string.Empty;
		this.RoleAlliance.Header = string.Empty;
		this.RoleAlliance.Bullet = string.Empty;
		this.AllianceView.Notice = string.Empty;
		this.AllianceView.Header = string.Empty;
		this.AllianceView.Leader = string.Empty;
		this.AllianceView.Name = string.Empty;
		this.AllianceView.Tag = string.Empty;
		for (int num2 = 0; num2 < 5; num2++)
		{
			this.mTroopMemoryData[num2].Leader = new ushort[5];
			this.mTroopMemoryData[num2].TroopData = new uint[16];
			this.mTroopMemoryData[num2].Label = string.Empty;
		}
		this.TeamName = new CString(41);
		this.mDailyGift.ItemData = default(DailyGiftItemDataType);
		this.AllianceMoneyBonusRate = 100;
		this.RoleAttr.Inviter = new SocialFriend();
	}

	// Token: 0x17000030 RID: 48
	// (get) Token: 0x0600034C RID: 844 RVA: 0x00029D70 File Offset: 0x00027F70
	// (set) Token: 0x0600034D RID: 845 RVA: 0x00029D78 File Offset: 0x00027F78
	public long ServerTime
	{
		get
		{
			return this._ServerTime;
		}
		set
		{
			this.RoleAttr.ServerTime = value;
			this._ServerTime = value;
			this._DeltaTime = Time.realtimeSinceStartup;
		}
	}

	// Token: 0x17000031 RID: 49
	// (get) Token: 0x0600034E RID: 846 RVA: 0x00029DA8 File Offset: 0x00027FA8
	public ushort HeroMaxMorale
	{
		get
		{
			return (ushort)(120u + this.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGE_MORALE_MAX));
		}
	}

	// Token: 0x17000032 RID: 50
	// (get) Token: 0x0600034F RID: 847 RVA: 0x00029DC0 File Offset: 0x00027FC0
	// (set) Token: 0x06000350 RID: 848 RVA: 0x00029DC8 File Offset: 0x00027FC8
	public byte MaxMarchEventNum
	{
		get
		{
			return this._MaxMarchEventNum;
		}
		set
		{
			if (value > 8)
			{
				this._MaxMarchEventNum = 8;
			}
			else
			{
				this._MaxMarchEventNum = value;
			}
		}
	}

	// Token: 0x17000033 RID: 51
	// (get) Token: 0x06000351 RID: 849 RVA: 0x00029DE4 File Offset: 0x00027FE4
	public CHashTable<ushort, FightNpcData> m_FightNpcData
	{
		get
		{
			if (this._m_FightNpcData == null)
			{
				this._m_FightNpcData = new CHashTable<ushort, FightNpcData>(200, false);
			}
			return this._m_FightNpcData;
		}
	}

	// Token: 0x17000034 RID: 52
	// (get) Token: 0x06000352 RID: 850 RVA: 0x00029E14 File Offset: 0x00028014
	public int TechCount
	{
		get
		{
			return (this.TechKindLevelMax == null) ? 0 : this.TechKindLevelMax.Length;
		}
	}

	// Token: 0x17000035 RID: 53
	// (get) Token: 0x06000353 RID: 851 RVA: 0x00029E30 File Offset: 0x00028030
	public ushort MyKingdomID
	{
		get
		{
			return (DataManager.mapDataController == null) ? 0 : DataManager.mapDataController.kingdomData.kingdomID;
		}
	}

	// Token: 0x06000354 RID: 852 RVA: 0x00029E54 File Offset: 0x00028054
	public void Init()
	{
		DataManager.MapDataController.Init();
		DataManager.StageDataController.Init();
		this.InitialChat();
		this.InitialMail();
		this.lastBattleResult = 0;
		this.BattleSeqID = 0UL;
		for (int i = 0; i < 5; i++)
		{
			this.heroBattleData[i] = default(HeroBattleData);
		}
		for (int j = 0; j < 5; j++)
		{
			this.heroBattleConditionData[j] = default(HeroBattleData);
		}
		BattleNetwork.bStageFirstTry[0] = true;
		BattleNetwork.bStageFirstTry[1] = true;
		this.Letter_Y = -1f;
		this.Letter_Idx = -1;
		this.Letter_PluralY = -1f;
		this.Letter_PluralIdx = -1;
		this.OpenMail.Kind = MailType.EMAIL_SYSTEM;
		for (int k = 0; k < 30; k++)
		{
			this.ReinforcePlayerName[k] = new CString(13);
		}
		this.CantonmentPlayerName = new CString(13);
		this.bHeroBattleSave = false;
		this.bFirstOpenQueueBar = true;
	}

	// Token: 0x06000355 RID: 853 RVA: 0x00029F68 File Offset: 0x00028168
	public void loginFinish()
	{
		DataManager.MapDataController.loginFinish();
		DataManager.StageDataController.loginFinish();
		DataManager.missionDataManager.AllianceMissionBonusRate = 100;
		DataManager.missionDataManager.CheckChanged(eMissionKind.Record, 7, (ushort)this.RoleAlliance.Id);
		DataManager.missionDataManager.CheckChanged(eMissionKind.Record, 6, (ushort)this.RoleAttr.Level);
		DataManager.missionDataManager.SetCompleteWhileLogin(eMissionKind.ChallengeAdvance);
		DataManager.missionDataManager.UpdateVipState();
		DataManager.FBMissionDataManager.ClearHUDArray();
		GamblingManager.Instance.bOpenTreasure = 0;
		if (this.RoleAttr.EnhanceEventHeroID != 0)
		{
			this.SetQueueBarData(EQueueBarIndex.HeroEnhance, true, this.RoleAttr.HeroEnhanceEventTime.BeginTime, this.RoleAttr.HeroEnhanceEventTime.RequireTime);
			this.SetRecvQueueBarData(11);
		}
		if (this.RoleAttr.StarUpEventHeroID != 0)
		{
			this.SetQueueBarData(EQueueBarIndex.HeroEvolution, true, this.RoleAttr.HeroStarUpEventTime.BeginTime, this.RoleAttr.HeroStarUpEventTime.RequireTime);
			this.SetRecvQueueBarData(12);
		}
		if (this.RoleAttr.LordEquipEventData.ItemID != 0)
		{
			this.SetQueueBarData(EQueueBarIndex.Forging, true, this.RoleAttr.LordEquipEventTime.BeginTime, this.RoleAttr.LordEquipEventTime.RequireTime);
			this.SetRecvQueueBarData(18);
		}
		this.SetWallQueueBar();
		this.ResetQueueBarData();
		this.bBeginReLogin = false;
		ShieldLogManager.Instance.OnLoginFinish();
		NetworkManager.Instance.SetStage(LoginPhase.LP_InGame, 0L, false);
		if (!(GameManager.ActiveGameplay is BattleController))
		{
			LordEquipData.ResetData();
		}
		GUIManager.Instance.LoginCheckOpenBtn();
		NewbieManager.BuildCastleImmediate = false;
		bool flag = true;
		if (NewbieManager.UserIdCache == this.RoleAttr.UserId)
		{
			flag = false;
		}
		if (flag)
		{
			NewbieManager.UserIdCache = this.RoleAttr.UserId;
			if (!NewbieManager.CheckGoldGuy() && !NewbieManager.CheckArmyHole(false))
			{
				NewbieManager.CheckPutOnEquipTeach();
			}
		}
		if (!NewbieManager.IsWorking())
		{
			GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_Newbie);
		}
		if (NewbieManager.IsWorking())
		{
			MallManager.Instance.bCanOpenMain = true;
		}
		MallManager.Instance.CheckShowEffect();
		MallManager.Instance.bLoginFinish = true;
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Mall, 8, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Mall_FG, 2, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Mall_FG_Detail, 2, 0);
		this.bRecvKingdom = 0;
		if (this.RoleAlliance.Id > 0u)
		{
			if (this.AskAllianceTime != 0L)
			{
				this.SendAskKind = 5;
			}
			else
			{
				this.SendAskKind = 3;
				this.AskAllianceTime = this.ServerTime;
				this.LastTime = this.RoleAttr.LogoutTime;
			}
			this.SendAskData(1, 1, this.SendAskKind, 0L, this.ServerTime + 5L);
			if (this.bOpenSetChannel)
			{
				this.NowChannel = 1;
			}
		}
		else
		{
			this.SendAskKind = -1;
			this.SendAskData(0, 0, -1, 0L, 0L);
		}
		this.bOpenSetChannel = false;
		if (GUIManager.Instance.m_ChatBox != null && GUIManager.Instance.ChannelIndex == 0)
		{
			this.SendAskData(0, 0, -1, 0L, 0L);
		}
		this.LoadBlackList();
		this.LoadEmojiSave();
		this.MIBDataCheck();
		this.UpdateMorale();
		this.UpdateMonsterPoint();
		this.bSetExpediton = false;
		this.mScroll_Idx = 0;
		this.mScroll_Y = 0f;
		this.WatchTowerDataCount = 0u;
		this.bReSetWTD = false;
		this.tmp_WatchTowerData.Clear();
		this.m_WatchTowerData.Clear();
		WatchTowerData watchTowerData = default(WatchTowerData);
		for (int i = 0; i < 8; i++)
		{
			watchTowerData.Index = 0;
			this.mtmpIdx[i] = watchTowerData;
		}
		this.bSoldierSave = false;
		this.DailyResetTimer = this.ServerTime + (86400L - (this.ServerTime - this.RoleAttr.FirstTimer) % 86400L);
		this.SortItemDataType = 0;
		DataManager.Instance.AttribVal.ResetAllVal();
		if (!this.bHeroBattleSave)
		{
			long num;
			long.TryParse(PlayerPrefs.GetString("Battle_UserID"), out num);
			long num2;
			long.TryParse(PlayerPrefs.GetString("ArenaBattle_UserID"), out num2);
			long num3;
			long.TryParse(PlayerPrefs.GetString("Battle_Condition_UserID"), out num3);
			if (NetworkManager.UserID == num)
			{
				DataManager.Instance.GetHeroBattleDataSave();
			}
			if (NetworkManager.UserID == num3)
			{
				DataManager.Instance.GetHero_Condition_BattleDataSave();
			}
			if (num2 == NetworkManager.UserID)
			{
				DataManager.Instance.GetArenaHeroBattleDataSave();
			}
			DataManager.Instance.LoadNpcBattleHeroID();
		}
		long num4 = 0L;
		long num5 = 0L;
		byte b = 0;
		bool flag2 = false;
		CString cstring = StringManager.Instance.StaticString1024();
		if (DataManager.Instance.UserLanguage == GameLanguage.GL_Chs)
		{
			cstring.ClearString();
			cstring.IntToFormat(NetworkManager.UserID, 1, false);
			cstring.AppendFormat("{0}_FB_UseID");
			long.TryParse(PlayerPrefs.GetString(cstring.ToString()), out num4);
			if (num4 != 0L && !DataManager.Instance.CheckPrizeFlag(3) && IGGGameSDK.Instance.GetStarStatus())
			{
				cstring.ClearString();
				cstring.IntToFormat(num4, 1, false);
				cstring.AppendFormat("{0}_FB_Count");
				byte.TryParse(PlayerPrefs.GetString(cstring.ToString()), out b);
				cstring.ClearString();
				cstring.IntToFormat(num4, 1, false);
				cstring.AppendFormat("{0}_FB_bScoreFirst");
				bool.TryParse(PlayerPrefs.GetString(cstring.ToString()), out flag2);
				if (flag2 && b < 3)
				{
					cstring.ClearString();
					cstring.IntToFormat(num4, 1, false);
					cstring.AppendFormat("{0}_FB_CD");
					long.TryParse(PlayerPrefs.GetString(cstring.ToString()), out num5);
					if (num5 + 259200L - this.ServerTime < 0L)
					{
						GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_TreasureBox, 5, 0, false, 0);
					}
				}
			}
		}
		this.bHeroBattleSave = true;
		this.RoleAttr.VIPLevelMax = (byte)this.VIPLevelTable.GetRecordByIndex(this.VIPLevelTable.TableCount - 1).VIPLevel;
		this.AttribVal.UpdateAttrVal(UpdateAttrKind.VIP);
		for (int j = 0; j < this.Resource.Length; j++)
		{
			this.Resource[j].UpdateCapacity();
		}
		this.PetResource.UpdateCapacity();
		NewbieManager.CheckInitData();
		this.Prisoner_Requested = false;
		if (this.RoleAttr.VipLevelUp == 1)
		{
			GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_VipLevelUp, (int)DataManager.Instance.RoleAttr.VIPLevel, 2, false, 0);
		}
		else if (this.RoleAttr.VipLevelUp == 2)
		{
			GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_VipLevelUp, (int)DataManager.Instance.RoleAttr.VIPLevel, 1, false, 0);
		}
		this.bSendtoGetGift = true;
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 6, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.Door, 19, 0);
		GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_Newbie_Protocal_ExtLock);
		PushManage.PushStart = true;
		ArenaManager.Instance.bArenaOpenGet = true;
		ArenaManager.Instance.m_ArenaReportData.Clear();
		this.GetMaxActivityItem();
		this.KingGift.Reset();
		if (!byte.TryParse(PlayerPrefs.GetString("CollectionKind"), out this.mcollectionKind))
		{
			this.mcollectionKind = byte.MaxValue;
		}
		if (!byte.TryParse(PlayerPrefs.GetString("WarlobbyKind"), out this.mWarlobby_Kind))
		{
			this.mWarlobby_Kind = byte.MaxValue;
		}
		MobilizationManager.Instance.bFirstOpen = true;
		AFAdvanceManager.Instance.CheckTriggerEvent_LoginFinish();
		cstring.ClearString();
		cstring.IntToFormat(NetworkManager.UserID, 1, false);
		cstring.AppendFormat("{0}_Barrack_Soldier_Lock_UseID");
		num4 = 0L;
		if (long.TryParse(PlayerPrefs.GetString(cstring.ToString()), out num4))
		{
			cstring.ClearString();
			cstring.IntToFormat(NetworkManager.UserID, 1, false);
			cstring.AppendFormat("{0}_Barrack_Soldier_Lock");
			int barrack_Soldier_Lock = 0;
			if (int.TryParse(PlayerPrefs.GetString(cstring.ToString()), out barrack_Soldier_Lock))
			{
				GUIManager.Instance.Barrack_Soldier_Lock = barrack_Soldier_Lock;
			}
			cstring.ClearString();
			cstring.IntToFormat(NetworkManager.UserID, 1, false);
			cstring.AppendFormat("{0}_Barrack_SliderValue");
			long barrack_Soldier_SliderValue = 0L;
			if (long.TryParse(PlayerPrefs.GetString(cstring.ToString()), out barrack_Soldier_SliderValue))
			{
				GUIManager.Instance.Barrack_Soldier_SliderValue = barrack_Soldier_SliderValue;
			}
		}
		cstring.ClearString();
		cstring.IntToFormat(NetworkManager.UserID, 1, false);
		cstring.AppendFormat("{0}_Fusion_Lock_UseID");
		num4 = 0L;
		if (long.TryParse(PlayerPrefs.GetString(cstring.ToString()), out num4))
		{
			cstring.ClearString();
			cstring.IntToFormat(NetworkManager.UserID, 1, false);
			cstring.AppendFormat("{0}_Fusion_Lock");
			int fusion_Lock = 0;
			if (int.TryParse(PlayerPrefs.GetString(cstring.ToString()), out fusion_Lock))
			{
				PetManager.Instance.Fusion_Lock = fusion_Lock;
			}
			cstring.ClearString();
			cstring.IntToFormat(NetworkManager.UserID, 1, false);
			cstring.AppendFormat("{0}_Fusion_SliderValue");
			long fusion_SliderValue = 0L;
			if (long.TryParse(PlayerPrefs.GetString(cstring.ToString()), out fusion_SliderValue))
			{
				PetManager.Instance.Fusion_SliderValue = fusion_SliderValue;
			}
		}
		cstring.ClearString();
		cstring.IntToFormat(NetworkManager.UserID, 1, false);
		cstring.AppendFormat("{0}_FusionSkill_Lock_UseID");
		num4 = 0L;
		if (long.TryParse(PlayerPrefs.GetString(cstring.ToString()), out num4))
		{
			cstring.ClearString();
			cstring.IntToFormat(NetworkManager.UserID, 1, false);
			cstring.AppendFormat("{0}_FusionSkill_Lock");
			int fusionSkill_Lock = 0;
			if (int.TryParse(PlayerPrefs.GetString(cstring.ToString()), out fusionSkill_Lock))
			{
				PetManager.Instance.FusionSkill_Lock = fusionSkill_Lock;
			}
			cstring.ClearString();
			cstring.IntToFormat(NetworkManager.UserID, 1, false);
			cstring.AppendFormat("{0}_FusionSkill_SliderValue");
			long fusionSkill_SliderValue = 0L;
			if (long.TryParse(PlayerPrefs.GetString(cstring.ToString()), out fusionSkill_SliderValue))
			{
				PetManager.Instance.FusionSkill_SliderValue = fusionSkill_SliderValue;
			}
		}
		this.AllianceMoneyBonusRate = 100;
		this.UpdateItemBuffIcon();
		GameManager.OnRefresh(NetworkNews.Refresh_BuffList, null);
		GamblingManager.Instance.loadGambleMode();
		GUIManager.Instance.BuildingData.UpdateBuildState(5, 255);
		JailManage.LoginCheckPrisoner();
		ActivityManager.Instance.bNeedSendUpData = true;
		ActivityManager.Instance.mSendAddCount = 0;
		PetManager.Instance.LoadTrainingSet();
		PetManager.Instance.bRecvPetMarchFinish = true;
		FootballManager.Instance.loginFinish();
	}

	// Token: 0x06000356 RID: 854 RVA: 0x0002A9D4 File Offset: 0x00028BD4
	private void OnDailyReset()
	{
		this.DailyHelpGetAllianceMoney = 0u;
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_HelpSpeedup, 4, 0);
		DataManager.stageDataController.ResetLeanStageTimes();
		DataManager.missionDataManager.CleanVipBoxState();
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Mission, 4, 3);
		this.RoleAttr.DailyFreeScardStar = 0;
		this.RoleAttr.TodayUseMoraleItemTimes = 0;
		ArenaManager.Instance.m_ArenaTodayChallenge = 0;
		ArenaManager.Instance.m_ArenaTodayResetChallenge = 0;
		ArenaManager.Instance.m_ArenaExtraChallenge = 0;
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Arena, 6, 0);
		GUIManager.Instance.BuildingData.UpdateBuildState(5, 255);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Battle_Gambling, 8, 0);
	}

	// Token: 0x06000357 RID: 855 RVA: 0x0002AA88 File Offset: 0x00028C88
	private void sendDailyReset()
	{
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_DAILY_RESET;
		messagePacket.AddSeqId();
		messagePacket.Send(false);
	}

	// Token: 0x06000358 RID: 856 RVA: 0x0002AABC File Offset: 0x00028CBC
	public void RecvDailyReset(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b == 1)
		{
			this.DailyResetTimer = this.ServerTime + 10L;
			return;
		}
		byte viplevel = this.RoleAttr.VIPLevel;
		this.RoleAttr.SuccessiveLoginDays = MP.ReadUShort(-1);
		this.RoleAttr.VipPoint = MP.ReadUInt(-1);
		this.RoleAttr.VIPLevel = this.GetVIPLevel(this.RoleAttr.VipPoint);
		this.OnDailyReset();
		this.DailyResetTimer = this.ServerTime + (86400L - (this.ServerTime - this.RoleAttr.FirstTimer) % 86400L);
		DataManager.missionDataManager.UpdateVipState();
		if (viplevel != this.RoleAttr.VIPLevel)
		{
			GameManager.OnRefresh(NetworkNews.Refresh_VIP, null);
			GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_VipLevelUp, (int)this.RoleAttr.VIPLevel, 2, false, 0);
			if (this.RoleAttr.VIPLevel == 12)
			{
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 8, 0);
			}
		}
		else if (viplevel != this.RoleAttr.VIPLevelMax)
		{
			GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_VipLevelUp, (int)this.RoleAttr.VIPLevel, 1, false, 0);
		}
		this.AttribVal.UpdateAttrVal(UpdateAttrKind.VIP);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_VIP, 0, 0);
	}

	// Token: 0x06000359 RID: 857 RVA: 0x0002AC10 File Offset: 0x00028E10
	public void SendTreasureBox()
	{
		if (this.TreasureBox_CDTime != 0f)
		{
			return;
		}
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_ONLINE_GIFT;
		messagePacket.AddSeqId();
		messagePacket.Send(false);
		GUIManager.Instance.ShowUILock(EUILock.TreasureBox);
	}

	// Token: 0x0600035A RID: 858 RVA: 0x0002AC60 File Offset: 0x00028E60
	public void RecvOnline_Gift(MessagePacket MP)
	{
		GUIManager.Instance.HideUILock(EUILock.TreasureBox);
		if (MP.ReadByte(-1) == 0)
		{
			this.RoleAttr.OnlineGiftOpenTimes = MP.ReadByte(-1);
			this.RoleAttr.NextOnlineGiftOpenTime = MP.ReadLong(-1);
			uint num = MP.ReadUInt(-1);
			if (num != 0u)
			{
				this.RoleAttr.Diamond = this.RoleAttr.Diamond + num;
			}
			this.TreasureBox_ItemID = MP.ReadUShort(-1);
			this.TreasureBox_Num = MP.ReadUShort(-1);
			this.TreasureBox_ItemRank = MP.ReadByte(-1);
			this.RoleAttr.OnlineGiftItemID.ItemID = MP.ReadUShort(-1);
			this.RoleAttr.OnlineGiftItemID.Quantity = MP.ReadUShort(-1);
			Vector2 mV = new Vector2(GUIManager.Instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.x / 2f, GUIManager.Instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.y / 2f);
			if (num == 0u)
			{
				ushort num2 = this.GetCurItemQuantity(this.TreasureBox_ItemID, 0);
				if (num2 < 65535)
				{
					this.SetCurItemQuantity(this.TreasureBox_ItemID, num2 + this.TreasureBox_Num, 0, 0L);
				}
				GUIManager.Instance.m_SpeciallyEffect.AddIconShow(false, mV, SpeciallyEffect_Kind.Item, 0, this.TreasureBox_ItemID, true, 2f);
			}
			else
			{
				GUIManager.Instance.m_SpeciallyEffect.mDiamondValue = num;
				GUIManager.Instance.m_SpeciallyEffect.AddIconShow(false, mV, SpeciallyEffect_Kind.Diamond, 0, 0, true, 2f);
				GameManager.OnRefresh(NetworkNews.Refresh, null);
			}
			AudioManager.Instance.PlayUISFX(UIKind.HUDTreasure);
			this.TreasureBox_CDTime = 1f;
			AFAdvanceManager.Instance.CheckOpenTreasureUnbroken();
		}
	}

	// Token: 0x0600035B RID: 859 RVA: 0x0002AE20 File Offset: 0x00029020
	public AssetBundle GetTableAB()
	{
		if (this.TableAB == null)
		{
			this.TableAB = AssetManager.GetAssetBundle("Loading/Table", out this.TableABKey, false);
		}
		return this.TableAB;
	}

	// Token: 0x0600035C RID: 860 RVA: 0x0002AE5C File Offset: 0x0002905C
	public void UnloadTableAB()
	{
		this.TableAB = null;
		AssetManager.UnloadAssetBundle(this.TableABKey, true);
		this.TableABKey = 0;
	}

	// Token: 0x17000036 RID: 54
	// (get) Token: 0x0600035D RID: 861 RVA: 0x0002AE78 File Offset: 0x00029078
	public static DataManager Instance
	{
		get
		{
			if (DataManager.instance == null)
			{
				DataManager.instance = new DataManager();
			}
			return DataManager.instance;
		}
	}

	// Token: 0x17000037 RID: 55
	// (get) Token: 0x0600035E RID: 862 RVA: 0x0002AE94 File Offset: 0x00029094
	public static MapManager MapDataController
	{
		get
		{
			if (DataManager.mapDataController == null)
			{
				DataManager.mapDataController = new MapManager();
			}
			return DataManager.mapDataController;
		}
	}

	// Token: 0x17000038 RID: 56
	// (get) Token: 0x0600035F RID: 863 RVA: 0x0002AEB0 File Offset: 0x000290B0
	public static StageManager StageDataController
	{
		get
		{
			if (DataManager.stageDataController == null)
			{
				DataManager.stageDataController = new StageManager();
			}
			return DataManager.stageDataController;
		}
	}

	// Token: 0x17000039 RID: 57
	// (get) Token: 0x06000360 RID: 864 RVA: 0x0002AECC File Offset: 0x000290CC
	public static MissionManager MissionDataManager
	{
		get
		{
			if (DataManager.missionDataManager == null)
			{
				DataManager.missionDataManager = new MissionManager();
			}
			return DataManager.missionDataManager;
		}
	}

	// Token: 0x1700003A RID: 58
	// (get) Token: 0x06000361 RID: 865 RVA: 0x0002AEE8 File Offset: 0x000290E8
	public static FBMissionManager FBMissionDataManager
	{
		get
		{
			if (DataManager.FBmissionDataManager == null)
			{
				DataManager.FBmissionDataManager = new FBMissionManager();
			}
			return DataManager.FBmissionDataManager;
		}
	}

	// Token: 0x1700003B RID: 59
	// (get) Token: 0x06000362 RID: 866 RVA: 0x0002AF04 File Offset: 0x00029104
	public static GamePlayAchievementManager AchievementMgr
	{
		get
		{
			if (DataManager.achievementMgr == null)
			{
				DataManager.achievementMgr = new GamePlayAchievementManager();
			}
			return DataManager.achievementMgr;
		}
	}

	// Token: 0x06000363 RID: 867 RVA: 0x0002AF20 File Offset: 0x00029120
	public static void LoadTableData()
	{
		DataManager.Instance.bLoadingTableSuccess = true;
		DataManager.StageDataController.LoadTableData();
		DataManager.mapDataController.LoadTableData();
		DataManager.Instance.HeroTable = new CExternalTableWithWordKey<Hero>();
		DataManager.Instance.EnhanceTable = new CExternalTableWithWordKey<Enhance>();
		DataManager.Instance.EquipTable = new CExternalTableWithWordKey<Equip>();
		DataManager.Instance.ArrayTable = new CExternalTableWithWordKey<HeroArray>();
		DataManager.Instance.TeamTable = new CExternalTableWithWordKey<HeroTeam>();
		DataManager.Instance.RewardScoreTable = new CExternalTableWithWordKey<RewardScore>();
		DataManager.Instance.ComboTable = new CExternalTableWithWordKey<Combo>();
		DataManager.instance.TalentTreeLayout = new CExternalTableWithWordKey<TalentTreeLayoutTbl>();
		DataManager.instance.VIPLevelTable = new CExternalTableWithWordKey<VIP_DataTbl>();
		DataManager.instance.LordEquipEffectTable = new CExternalTableWithWordKey<LordEquipEffectData>();
		DataManager.instance.EventEquipmantTable = new CExternalTableWithWordKey<EventEquipmant>();
		DataManager.instance.ComboBoxTable = new CExternalTableWithWordKey<ComboBox>();
		DataManager.instance.LotteryBoxTable = new CExternalTableWithWordKey<LotteryBox>();
		DataManager.instance.GiftBoxTable = new CExternalTableWithWordKey<GiftBox>();
		DataManager.instance.MonsterActivityScoreTable = new CExternalTableWithWordKey<MonsterActivityScore>();
		DataManager.instance.LandWalkerData = new CExternalTableWithWordKey<LandWalkerData>();
		DataManager.instance.MallEquipmantTable = new CExternalTableWithWordKey<MallEquipmant>();
		DataManager.instance.TitleData = new CExternalTableWithWordKey<TitleData>();
		DataManager.instance.TitleDataW = new CExternalTableWithWordKey<TitleData>();
		DataManager.instance.TitleDataN = new CExternalTableWithWordKey<TitleData>();
		DataManager.instance.TitleDataF = new CExternalTableWithWordKey<TitleData>();
		DataManager.instance.TitleSortData = new CExternalTableWithWordKey<TitleSortData>();
		DataManager.instance.KOFPrize = new CExternalTableWithWordKey<KOFPrizeData>();
		DataManager.instance.AllianceMobilizationMission = new CExternalTableWithWordKey<MobilizationMissionData>();
		DataManager.instance.AllianceMobilizationDegreeInfo = new CExternalTableWithWordKey<MobilizationDegreeData>();
		DataManager.instance.AllianceMobilizationDegreeInfos[0] = new CExternalTableWithWordKey<MobilizationDegreeData>();
		DataManager.instance.AllianceMobilizationDegreeInfos[1] = new CExternalTableWithWordKey<MobilizationDegreeData>();
		DataManager.instance.AllianceMobilizationDegreeInfos[2] = new CExternalTableWithWordKey<MobilizationDegreeData>();
		DataManager.instance.AllianceMobilizationDegreeInfos[3] = new CExternalTableWithWordKey<MobilizationDegreeData>();
		DataManager.instance.AllianceMobilizationGoldMissionTable = new CExternalTableWithWordKey<AllianceMobilizationGoldMission>();
		DataManager.instance.SummonInfoData = new CExternalTableWithWordKey<SummonInfo>();
		DataManager.instance.DonateAmountTable = new CExternalTableWithWordKey<DonateAmountData>();
		DataManager.instance.FusionDataTable = new CExternalTableWithWordKey<FusionData>();
		DataManager.instance.FusionDataTable_Act = new CExternalTableWithWordKey<FusionData>();
		DataManager.instance.TechKindData = new CExternalTableWithWordKey<TechKindTbl>();
		DataManager.instance.TechLevelEx = new CExternalTableWithWordKey<TechLevelExTbl>();
		DataManager.instance.SpecialEffectTable = new CExternalTableWithWordKey<SpecialEffect>();
		DataManager.instance.LordEquipExtendTable = new CExternalTableWithWordKey<LordEquipExtendData>();
		DataManager.Instance.HeroTable.LoadTable("Heros");
		DataManager.Instance.EnhanceTable.LoadTable("Enhance");
		DataManager.Instance.EquipTable.LoadTable("Item");
		DataManager.Instance.ArrayTable.LoadTable("Array");
		DataManager.Instance.TeamTable.LoadTable("Enemy");
		DataManager.Instance.RewardScoreTable.LoadTable("RewardScore");
		DataManager.Instance.ComboTable.LoadTable("Combo");
		DataManager.instance.VIPLevelTable.LoadTable("VIP");
		DataManager.instance.LordEquipEffectTable.LoadTable("equipment_effect");
		DataManager.instance.EventEquipmantTable.LoadTable("EventEquipmant");
		DataManager.instance.ComboBoxTable.LoadTable("ComboBox");
		DataManager.instance.LotteryBoxTable.LoadTable("LotteryBox");
		DataManager.instance.GiftBoxTable.LoadTable("AllianceGiftBox");
		DataManager.instance.MonsterActivityScoreTable.LoadTable("MonsterActivityScore");
		DataManager.instance.LandWalkerData.LoadTable("LandWalker");
		DataManager.instance.MallEquipmantTable.LoadTable("MallEquipmant");
		DataManager.instance.TitleData.LoadTable("WondersTitle");
		DataManager.instance.TitleDataW.LoadTable("EmperorTitle");
		DataManager.instance.TitleDataN.LoadTable("EmperorKingdomTitle");
		DataManager.instance.TitleDataF.LoadTable("FederalTitle");
		DataManager.instance.TitleSortData.LoadTable("TitleSort");
		DataManager.instance.KOFPrize.LoadTable("KingOfTheWorldPrize");
		DataManager.instance.AllianceMobilizationMission.LoadTable("AllianceMobilizationMission");
		DataManager.instance.AllianceMobilizationDegreeInfo.LoadTable("AllianceMobilizationDegreeInfo");
		DataManager.instance.AllianceMobilizationDegreeInfos[0].LoadTable("AllianceMobilizationDegreeInfo20rate");
		DataManager.instance.AllianceMobilizationDegreeInfos[1].LoadTable("AllianceMobilizationDegreeInfo30rate");
		DataManager.instance.AllianceMobilizationDegreeInfos[2].LoadTable("AllianceMobilizationDegreeInfo40rate");
		DataManager.instance.AllianceMobilizationDegreeInfos[3].LoadTable("AllianceMobilizationDegreeInfo50rate");
		DataManager.instance.AllianceMobilizationGoldMissionTable.LoadTable("AllianceMobilizationGoldMission");
		DataManager.instance.SpecialEffectTable.LoadTable("SpecialEffect");
		DataManager.Instance.SkillTable = new CExternalTableWithWordKey<Skill>();
		DataManager.Instance.SkillTable.LoadTable("Skills");
		DataManager.Instance.AITable = new CExternalTableWithWordKey<AI>();
		DataManager.Instance.AITable.LoadTable("AI");
		DataManager.Instance.BuffTable = new CExternalTableWithWordKey<Buff>();
		DataManager.Instance.BuffTable.LoadTable("Buff");
		DataManager.Instance.SkillCostTable = new CExternalTableWithWordKey<SkillCost>();
		DataManager.Instance.SkillCostTable.LoadTable("SkillCost");
		DataManager.Instance.LevelUpTable = new CExternalTableWithWordKey<LevelUp>();
		DataManager.Instance.LevelUpTable.LoadTable("LevelUp");
		DataManager.Instance.SoldierDataTable = new CExternalTableWithWordKey<SoldierData>();
		DataManager.Instance.SoldierDataTable.LoadTable("Soldier");
		if (DataManager.Instance.mStringTable == null)
		{
			DataManager.Instance.mStringTable = new StringTable();
			DataManager.Instance.mStringTable.LoadStringTable("Loading/String", false);
		}
		DataManager.Instance.BuildsRequest = new CExternalTableWithWordKey<BuildLevelRequest>();
		DataManager.Instance.BuildsRequest.LoadTable("Buildup");
		DataManager.Instance.BuildsLevelRequestGroup = new CExternalTableWithWordKey<BuildLevelRequestGroup>();
		DataManager.Instance.BuildsLevelRequestGroup.LoadTable("BuildRequestGroup");
		DataManager.Instance.BuildsTypeData = new CExternalTableWithWordKey<BuildTypeData>();
		DataManager.Instance.BuildsTypeData.LoadTable("Buildkind");
		DataManager.Instance.BuildManorData = new CExternalTableWithWordKey<BuildManorData>();
		DataManager.Instance.BuildManorData.LoadTable("BuildManor");
		DataManager.Instance.EffectData = new CExternalTableWithWordKey<Effect>();
		DataManager.Instance.EffectData.LoadTable("Effect");
		DataManager.instance.StoreData = new CExternalTableWithWordKey<StoreTbl>();
		DataManager.instance.StoreData.LoadTable("Store");
		DataManager.instance.PriceListData = new CExternalTableWithWordKey<PriceListTbl>();
		DataManager.instance.PriceListData.LoadTable("PriceList");
		DataManager.instance.PriceListDataEx = new CExternalTableWithWordKey<PriceListTbl>();
		DataManager.instance.PriceListDataEx.LoadTable("PriceListPet");
		DataManager.instance.MarchPaltformTable = new CExternalTableWithWordKey<MarchPaltform>();
		DataManager.instance.MarchPaltformTable.LoadTable("Paltform");
		DataManager.instance.MarchOffsetTable = new CExternalTableWithWordKey<MarchOffset>();
		DataManager.instance.MarchOffsetTable.LoadTable("Offset");
		DataManager.instance.TechTreeLayout = new CExternalTableWithWordKey<TechTreeLayoutTbl>();
		DataManager.instance.TechTreeLayout.LoadTable("TechTreeSP");
		DataManager.instance.TechData = new CExternalTableWithWordKey<TechDataTbl>();
		DataManager.instance.TechData.LoadTable("Tech");
		DataManager.instance.TechLevel = new CExternalTableWithWordKey<TechLevelTbl>();
		DataManager.instance.TechLevel.LoadTable("TechLv");
		DataManager.instance.TechKindData.LoadTable("TechKindSP");
		DataManager.instance.TechLevelEx.LoadTable("TechLvSP");
		DataManager.instance.InitTechTreeData();
		DataManager.instance.HUDTypeData = new CExternalTableWithWordKey<HUDTypeTbl>();
		DataManager.instance.HUDTypeData.LoadTable("HUD");
		DataManager.instance.CastleUpgradeRewardTable = new CExternalTableWithWordKey<CastleUpgradeRewardTbl>();
		DataManager.instance.CastleUpgradeRewardTable.LoadTable("CastleUpgradeReward");
		DataManager.instance.TalentData = new CExternalTableWithWordKey<TalentTbl>();
		DataManager.instance.TalentData.LoadTable("Talent");
		DataManager.instance.TalentLevel = new CExternalTableWithWordKey<TalentLevelTbl>();
		DataManager.instance.TalentLevel.LoadTable("Talentlv");
		DataManager.instance.TalentTreeLayout.LoadTable("TalentTree");
		DataManager.instance.ItemBuffTable = new CExternalTableWithWordKey<ItemBuff>();
		DataManager.instance.ItemBuffTable.LoadTable("Item_BUFF");
		DataManager.instance.LordEnhanceTable = new CExternalTableWithWordKey<LordEnhanceTbl>();
		DataManager.instance.LordEnhanceTable.LoadTable("LordEnhance");
		DataManager.instance.HeroTalkTable = new CExternalTableWithWordKey<HeroTalkTbl>();
		DataManager.instance.HeroTalkTable.LoadTable("talk");
		DataManager.instance.LordEquipEffectFilter = new CExternalTableWithWordKey<LordEquipEffectFilterData>();
		DataManager.instance.LordEquipEffectFilter.LoadTable("EffectFilter");
		DataManager.instance.NewbieTable = new CExternalTableWithWordKey<NewbieData>();
		DataManager.instance.NewbieTable.LoadTable("NewbieFake");
		DataManager.instance.NewbieUITable = new CExternalTableWithWordKey<NewbieUI>();
		DataManager.instance.NewbieUITable.LoadTable("NewbieList");
		DataManager.Instance.AllianceLvUpData = new CExternalTableWithWordKey<AllianceLvUpData>();
		DataManager.Instance.AllianceLvUpData.LoadTable("alliance_gift");
		DataManager.Instance.ArenaRewardData = new CExternalTableWithWordKey<ArenaReward>();
		DataManager.Instance.ArenaRewardData.LoadTable("ArenaReward");
		DataManager.Instance.ArenaHeroTopicData = new CExternalTableWithWordKey<ArenaHeroTopic>();
		DataManager.Instance.ArenaHeroTopicData.LoadTable("ArenaHeroTopic");
		DataManager.instance.CoordTable = new CExternalTableWithWordKey<CoordData>();
		DataManager.instance.CoordTable.LoadTable("ArmyCoordinate");
		DataManager.instance.CoordDisplayTable = new CExternalTableWithWordKey<CoordDisplayData>();
		DataManager.instance.CoordDisplayTable.LoadTable("ExerciseAmount");
		DataManager.instance.CoordResultTable = new CExternalTableWithWordKey<CoordResultData>();
		DataManager.instance.CoordResultTable.LoadTable("ExerciseResults");
		DataManager.instance.NPCPrize = new CExternalTableWithWordKey<NPCPrizeData>();
		DataManager.instance.NPCPrize.LoadTable("DarkElementBaseInfo");
		DataManager.instance.GambleMonsterPriceTable[0] = new CExternalTableWithWordKey<MonsterPriceTbl>();
		DataManager.instance.GambleMonsterPriceTable[0].LoadTable("CPalaceSmallPrize");
		DataManager.instance.GambleMonsterPriceTable[1] = new CExternalTableWithWordKey<MonsterPriceTbl>();
		DataManager.instance.GambleMonsterPriceTable[1].LoadTable("CPalaceBigPrize");
		GamblingManager.Instance.MakeMonsterPriceIndexTable();
		DataManager.instance.FusionDataTable.LoadTable("ItemCraft");
		DataManager.MissionDataManager.LoadTable();
		DataManager.instance.PushNotification = new CExternalTableWithWordKey<PushNotificationData>();
		DataManager.instance.PushNotification.LoadTable("Pushnotification");
		DataManager.instance.AllianceMobilizationDegreeRange = new CExternalTableWithWordKey<DegreeRange>();
		DataManager.instance.AllianceMobilizationDegreeRange.LoadTable("AllianceMobilizationDegreeRange");
		DataManager.instance.MapEffectTB = new CExternalTableWithWordKey<MapEffect>();
		DataManager.instance.MapEffectTB.LoadTable("MapEffect");
		GUIManager.Instance.BuildingData.MakeIndexTable();
		GUIManager.Instance.BuildingData.castleSkin.LoadTable();
		DataManager.Instance.InitPriceListData();
		DataManager.instance.InitBuffData();
		DataManager.instance.InitTalentData();
		if (DataManager.instance.m_BannedWord == null)
		{
			DataManager.instance.m_BannedWord = new BannedWord();
		}
		DataManager.instance.SummonInfoData.LoadTable("AllianceSummonInfo");
		DataManager.instance.DonateAmountTable.LoadTable("DonateAmount");
		PetManager.Instance.LoadTable();
		DataManager.instance.FastivalSpecialDataTable = new CExternalTableWithWordKey<FastivalSpecialData>();
		DataManager.instance.FastivalSpecialDataTable.LoadTable("AllianceRedPocket");
		DataManager.instance.FusionDataTable_Act.LoadTable("ItemCraftAct");
		DataManager.FBMissionDataManager.LoadTable();
		DataManager.instance.PushCallBackTable = new CExternalTableWithWordKey<PushCallBack>();
		DataManager.instance.PushCallBackTable.LoadTable("pushback");
		FootballManager.Instance.LoadTable();
		DataManager.instance.LordEquipExtendTable.LoadTable("LordEquipExtend");
		DataManager.Instance.UnloadTableAB();
	}

	// Token: 0x06000364 RID: 868 RVA: 0x0002BBA4 File Offset: 0x00029DA4
	public static void checkLineColorID(int LineTableID, out ELineColor lineColorid, out EUnitSide unitSideid, out bool bEase)
	{
		bEase = true;
		lineColorid = ELineColor.BLUE;
		unitSideid = EUnitSide.BLUE;
		DataManager dataManager = DataManager.Instance;
		MapManager mapManager = DataManager.MapDataController;
		MapLine mapLine = mapManager.MapLineTable[LineTableID];
		if (DataManager.CompareStr(mapLine.playerName, dataManager.RoleAttr.Name) == 0)
		{
			bEase = false;
			lineColorid = ELineColor.DEEPBLUE;
		}
		else if (DataManager.MapDataController.OtherKingdomData.kingdomPeriod == KINGDOM_PERIOD.KP_KVK && DataManager.MapDataController.IsEnemy(mapLine.kingdomID))
		{
			lineColorid = ELineColor.RED;
			unitSideid = EUnitSide.RED;
			if (GameConstants.IsPetSkillLine(LineTableID) || GameConstants.IsSoccerRunningLine(LineTableID))
			{
				bEase = !dataManager.IsMapIdMine(mapLine.end.zoneID, mapLine.end.pointID);
			}
			else if (mapLine.lineFlag > 4 && (mapLine.lineFlag < 9 || mapLine.lineFlag == 12))
			{
				bEase = !dataManager.IsMapIdMine(mapLine.end.zoneID, mapLine.end.pointID);
			}
			else if (mapLine.lineFlag == 14 || mapLine.lineFlag == 18 || mapLine.lineFlag >= 23)
			{
				bEase = !dataManager.IsMapIdMine(mapLine.start.zoneID, mapLine.start.pointID);
			}
		}
		else if (dataManager.IsSameAlliance(mapLine.allianceTag))
		{
			bEase = false;
			lineColorid = ELineColor.BLUE;
		}
		else
		{
			unitSideid = EUnitSide.RED;
			if (!GameConstants.IsPetSkillLine(LineTableID) && !GameConstants.IsSoccerRunningLine(LineTableID))
			{
				if (mapLine.lineFlag > 4 && (mapLine.lineFlag < 9 || mapLine.lineFlag == 12) && dataManager.IsMapIdMine(mapLine.end.zoneID, mapLine.end.pointID))
				{
					bEase = false;
					lineColorid = ELineColor.RED;
				}
				if (bEase && (mapLine.lineFlag == 14 || mapLine.lineFlag == 18 || mapLine.lineFlag == 23 || mapLine.lineFlag == 26) && dataManager.IsMapIdMine(mapLine.start.zoneID, mapLine.start.pointID))
				{
					bEase = false;
					lineColorid = ELineColor.RED;
				}
			}
			else if (dataManager.IsMapIdMine(mapLine.end.zoneID, mapLine.end.pointID))
			{
				bEase = false;
				lineColorid = ELineColor.RED;
			}
			if (bEase)
			{
				lineColorid = ELineColor.ORANGE;
			}
		}
	}

	// Token: 0x06000365 RID: 869 RVA: 0x0002BE18 File Offset: 0x0002A018
	public void InitPriceListData()
	{
		this.PriceListDataTypeStart = new ushort[8];
		this.PriceListDataTypeCount = new byte[8];
		Array.Clear(this.PriceListDataTypeStart, 0, this.PriceListDataTypeStart.Length);
		Array.Clear(this.PriceListDataTypeCount, 0, this.PriceListDataTypeCount.Length);
		byte b = 0;
		byte b2 = 0;
		ushort num = 0;
		while ((int)num < this.PriceListData.TableCount)
		{
			byte b3 = this.PriceListData.GetRecordByIndex((int)num).Type - 1;
			if ((int)b3 < this.PriceListDataTypeCount.Length)
			{
				if (b != b3)
				{
					this.PriceListDataTypeCount[(int)b] = b2;
					b2 = 1;
					this.PriceListDataTypeStart[(int)b3] = num;
					b = b3;
				}
				else
				{
					b2 += 1;
				}
			}
			num += 1;
		}
		ushort num2 = 0;
		while ((int)num2 < this.PriceListDataEx.TableCount)
		{
			byte b3 = this.PriceListDataEx.GetRecordByIndex((int)num2).Type - 1;
			if ((int)b3 < this.PriceListDataTypeCount.Length)
			{
				if (b != b3)
				{
					this.PriceListDataTypeCount[(int)b] = b2;
					b2 = 1;
					this.PriceListDataTypeStart[(int)b3] = num2;
					b = b3;
				}
				else
				{
					b2 += 1;
				}
			}
			num2 += 1;
		}
		this.PriceListDataTypeCount[(int)b] = b2;
	}

	// Token: 0x06000366 RID: 870 RVA: 0x0002BF60 File Offset: 0x0002A160
	public uint GetResourceExchange(PriceListType Type, uint Num)
	{
		uint num = 0u;
		uint num2 = 0u;
		uint num3 = 0u;
		uint num4 = 0u;
		for (byte b = 0; b < this.PriceListDataTypeCount[(int)((byte)Type)]; b += 1)
		{
			PriceListTbl recordByIndex;
			if (Type <= PriceListType.Time)
			{
				recordByIndex = this.PriceListData.GetRecordByIndex((int)(this.PriceListDataTypeStart[(int)((byte)Type)] + (ushort)b));
			}
			else
			{
				recordByIndex = this.PriceListDataEx.GetRecordByIndex((int)(this.PriceListDataTypeStart[(int)((byte)Type)] + (ushort)b));
			}
			if (recordByIndex.Inierval == Num)
			{
				return (uint)recordByIndex.Price;
			}
			if (recordByIndex.Inierval > Num)
			{
				num2 = (uint)recordByIndex.Price;
				num4 = recordByIndex.Inierval;
				break;
			}
			num = (uint)recordByIndex.Price;
			num3 = recordByIndex.Inierval;
		}
		if (num > num2 || num4 == num3)
		{
			num4 = num3;
			num2 = num;
			num3 = 0u;
			num = 0u;
		}
		if (num4 - num3 == 0u)
		{
			return 0u;
		}
		ulong num5 = 1000000000UL;
		ulong num6 = (ulong)(num2 - num) * num5 / (ulong)(num4 - num3);
		ulong num7 = (ulong)(Num - num3) * num6;
		if (num7 % num5 > 0UL)
		{
			return Convert.ToUInt32((ulong)(1u + num) + num7 / num5);
		}
		return Convert.ToUInt32((ulong)num + num7 / num5);
	}

	// Token: 0x06000367 RID: 871 RVA: 0x0002C088 File Offset: 0x0002A288
	public void SetFightHeroData()
	{
		int curHeroDataCount = (int)this.CurHeroDataCount;
		this.FightHeroCount = 0u;
		this.NonFightHeroCount = 0u;
		Array.Clear(this.FightHeroID, 0, this.FightHeroID.Length);
		Array.Clear(this.NonFightHeroID, 0, this.NonFightHeroID.Length);
		Array.Clear(this.SortNonFightHeroID, 0, this.SortNonFightHeroID.Length);
		Array.Clear(this.SortFightHeroID, 0, this.SortFightHeroID.Length);
		for (int i = 0; i < curHeroDataCount; i++)
		{
			uint num = this.sortHeroData[i];
			if (this.TempFightHeroID[(int)((UIntPtr)num)] == 1)
			{
				this.FightHeroID[(int)((UIntPtr)DataManager.Instance.FightHeroCount)] = num;
				this.SortFightHeroID[(int)((UIntPtr)DataManager.Instance.FightHeroCount)] = num;
				DataManager.Instance.FightHeroCount += 1u;
			}
			else
			{
				this.SortNonFightHeroID[(int)((UIntPtr)DataManager.Instance.NonFightHeroCount)] = num;
				this.NonFightHeroID[(int)((UIntPtr)DataManager.Instance.NonFightHeroCount)] = num;
				DataManager.Instance.NonFightHeroCount += 1u;
			}
		}
	}

	// Token: 0x06000368 RID: 872 RVA: 0x0002C19C File Offset: 0x0002A39C
	public void Update()
	{
		if (NetworkManager.Connected() && (this._DeltaTime = NetworkManager.SynchTime) >= 1f)
		{
			this.UpdateMorale();
			DataManager.MissionDataManager.Update(this._DeltaTime);
			if (this.DailyResetTimer > 0L && this.ServerTime > this.DailyResetTimer)
			{
				this.DailyResetTimer = this.ServerTime + 10L;
				this.sendDailyReset();
			}
			if (this.m_CryptData.startTime > 0L && this.m_CryptData.startTime + (long)((ulong)GameConstants.CryptSecends[(int)this.m_CryptData.kind]) - this.ServerTime <= 0L)
			{
				GUIManager.Instance.BuildingData.UpdateBuildState(5, 255);
			}
			this.UpdateMonsterPoint();
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 16, 0);
			PetBuff.UpdateFatigue();
		}
		byte b = 0;
		byte b2 = 0;
		while ((int)b2 < this.Resource.Length)
		{
			b |= this.Resource[(int)b2].Update(NetworkManager.DeltaTime);
			b2 += 1;
		}
		if (b > 0)
		{
			GUIManager.Instance.BuildingData.UpdateLevelupResource();
			GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
		}
		if (this.PetResource.Update(NetworkManager.DeltaTime) != 0)
		{
			GameManager.OnRefresh(NetworkNews.Refresh_PetResource, null);
		}
		if (LandWalkerManager.alive)
		{
			LandWalkerManager.Instance.Update();
		}
		if (this.TreasureBox_CDTime > 0f)
		{
			this.TreasureBox_CDTime -= Time.smoothDeltaTime;
			if (this.TreasureBox_CDTime <= 0f)
			{
				GUIManager.Instance.CloseMenu(EGUIWindow.UI_TreasureBox);
				GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_UI_notAllowPopUps);
			}
		}
		if (this.leadup_CDTime > 0f)
		{
			this.leadup_CDTime -= Time.smoothDeltaTime;
			if (this.leadup_CDTime <= 0f)
			{
				Array.Clear(GUIManager.Instance.SE_Kind, 0, GUIManager.Instance.SE_Kind.Length);
				Array.Clear(GUIManager.Instance.m_SpeciallyEffect.mResValue, 0, GUIManager.Instance.m_SpeciallyEffect.mResValue.Length);
				Array.Clear(GUIManager.Instance.SE_ItemID, 0, GUIManager.Instance.SE_ItemID.Length);
				GUIManager.Instance.SE_Kind[0] = SpeciallyEffect_Kind.LeadCoin;
				GUIManager.Instance.SE_Kind[1] = SpeciallyEffect_Kind.Power;
				GUIManager.Instance.mStartV2 = new Vector2(GUIManager.Instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.x / 2f, GUIManager.Instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.y / 2f);
				GUIManager.Instance.m_SpeciallyEffect.AddIconShow(GUIManager.Instance.mStartV2, GUIManager.Instance.SE_Kind, GUIManager.Instance.SE_ItemID, true);
			}
		}
		if (this.CDGiftTime > 0f && this.bCDStart && !this.bSendtoGetGift)
		{
			this.CDGiftTime -= Time.smoothDeltaTime;
			if (this.CDGiftTime < 0f)
			{
				this.RoleAlliance.GiftNum = 0;
				for (int i = 0; i < this.mShowListIdx.Count; i++)
				{
					if (this.mListGift[this.mShowListIdx[i]].Status == 0 && this.mListGift[this.mShowListIdx[i]].RcvTime + 86400L - this.ServerTime > 0L)
					{
						this.RoleAlliance.GiftNum = this.RoleAlliance.GiftNum + 1;
					}
				}
				GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
				this.CDGiftTime = 300f;
			}
		}
		this.UpdateMailData(false);
		float deltaTime = Time.deltaTime;
		this.UpdateWallInfo(deltaTime);
		if (this.sendTimer > 0f)
		{
			this.sendTimer -= deltaTime;
		}
		if (this.mActivityCDTime > 0.0)
		{
			this.mActivityCDTime -= (double)deltaTime;
		}
		else
		{
			this.GetMaxActivityItem();
		}
		if (NetworkManager.Connected())
		{
			AFAdvanceManager.Instance.CheckTriggerEvent_Time(Time.deltaTime);
		}
		if (GUIManager.Instance.m_SpeciallyEffect.mItemlist.Count > 0 && GUIManager.Instance.m_SpeciallyEffect.m_ItemNextTime > 0f)
		{
			GUIManager.Instance.m_SpeciallyEffect.m_ItemNextTime -= Time.smoothDeltaTime;
			if (GUIManager.Instance.m_SpeciallyEffect.m_ItemNextTime < 0f)
			{
				if (GUIManager.Instance.m_SpeciallyEffect.mItemlist.Count >= 3)
				{
					Array.Clear(GUIManager.Instance.SE_Kind, 0, GUIManager.Instance.SE_Kind.Length);
					Array.Clear(GUIManager.Instance.SE_ItemID, 0, GUIManager.Instance.SE_ItemID.Length);
					Array.Clear(GUIManager.Instance.SE_Item_L_Color, 0, GUIManager.Instance.SE_Item_L_Color.Length);
					for (int j = 0; j < 3; j++)
					{
						if (GUIManager.Instance.m_SpeciallyEffect.mItemlist[j].ItemID != 0)
						{
							GUIManager.Instance.SE_ItemID[j] = GUIManager.Instance.m_SpeciallyEffect.mItemlist[j].ItemID;
							GUIManager.Instance.SE_Item_L_Color[j] = GUIManager.Instance.m_SpeciallyEffect.mItemlist[j].color;
						}
					}
					GUIManager.Instance.m_SpeciallyEffect.AddIconShow(GUIManager.Instance.mStartV2, GUIManager.Instance.SE_Kind, GUIManager.Instance.SE_ItemID, true);
					for (int k = 0; k < 3; k++)
					{
						GUIManager.Instance.m_SpeciallyEffect.mItemlist.RemoveAt(0);
					}
					if (GUIManager.Instance.m_SpeciallyEffect.mItemlist.Count > 0)
					{
						GUIManager.Instance.m_SpeciallyEffect.m_ItemNextTime = 0.75f;
					}
				}
				else
				{
					Array.Clear(GUIManager.Instance.SE_Kind, 0, GUIManager.Instance.SE_Kind.Length);
					Array.Clear(GUIManager.Instance.SE_ItemID, 0, GUIManager.Instance.SE_ItemID.Length);
					Array.Clear(GUIManager.Instance.SE_Item_L_Color, 0, GUIManager.Instance.SE_Item_L_Color.Length);
					for (int l = 0; l < GUIManager.Instance.m_SpeciallyEffect.mItemlist.Count; l++)
					{
						if (GUIManager.Instance.m_SpeciallyEffect.mItemlist[l].ItemID != 0)
						{
							GUIManager.Instance.SE_ItemID[l] = GUIManager.Instance.m_SpeciallyEffect.mItemlist[l].ItemID;
							GUIManager.Instance.SE_Item_L_Color[l] = GUIManager.Instance.m_SpeciallyEffect.mItemlist[l].color;
						}
					}
					GUIManager.Instance.m_SpeciallyEffect.AddIconShow(GUIManager.Instance.mStartV2, GUIManager.Instance.SE_Kind, GUIManager.Instance.SE_ItemID, true);
					GUIManager.Instance.m_SpeciallyEffect.mItemlist.Clear();
				}
			}
		}
	}

	// Token: 0x06000369 RID: 873 RVA: 0x0002C918 File Offset: 0x0002AB18
	public void UpdateMorale()
	{
		ushort heroMaxMorale = this.HeroMaxMorale;
		long num = this.ServerTime - this.RoleAttr.LastMoraleRecoverTime;
		if (this.RoleAttr.Morale < heroMaxMorale && num >= 360L)
		{
			this.RoleAttr.Morale = this.RoleAttr.Morale + (ushort)(num / 360L);
			if (this.RoleAttr.Morale > heroMaxMorale)
			{
				DataManager.StageDataController.UpdateRoleAttrMorale(heroMaxMorale);
			}
			this.RoleAttr.LastMoraleRecoverTime = this.ServerTime - (long)((int)num % 360);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			GUIManager.Instance.BuildingData.UpdateBuildState(5, 255);
		}
	}

	// Token: 0x0600036A RID: 874 RVA: 0x0002C9CC File Offset: 0x0002ABCC
	public uint GetMaxMonsterPoint()
	{
		return 15000u + this.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_MONSTERPOINT_MAX);
	}

	// Token: 0x0600036B RID: 875 RVA: 0x0002C9E4 File Offset: 0x0002ABE4
	public void UpdateMonsterPoint()
	{
		uint maxMonsterPoint = this.GetMaxMonsterPoint();
		if (this.RoleAttr.MonsterPoint >= maxMonsterPoint)
		{
			this.RoleAttr.MonsterPoint = maxMonsterPoint;
			GameManager.OnRefresh(NetworkNews.Refresh_MonsterPoint, null);
			return;
		}
		long num = this.ServerTime - this.RoleAttr.LastMonsterPointRecoverTime;
		ushort monsterPointRecoverFrequency = this.RoleAttr.MonsterPointRecoverFrequency;
		if (monsterPointRecoverFrequency > 0 && num * 1000L > (long)monsterPointRecoverFrequency)
		{
			long num2 = num * 1000L / (long)monsterPointRecoverFrequency;
			if ((ulong)this.RoleAttr.recvMonsterPoint + (ulong)num2 >= (ulong)maxMonsterPoint)
			{
				this.RoleAttr.MonsterPoint = maxMonsterPoint;
			}
			else
			{
				this.RoleAttr.MonsterPoint = (uint)((ulong)this.RoleAttr.recvMonsterPoint + (ulong)num2);
			}
			GameManager.OnRefresh(NetworkNews.Refresh_MonsterPoint, null);
		}
	}

	// Token: 0x0600036C RID: 876 RVA: 0x0002CAA8 File Offset: 0x0002ACA8
	public static void SortHeroData()
	{
		if (DataManager.Instance.sortHeroData.Length > 1)
		{
			Array.Sort<uint>(DataManager.Instance.sortHeroData, 0, (int)DataManager.Instance.CurHeroDataCount, DataManager.Instance.heroDAtaComparer);
		}
	}

	// Token: 0x0600036D RID: 877 RVA: 0x0002CAEC File Offset: 0x0002ACEC
	public static void SortConditionHeroData()
	{
		if (DataManager.Instance.sortHeroData.Length > 1)
		{
			Array.Sort<uint>(DataManager.Instance.sortHeroData, 0, (int)DataManager.Instance.CurHeroDataCount, DataManager.Instance.mHeroConditionComparer);
		}
	}

	// Token: 0x0600036E RID: 878 RVA: 0x0002CB30 File Offset: 0x0002AD30
	private void DownloadHero()
	{
		List<ushort> list = new List<ushort>();
		for (int i = 0; i < this.heroBattleData.Length; i++)
		{
			ushort num = this.heroBattleData[i].HeroID;
			list.Add(num);
		}
		for (int j = 0; j < this.heroBattleConditionData.Length; j++)
		{
			ushort num = this.heroBattleConditionData[j].HeroID;
			list.Add(num);
		}
		for (int k = 0; k < ArenaManager.Instance.m_ArenaTargetHero.Length; k++)
		{
			ushort num = ArenaManager.Instance.m_ArenaTargetHero[k];
			list.Add(num);
		}
		DataManager.SortHeroData();
		int num2 = 0;
		while ((long)num2 < (long)((ulong)this.CurHeroDataCount))
		{
			ushort num = (ushort)DataManager.Instance.sortHeroData[num2];
			list.Add(num);
			num2++;
		}
		for (int l = 0; l < list.Count; l++)
		{
			ushort num = list[l];
			this.CheckHero3DMesh(num);
			this.CheckHeroEffectRes(num);
			this.CheckHeroSound(num);
		}
	}

	// Token: 0x0600036F RID: 879 RVA: 0x0002CC54 File Offset: 0x0002AE54
	public void RecvHeroSave(MessagePacket MP)
	{
		this.curHeroData.Clear();
		this.CurHeroDataCount = 0u;
		long num = MP.ReadLong(-1);
		short num2 = MP.ReadShort(-1);
		CurHeroData val = default(CurHeroData);
		int num3 = 0;
		while (num3 < (int)num2 && num3 <= this.MaxCurHeroData)
		{
			val.EquipEnchant = new byte[6];
			val.SkillLV = new byte[4];
			val.ID = MP.ReadUShort(-1);
			val.Level = MP.ReadByte(-1);
			val.Exp = MP.ReadUInt(-1);
			val.Enhance = MP.ReadByte(-1);
			val.Star = MP.ReadByte(-1);
			val.Equip = MP.ReadByte(-1);
			for (int i = 0; i < 6; i++)
			{
				val.EquipEnchant[i] = MP.ReadByte(-1);
			}
			for (int j = 0; j < 4; j++)
			{
				val.SkillLV[j] = MP.ReadByte(-1);
			}
			this.curHeroData.Add((uint)val.ID, val);
			this.sortHeroData[(int)((UIntPtr)(this.CurHeroDataCount++))] = (uint)val.ID;
			num3++;
		}
		DataManager.Instance.AttribVal.UpdateHeroCalData();
		this.SetFightHeroData();
		GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
		DataManager.missionDataManager.CheckChanged(eMissionKind.Record, 20, (ushort)this.CurHeroDataCount);
		if (this.RoleAttr.UserId == 0L)
		{
			this.DownloadHero();
		}
	}

	// Token: 0x06000370 RID: 880 RVA: 0x0002CDE4 File Offset: 0x0002AFE4
	public void RecvHeroCreate(MessagePacket MP)
	{
		CurHeroData val = default(CurHeroData);
		byte b = MP.ReadByte(-1);
		uint stock = MP.ReadUInt(-1);
		DataManager.instance.Resource[4].Stock = stock;
		if (b == 0)
		{
			val.ID = MP.ReadUShort(-1);
			val.Level = MP.ReadByte(-1);
			val.Exp = MP.ReadUInt(-1);
			val.Enhance = MP.ReadByte(-1);
			val.Star = MP.ReadByte(-1);
			val.Equip = MP.ReadByte(-1);
			val.EquipEnchant = new byte[6];
			val.SkillLV = new byte[4];
			for (int i = 0; i < 6; i++)
			{
				val.EquipEnchant[i] = MP.ReadByte(-1);
			}
			for (int j = 0; j < 4; j++)
			{
				val.SkillLV[j] = MP.ReadByte(-1);
			}
			ushort itemID = MP.ReadUShort(-1);
			ushort quantity = MP.ReadUShort(-1);
			this.curHeroData.Add((uint)val.ID, val);
			this.sortHeroData[(int)((UIntPtr)(this.CurHeroDataCount++))] = (uint)val.ID;
			this.SetCurItemQuantity(itemID, quantity, 0, 0L);
			GUIManager.Instance.HideUILock(EUILock.HeroList);
			DataManager.Instance.AttribVal.UpdateHeroCalData();
			GameManager.OnRefresh(NetworkNews.Refresh_Item, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
			GUIManager.Instance.OpenUI_Queued_Restricted_Top(EGUIWindow.UI_TreasureBox, 3, (int)val.ID, true, 1);
			if (DataManager.Instance.UserLanguage == GameLanguage.GL_Chs && val.ID == 3 && IGGGameSDK.Instance.GetStarStatus())
			{
				GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_TreasureBox, 5, 0, false, 0);
			}
		}
		GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_Newbie_Protocal_ExtLock);
		this.SetFightHeroData();
		GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
	}

	// Token: 0x06000371 RID: 881 RVA: 0x0002CFD4 File Offset: 0x0002B1D4
	public void RecvHeroPutOnEq(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		CurHeroData value = default(CurHeroData);
		byte b2 = b;
		if (b2 == 0)
		{
			ushort key = MP.ReadUShort(-1);
			if (!this.curHeroData.ContainsKey((uint)key))
			{
				return;
			}
			value = this.curHeroData[(uint)key];
			byte b3 = MP.ReadByte(-1);
			byte b4 = b3 - value.Equip;
			int arg = 0;
			for (int i = 0; i < 6; i++)
			{
				if ((b4 >> i & 1) == 1)
				{
					arg = i;
					break;
				}
			}
			value.Equip = b3;
			this.curHeroData[(uint)key] = value;
			ushort itemID = MP.ReadUShort(-1);
			ushort quantity = MP.ReadUShort(-1);
			this.SetCurItemQuantity(itemID, quantity, 0, 0L);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hero_Info, 1, arg);
			GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Item, null);
			GUIManager.Instance.HideUILock(EUILock.Hero_Info);
			AudioManager.Instance.PlayUISFX(UIKind.EquipTake);
		}
	}

	// Token: 0x06000372 RID: 882 RVA: 0x0002D0E4 File Offset: 0x0002B2E4
	public void SendHeroEnhance_Free()
	{
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_HEROENHANCE_FREECOMPLETE;
		messagePacket.AddSeqId();
		messagePacket.Add(this.RoleAttr.EnhanceEventHeroID);
		messagePacket.Send(false);
		GUIManager.Instance.ShowUILock(EUILock.Hero_Info);
	}

	// Token: 0x06000373 RID: 883 RVA: 0x0002D134 File Offset: 0x0002B334
	public void SendHeroEnhance_Instant()
	{
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_HEROENHANCE_INSTANT;
		messagePacket.AddSeqId();
		messagePacket.Add(this.RoleAttr.EnhanceEventHeroID);
		messagePacket.Send(false);
		GUIManager.Instance.ShowUILock(EUILock.Hero_Info);
	}

	// Token: 0x06000374 RID: 884 RVA: 0x0002D184 File Offset: 0x0002B384
	public void RecvHeroEnhance_Start(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 == 0)
		{
			this.RoleAttr.EnhanceEventHeroID = MP.ReadUShort(-1);
			this.RoleAttr.HeroEnhanceEventTime.BeginTime = MP.ReadLong(-1);
			this.RoleAttr.HeroEnhanceEventTime.RequireTime = MP.ReadUInt(-1);
			if (this.RoleAttr.HeroEnhanceEventTime.BeginTime != 0L)
			{
				DataManager.Instance.SetQueueBarData(EQueueBarIndex.HeroEnhance, true, this.RoleAttr.HeroEnhanceEventTime.BeginTime, this.RoleAttr.HeroEnhanceEventTime.RequireTime);
				DataManager.Instance.SetRecvQueueBarData(11);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hero_Info, 2, 0);
			}
			else
			{
				this.SetQueueBarData(EQueueBarIndex.HeroEnhance, false, 0L, 0u);
			}
			GameManager.OnRefresh(NetworkNews.Refresh_HeroExclamation, null);
			GUIManager.Instance.HideUILock(EUILock.Hero_Info);
		}
	}

	// Token: 0x06000375 RID: 885 RVA: 0x0002D270 File Offset: 0x0002B470
	public void RecvHeroEnhance(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		CurHeroData value = default(CurHeroData);
		byte b2 = b;
		if (b2 != 0)
		{
			if (b2 != 1)
			{
			}
		}
		else
		{
			ushort num = MP.ReadUShort(-1);
			if (!this.curHeroData.ContainsKey((uint)num))
			{
				return;
			}
			value = this.curHeroData[(uint)num];
			byte enhance = MP.ReadByte(-1);
			byte equip = MP.ReadByte(-1);
			byte b3 = MP.ReadByte(-1);
			value.Enhance = enhance;
			value.Equip = equip;
			if (b3 > 0 && b3 < 3)
			{
				value.SkillLV[(int)(b3 - 1)] = value.Level;
			}
			else if (b3 == 3)
			{
				value.SkillLV[(int)(b3 - 1)] = value.Level - 20;
			}
			else if (b3 == 4)
			{
				value.SkillLV[(int)(b3 - 1)] = value.Level - 40;
			}
			this.curHeroData[(uint)num] = value;
			this.RoleAttr.HeroEnhanceEventTime.BeginTime = MP.ReadLong(-1);
			this.RoleAttr.HeroEnhanceEventTime.RequireTime = MP.ReadUInt(-1);
			GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eHeroEnhance);
			this.SetQueueBarData(EQueueBarIndex.HeroEnhance, false, 0L, 0u);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hero_Info, 3, (int)num);
			GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			this.RoleAttr.EnhanceEventHeroID = 0;
			GameManager.OnRefresh(NetworkNews.Refresh_HeroExclamation, null);
			GUIManager.Instance.HideUILock(EUILock.Hero_Info);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 5, 0);
			AudioManager.Instance.PlayUISFX(UIKind.HeroEnhance);
			Hero recordByKey = this.HeroTable.GetRecordByKey(num);
			GUIManager.Instance.MsgStr.ClearString();
			GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint)recordByKey.HeroTitle));
			GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(679u));
			GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 6, true);
			this.AttribVal.UpdateAttrVal(UpdateAttrKind.Hero);
		}
	}

	// Token: 0x06000376 RID: 886 RVA: 0x0002D4A4 File Offset: 0x0002B6A4
	public void RecvHeroEnhance_Cancel(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 == 0)
		{
			ushort num = MP.ReadUShort(-1);
			if (num == this.RoleAttr.EnhanceEventHeroID)
			{
				this.RoleAttr.EnhanceEventHeroID = 0;
				this.SetQueueBarData(EQueueBarIndex.HeroEnhance, false, 0L, 0u);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hero_Info, 7, (int)num);
				GameManager.OnRefresh(NetworkNews.Refresh_HeroExclamation, null);
				GUIManager.Instance.HideUILock(EUILock.Hero_Info);
			}
		}
	}

	// Token: 0x06000377 RID: 887 RVA: 0x0002D520 File Offset: 0x0002B720
	public void SendHeroStarUp_Free()
	{
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_HEROSTARUP_FREECOMPLETE;
		messagePacket.AddSeqId();
		messagePacket.Add(this.RoleAttr.StarUpEventHeroID);
		messagePacket.Send(false);
		GUIManager.Instance.ShowUILock(EUILock.Hero_Info);
	}

	// Token: 0x06000378 RID: 888 RVA: 0x0002D570 File Offset: 0x0002B770
	public void SendHeroStarUp_Instant()
	{
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_HEROSTARUP_INSTANT;
		messagePacket.AddSeqId();
		messagePacket.Add(this.RoleAttr.StarUpEventHeroID);
		messagePacket.Send(false);
		GUIManager.Instance.ShowUILock(EUILock.Hero_Info);
	}

	// Token: 0x06000379 RID: 889 RVA: 0x0002D5C0 File Offset: 0x0002B7C0
	public void RecvHeroStarUp_Start(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 == 0)
		{
			this.RoleAttr.StarUpEventHeroID = MP.ReadUShort(-1);
			ushort itemID = MP.ReadUShort(-1);
			ushort quantity = MP.ReadUShort(-1);
			this.SetCurItemQuantity(itemID, quantity, 0, 0L);
			this.RoleAttr.HeroStarUpEventTime.BeginTime = MP.ReadLong(-1);
			this.RoleAttr.HeroStarUpEventTime.RequireTime = MP.ReadUInt(-1);
			if (this.RoleAttr.HeroStarUpEventTime.BeginTime != 0L)
			{
				DataManager.Instance.SetQueueBarData(EQueueBarIndex.HeroEvolution, true, this.RoleAttr.HeroStarUpEventTime.BeginTime, this.RoleAttr.HeroStarUpEventTime.RequireTime);
				DataManager.Instance.SetRecvQueueBarData(12);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hero_Info, 4, 0);
			}
			else
			{
				this.SetQueueBarData(EQueueBarIndex.HeroEvolution, false, 0L, 0u);
			}
			GameManager.OnRefresh(NetworkNews.Refresh_Item, null);
			GameManager.OnRefresh(NetworkNews.Refresh_HeroExclamation, null);
			GUIManager.Instance.HideUILock(EUILock.Hero_Info);
		}
	}

	// Token: 0x0600037A RID: 890 RVA: 0x0002D6CC File Offset: 0x0002B8CC
	public void RecvHeroStarUp(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		CurHeroData value = default(CurHeroData);
		byte b2 = b;
		if (b2 == 0)
		{
			ushort num = MP.ReadUShort(-1);
			if (!this.curHeroData.ContainsKey((uint)num))
			{
				return;
			}
			this.RoleAttr.StarUpEventHeroID = num;
			value = this.curHeroData[(uint)num];
			byte star = MP.ReadByte(-1);
			value.Star = star;
			this.curHeroData[(uint)num] = value;
			this.RoleAttr.HeroStarUpEventTime.BeginTime = MP.ReadLong(-1);
			this.RoleAttr.HeroStarUpEventTime.RequireTime = MP.ReadUInt(-1);
			GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eHeroStarUp);
			ushort itemID = MP.ReadUShort(-1);
			ushort quantity = MP.ReadUShort(-1);
			this.SetCurItemQuantity(itemID, quantity, 0, 0L);
			this.SetQueueBarData(EQueueBarIndex.HeroEvolution, false, 0L, 0u);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hero_Info, 5, (int)num);
			GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Item, null);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			this.RoleAttr.StarUpEventHeroID = 0;
			GameManager.OnRefresh(NetworkNews.Refresh_HeroExclamation, null);
			GUIManager.Instance.HideUILock(EUILock.Hero_Info);
			AudioManager.Instance.PlayUISFX(UIKind.HeroEnhance);
			Hero recordByKey = this.HeroTable.GetRecordByKey(num);
			GUIManager.Instance.MsgStr.ClearString();
			GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint)recordByKey.HeroTitle));
			GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(680u));
			GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 7, true);
			this.AttribVal.UpdateAttrVal(UpdateAttrKind.Hero);
		}
	}

	// Token: 0x0600037B RID: 891 RVA: 0x0002D894 File Offset: 0x0002BA94
	public void RecvHeroStarUp_Cancel(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 == 0)
		{
			ushort num = MP.ReadUShort(-1);
			ushort itemID = MP.ReadUShort(-1);
			ushort quantity = MP.ReadUShort(-1);
			this.SetCurItemQuantity(itemID, quantity, 0, 0L);
			if (num == this.RoleAttr.StarUpEventHeroID)
			{
				this.RoleAttr.StarUpEventHeroID = 0;
				this.SetQueueBarData(EQueueBarIndex.HeroEvolution, false, 0L, 0u);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hero_Info, 8, (int)num);
			}
			GameManager.OnRefresh(NetworkNews.Refresh_Item, null);
			GameManager.OnRefresh(NetworkNews.Refresh_HeroExclamation, null);
			GUIManager.Instance.HideUILock(EUILock.Hero_Info);
		}
	}

	// Token: 0x0600037C RID: 892 RVA: 0x0002D934 File Offset: 0x0002BB34
	public byte UpdateHeroAttr(ushort updateHeroID, MessagePacket MP)
	{
		byte result = 0;
		if (updateHeroID != 0 && this.curHeroData.ContainsKey((uint)updateHeroID))
		{
			CurHeroData value = this.curHeroData[(uint)updateHeroID];
			result = value.Level;
			byte level = MP.ReadByte(-1);
			value.Level = level;
			value.Exp = MP.ReadUInt(-1);
			for (int i = 0; i < value.SkillLV.Length; i++)
			{
				value.SkillLV[i] = MP.ReadByte(-1);
			}
			this.curHeroData[(uint)updateHeroID] = value;
		}
		else
		{
			MP.ReadByte(-1);
			MP.ReadUInt(-1);
			MP.ReadUInt(-1);
		}
		return result;
	}

	// Token: 0x0600037D RID: 893 RVA: 0x0002D9E4 File Offset: 0x0002BBE4
	public void RecvHeroSkillAdd(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = 0;
		byte b3 = b;
		if (b3 == 0)
		{
			ushort num = MP.ReadUShort(-1);
			byte b4 = this.UpdateHeroAttr(num, MP);
			if (this.curHeroData.ContainsKey((uint)num))
			{
				b2 = this.curHeroData[(uint)num].Level;
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hero_Info, 6, (int)num);
			GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
			GUIManager.Instance.HideUILock(EUILock.Hero_Info);
			this.AttribVal.UpdateAttrVal(UpdateAttrKind.Hero);
			if (b2 > b4)
			{
				GUIManager.Instance.AddHerodLvUpData(num, b4, b2);
				if (!GUIManager.Instance.bOpenHeroLvUp)
				{
					GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_HeroUp, 0, 0, false, 0);
					GUIManager.Instance.bOpenHeroLvUp = true;
				}
				else
				{
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_HeroUp, 0, 0);
				}
				GUIManager.Instance.UpdateUI(EGUIWindow.Door, 5, -1);
			}
		}
	}

	// Token: 0x0600037E RID: 894 RVA: 0x0002DAD8 File Offset: 0x0002BCD8
	public void SendHeroPutOnEq(ushort HeroID, byte EquipPos)
	{
		if (GUIManager.Instance.ShowUILock(EUILock.Hero_Info))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_HEROPUTONEQ;
			messagePacket.AddSeqId();
			messagePacket.Add(HeroID);
			messagePacket.Add(EquipPos);
			messagePacket.Send(false);
		}
	}

	// Token: 0x0600037F RID: 895 RVA: 0x0002DB28 File Offset: 0x0002BD28
	public void NPCCombatDetail_Leaderdata(MessagePacket MP)
	{
		this.mFs_A_MHIdx = 5;
		this.mFs_D_MHIdx = 5;
		MP.ReadByte(-1);
		MP.ReadUShort(-1);
		byte b = MP.ReadByte(-1);
		this.mFS_DetailData.HasSeigeData = b;
		MP.ReadByte(-1);
		byte b2 = MP.ReadByte(-1);
		this.mFs_A_MHIdx = MP.ReadByte(-1);
		this.mFS_DetailData.mFS_Hero[0].HeroNum = b2;
		for (int i = 0; i < (int)b2; i++)
		{
			this.mFS_DetailData.mFS_Hero[0].HeroID[i] = MP.ReadUShort(-1);
			this.mFS_DetailData.mFS_Hero[0].Rank[i] = MP.ReadByte(-1);
			this.mFS_DetailData.mFS_Hero[0].Star[i] = MP.ReadByte(-1);
		}
		MP.ReadStringPlus(13, this.mFS_DetailData.mFS_Info[0].Name, -1);
		uint troops = MP.ReadUInt(-1);
		this.mFS_DetailData.mFS_Info[0].Troops = troops;
		uint traps = MP.ReadUInt(-1);
		this.mFS_DetailData.mFS_Info[0].Traps = traps;
		ushort num = MP.ReadUShort(-1);
		uint[] array = new uint[16];
		uint[] array2 = new uint[16];
		this.mFS_DetailData.mFS_Info[0].TroopsCount = 0;
		this.mFS_DetailData.mFS_Info[0].TroopsFlag = num;
		for (int j = 0; j < 16; j++)
		{
			this.mFs_A_ST[j] = 0u;
			this.mFs_A_SL[j] = 0u;
			if ((num >> j & 1) == 1)
			{
				array[j] = MP.ReadUInt(-1);
				this.mFS_DetailData.mFS_Info[0].Troops_L[j] = array[j];
				array2[j] = MP.ReadUInt(-1);
				this.mFS_DetailData.mFS_Info[0].Troops_D[j] = array2[j];
				FS_Info[] mFS_Info = this.mFS_DetailData.mFS_Info;
				int num2 = 0;
				mFS_Info[num2].TroopsCount = mFS_Info[num2].TroopsCount + 1;
				this.mFs_A_ST[j] += array[j];
				this.mFs_A_ST[j] += array2[j];
				this.mFs_A_SL[j] += array2[j];
			}
		}
		byte b3 = MP.ReadByte(-1);
		this.mFs_D_MHIdx = MP.ReadByte(-1);
		this.mFS_DetailData.mFS_Hero[1].HeroNum = b3;
		for (int k = 0; k < (int)b3; k++)
		{
			this.mFS_DetailData.mFS_Hero[1].HeroID[k] = MP.ReadUShort(-1);
			this.mFS_DetailData.mFS_Hero[1].Rank[k] = MP.ReadByte(-1);
			this.mFS_DetailData.mFS_Hero[1].Star[k] = MP.ReadByte(-1);
		}
		this.mFS_DetailData.mFS_Info[1].Name.ClearString();
		MP.ReadByte(-1);
		MP.ReadUShort(-1);
		uint troops2 = MP.ReadUInt(-1);
		this.mFS_DetailData.mFS_Info[1].Troops = troops2;
		uint traps2 = MP.ReadUInt(-1);
		this.mFS_DetailData.mFS_Info[1].Traps = traps2;
		ushort num3 = MP.ReadUShort(-1);
		uint[] array3 = new uint[16];
		uint[] array4 = new uint[16];
		this.mFS_DetailData.mFS_Info[1].TroopsCount = 0;
		this.mFS_DetailData.mFS_Info[1].TroopsFlag = num3;
		for (int l = 0; l < 16; l++)
		{
			this.mFs_D_ST[l] = 0u;
			this.mFs_D_SL[l] = 0u;
			if ((num3 >> l & 1) == 1)
			{
				array3[l] = MP.ReadUInt(-1);
				this.mFS_DetailData.mFS_Info[1].Troops_L[l] = array3[l];
				array4[l] = MP.ReadUInt(-1);
				this.mFS_DetailData.mFS_Info[1].Troops_D[l] = array4[l];
				FS_Info[] mFS_Info2 = this.mFS_DetailData.mFS_Info;
				int num4 = 1;
				mFS_Info2[num4].TroopsCount = mFS_Info2[num4].TroopsCount + 1;
				this.mFs_D_ST[l] += array3[l];
				this.mFs_D_ST[l] += array4[l];
				this.mFs_D_SL[l] += array4[l];
			}
		}
		this.mFS_DetailData.TrapsFlag = 0;
		if (b == 1)
		{
			ushort num5 = MP.ReadUShort(-1);
			this.mFS_DetailData.TrapsFlag = num5;
			uint[] array5 = new uint[12];
			uint[] array6 = new uint[12];
			uint[] array7 = new uint[12];
			this.mFS_DetailData.TrapsCount = 0;
			for (int m = 0; m < 12; m++)
			{
				if ((num5 >> m & 1) == 1)
				{
					array5[m] = MP.ReadUInt(-1);
					this.mFS_DetailData.mTraps_L[m] = array5[m];
					array6[m] = MP.ReadUInt(-1);
					this.mFS_DetailData.mTraps_D[m] = array6[m];
					array7[m] = MP.ReadUInt(-1);
					this.mFS_DetailData.mTraps_S[m] = array7[m];
					this.mFS_DetailData.TrapsCount = this.mFS_DetailData.TrapsCount + 1;
				}
			}
		}
		else
		{
			Array.Clear(this.mFS_DetailData.mTraps_L, 0, this.mFS_DetailData.mTraps_L.Length);
			Array.Clear(this.mFS_DetailData.mTraps_D, 0, this.mFS_DetailData.mTraps_D.Length);
			Array.Clear(this.mFS_DetailData.mTraps_S, 0, this.mFS_DetailData.mTraps_S.Length);
			Array.Clear(this.mFS_DetailData.mFS_Info[1].Troops_H, 0, this.mFS_DetailData.mFS_Info[1].Troops_H.Length);
		}
		this.mFs_A_Count = 0;
		this.mFs_D_Count = 0;
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_FightingSummary, 1, 0);
		GUIManager.Instance.HideUILock(EUILock.Mailing_Battle);
	}

	// Token: 0x06000380 RID: 896 RVA: 0x0002E194 File Offset: 0x0002C394
	public void RecvCombatDetail_Leaderdata(MessagePacket MP)
	{
		this.mFs_A_MHIdx = 5;
		this.mFs_D_MHIdx = 5;
		MP.ReadByte(-1);
		MP.ReadUShort(-1);
		byte b = MP.ReadByte(-1);
		this.mFS_DetailData.HasSeigeData = b;
		MP.ReadByte(-1);
		byte b2 = MP.ReadByte(-1);
		this.mFs_A_MHIdx = MP.ReadByte(-1);
		this.mFS_DetailData.mFS_Hero[0].HeroNum = b2;
		for (int i = 0; i < (int)b2; i++)
		{
			this.mFS_DetailData.mFS_Hero[0].HeroID[i] = MP.ReadUShort(-1);
			this.mFS_DetailData.mFS_Hero[0].Rank[i] = MP.ReadByte(-1);
			this.mFS_DetailData.mFS_Hero[0].Star[i] = MP.ReadByte(-1);
		}
		MP.ReadStringPlus(13, this.mFS_DetailData.mFS_Info[0].Name, -1);
		uint troops = MP.ReadUInt(-1);
		this.mFS_DetailData.mFS_Info[0].Troops = troops;
		uint traps = MP.ReadUInt(-1);
		this.mFS_DetailData.mFS_Info[0].Traps = traps;
		ushort num = MP.ReadUShort(-1);
		uint[] array = new uint[16];
		uint[] array2 = new uint[16];
		this.mFS_DetailData.mFS_Info[0].TroopsCount = 0;
		this.mFS_DetailData.mFS_Info[0].TroopsFlag = num;
		for (int j = 0; j < 16; j++)
		{
			this.mFs_A_ST[j] = 0u;
			this.mFs_A_SL[j] = 0u;
			if ((num >> j & 1) == 1)
			{
				array[j] = MP.ReadUInt(-1);
				this.mFS_DetailData.mFS_Info[0].Troops_L[j] = array[j];
				array2[j] = MP.ReadUInt(-1);
				this.mFS_DetailData.mFS_Info[0].Troops_D[j] = array2[j];
				FS_Info[] mFS_Info = this.mFS_DetailData.mFS_Info;
				int num2 = 0;
				mFS_Info[num2].TroopsCount = mFS_Info[num2].TroopsCount + 1;
				this.mFs_A_ST[j] += array[j];
				this.mFs_A_ST[j] += array2[j];
				this.mFs_A_SL[j] += array2[j];
			}
		}
		MP.ReadByte(-1);
		byte b3 = MP.ReadByte(-1);
		this.mFs_D_MHIdx = MP.ReadByte(-1);
		this.mFS_DetailData.mFS_Hero[1].HeroNum = b3;
		for (int k = 0; k < (int)b3; k++)
		{
			this.mFS_DetailData.mFS_Hero[1].HeroID[k] = MP.ReadUShort(-1);
			this.mFS_DetailData.mFS_Hero[1].Rank[k] = MP.ReadByte(-1);
			this.mFS_DetailData.mFS_Hero[1].Star[k] = MP.ReadByte(-1);
		}
		MP.ReadStringPlus(13, this.mFS_DetailData.mFS_Info[1].Name, -1);
		uint troops2 = MP.ReadUInt(-1);
		this.mFS_DetailData.mFS_Info[1].Troops = troops2;
		uint traps2 = MP.ReadUInt(-1);
		this.mFS_DetailData.mFS_Info[1].Traps = traps2;
		ushort num3 = MP.ReadUShort(-1);
		uint[] array3 = new uint[16];
		uint[] array4 = new uint[16];
		this.mFS_DetailData.mFS_Info[1].TroopsCount = 0;
		this.mFS_DetailData.mFS_Info[1].TroopsFlag = num3;
		for (int l = 0; l < 16; l++)
		{
			this.mFs_D_ST[l] = 0u;
			this.mFs_D_SL[l] = 0u;
			if ((num3 >> l & 1) == 1)
			{
				array3[l] = MP.ReadUInt(-1);
				this.mFS_DetailData.mFS_Info[1].Troops_L[l] = array3[l];
				array4[l] = MP.ReadUInt(-1);
				this.mFS_DetailData.mFS_Info[1].Troops_D[l] = array4[l];
				FS_Info[] mFS_Info2 = this.mFS_DetailData.mFS_Info;
				int num4 = 1;
				mFS_Info2[num4].TroopsCount = mFS_Info2[num4].TroopsCount + 1;
				this.mFs_D_ST[l] += array3[l];
				this.mFs_D_ST[l] += array4[l];
				this.mFs_D_SL[l] += array4[l];
			}
		}
		this.mFS_DetailData.TrapsFlag = 0;
		if (b == 1)
		{
			ushort num5 = MP.ReadUShort(-1);
			this.mFS_DetailData.TrapsFlag = num5;
			uint[] array5 = new uint[12];
			uint[] array6 = new uint[12];
			uint[] array7 = new uint[12];
			this.mFS_DetailData.TrapsCount = 0;
			for (int m = 0; m < 12; m++)
			{
				if ((num5 >> m & 1) == 1)
				{
					array5[m] = MP.ReadUInt(-1);
					this.mFS_DetailData.mTraps_L[m] = array5[m];
					array6[m] = MP.ReadUInt(-1);
					this.mFS_DetailData.mTraps_D[m] = array6[m];
					array7[m] = MP.ReadUInt(-1);
					this.mFS_DetailData.mTraps_S[m] = array7[m];
					this.mFS_DetailData.TrapsCount = this.mFS_DetailData.TrapsCount + 1;
				}
			}
		}
		else
		{
			Array.Clear(this.mFS_DetailData.mTraps_L, 0, this.mFS_DetailData.mTraps_L.Length);
			Array.Clear(this.mFS_DetailData.mTraps_D, 0, this.mFS_DetailData.mTraps_D.Length);
			Array.Clear(this.mFS_DetailData.mTraps_S, 0, this.mFS_DetailData.mTraps_S.Length);
			Array.Clear(this.mFS_DetailData.mFS_Info[1].Troops_H, 0, this.mFS_DetailData.mFS_Info[1].Troops_H.Length);
		}
		this.mFs_A_Count = 0;
		this.mFs_D_Count = 0;
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_FightingSummary, 1, 0);
		GUIManager.Instance.HideUILock(EUILock.Mailing_Battle);
	}

	// Token: 0x06000381 RID: 897 RVA: 0x0002E7FC File Offset: 0x0002C9FC
	public void RecvCombatDetail_Playerdata(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = MP.ReadByte(-1);
		uint[] array = new uint[16];
		uint[] array2 = new uint[16];
		uint[] array3 = new uint[16];
		uint[] array4 = new uint[16];
		for (int i = 0; i < (int)b2; i++)
		{
			byte b3 = MP.ReadByte(-1);
			if ((b3 & 128) == 0)
			{
				if ((int)this.mFs_A_Count >= this.mFs_Info_A.Length)
				{
					return;
				}
				if (this.mFs_Info_A[(int)this.mFs_A_Count].Name == null)
				{
					this.mFs_Info_A[(int)this.mFs_A_Count].Name = new CString(13);
					this.mFs_Info_A[(int)this.mFs_A_Count].Troops_L = new uint[16];
					this.mFs_Info_A[(int)this.mFs_A_Count].Troops_D = new uint[16];
					this.mFs_Info_A[(int)this.mFs_A_Count].Troops_H = new uint[16];
				}
				MP.ReadStringPlus(13, this.mFs_Info_A[(int)this.mFs_A_Count].Name, -1);
				this.mFs_Info_A[(int)this.mFs_A_Count].Troops = MP.ReadUInt(-1);
				this.mFs_Info_A[(int)this.mFs_A_Count].Traps = MP.ReadUInt(-1);
				this.mFs_Info_A[(int)this.mFs_A_Count].TroopsFlag = MP.ReadUShort(-1);
				this.mFs_Info_A[(int)this.mFs_A_Count].TroopsCount = 0;
				for (int j = 0; j < 16; j++)
				{
					if ((this.mFs_Info_A[(int)this.mFs_A_Count].TroopsFlag >> j & 1) == 1)
					{
						array[j] = MP.ReadUInt(-1);
						this.mFs_Info_A[(int)this.mFs_A_Count].Troops_L[j] = array[j];
						array2[j] = MP.ReadUInt(-1);
						this.mFs_Info_A[(int)this.mFs_A_Count].Troops_D[j] = array2[j];
						this.TroopsCount += 1;
						this.mFs_A_ST[j] += array[j];
						this.mFs_A_ST[j] += array2[j];
						this.mFs_A_SL[j] += array2[j];
					}
				}
				this.mFs_A_Count += 1;
			}
			else
			{
				if ((int)this.mFs_D_Count >= this.mFs_Info_D.Length)
				{
					return;
				}
				if (this.mFs_Info_D[(int)this.mFs_D_Count].Name == null)
				{
					this.mFs_Info_D[(int)this.mFs_D_Count].Name = new CString(13);
					this.mFs_Info_D[(int)this.mFs_D_Count].Troops_L = new uint[16];
					this.mFs_Info_D[(int)this.mFs_D_Count].Troops_D = new uint[16];
					this.mFs_Info_D[(int)this.mFs_D_Count].Troops_H = new uint[16];
				}
				MP.ReadStringPlus(13, this.mFs_Info_D[(int)this.mFs_D_Count].Name, -1);
				this.mFs_Info_D[(int)this.mFs_D_Count].Troops = MP.ReadUInt(-1);
				this.mFs_Info_D[(int)this.mFs_D_Count].Traps = MP.ReadUInt(-1);
				this.mFs_Info_D[(int)this.mFs_D_Count].TroopsFlag = MP.ReadUShort(-1);
				this.mFs_Info_D[(int)this.mFs_D_Count].TroopsCount = 0;
				for (int k = 0; k < 16; k++)
				{
					if ((this.mFs_Info_D[(int)this.mFs_D_Count].TroopsFlag >> k & 1) == 1)
					{
						array3[k] = MP.ReadUInt(-1);
						this.mFs_Info_D[(int)this.mFs_D_Count].Troops_L[k] = array3[k];
						array4[k] = MP.ReadUInt(-1);
						this.mFs_Info_D[(int)this.mFs_D_Count].Troops_D[k] = array4[k];
						this.TroopsCount += 1;
						this.mFs_D_ST[k] += array3[k];
						this.mFs_D_ST[k] += array4[k];
						this.mFs_D_SL[k] += array4[k];
					}
				}
				this.mFs_D_Count += 1;
			}
		}
		if (b == 1)
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_FightingSummary_Info, 1, 0);
		}
	}

	// Token: 0x06000382 RID: 898 RVA: 0x0002ECB8 File Offset: 0x0002CEB8
	public void RecvCombatDetail_Injuredata(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = MP.ReadByte(-1);
		uint[] array = new uint[16];
		uint[] array2 = new uint[16];
		for (int i = 0; i < (int)b2; i++)
		{
			byte b3 = MP.ReadByte(-1);
			byte b4 = b3 & 127;
			if ((b3 & 128) == 0)
			{
				if (b4 == 0)
				{
					this.mFS_DetailData.mFS_Info[0].TroopsFlag = MP.ReadUShort(-1);
					this.mFS_DetailData.mFS_Info[0].TroopsCount = 0;
					for (int j = 0; j < 16; j++)
					{
						if ((this.mFS_DetailData.mFS_Info[0].TroopsFlag >> j & 1) == 1)
						{
							array[j] = MP.ReadUInt(-1);
							this.mFS_DetailData.mFS_Info[0].Troops_H[j] = array[j];
							FS_Info[] mFS_Info = this.mFS_DetailData.mFS_Info;
							int num = 0;
							mFS_Info[num].TroopsCount = mFS_Info[num].TroopsCount + 1;
							this.mFs_A_ST[j] += array[j];
							this.mFs_A_SL[j] += array[j];
						}
					}
				}
				else
				{
					b4 -= 1;
					this.mFs_Info_A[(int)b4].TroopsFlag = MP.ReadUShort(-1);
					this.mFs_Info_A[(int)b4].TroopsCount = 0;
					for (int k = 0; k < 16; k++)
					{
						if ((this.mFs_Info_A[(int)b4].TroopsFlag >> k & 1) == 1)
						{
							array[k] = MP.ReadUInt(-1);
							this.mFs_Info_A[(int)b4].Troops_H[k] = array[k];
							this.mFs_A_ST[k] += array[k];
							this.mFs_A_SL[k] += array[k];
						}
					}
				}
			}
			else if (b4 == 0)
			{
				this.mFS_DetailData.mFS_Info[1].TroopsFlag = MP.ReadUShort(-1);
				this.mFS_DetailData.mFS_Info[1].TroopsCount = 0;
				for (int l = 0; l < 16; l++)
				{
					if ((this.mFS_DetailData.mFS_Info[1].TroopsFlag >> l & 1) == 1)
					{
						array2[l] = MP.ReadUInt(-1);
						this.mFS_DetailData.mFS_Info[1].Troops_H[l] = array2[l];
						FS_Info[] mFS_Info2 = this.mFS_DetailData.mFS_Info;
						int num2 = 1;
						mFS_Info2[num2].TroopsCount = mFS_Info2[num2].TroopsCount + 1;
						this.mFs_D_ST[l] += array2[l];
						this.mFs_D_SL[l] += array2[l];
					}
				}
			}
			else
			{
				b4 -= 1;
				this.mFs_Info_D[(int)b4].TroopsFlag = MP.ReadUShort(-1);
				this.mFs_Info_D[(int)b4].TroopsCount = 0;
				for (int m = 0; m < 16; m++)
				{
					if ((this.mFs_Info_D[(int)b4].TroopsFlag >> m & 1) == 1)
					{
						array2[m] = MP.ReadUInt(-1);
						this.mFs_Info_D[(int)b4].Troops_H[m] = array2[m];
						this.mFs_D_ST[m] += array2[m];
						this.mFs_D_SL[m] += array2[m];
					}
				}
			}
		}
		if (b == 1)
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_FightingSummary_Info, 1, 0);
		}
	}

	// Token: 0x06000383 RID: 899 RVA: 0x0002F07C File Offset: 0x0002D27C
	public void RecvAllianceAttr(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		switch (b)
		{
		case 1:
			MP.ReadStringPlus(13, this.RoleAlliance.Leader, -1);
			break;
		case 2:
			this.RoleAlliance.Power = MP.ReadULong(-1);
			break;
		case 3:
			MP.ReadStringPlus(3, this.RoleAlliance.Tag, -1);
			break;
		case 4:
			MP.ReadStringPlus(20, this.RoleAlliance.Name, -1);
			break;
		case 5:
			this.RoleAlliance.Header = MP.ReadString(20, -1);
			break;
		case 6:
			this.RoleAlliance.Bullet = MP.ReadString(900, -1);
			this.RoleAlliance.BulletinFlag = MP.ReadByte(-1);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 1, 0);
			break;
		case 7:
			this.RoleAlliance.Emblem = MP.ReadUShort(-1);
			break;
		case 8:
			this.RoleAlliance.Member = MP.ReadByte(-1);
			this.RoleAlliance.Power = MP.ReadULong(-1);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Mobilization, 5, 0);
			break;
		case 9:
			this.RoleAlliance.Approval = MP.ReadByte(-1);
			break;
		case 10:
			this.RoleAlliance.Applicant = MP.ReadByte(-1);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
			break;
		case 11:
			this.RoleAlliance.Language = MP.ReadByte(-1);
			break;
		case 12:
			this.RoleAlliance.Rank = (AllianceRank)MP.ReadByte(-1);
			this.bSetAllianceScroll = true;
			GUIManager.Instance.UpdateUI(EGUIWindow.UIAlliance_publicinfo, 9, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 11, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_ActivityGift, 4, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
			break;
		case 13:
			this.RoleAlliance.Money = MP.ReadUInt(-1);
			break;
		case 14:
		{
			uint num = MP.ReadUInt(-1);
			for (int i = 0; i < this.mHelpDataList.Count; i++)
			{
				if (this.mHelpDataList[i].AllianceHelpRecordSN == num)
				{
					AllianceHelpRecordCMsgDataType value = this.mHelpDataList[i];
					value.AlreadyHelperNum = MP.ReadByte(-1);
					if (value.AlreadyHelperNum == this.mHelpDataList[i].HelpMax)
					{
						this.mHelpDataList.RemoveAt(i);
						GUIManager.Instance.UpdateUI(EGUIWindow.Door, 11, 0);
						GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
						GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 3, 0);
					}
					else
					{
						this.mHelpDataList[i] = value;
					}
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_HelpSpeedup, 3, 0);
					break;
				}
			}
			break;
		}
		case 15:
		{
			CString cstring = StringManager.Instance.StaticString1024();
			CString cstring2 = StringManager.Instance.StaticString1024();
			cstring.ClearString();
			MP.ReadStringPlus(13, cstring, -1);
			cstring2.ClearString();
			cstring2.StringToFormat(cstring);
			cstring2.AppendFormat(this.mStringTable.GetStringByID(764u));
			GUIManager.Instance.AddHUDMessage(cstring2.ToString(), 9, true);
			byte b2 = MP.ReadByte(-1);
			b2 = (byte)Mathf.Clamp((int)b2, 0, this.mPlayHelpDataType.Length - 1);
			this.mPlayHelpDataType[(int)b2].AlreadyHelperNum = MP.ReadByte(-1);
			byte b3 = 0;
			if (b2 == 0)
			{
				long num2 = MP.ReadLong(-1);
				uint totalTime = MP.ReadUInt(-1);
				if (num2 > 0L)
				{
					DataManager.Instance.SetQueueBarData(EQueueBarIndex.Researching, true, num2, totalTime);
				}
				GameManager.OnRefresh(NetworkNews.Refresh_QBarTime, null);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_TechInstitute, 2, 0);
				GameConstants.GetBytes(0, DataManager.msgBuffer, 0);
				GameManager.OnRefresh(NetworkNews.Refresh_BuildBase, DataManager.msgBuffer);
				b3 = 1;
			}
			else
			{
				long num2 = MP.ReadLong(-1);
				uint totalTime = MP.ReadUInt(-1);
				if (num2 > 0L)
				{
					DataManager.Instance.SetQueueBarData(EQueueBarIndex.Building, true, num2, totalTime);
				}
				GameManager.OnRefresh(NetworkNews.Refresh_QBarTime, null);
				GameConstants.GetBytes(0, DataManager.msgBuffer, 0);
				GameManager.OnRefresh(NetworkNews.Refresh_BuildBase, DataManager.msgBuffer);
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_HelpSpeedup, 2, 0);
			DataManager.missionDataManager.CheckChanged(eMissionKind.Mark, (ushort)(105 + b3), 1);
			break;
		}
		case 16:
		{
			byte b4 = MP.ReadByte(-1);
			b4 = (byte)Mathf.Clamp((int)b4, 0, this.mPlayHelpDataType.Length - 1);
			this.mPlayHelpDataType[(int)b4].Kind = MP.ReadByte(-1);
			if (this.mPlayHelpDataType[(int)b4].Kind == 0)
			{
				this.mPlayHelpDataType[(int)b4].AlreadyHelperNum = 0;
				this.mPlayHelpDataType[(int)b4].HelpMax = 0;
				this.mPlayHelpDataType[(int)b4].EventID = 0;
				this.mPlayHelpDataType[(int)b4].EventDataLv = 0;
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_HelpSpeedup, 1, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, 2, 100);
			break;
		}
		case 17:
		{
			uint num3 = MP.ReadUInt(-1);
			for (int j = 0; j < this.mHelpDataList.Count; j++)
			{
				if (this.mHelpDataList[j].AllianceHelpRecordSN == num3)
				{
					this.mHelpDataList.RemoveAt(j);
					GUIManager.Instance.UpdateUI(EGUIWindow.Door, 11, 0);
					GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 3, 0);
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_HelpSpeedup, 3, 0);
					break;
				}
			}
			break;
		}
		case 18:
		{
			ushort giftNum = MP.ReadUShort(-1);
			if (this.bSendtoGetGift)
			{
				this.RoleAlliance.GiftNum = giftNum;
				if (this.RoleAlliance.GiftNum > 300)
				{
					this.RoleAlliance.GiftNum = 300;
				}
			}
			ushort inKey = MP.ReadUShort(-1);
			Equip recordByKey = this.EquipTable.GetRecordByKey(inKey);
			GUIManager.Instance.MsgStr.ClearString();
			GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint)recordByKey.EquipName));
			if (recordByKey.PropertiesInfo != null)
			{
				switch (recordByKey.PropertiesInfo[4].Propertieskey)
				{
				case 1:
					GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(7014u));
					break;
				case 2:
					GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(7015u));
					break;
				case 3:
					GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(7019u));
					break;
				}
			}
			GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 28, true);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 5, 0);
			break;
		}
		case 19:
		{
			if (this.bSendtoGetGift)
			{
				return;
			}
			AllianceBoxDataType val = default(AllianceBoxDataType);
			val.SN = MP.ReadUInt(-1);
			val.Status = MP.ReadByte(-1);
			val.RcvTime = MP.ReadLong(-1);
			val.BoxItemID = MP.ReadUShort(-1);
			val.Item.ItemID = MP.ReadUShort(-1);
			val.Item.Num = MP.ReadUShort(-1);
			val.Item.ItemRank = MP.ReadByte(-1);
			this.mGift_UpdateSN = MP.ReadUInt(-1);
			if (this.mGift_UpdateSN != 0u)
			{
				if (this.mListGift.ContainsKey(this.mGift_UpdateSN))
				{
					if ((int)this.mShowListUnOpenIdx > this.mShowListIdx.Count)
					{
						return;
					}
					this.mShowListIdx.Insert((int)this.mShowListUnOpenIdx, val.SN);
					if (this.mShowListUnOpenIdx < 300)
					{
						this.mShowListUnOpenIdx += 1;
					}
					this.RoleAlliance.GiftNum = this.RoleAlliance.GiftNum + 1;
					if (this.mListGift[this.mGift_UpdateSN].Status == 0)
					{
						this.mShowListUnOpenIdx -= 1;
						if (this.RoleAlliance.GiftNum > 0)
						{
							this.RoleAlliance.GiftNum = this.RoleAlliance.GiftNum - 1;
						}
					}
					this.mListGift.Remove(this.mGift_UpdateSN);
					this.mListGift.Add(val.SN, val);
					this.mShowListIdx.Remove(this.mGift_UpdateSN);
				}
			}
			else
			{
				this.mListGift.Add(val.SN, val);
				if (this.mShowListIdx.Count < (int)this.mShowListUnOpenIdx)
				{
					this.mShowListIdx.Insert((int)this.mShowListUnOpenIdx, val.SN);
				}
				else
				{
					this.mShowListIdx.Add(val.SN);
				}
				this.mShowListUnOpenIdx += 1;
				this.RoleAlliance.GiftNum = this.RoleAlliance.GiftNum + 1;
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 7, 1);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
			this.CDGiftTime = 300f;
			break;
		}
		case 20:
		{
			if (this.bSendtoGetGift)
			{
				return;
			}
			AllianceBoxDataType val2 = default(AllianceBoxDataType);
			val2.SN = MP.ReadUInt(-1);
			val2.Status = MP.ReadByte(-1);
			val2.RcvTime = MP.ReadLong(-1);
			val2.BoxItemID = MP.ReadUShort(-1);
			val2.Item.ItemID = MP.ReadUShort(-1);
			val2.Item.Num = MP.ReadUShort(-1);
			val2.Item.ItemRank = MP.ReadByte(-1);
			uint num4 = MP.ReadUInt(-1);
			if (num4 != 0u)
			{
				if (this.mListGift.ContainsKey(num4))
				{
					this.mShowListIdx.Insert((int)this.mShowListUnOpenIdx, val2.SN);
					if (this.mShowListUnOpenIdx < 300)
					{
						this.mShowListUnOpenIdx += 1;
					}
					this.RoleAlliance.GiftNum = this.RoleAlliance.GiftNum + 1;
					if (this.mListGift[num4].Status == 0)
					{
						this.mShowListUnOpenIdx -= 1;
						if (this.RoleAlliance.GiftNum > 0)
						{
							this.RoleAlliance.GiftNum = this.RoleAlliance.GiftNum - 1;
						}
					}
					this.mListGift.Remove(num4);
					this.mListGift.Add(val2.SN, val2);
					this.mShowListIdx.Remove(num4);
				}
			}
			else
			{
				this.mListGift.Add(val2.SN, val2);
				if (this.mShowListIdx.Count < (int)this.mShowListUnOpenIdx)
				{
					this.mShowListIdx.Insert((int)this.mShowListUnOpenIdx, val2.SN);
				}
				else
				{
					this.mShowListIdx.Add(val2.SN);
				}
				this.mShowListUnOpenIdx += 1;
				this.RoleAlliance.GiftNum = this.RoleAlliance.GiftNum + 1;
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 7, 1);
			this.RoleAlliance.PackItemID = MP.ReadUShort(-1);
			this.RoleAlliance.PackPoint = MP.ReadUInt(-1);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 3, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
			this.CDGiftTime = 300f;
			break;
		}
		case 21:
			this.RoleAlliance.PackPoint = MP.ReadUInt(-1);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 4, 0);
			GUIManager.Instance.m_SpeciallyEffect.mAddGiftPoint = false;
			break;
		case 22:
		{
			this.RoleAlliance.GiftExp = MP.ReadUInt(-1);
			uint num5 = 0u;
			byte b5 = 0;
			for (int k = 0; k < this.AllianceLvUpData.TableCount; k++)
			{
				b5 += 1;
				num5 += this.AllianceLvUpData.GetRecordByKey((ushort)(k + 1)).LvExp;
				if (num5 > this.RoleAlliance.GiftExp)
				{
					this.RoleAlliance.GiftLv = (byte)k;
					break;
				}
			}
			if (num5 > 0u && (int)b5 == this.AllianceLvUpData.TableCount && num5 <= this.RoleAlliance.GiftExp)
			{
				this.RoleAlliance.GiftLv = b5;
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 5, 0);
			GUIManager.Instance.m_SpeciallyEffect.mAddGiftExp = false;
			break;
		}
		case 23:
			this.RoleAlliance.ChatMax = MP.ReadLong(-1);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
			break;
		case 24:
		{
			WonderData item = default(WonderData);
			item.KingdomID = MP.ReadUShort(-1);
			item.WonderID = MP.ReadByte(-1);
			item.OpenState = MP.ReadByte(-1);
			item.StateCountDown.BeginTime = MP.ReadLong(-1);
			item.StateCountDown.RequireTime = MP.ReadUInt(-1);
			int num6 = this.m_Wonders.BinarySearch(item, this.TC);
			if (num6 < 0)
			{
				this.m_Wonders.Insert(~num6, item);
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 6, 0);
			this.AttribVal.UpdateAttrVal(UpdateAttrKind.Wonder);
			break;
		}
		case 25:
		{
			WonderData item2 = default(WonderData);
			item2.KingdomID = MP.ReadUShort(-1);
			item2.WonderID = MP.ReadByte(-1);
			byte openState = MP.ReadByte(-1);
			item2.OpenState = 1;
			item2.StateCountDown.BeginTime = MP.ReadLong(-1);
			item2.StateCountDown.RequireTime = MP.ReadUInt(-1);
			int num7 = this.m_Wonders.BinarySearch(item2, this.TC);
			if (num7 < 0)
			{
				item2.OpenState = 0;
				num7 = this.m_Wonders.BinarySearch(item2, this.TC);
				if (num7 < 0)
				{
					return;
				}
			}
			this.m_Wonders.RemoveAt(num7);
			item2.OpenState = openState;
			num7 = this.m_Wonders.BinarySearch(item2, this.TC);
			if (num7 < 0)
			{
				this.m_Wonders.Insert(~num7, item2);
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 6, 0);
			this.AttribVal.UpdateAttrVal(UpdateAttrKind.Wonder);
			break;
		}
		case 26:
		{
			WonderData item3 = default(WonderData);
			item3.KingdomID = MP.ReadUShort(-1);
			item3.WonderID = MP.ReadByte(-1);
			item3.OpenState = 1;
			int num8 = this.m_Wonders.BinarySearch(item3, this.TC);
			if (num8 < 0)
			{
				item3.OpenState = 0;
				num8 = this.m_Wonders.BinarySearch(item3, this.TC);
				if (num8 < 0)
				{
					return;
				}
			}
			this.m_Wonders.RemoveAt(num8);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 6, 0);
			this.AttribVal.UpdateAttrVal(UpdateAttrKind.Wonder);
			break;
		}
		case 27:
		{
			ushort giftNum2 = MP.ReadUShort(-1);
			if (this.bSendtoGetGift)
			{
				this.RoleAlliance.GiftNum = giftNum2;
				if (this.RoleAlliance.GiftNum > 300)
				{
					this.RoleAlliance.GiftNum = 300;
				}
			}
			ushort inKey2 = MP.ReadUShort(-1);
			Equip recordByKey2 = this.EquipTable.GetRecordByKey(inKey2);
			GUIManager.Instance.MsgStr.ClearString();
			GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint)recordByKey2.EquipName));
			GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(9554u));
			GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 28, true);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 5, 0);
			break;
		}
		case 28:
		{
			byte b6 = MP.ReadByte(-1);
			b6 = (byte)Mathf.Clamp((int)b6, 0, 19);
			MobilizationManager.Instance.mMobilizationMission[(int)(b6 + 1)].MissionType = MP.ReadUShort(-1);
			MobilizationManager.Instance.mMobilizationMission[(int)(b6 + 1)].Difficulty = MP.ReadByte(-1);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Mobilization, 3, (int)(b6 + 1));
			break;
		}
		case 29:
		{
			byte b7 = MP.ReadByte(-1);
			b7 = (byte)Mathf.Clamp((int)b7, 0, 19);
			MobilizationManager.Instance.mMobilizationMission[(int)(b7 + 1)].MissionType = 1001;
			MobilizationManager.Instance.mMobilizationMission[(int)(b7 + 1)].CDTime = MP.ReadLong(-1);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Mobilization, 3, (int)(b7 + 1));
			break;
		}
		case 30:
			MobilizationManager.Instance.involvedMember = MP.ReadByte(-1);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Mobilization, 4, 0);
			break;
		case 31:
			MobilizationManager.Instance.AMScore = MP.ReadUInt(-1);
			for (int l = 0; l < this.AllianceMobilizationDegreeInfo.TableCount; l++)
			{
				MobilizationDegreeData recordByIndex = this.AllianceMobilizationDegreeInfo.GetRecordByIndex(l);
				if (l == this.AllianceMobilizationDegreeInfo.TableCount - 1)
				{
					if (MobilizationManager.Instance.AMScore >= recordByIndex.MissionDegreeScore)
					{
						MobilizationManager.Instance.AMCompleteDegree = (byte)this.AllianceMobilizationDegreeInfo.TableCount;
						MobilizationManager.Instance.CompleteScore = recordByIndex.MissionDegreeScore;
						break;
					}
				}
				else
				{
					MobilizationDegreeData recordByIndex2 = this.AllianceMobilizationDegreeInfo.GetRecordByIndex(l + 1);
					if (MobilizationManager.Instance.AMScore >= recordByIndex.MissionDegreeScore && MobilizationManager.Instance.AMScore < recordByIndex2.MissionDegreeScore)
					{
						MobilizationManager.Instance.AMCompleteDegree = (byte)(l + 1);
						MobilizationManager.Instance.CompleteScore = recordByIndex2.MissionDegreeScore;
						break;
					}
				}
			}
			if (MobilizationManager.Instance.AMCompleteDegree == 0)
			{
				MobilizationDegreeData recordByIndex = this.AllianceMobilizationDegreeInfo.GetRecordByIndex(0);
				MobilizationManager.Instance.CompleteScore = recordByIndex.MissionDegreeScore;
			}
			if (MobilizationManager.Instance.AMCompleteDegree > this.RoleAlliance.AMMaxDegree)
			{
				MobilizationManager.Instance.AMCompleteDegree = this.RoleAlliance.AMMaxDegree;
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Mobilization, 2, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity1, 2, 206);
			MobilizationManager.Instance.OnAMCompleteDegreeChange();
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_RewardsSelect, 1, 0);
			break;
		case 32:
			this.RoleAlliance.KingdomID = MP.ReadUShort(-1);
			break;
		case 34:
			this.RoleAlliance.AMRank = MP.ReadByte(-1);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity1, 12, 206);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Mobilization, 11, 0);
			break;
		case 35:
			ActivityManager.Instance.SetAllianceSummon_Score(MP.ReadUInt(-1));
			break;
		case 36:
			ActivityManager.Instance.AllianceSummon_SummonData.SummonPoint = MP.ReadByte(-1);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity1, 13, 208);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity2, 4, 208);
			break;
		case 37:
			ActivityManager.Instance.SetAllianceSummon_NPCCityCombatTimes(MP.ReadByte(-1), MP.ReadByte(-1));
			ActivityManager.Instance.SetAllianceSummon_Score(MP.ReadUInt(-1));
			break;
		case 38:
			MP.ReadUShort(-1);
			ActivityManager.Instance.AllianceSummon_SummonData.GiftID = MP.ReadUShort(-1);
			ActivityManager.Instance.AllianceSummon_SummonData.MonsterID = MP.ReadUShort(-1);
			ActivityManager.Instance.AllianceSummon_SummonData.CostPoint = MP.ReadByte(-1);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity1, 13, 208);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity2, 4, 208);
			break;
		case 39:
			ActivityManager.Instance.AllianceSummon_SummonData.MonsterPos.KingdomID = MP.ReadUShort(-1);
			ActivityManager.Instance.AllianceSummon_SummonData.MonsterPos.CombatPoint.zoneID = MP.ReadUShort(-1);
			ActivityManager.Instance.AllianceSummon_SummonData.MonsterPos.CombatPoint.pointID = MP.ReadByte(-1);
			ActivityManager.Instance.AllianceSummon_SummonData.MonsterEndTime = MP.ReadLong(-1);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity1, 13, 208);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity2, 4, 208);
			break;
		case 40:
		{
			CString cstring3 = StringManager.Instance.StaticString1024();
			CString cstring4 = StringManager.Instance.StaticString1024();
			CString cstring5 = StringManager.Instance.StaticString1024();
			MP.ReadStringPlus(13, cstring4, -1);
			ushort inKey3 = MP.ReadUShort(-1);
			uint nameID = (uint)DataManager.MapDataController.MapMonsterTable.GetRecordByKey(inKey3).NameID;
			cstring5.StringToFormat(this.RoleAlliance.Tag);
			cstring5.StringToFormat(cstring4);
			cstring5.AppendFormat("[{0}]{1}");
			cstring3.ClearString();
			cstring3.StringToFormat(cstring5);
			cstring3.StringToFormat(this.mStringTable.GetStringByID(nameID));
			cstring3.AppendFormat(this.mStringTable.GetStringByID(14512u));
			GUIManager.Instance.AddHUDMessage(cstring3.ToString(), 255, true);
			cstring3.ClearString();
			cstring3.StringToFormat(cstring4);
			cstring3.StringToFormat(this.mStringTable.GetStringByID(nameID));
			cstring3.AppendFormat(this.mStringTable.GetStringByID(14514u));
			this.AddSystemMessage(cstring3, 7, -1L);
			break;
		}
		case 41:
			ActivityManager.Instance.AW_NowAllianceEnterWar = MP.ReadByte(-1);
			ActivityManager.Instance.CheckAWShowHint();
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_AllianceWarRegister, 6, 0);
			break;
		case 42:
			ActivityManager.Instance.AW_Rank = MP.ReadByte(-1);
			ActivityManager.Instance.AW_MemberCount = MP.ReadByte(-1);
			ActivityManager.Instance.SetNowState(true);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity1, 15, 210);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 13, 0);
			break;
		case 43:
		{
			byte b8 = MP.ReadByte(-1);
			b8 = (byte)Mathf.Clamp((int)b8, 0, this.mPlayHelpDataType.Length - 1);
			this.mPlayHelpDataType[(int)b8].AlreadyHelperNum = MP.ReadByte(-1);
			byte b9 = 0;
			if (b8 == 0)
			{
				long num9 = MP.ReadLong(-1);
				uint totalTime2 = MP.ReadUInt(-1);
				if (num9 > 0L)
				{
					DataManager.Instance.SetQueueBarData(EQueueBarIndex.Researching, true, num9, totalTime2);
				}
				GameManager.OnRefresh(NetworkNews.Refresh_QBarTime, null);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_TechInstitute, 2, 0);
				GameConstants.GetBytes(0, DataManager.msgBuffer, 0);
				GameManager.OnRefresh(NetworkNews.Refresh_BuildBase, DataManager.msgBuffer);
				b9 = 1;
			}
			else
			{
				long num9 = MP.ReadLong(-1);
				uint totalTime2 = MP.ReadUInt(-1);
				if (num9 > 0L)
				{
					DataManager.Instance.SetQueueBarData(EQueueBarIndex.Building, true, num9, totalTime2);
				}
				GameManager.OnRefresh(NetworkNews.Refresh_QBarTime, null);
				GameConstants.GetBytes(0, DataManager.msgBuffer, 0);
				GameManager.OnRefresh(NetworkNews.Refresh_BuildBase, DataManager.msgBuffer);
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_HelpSpeedup, 2, 0);
			DataManager.missionDataManager.CheckChanged(eMissionKind.Mark, (ushort)(105 + b9), 1);
			break;
		}
		case 44:
		{
			this.RoleAlliance.BookmarkTime = MP.ReadLong(-1);
			Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
			if (door != null && door.m_eMapMode == EUIOriginMapMode.KingdomMap)
			{
				DataManager.Instance.RoleBookMark.sendBookMarkInfo_Alliance(false);
			}
			break;
		}
		case 45:
		{
			ushort num10 = MP.ReadUShort(-1);
			byte serverIndex = MP.ReadByte(-1);
			CString cstring6 = StringManager.Instance.StaticString1024();
			MP.ReadStringPlus(13, cstring6, -1);
			ActivityGiftManager.Instance.SendDataRequest(serverIndex);
			ActivityGiftManager activityGiftManager = ActivityGiftManager.Instance;
			activityGiftManager.EnableRedPocketNum += 1;
			FastivalSpecialData recordByKey3 = DataManager.Instance.FastivalSpecialDataTable.GetRecordByKey(num10);
			if (recordByKey3.ID == num10)
			{
				CString cstring7 = StringManager.Instance.StaticString1024();
				cstring7.ClearString();
				cstring7.StringToFormat(cstring6);
				cstring7.StringToFormat(DataManager.Instance.mStringTable.GetStringByID((uint)recordByKey3.ItemName));
				cstring7.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(11218u));
				GUIManager.Instance.AddHUDMessage(cstring7.ToString(), 255, true);
			}
			break;
		}
		case 46:
		{
			ushort num11 = MP.ReadUShort(-1);
			byte serverIndex2 = MP.ReadByte(-1);
			ActivityGiftManager.Instance.SendDataRequest(serverIndex2);
			ActivityGiftManager activityGiftManager2 = ActivityGiftManager.Instance;
			activityGiftManager2.EnableRedPocketNum += 1;
			FastivalSpecialData recordByKey4 = DataManager.Instance.FastivalSpecialDataTable.GetRecordByKey(num11);
			if (recordByKey4.ID == num11)
			{
				CString cstring8 = StringManager.Instance.StaticString1024();
				cstring8.ClearString();
				cstring8.StringToFormat(DataManager.Instance.mStringTable.GetStringByID((uint)recordByKey4.ItemName));
				cstring8.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(11217u));
				GUIManager.Instance.AddHUDMessage(cstring8.ToString(), 255, true);
			}
			break;
		}
		case 47:
			ActivityGiftManager.Instance.mLeaderRedPocketResetTime = MP.ReadLong(-1);
			ActivityGiftManager.Instance.bReSetMainGift = (ActivityGiftManager.Instance.mLeaderRedPocketResetTime > ActivityManager.Instance.ServerEventTime);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_ActivityGift, 4, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 11, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
			break;
		case 48:
		{
			byte serverIndex3 = MP.ReadByte(-1);
			byte giftCount = MP.ReadByte(-1);
			ActivityGiftManager.Instance.updateGiftCount(serverIndex3, giftCount);
			break;
		}
		case 49:
			ActivityGiftManager.Instance.RecvUpdate_EventInfo(MP);
			break;
		case 50:
		{
			ulong score = MP.ReadULong(-1);
			ActivityManager.Instance.SetFIFAEventPoint(1, score);
			break;
		}
		case 51:
			this.RoleAlliance.AMRankMainInfoUIShow = MP.ReadByte(-1);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 13, 0);
			break;
		case 52:
			this.RoleAlliance.AWRankMainInfoUIShow = MP.ReadByte(-1);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 13, 0);
			break;
		case 53:
			this.RoleAlliance.AMPlaceMainInfoUIShow = MP.ReadByte(-1);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 12, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 13, 0);
			break;
		}
		DataManager.msgBuffer[0] = b;
		GameManager.OnRefresh(NetworkNews.Refresh_Alliance, DataManager.msgBuffer);
	}

	// Token: 0x06000384 RID: 900 RVA: 0x00030BC4 File Offset: 0x0002EDC4
	public void RecvPrizeFlag(MessagePacket MP)
	{
		ERoleFlagKind eroleFlagKind = (ERoleFlagKind)MP.ReadByte(-1);
		ERoleFlagKind eroleFlagKind2 = eroleFlagKind;
		switch (eroleFlagKind2)
		{
		case ERoleFlagKind.ERFK_JoinAlliance:
			GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_TreasureBox, 2, 0, false, 0);
			DataManager.Instance.RoleAttr.PrizeFlag = MP.ReadUInt(-1);
			GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eMax);
			DataManager.Instance.Resource[4].Stock = MP.ReadUInt(-1);
			DataManager.Instance.RoleAlliance.Money = MP.ReadUInt(-1);
			GameManager.OnRefresh(NetworkNews.Refresh_Item, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Attr, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Alliance, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			break;
		case ERoleFlagKind.ERFK_PassNewbie:
		{
			GUIManager.Instance.HideUILock(EUILock.ForceNewbie);
			DataManager dataManager = DataManager.Instance;
			dataManager.RoleAttr.PrizeFlag = MP.ReadUInt(-1);
			DataManager.StageDataController.RoleAttrLevelUp(MP, 24);
			dataManager.RoleAttr.Power = MP.ReadULong(-1);
			dataManager.Resource[0].Stock = MP.ReadUInt(-1);
			dataManager.Resource[1].Stock = MP.ReadUInt(-1);
			dataManager.Resource[2].Stock = MP.ReadUInt(-1);
			dataManager.Resource[3].Stock = MP.ReadUInt(-1);
			dataManager.Resource[4].Stock = MP.ReadUInt(-1);
			dataManager.RoleAttr.VipPoint = MP.ReadUInt(-1);
			dataManager.RoleAttr.VIPLevel = dataManager.GetVIPLevel(dataManager.RoleAttr.VipPoint);
			DataManager.missionDataManager.UpdateVipState();
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			dataManager.SendAskData(0, 0, -1, 0L, 0L);
			GUIManager.Instance.m_HUDsTransform.gameObject.SetActive(true);
			Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
			if (door != null)
			{
				door.RunningText.CheckAddStr();
			}
			break;
		}
		case ERoleFlagKind.ERFK_AccountBind:
		{
			DataManager.Instance.RoleAttr.PrizeFlag = MP.ReadUInt(-1);
			uint num = DataManager.Instance.RoleAttr.Diamond;
			num += (uint)MP.ReadUShort(-1);
			GUIManager.Instance.SetRoleAttrDiamond(num, 0, eSpentCredits.eMax);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Other_Account, 2, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Other, 1, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 20, 0);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			break;
		}
		case ERoleFlagKind.ERFK_FBFansPrize:
		{
			GUIManager.Instance.HideUILock(EUILock.TreasureBox);
			DataManager.Instance.RoleAttr.PrizeFlag = MP.ReadUInt(-1);
			uint num2 = DataManager.Instance.RoleAttr.Diamond;
			num2 += (uint)MP.ReadUShort(-1);
			GUIManager.Instance.SetRoleAttrDiamond(num2, 0, eSpentCredits.eMax);
			long x = 0L;
			byte b = 0;
			CString cstring = StringManager.Instance.StaticString1024();
			cstring.ClearString();
			cstring.IntToFormat(NetworkManager.UserID, 1, false);
			cstring.AppendFormat("{0}_FB_UseID");
			long.TryParse(PlayerPrefs.GetString(cstring.ToString()), out x);
			cstring.ClearString();
			cstring.IntToFormat(x, 1, false);
			cstring.AppendFormat("{0}_FB_Count");
			byte.TryParse(PlayerPrefs.GetString(cstring.ToString()), out b);
			b = 5;
			PlayerPrefs.SetString(cstring.ToString(), b.ToString());
			if (DataManager.Instance.UserLanguage == GameLanguage.GL_Chs)
			{
				IGGSDKPlugin.LoadWebView("https://lm.176.com/project/wechat_guide/");
			}
			this.bGetFBPrize = true;
			GUIManager.Instance.CloseMenu(EGUIWindow.UI_TreasureBox);
			GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_UI_notAllowPopUps);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			break;
		}
		case ERoleFlagKind.ERFK_GoogleStarPrize:
			this.RoleAttr.PrizeFlag = MP.ReadUInt(-1);
			GUIManager.Instance.CloseMenu(EGUIWindow.UI_Rating);
			GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_UI_notAllowPopUps);
			break;
		default:
			if (eroleFlagKind2 == ERoleFlagKind.ERFK_ArenaPlaceDown)
			{
				this.RoleAttr.PrizeFlag = MP.ReadUInt(-1);
				if (this.CheckPrizeFlag(20))
				{
					ArenaManager.Instance.m_ArenaPlacedropTime = 4f;
					ArenaManager.Instance.bShowArenaPlacedrop = true;
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_Arena, 11, 0);
					GUIManager.Instance.BuildingData.UpdateBuildState(5, 255);
				}
			}
			break;
		case ERoleFlagKind.ERFK_GiftItem:
			this.RoleAttr.PrizeFlag = MP.ReadUInt(-1);
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9089u), 28, true);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Mall_Detail, 6, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_LordInfo, 0, 0);
			break;
		case ERoleFlagKind.ERFK_NewbieShieldEnable:
			this.RoleAttr.PrizeFlag = MP.ReadUInt(-1);
			break;
		}
	}

	// Token: 0x06000385 RID: 901 RVA: 0x00031078 File Offset: 0x0002F278
	public void RecvAllianceInfo(MessagePacket MP)
	{
		this.RoleAlliance.Channel = MP.ReadUInt(-1);
		if (this.RoleAlliance.Id != this.RoleAlliance.Channel)
		{
			this.RoleAlliance.Tag.ClearString();
			this.ClearTalkAlliance();
		}
		if ((this.RoleAlliance.Id = this.RoleAlliance.Channel) > 0u && this.RoleAlliance.ApplyList != null)
		{
			AllianceHint.Search = null;
			this.RoleAlliance.ApplyList = null;
			Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
			if (door)
			{
				if (GUIManager.Instance.FindMenu(EGUIWindow.UI_AllianceHint))
				{
					door.CloseMenu(false);
				}
				for (int i = door.m_WindowStack.Count - 1; i >= 0; i--)
				{
					if (door.m_WindowStack[i].m_eWindow == EGUIWindow.UI_AllianceHint)
					{
						door.m_WindowStack.RemoveAt(i);
					}
				}
				if (GUIManager.Instance.FindMenu(EGUIWindow.UIAlliance_publicinfo))
				{
					door.CloseMenu(false);
					if (GUIManager.Instance.FindMenu(EGUIWindow.UI_SearchList))
					{
						door.CloseMenu(false);
						if (GUIManager.Instance.FindMenu(EGUIWindow.UI_Other))
						{
							door.CloseMenu(false);
						}
					}
					if (GUIManager.Instance.FindMenu(EGUIWindow.UI_LetterDetail))
					{
						door.CloseMenu(false);
						if (GUIManager.Instance.FindMenu(EGUIWindow.UI_Letter))
						{
							door.CloseMenu(false);
						}
					}
				}
			}
		}
		this.RoleAlliance.Rank = (AllianceRank)MP.ReadByte(-1);
		this.RoleAlliance.Apply = MP.ReadByte(-1);
		this.RoleAlliance.Money = MP.ReadUInt(-1);
		this.DailyHelpGetAllianceMoney = MP.ReadUInt(-1);
		for (int j = 0; j < 2; j++)
		{
			this.mPlayHelpDataType[j].Kind = MP.ReadByte(-1);
			this.mPlayHelpDataType[j].AlreadyHelperNum = MP.ReadByte(-1);
			this.mPlayHelpDataType[j].HelpMax = MP.ReadByte(-1);
		}
		this.RoleAlliance.GiftNum = MP.ReadUShort(-1);
		if (this.RoleAlliance.GiftNum > 300)
		{
			this.RoleAlliance.GiftNum = 300;
		}
		this.RoleAlliance.ChatId = MP.ReadLong(-1);
		ActivityManager.Instance.CheckAMShowHint();
		GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_AllianceWarRegister, 3, 0);
		this.RoleAlliance.PackItemID = 0;
		this.RoleAlliance.KingdomID = 0;
		this.RoleAlliance.Applicant = 0;
		this.RoleAlliance.PackPoint = 0u;
		this.RoleAlliance.ChatMax = 0L;
		this.RoleAlliance.GiftExp = 0u;
		this.RoleAlliance.GiftLv = 1;
	}

	// Token: 0x06000386 RID: 902 RVA: 0x00031380 File Offset: 0x0002F580
	public unsafe void RecvAllianceMain(MessagePacket MP)
	{
		this.RoleAlliance.Channel = MP.ReadUInt(-1);
		this.RoleAlliance.Language = MP.ReadByte(-1);
		MP.ReadStringPlus(13, this.RoleAlliance.Leader, -1);
		this.RoleAlliance.Power = MP.ReadULong(-1);
		MP.ReadStringPlus(3, this.RoleAlliance.Tag, -1);
		MP.ReadStringPlus(20, this.RoleAlliance.Name, -1);
		this.RoleAlliance.Header = MP.ReadString(20, -1);
		this.RoleAlliance.Bullet = MP.ReadString(900, -1);
		fixed (string text = this.RoleAlliance.Bullet)
		{
			fixed (char* ptr = text + RuntimeHelpers.OffsetToStringData / 2)
			{
				for (int i = 0; i < this.RoleAlliance.Bullet.Length; i++)
				{
					if (!this.isNotEmojiCharacter(this.RoleAlliance.Bullet[i]))
					{
						ptr[i] = ' ';
					}
				}
				text = null;
				this.RoleAlliance.Emblem = MP.ReadUShort(-1);
				this.RoleAlliance.Member = MP.ReadByte(-1);
				this.RoleAlliance.Approval = MP.ReadByte(-1);
				this.RoleAlliance.Applicant = MP.ReadByte(-1);
				this.RoleAlliance.PackItemID = MP.ReadUShort(-1);
				this.RoleAlliance.PackPoint = MP.ReadUInt(-1);
				this.RoleAlliance.GiftExp = MP.ReadUInt(-1);
				this.RoleAlliance.ChatMax = MP.ReadLong(-1);
				this.RoleAlliance.KingdomID = MP.ReadUShort(-1);
				for (ushort num = 0; num < (ushort)DataManager.mapDataController.showYolkNum; num += 1)
				{
					uint yolkMapID = DataManager.mapDataController.GetYolkMapID((ushort)DataManager.mapDataController.showYolkMapYolkID[(int)num], DataManager.mapDataController.OtherKingdomData.kingdomID);
					DataManager.msgBuffer[0] = 54;
					GameConstants.GetBytes(yolkMapID, DataManager.msgBuffer, 1);
					GameManager.notifyObservers(1, 0, DataManager.msgBuffer);
				}
				ActivityManager.Instance.RecvKVKEventPoint(3, MP);
				MobilizationManager.Instance.AMScore = MP.ReadUInt(-1);
				MobilizationManager.Instance.AMCompleteDegree = 0;
				for (int j = 0; j < this.AllianceMobilizationDegreeInfo.TableCount; j++)
				{
					MobilizationDegreeData recordByIndex = this.AllianceMobilizationDegreeInfo.GetRecordByIndex(j);
					if (j == this.AllianceMobilizationDegreeInfo.TableCount - 1)
					{
						if (MobilizationManager.Instance.AMScore >= recordByIndex.MissionDegreeScore)
						{
							MobilizationManager.Instance.AMCompleteDegree = (byte)this.AllianceMobilizationDegreeInfo.TableCount;
							MobilizationManager.Instance.CompleteScore = recordByIndex.MissionDegreeScore;
							break;
						}
					}
					else
					{
						MobilizationDegreeData recordByIndex2 = this.AllianceMobilizationDegreeInfo.GetRecordByIndex(j + 1);
						if (MobilizationManager.Instance.AMScore >= recordByIndex.MissionDegreeScore && MobilizationManager.Instance.AMScore < recordByIndex2.MissionDegreeScore)
						{
							MobilizationManager.Instance.AMCompleteDegree = (byte)(j + 1);
							MobilizationManager.Instance.CompleteScore = recordByIndex2.MissionDegreeScore;
							break;
						}
					}
				}
				if (MobilizationManager.Instance.AMCompleteDegree == 0)
				{
					MobilizationDegreeData recordByIndex = this.AllianceMobilizationDegreeInfo.GetRecordByIndex(0);
					MobilizationManager.Instance.CompleteScore = recordByIndex.MissionDegreeScore;
				}
				this.RoleAlliance.BulletinFlag = MP.ReadByte(-1);
				this.RoleAlliance.AMRank = MP.ReadByte(-1);
				ActivityManager.Instance.SetAllianceSummon_Score(MP.ReadUInt(-1));
				ActivityManager.Instance.AllianceSummon_SummonData.SummonPoint = MP.ReadByte(-1);
				MP.ReadUShort(-1);
				ActivityManager.Instance.AllianceSummon_SummonData.MonsterPos.KingdomID = MP.ReadUShort(-1);
				ActivityManager.Instance.AllianceSummon_SummonData.MonsterPos.CombatPoint.zoneID = MP.ReadUShort(-1);
				ActivityManager.Instance.AllianceSummon_SummonData.MonsterPos.CombatPoint.pointID = MP.ReadByte(-1);
				ActivityManager.Instance.AllianceSummon_SummonData.MonsterEndTime = MP.ReadLong(-1);
				for (int k = 0; k < 5; k++)
				{
					ActivityManager.Instance.NPCCityCombatTimes[k] = MP.ReadByte(-1);
				}
				ActivityManager.Instance.AW_Rank = MP.ReadByte(-1);
				ActivityManager.Instance.AW_MemberCount = MP.ReadByte(-1);
				ActivityManager.Instance.SetNowState(true);
				if (MobilizationManager.Instance.AMCompleteDegree > this.RoleAlliance.AMMaxDegree)
				{
					MobilizationManager.Instance.AMCompleteDegree = this.RoleAlliance.AMMaxDegree;
				}
				this.RoleAlliance.BookmarkTime = MP.ReadLong(-1);
				this.RoleAlliance.AMRankMainInfoUIShow = MP.ReadByte(-1);
				this.RoleAlliance.AWRankMainInfoUIShow = MP.ReadByte(-1);
				this.RoleAlliance.AMPlaceMainInfoUIShow = MP.ReadByte(-1);
				uint num2 = 0u;
				byte b = 0;
				for (int l = 0; l < this.AllianceLvUpData.TableCount; l++)
				{
					b += 1;
					num2 += this.AllianceLvUpData.GetRecordByKey((ushort)(l + 1)).LvExp;
					if (num2 > this.RoleAlliance.GiftExp)
					{
						this.RoleAlliance.GiftLv = (byte)l;
						break;
					}
				}
				if (num2 > 0u && (int)b == this.AllianceLvUpData.TableCount && num2 <= this.RoleAlliance.GiftExp)
				{
					this.RoleAlliance.GiftLv = b;
				}
				Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
				if (this.RoleAlliance.Id != this.RoleAlliance.Channel)
				{
					this.RoleAlliance.Id = this.RoleAlliance.Channel;
					this.RoleAlliance.Rank = AllianceRank.RANK1;
					this.RoleAlliance.JoinTime = this.ServerTime;
					this.RoleAlliance.ApplyList = null;
					AllianceHint.Search = null;
					this.RoleAlliance.ChatId = 0L;
					this.SendAllianceID = 0u;
					GameManager.OnRefresh(NetworkNews.Refresh_Alliance, null);
					if (door)
					{
						if (GUIManager.Instance.FindMenu(EGUIWindow.UI_AllianceHint))
						{
							door.CloseMenu(false);
						}
						for (int m = door.m_WindowStack.Count - 1; m >= 0; m--)
						{
							if (door.m_WindowStack[m].m_eWindow == EGUIWindow.UI_AllianceHint)
							{
								door.m_WindowStack.RemoveAt(m);
							}
						}
						if (GUIManager.Instance.FindMenu(EGUIWindow.UIAlliance_publicinfo))
						{
							door.CloseMenu(false);
							if (GUIManager.Instance.FindMenu(EGUIWindow.UI_SearchList))
							{
								door.CloseMenu(false);
								if (GUIManager.Instance.FindMenu(EGUIWindow.UI_Other))
								{
									door.CloseMenu(false);
								}
							}
							if (GUIManager.Instance.FindMenu(EGUIWindow.UI_LetterDetail))
							{
								door.CloseMenu(false);
								if (GUIManager.Instance.FindMenu(EGUIWindow.UI_Letter))
								{
									door.CloseMenu(false);
								}
							}
						}
						if (door.m_eMapMode == EUIOriginMapMode.KingdomMap)
						{
							DataManager.Instance.RoleBookMark.CheckUpdate_Alliance(false);
						}
					}
					GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_Alliance_Info, 0, 0, false, 2);
					GUIManager.Instance.UpdateChatBox(7, 0);
					GUIManager.Instance.UpdateChatBox(9, 0);
					GUIManager.Instance.UpdateUI(EGUIWindow.Door, 9, 0);
					GUIManager.Instance.UpdateUI(EGUIWindow.Door, 15, 0);
					GUIManager.Instance.UpdateUI(EGUIWindow.Door, 19, 0);
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity1, 5, 0);
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity1, 2, 208);
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity2, 1, 208);
					ActivityManager.Instance.FIFAData[2].bAskDetailData = false;
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity2, 2, 213);
					CString cstring = StringManager.Instance.StaticString1024();
					cstring.StringToFormat(this.RoleAlliance.Name);
					cstring.AppendFormat(this.mStringTable.GetStringByID(598u));
					GUIManager.Instance.AddHUDMessage(cstring.ToString(), 255, true);
					DataManager.missionDataManager.CheckChanged(eMissionKind.Record, 7, (ushort)this.RoleAlliance.Id);
					DataManager.msgBuffer[0] = 53;
					GameManager.notifyObservers(1, 0, DataManager.msgBuffer);
					AFAdvanceManager.Instance.TriggerAfAdvEvent(EAppsFlayerEvent.JOIN_GUILD);
					FBAdvanceManager.Instance.TriggerFbUniqueEvent(EFBEvent.UNLOCKED_ACHIEVEMENT);
					ActivityManager.Instance.UpDateAllianceWarTop();
				}
				else
				{
					GameManager.OnRefresh(NetworkNews.Refresh_Alliance, null);
				}
				if (door != null && door.m_eMapMode == EUIOriginMapMode.KingdomMap)
				{
					DataManager.Instance.RoleBookMark.CheckUpdate_Alliance(false);
				}
				GameManager.OnRefresh(NetworkNews.Refresh_RecvAllianceInfo, null);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity1, 12, 206);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Activity2, 12, 0);
				DataManager.Instance.bNeedSortQueueBarData = true;
				GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Mobilization, 11, 0);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_SummonMonster, 1, 0);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_AllianceWarRegister, 5, 0);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 12, 0);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 13, 0);
			}
		}
	}

	// Token: 0x06000387 RID: 903 RVA: 0x00031CD8 File Offset: 0x0002FED8
	public void RecvAllianceCreate(MessagePacket MP)
	{
		Protocol protocol = MP.Protocol;
		switch (protocol)
		{
		case Protocol._MSG_RESP_ALLIANCE_NAMECHECK:
		case Protocol._MSG_RESP_ALLIANCE_TAGCHECK:
			if (GUIManager.Instance.FindMenu(EGUIWindow.UI_AllianceInput))
			{
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_AllianceInput, (int)MP.ReadByte(-1), (int)MP.ReadByte(-1));
			}
			else if (AllianceHint.Sequencing(MP.Protocol) == (int)MP.ReadByte(-1))
			{
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_AllianceHint, (int)AllianceHint.Sequencing(MP.ReadByte(-1)), 2);
			}
			break;
		default:
			switch (protocol)
			{
			case Protocol._MSG_RESP_ALLIANCE_MODIFY_NAME:
			{
				byte b = MP.ReadByte(-1);
				switch (b)
				{
				case 0:
				{
					ushort itemID = MP.ReadUShort(-1);
					this.SetCurItemQuantity(itemID, MP.ReadUShort(-1), 0, 0L);
					GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), itemID, eSpentCredits.eMax);
					this.RoleAlliance.Money = MP.ReadUInt(-1);
					if (b == 0)
					{
						MP.ReadStringPlus(20, this.RoleAlliance.Name, -1);
						GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(609u), 255, true);
						GameManager.OnRefresh(NetworkNews.Refresh_Alliance, null);
					}
					GameManager.OnRefresh(NetworkNews.Refresh_Item, null);
					GameManager.OnRefresh(NetworkNews.Refresh_Attr, null);
					break;
				}
				case 2:
					GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(426u), 255, true);
					break;
				case 5:
					GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(702u), 255, true);
					break;
				}
				GUIManager.Instance.HideUILock(EUILock.AllianceCreate);
				DataManager.msgBuffer[0] = b;
				GameManager.OnRefresh(NetworkNews.Refresh_Inputbox, DataManager.msgBuffer);
				return;
			}
			case Protocol._MSG_RESP_ALLIANCE_MODIFY_TAG:
			{
				byte b = MP.ReadByte(-1);
				switch (b)
				{
				case 0:
				case 3:
				case 4:
				{
					ushort itemID2 = MP.ReadUShort(-1);
					this.SetCurItemQuantity(itemID2, MP.ReadUShort(-1), 0, 0L);
					GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), itemID2, eSpentCredits.eMax);
					this.RoleAlliance.Money = MP.ReadUInt(-1);
					if (b == 0)
					{
						MP.ReadStringPlus(3, this.RoleAlliance.Tag, -1);
						GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(610u), 255, true);
						GameManager.OnRefresh(NetworkNews.Refresh_Alliance, null);
					}
					GameManager.OnRefresh(NetworkNews.Refresh_Item, null);
					GameManager.OnRefresh(NetworkNews.Refresh_Attr, null);
					goto IL_4F8;
				}
				case 2:
					GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(426u), 255, true);
					goto IL_4F8;
				case 5:
					GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(702u), 255, true);
					goto IL_4F8;
				}
				GameManager.OnRefresh(NetworkNews.Refresh_Alliance, null);
				IL_4F8:
				GUIManager.Instance.HideUILock(EUILock.AllianceCreate);
				DataManager.msgBuffer[0] = b;
				GameManager.OnRefresh(NetworkNews.Refresh_Inputbox, DataManager.msgBuffer);
				return;
			}
			}
			AllianceHint.RecvAllianceCreate(MP);
			break;
		case Protocol._MSG_RESP_ALLIANCE_CREATE:
		{
			byte b = MP.ReadByte(-1);
			if (b == 0)
			{
				MP.ReadStringPlus(20, this.RoleAlliance.Name, -1);
				MP.ReadStringPlus(3, this.RoleAlliance.Tag, -1);
				this.RoleAlliance.Bullet = (this.RoleAlliance.Header = string.Empty);
				this.RoleAlliance.Emblem = MP.ReadUShort(-1);
				this.RoleAlliance.Language = MP.ReadByte(-1);
				this.RoleAlliance.Id = MP.ReadUInt(-1);
				this.RoleAlliance.PackItemID = MP.ReadUShort(-1);
				this.RoleAlliance.Power = this.RoleAttr.Power;
				this.RoleAlliance.Leader.ClearString();
				this.RoleAlliance.Leader.Append(this.RoleAttr.Name);
				this.RoleAlliance.Member = 1;
				this.RoleAlliance.Rank = AllianceRank.RANK5;
				this.RoleAlliance.ChatId = (this.RoleAlliance.ChatMax = 0L);
				this.RoleAlliance.Approval = (this.RoleAlliance.Applicant = 0);
				this.RoleAlliance.GiftLv = 1;
				this.RoleAlliance.JoinTime = this.ServerTime;
				this.RoleAlliance.KingdomID = DataManager.MapDataController.OtherKingdomData.kingdomID;
				this.bSetAllianceScroll = true;
				GameManager.OnRefresh(NetworkNews.Refresh_Alliance, null);
				CString cstring = StringManager.Instance.StaticString1024();
				cstring.StringToFormat(this.RoleAlliance.Name);
				cstring.AppendFormat(this.mStringTable.GetStringByID(597u));
				GUIManager.Instance.AddHUDMessage(cstring.ToString(), 255, true);
				(GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door).AllianceOnClick();
				GUIManager.Instance.UpdateChatBox(9, 0);
				GUIManager.Instance.UpdateUI(EGUIWindow.Door, 9, 0);
				GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
				GUIManager.Instance.UpdateUI(EGUIWindow.Door, 19, 0);
				GUIManager.Instance.UpdateUI(EGUIWindow.Door, 15, 0);
				DataManager.missionDataManager.CheckChanged(eMissionKind.Record, 7, (ushort)this.RoleAlliance.Id);
				ActivityManager.Instance.CheckAMShowHint();
			}
			else
			{
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_AllianceHint, (int)b, 1);
			}
			break;
		}
		}
	}

	// Token: 0x06000388 RID: 904 RVA: 0x00032278 File Offset: 0x00030478
	public void RecvAllianceInvite(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		GUIManager.Instance.HideUILock(EUILock.Alliance_Manage);
		byte b2 = b;
		if (b2 == 0)
		{
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(7083u), 255, true);
		}
	}

	// Token: 0x06000389 RID: 905 RVA: 0x000322D0 File Offset: 0x000304D0
	public void OpenAllianceBox(ushort Type, int CharLimit = 0, bool CheckOnly = false, long Para = 0L)
	{
		if (GUIManager.Instance.FindMenu(EGUIWindow.UI_AllianceInput) == null)
		{
			AllianceHint.OpenAllianceBox(Type, CharLimit, CheckOnly, Para);
		}
	}

	// Token: 0x0600038A RID: 906 RVA: 0x00032300 File Offset: 0x00030500
	public void SetUserLanguage()
	{
		if (!byte.TryParse(PlayerPrefs.GetString("Other_Language"), out DataManager.Instance.MySysSetting.mUserLanguage) || DataManager.Instance.MySysSetting.mUserLanguage < 1 || DataManager.Instance.MySysSetting.mUserLanguage > 18)
		{
			SystemLanguage systemLanguage = Application.systemLanguage;
			switch (systemLanguage)
			{
			case SystemLanguage.French:
				DataManager.Instance.UserLanguage = GameLanguage.GL_Fre;
				break;
			case SystemLanguage.German:
				DataManager.Instance.UserLanguage = GameLanguage.GL_Gem;
				break;
			default:
				if (systemLanguage != SystemLanguage.Arabic)
				{
					if (systemLanguage != SystemLanguage.Chinese)
					{
						DataManager.Instance.UserLanguage = GameLanguage.GL_Eng;
					}
					else
					{
						DataManager.Instance.UserLanguage = GameLanguage.GL_Cht;
						if (IGGSDKPlugin.GetCountry() == "CN")
						{
							DataManager.Instance.UserLanguage = GameLanguage.GL_Chs;
						}
					}
				}
				else
				{
					DataManager.Instance.UserLanguage = GameLanguage.GL_Arb;
				}
				break;
			case SystemLanguage.Indonesian:
				DataManager.Instance.UserLanguage = GameLanguage.GL_Idn;
				break;
			case SystemLanguage.Italian:
				DataManager.Instance.UserLanguage = GameLanguage.GL_Ita;
				break;
			case SystemLanguage.Japanese:
				DataManager.Instance.UserLanguage = GameLanguage.GL_Jpn;
				break;
			case SystemLanguage.Korean:
				DataManager.Instance.UserLanguage = GameLanguage.GL_Kor;
				break;
			case SystemLanguage.Portuguese:
				DataManager.Instance.UserLanguage = GameLanguage.GL_Pot;
				break;
			case SystemLanguage.Russian:
				DataManager.Instance.UserLanguage = GameLanguage.GL_Rus;
				break;
			case SystemLanguage.Spanish:
				DataManager.Instance.UserLanguage = GameLanguage.GL_Spa;
				break;
			case SystemLanguage.Thai:
				DataManager.Instance.UserLanguage = GameLanguage.GL_Tha;
				break;
			case SystemLanguage.Turkish:
				DataManager.Instance.UserLanguage = GameLanguage.GL_Tur;
				break;
			case SystemLanguage.Ukrainian:
				DataManager.Instance.UserLanguage = GameLanguage.GL_Ukr;
				break;
			case SystemLanguage.Vietnamese:
				DataManager.Instance.UserLanguage = GameLanguage.GL_Vet;
				break;
			case SystemLanguage.Unknown:
				if (IGGSDKPlugin.GetCountry() == "MY")
				{
					DataManager.Instance.UserLanguage = GameLanguage.GL_Mys;
				}
				else
				{
					DataManager.Instance.UserLanguage = GameLanguage.GL_Eng;
				}
				break;
			}
			DataManager.Instance.MySysSetting.mUserLanguage = (byte)DataManager.Instance.UserLanguage;
			PlayerPrefs.SetString("Other_Language", DataManager.Instance.MySysSetting.mUserLanguage.ToString());
		}
		else
		{
			DataManager.Instance.UserLanguage = (GameLanguage)DataManager.Instance.MySysSetting.mUserLanguage;
		}
	}

	// Token: 0x0600038B RID: 907 RVA: 0x0003259C File Offset: 0x0003079C
	public byte GetUserLanguageID()
	{
		switch (Application.systemLanguage)
		{
		case SystemLanguage.Afrikaans:
			return 3;
		case SystemLanguage.Arabic:
			return 2;
		case SystemLanguage.Bulgarian:
			return 5;
		case SystemLanguage.Catalan:
			return 6;
		case SystemLanguage.Chinese:
			return 7;
		case SystemLanguage.Czech:
			return 9;
		case SystemLanguage.Danish:
			return 10;
		case SystemLanguage.Dutch:
			return 11;
		case SystemLanguage.English:
			return 12;
		case SystemLanguage.Estonian:
			return 13;
		case SystemLanguage.Finnish:
			return 14;
		case SystemLanguage.French:
			return 15;
		case SystemLanguage.German:
			return 16;
		case SystemLanguage.Greek:
			return 17;
		case SystemLanguage.Hebrew:
			return 18;
		case SystemLanguage.Hugarian:
			return 20;
		case SystemLanguage.Indonesian:
			return 21;
		case SystemLanguage.Italian:
			return 22;
		case SystemLanguage.Japanese:
			return 23;
		case SystemLanguage.Korean:
			return 24;
		case SystemLanguage.Latvian:
			return 25;
		case SystemLanguage.Lithuanian:
			return 26;
		case SystemLanguage.Norwegian:
			return 28;
		case SystemLanguage.Polish:
			return 30;
		case SystemLanguage.Portuguese:
			return 31;
		case SystemLanguage.Romanian:
			return 32;
		case SystemLanguage.Russian:
			return 33;
		case SystemLanguage.SerboCroatian:
			return 34;
		case SystemLanguage.Slovak:
			return 35;
		case SystemLanguage.Slovenian:
			return 36;
		case SystemLanguage.Spanish:
			return 37;
		case SystemLanguage.Swedish:
			return 38;
		case SystemLanguage.Thai:
			return 39;
		case SystemLanguage.Turkish:
			return 40;
		case SystemLanguage.Ukrainian:
			return 41;
		case SystemLanguage.Vietnamese:
			return 42;
		}
		if (IGGSDKPlugin.GetCountry() == "MY")
		{
			return 27;
		}
		return 12;
	}

	// Token: 0x0600038C RID: 908 RVA: 0x000326DC File Offset: 0x000308DC
	public void CombatReplay(ulong AutoID, int ServerID, int AssKey, bool bNPC = false)
	{
		GUIManager.Instance.ShowUILock(EUILock.Mailing_Battle);
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = ((!bNPC) ? Protocol._MSG_REQUEST_COMBATREPLAY : Protocol._MSG_REQUEST_COMBATREPLAY_NPCCITY);
		messagePacket.AddSeqId();
		messagePacket.Add(AutoID);
		messagePacket.Add(ServerID);
		messagePacket.Add(AssKey);
		messagePacket.Send(false);
	}

	// Token: 0x0600038D RID: 909 RVA: 0x00032740 File Offset: 0x00030940
	public bool MailTranslate(uint Id, MailType Kind)
	{
		if (this.MailTranslation.Serial != 0u)
		{
			return false;
		}
		this.MailTranslation.Serial = Id;
		this.MailTranslation.Kind = Kind;
		return true;
	}

	// Token: 0x0600038E RID: 910 RVA: 0x00032770 File Offset: 0x00030970
	public void BattleReportRead(uint id, bool Lockchan = true)
	{
		ReportSubSet reportSubSet = ReportSubSet.REPORTSet_COMBAT_SCOUT;
		List<uint> list = new List<uint>((int)this.Mailing.ReportSerial.Select);
		if (id > 0u)
		{
			if (this.Mailing.ReportSerial.GatheringID == id)
			{
				reportSubSet = ReportSubSet.REPORTSet_GATHER;
				for (int i = 0; i < this.Mailing.ReportSerial.Gather.Count; i++)
				{
					if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Gather[i], out this.DoFavor.Combat) && !this.DoFavor.Combat.BeRead)
					{
						list.Add(this.Mailing.ReportSerial.Gather[i]);
					}
				}
			}
			else if (this.Mailing.ReportSerial.ResourceID == id)
			{
				reportSubSet = ReportSubSet.REPORTSet_HELP;
				for (int j = 0; j < this.Mailing.ReportSerial.Resource.Count; j++)
				{
					if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Resource[j], out this.DoFavor.Combat) && !this.DoFavor.Combat.BeRead)
					{
						list.Add(this.Mailing.ReportSerial.Resource[j]);
					}
				}
			}
			else if (this.Mailing.ReportSerial.AntiScoutID == id)
			{
				reportSubSet = ReportSubSet.REPORTSet_RECON;
				for (int k = 0; k < this.Mailing.ReportSerial.AntiScout.Count; k++)
				{
					if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.AntiScout[k], out this.DoFavor.Combat) && !this.DoFavor.Combat.BeRead)
					{
						list.Add(this.Mailing.ReportSerial.AntiScout[k]);
					}
				}
			}
			else if (this.Mailing.ReportSerial.Mail.TryGetValue(id, out this.DoFavor.Combat) && !this.DoFavor.Combat.BeRead)
			{
				list.Add(id);
			}
			if (list.Count > 0)
			{
				if (Lockchan)
				{
					GUIManager.Instance.ShowUILock(EUILock.Mailing_Read);
				}
				MessagePacket messagePacket = new MessagePacket(1024);
				messagePacket.Protocol = Protocol._MSG_REQUEST_REPORTMARKREAD;
				messagePacket.AddSeqId();
				messagePacket.Add((byte)reportSubSet);
				messagePacket.Add((byte)list.Count);
				for (int l = 0; l < list.Count; l++)
				{
					messagePacket.Add(list[l]);
				}
				messagePacket.Send(false);
			}
		}
		else
		{
			if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.GatheringID, out this.DoFavor.Combat) && this.DoFavor.Combat.BeChecked)
			{
				for (int m = 0; m < this.Mailing.ReportSerial.Gather.Count; m++)
				{
					if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Gather[m], out this.DoFavor.Combat) && !this.DoFavor.Combat.BeRead)
					{
						list.Add(this.Mailing.ReportSerial.Gather[m]);
					}
				}
			}
			if (list.Count > 0)
			{
				reportSubSet = ReportSubSet.REPORTSet_GATHER;
				MessagePacket messagePacket2 = new MessagePacket(1024);
				messagePacket2.Protocol = Protocol._MSG_REQUEST_REPORTMARKREAD;
				messagePacket2.AddSeqId();
				messagePacket2.Add((byte)reportSubSet);
				messagePacket2.Add((byte)list.Count);
				for (int n = 0; n < list.Count; n++)
				{
					messagePacket2.Add(list[n]);
				}
				messagePacket2.Send(false);
				list.Clear();
			}
			if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.ResourceID, out this.DoFavor.Combat) && this.DoFavor.Combat.BeChecked)
			{
				for (int num = 0; num < this.Mailing.ReportSerial.Resource.Count; num++)
				{
					if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Resource[num], out this.DoFavor.Combat) && !this.DoFavor.Combat.BeRead)
					{
						list.Add(this.Mailing.ReportSerial.Resource[num]);
					}
				}
			}
			if (list.Count > 0)
			{
				reportSubSet = ReportSubSet.REPORTSet_HELP;
				MessagePacket messagePacket3 = new MessagePacket(1024);
				messagePacket3.Protocol = Protocol._MSG_REQUEST_REPORTMARKREAD;
				messagePacket3.AddSeqId();
				messagePacket3.Add((byte)reportSubSet);
				messagePacket3.Add((byte)list.Count);
				for (int num2 = 0; num2 < list.Count; num2++)
				{
					messagePacket3.Add(list[num2]);
				}
				messagePacket3.Send(false);
				list.Clear();
			}
			if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.AntiScoutID, out this.DoFavor.Combat) && this.DoFavor.Combat.BeChecked)
			{
				for (int num3 = 0; num3 < this.Mailing.ReportSerial.AntiScout.Count; num3++)
				{
					if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.AntiScout[num3], out this.DoFavor.Combat) && !this.DoFavor.Combat.BeRead)
					{
						list.Add(this.Mailing.ReportSerial.AntiScout[num3]);
					}
				}
			}
			if (list.Count > 0)
			{
				reportSubSet = ReportSubSet.REPORTSet_RECON;
				MessagePacket messagePacket4 = new MessagePacket(1024);
				messagePacket4.Protocol = Protocol._MSG_REQUEST_REPORTMARKREAD;
				messagePacket4.AddSeqId();
				messagePacket4.Add((byte)reportSubSet);
				messagePacket4.Add((byte)list.Count);
				for (int num4 = 0; num4 < list.Count; num4++)
				{
					messagePacket4.Add(list[num4]);
				}
				messagePacket4.Send(false);
				list.Clear();
			}
			for (int num5 = 0; num5 < this.Mailing.ReportSerial.Inbox.Length; num5++)
			{
				if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[num5].Serial, out this.DoFavor.Combat) && this.DoFavor.Combat.BeChecked && !this.DoFavor.Combat.BeRead && this.DoFavor.Combat.More == 0)
				{
					list.Add(this.DoFavor.Combat.SerialID);
				}
			}
			if (list.Count > 0)
			{
				MessagePacket messagePacket5 = new MessagePacket(1024);
				messagePacket5.Protocol = Protocol._MSG_REQUEST_REPORTMARKREAD;
				messagePacket5.AddSeqId();
				messagePacket5.Add(0);
				messagePacket5.Add((byte)list.Count);
				for (int num6 = 0; num6 < list.Count; num6++)
				{
					messagePacket5.Add(list[num6]);
				}
				messagePacket5.Send(false);
			}
			if (Lockchan && (reportSubSet > ReportSubSet.REPORTSet_COMBAT_SCOUT || list.Count > 0))
			{
				GUIManager.Instance.ShowUILock(EUILock.Mailing_Read);
			}
		}
	}

	// Token: 0x0600038F RID: 911 RVA: 0x00032FF0 File Offset: 0x000311F0
	public void MailReportRead(uint id, bool Lockchan = true)
	{
		if (this.Mailing.MailSerial.Mail.TryGetValue(id, out this.DoFavor.Mail))
		{
			if (!this.DoFavor.Mail.BeRead)
			{
				if (Lockchan)
				{
					GUIManager.Instance.ShowUILock(EUILock.Mailing_Read);
				}
				MessagePacket messagePacket = new MessagePacket(1024);
				messagePacket.Protocol = Protocol._MSG_REQUEST_MAILMARKREAD;
				messagePacket.AddSeqId();
				messagePacket.Add(1);
				messagePacket.Add(id);
				messagePacket.Send(false);
			}
		}
		else
		{
			List<uint> list = new List<uint>((int)this.Mailing.MailSerial.Select);
			int num = 0;
			while ((long)num < (long)((ulong)this.Mailing.MailSerial.Count))
			{
				if (this.Mailing.MailSerial.Mail.TryGetValue(this.Mailing.MailSerial.Inbox[num].Serial, out this.DoFavor.Mail) && this.DoFavor.Mail.BeChecked)
				{
					if (this.DoFavor.Mail.More > 1)
					{
						SubContent subContent;
						List<uint> list2;
						if (this.Mailing.MailSerial.SubMail.TryGetValue(this.DoFavor.Mail.ReplyID, out subContent) && subContent.Mail.TryGetValue(this.DoFavor.Mail.SenderName, out list2))
						{
							for (int i = 0; i < list2.Count; i++)
							{
								if (this.Mailing.MailSerial.Mail.TryGetValue(list2[i], out this.DoFavor.Mail) && !this.DoFavor.Mail.BeRead)
								{
									list.Add(this.DoFavor.Mail.SerialID);
								}
							}
						}
					}
					else if (!this.DoFavor.Mail.BeRead)
					{
						list.Add(this.DoFavor.Mail.SerialID);
					}
				}
				num++;
			}
			if (list.Count > 0)
			{
				if (Lockchan)
				{
					GUIManager.Instance.ShowUILock(EUILock.Mailing_Read);
				}
				MessagePacket messagePacket2 = new MessagePacket(1024);
				messagePacket2.Protocol = Protocol._MSG_REQUEST_MAILMARKREAD;
				messagePacket2.AddSeqId();
				messagePacket2.Add((byte)list.Count);
				for (int j = 0; j < list.Count; j++)
				{
					messagePacket2.Add(list[j]);
				}
				messagePacket2.Send(false);
			}
		}
	}

	// Token: 0x06000390 RID: 912 RVA: 0x0003329C File Offset: 0x0003149C
	public void MailReportRead(uint id, uint ReplyID, string ReplySender, bool Lockchan = true)
	{
		if (!this.Mailing.MailSerial.Mail.TryGetValue(id, out this.DoFavor.Mail))
		{
			List<uint> list = new List<uint>((int)this.Mailing.MailSerial.Select);
			SubContent subContent;
			List<uint> list2;
			if (this.Mailing.MailSerial.SubMail.TryGetValue(ReplyID, out subContent) && subContent.Mail.TryGetValue(ReplySender, out list2))
			{
				for (int i = 0; i < list2.Count; i++)
				{
					MailContent mailContent;
					if (this.Mailing.MailSerial.Mail.TryGetValue(list2[i], out mailContent) && mailContent.BeChecked && !mailContent.BeRead)
					{
						list.Add(mailContent.SerialID);
					}
				}
				if (list.Count > 0)
				{
					if (Lockchan)
					{
						GUIManager.Instance.ShowUILock(EUILock.Mailing_Read);
					}
					MessagePacket messagePacket = new MessagePacket(1024);
					messagePacket.Protocol = Protocol._MSG_REQUEST_MAILMARKREAD;
					messagePacket.AddSeqId();
					messagePacket.Add((byte)list.Count);
					for (int j = 0; j < list.Count; j++)
					{
						messagePacket.Add(list[j]);
					}
					messagePacket.Send(false);
				}
			}
		}
	}

	// Token: 0x06000391 RID: 913 RVA: 0x000333FC File Offset: 0x000315FC
	public void SystemReportRead(uint id, bool Lockchan = true)
	{
		if (id > 0u)
		{
			if (this.Mailing.SystemSerial.Mail.TryGetValue(id, out this.DoFavor.System) && !this.DoFavor.System.BeRead)
			{
				if (Lockchan)
				{
					GUIManager.Instance.ShowUILock(EUILock.Mailing_Read);
				}
				MessagePacket messagePacket = new MessagePacket(1024);
				messagePacket.Protocol = Protocol._MSG_REQUEST_NOTICEMARKREAD;
				messagePacket.AddSeqId();
				messagePacket.Add(1);
				messagePacket.Add(id);
				messagePacket.Send(false);
			}
		}
		else
		{
			byte b = 0;
			int num = 0;
			while ((long)num < (long)((ulong)this.Mailing.SystemSerial.Count))
			{
				if (this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Inbox[num].Serial, out this.DoFavor.System) && this.DoFavor.System.BeChecked && !this.DoFavor.System.BeRead)
				{
					b += 1;
				}
				num++;
			}
			if (b > 0)
			{
				if (Lockchan)
				{
					GUIManager.Instance.ShowUILock(EUILock.Mailing_Read);
				}
				MessagePacket messagePacket2 = new MessagePacket(1024);
				messagePacket2.Protocol = Protocol._MSG_REQUEST_NOTICEMARKREAD;
				messagePacket2.AddSeqId();
				messagePacket2.Add(b);
				int num2 = 0;
				while ((long)num2 < (long)((ulong)this.Mailing.SystemSerial.Count))
				{
					if (this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Inbox[num2].Serial, out this.DoFavor.System) && this.DoFavor.System.BeChecked && !this.DoFavor.System.BeRead)
					{
						messagePacket2.Add(this.DoFavor.System.SerialID);
					}
					num2++;
				}
				messagePacket2.Send(false);
			}
		}
	}

	// Token: 0x06000392 RID: 914 RVA: 0x00033618 File Offset: 0x00031818
	public void FavorReportRead(uint id = 0u, bool Lockchan = true)
	{
		MyFavorite myFavorite = new MyFavorite(MailType.EMAIL_MAX, 0u);
		if (id > 0u)
		{
			this.DoFavor.Serial = id;
			this.DoFavor.Type = this.OpenMail.Type;
			if (this.FavorReportGet(ref this.DoFavor))
			{
				if (this.OpenMail.Type == MailType.EMAIL_LETTER && !this.DoFavor.Mail.BeRead)
				{
					myFavorite.Type = MailType.EMAIL_SYSTEM;
				}
				else if (this.OpenMail.Type == MailType.EMAIL_SYSTEM && !this.DoFavor.System.BeRead)
				{
					myFavorite.Type = MailType.EMAIL_FAVORY;
				}
				else if (!this.DoFavor.Combat.BeRead)
				{
					myFavorite.Type = MailType.EMAIL_BATTLE;
				}
				if (myFavorite.Type < MailType.EMAIL_MAX)
				{
					if (Lockchan)
					{
						GUIManager.Instance.ShowUILock(EUILock.Mailing_Read);
					}
					MessagePacket messagePacket = new MessagePacket(1024);
					messagePacket.Protocol = Protocol._MSG_REQUEST_SAVEMARKREAD;
					messagePacket.AddSeqId();
					messagePacket.Add(1);
					messagePacket.Add((byte)myFavorite.Type);
					messagePacket.Add(id);
					messagePacket.Send(false);
				}
			}
		}
		else if (this.Mailing.FavorSerial.Select > 0u)
		{
			List<uint> list = new List<uint>((int)this.Mailing.FavorSerial.Select);
			List<byte> list2 = new List<byte>((int)this.Mailing.FavorSerial.Select);
			for (int i = 0; i < this.Mailing.FavorSerial.Inbox.Length; i++)
			{
				if ((myFavorite = this.FavorReportGet(i)) != null)
				{
					if (myFavorite.Type == MailType.EMAIL_BATTLE && myFavorite.Combat.BeChecked && !myFavorite.Combat.BeRead)
					{
						list.Add(myFavorite.Combat.SerialID);
						list2.Add(1);
					}
					else if (myFavorite.Type == MailType.EMAIL_LETTER && myFavorite.Mail.BeChecked && !myFavorite.Mail.BeRead)
					{
						list.Add(myFavorite.Mail.SerialID);
						list2.Add(0);
					}
					else if (myFavorite.Type == MailType.EMAIL_SYSTEM && myFavorite.System.BeChecked && !myFavorite.System.BeRead)
					{
						list.Add(myFavorite.System.SerialID);
						list2.Add(3);
					}
				}
			}
			if (list2.Count > 0)
			{
				if (Lockchan)
				{
					GUIManager.Instance.ShowUILock(EUILock.Mailing_Read);
				}
				MessagePacket messagePacket2 = new MessagePacket(1024);
				messagePacket2.Protocol = Protocol._MSG_REQUEST_SAVEMARKREAD;
				messagePacket2.AddSeqId();
				messagePacket2.Add((byte)list2.Count);
				for (int j = 0; j < list2.Count; j++)
				{
					messagePacket2.Add(list2[j]);
					messagePacket2.Add(list[j]);
				}
				messagePacket2.Send(false);
			}
		}
	}

	// Token: 0x06000393 RID: 915 RVA: 0x00033924 File Offset: 0x00031B24
	public void FavorReportDelete(uint id)
	{
		if (this.Mailing.FavorSerial.Select > 0u)
		{
			GUIManager.Instance.ShowUILock(EUILock.Mailing_Delete);
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_DELETSAVE;
			messagePacket.AddSeqId();
			messagePacket.Add((byte)this.Mailing.FavorSerial.Select);
			for (int i = 0; i < this.Mailing.FavorSerial.Inbox.Length; i++)
			{
				MyFavorite myFavorite;
				if ((myFavorite = this.FavorReportGet(i)) != null)
				{
					if (myFavorite.Type == MailType.EMAIL_SYSTEM && myFavorite.System.BeChecked)
					{
						messagePacket.Add(3);
						messagePacket.Add(myFavorite.System.SerialID);
					}
					else if (myFavorite.Type == MailType.EMAIL_LETTER && myFavorite.Mail.BeChecked)
					{
						messagePacket.Add(0);
						messagePacket.Add(myFavorite.Mail.SerialID);
					}
					else if (myFavorite.Type == MailType.EMAIL_BATTLE && myFavorite.Combat.BeChecked)
					{
						messagePacket.Add(1);
						messagePacket.Add(myFavorite.Combat.SerialID);
					}
				}
			}
			messagePacket.Send(false);
		}
	}

	// Token: 0x06000394 RID: 916 RVA: 0x00033A68 File Offset: 0x00031C68
	public bool BattleReportDelete(uint id)
	{
		this.DoFavor.Serial = id;
		this.DoFavor.Kind = this.OpenMail.Kind;
		this.DoFavor.Type = this.OpenMail.Type;
		if (this.MailReportGet(ref this.DoFavor))
		{
			GUIManager.Instance.ShowUILock(EUILock.Mailing_Delete);
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.AddSeqId();
			if (this.DoFavor.Kind == MailType.EMAIL_FAVORY)
			{
				messagePacket.Protocol = Protocol._MSG_REQUEST_DELETSAVE;
				messagePacket.Add(1);
				messagePacket.Add((byte)this.DoFavor.Type);
				messagePacket.Add(id);
			}
			else
			{
				messagePacket.Protocol = Protocol._MSG_REQUEST_DELETREPORT;
				if (this.Mailing.ReportSerial.GatheringID == id)
				{
					messagePacket.Add(1);
					messagePacket.Add((byte)this.Mailing.ReportSerial.Gather.Count);
					for (int i = 0; i < this.Mailing.ReportSerial.Gather.Count; i++)
					{
						messagePacket.Add(this.Mailing.ReportSerial.Gather[i]);
					}
				}
				else if (this.Mailing.ReportSerial.ResourceID == id)
				{
					messagePacket.Add(2);
					messagePacket.Add((byte)this.Mailing.ReportSerial.Resource.Count);
					for (int j = 0; j < this.Mailing.ReportSerial.Resource.Count; j++)
					{
						messagePacket.Add(this.Mailing.ReportSerial.Resource[j]);
					}
				}
				else if (this.Mailing.ReportSerial.AntiScoutID == id)
				{
					messagePacket.Add(3);
					messagePacket.Add((byte)this.Mailing.ReportSerial.AntiScout.Count);
					for (int k = 0; k < this.Mailing.ReportSerial.AntiScout.Count; k++)
					{
						messagePacket.Add(this.Mailing.ReportSerial.AntiScout[k]);
					}
				}
				else
				{
					messagePacket.Add(0);
					messagePacket.Add(1);
					messagePacket.Add(id);
				}
			}
			messagePacket.Send(false);
			return true;
		}
		if (id == 0u)
		{
			bool result = false;
			GUIManager.Instance.ShowUILock(EUILock.Mailing_Delete);
			MessagePacket messagePacket2 = new MessagePacket(1024);
			messagePacket2.Protocol = Protocol._MSG_REQUEST_DELETREPORT;
			for (int l = 0; l < this.Mailing.ReportSerial.Gather.Count; l++)
			{
				if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Gather[l], out this.DoFavor.Combat) && this.DoFavor.Combat.BeChecked)
				{
					result = true;
					messagePacket2.AddSeqId();
					messagePacket2.Add(1);
					messagePacket2.Add(this.DoFavor.Combat.More);
					for (int m = 0; m < this.Mailing.ReportSerial.Gather.Count; m++)
					{
						messagePacket2.Add(this.Mailing.ReportSerial.Gather[m]);
					}
					messagePacket2.Send(false);
					messagePacket2 = null;
					break;
				}
			}
			for (int n = 0; n < this.Mailing.ReportSerial.Resource.Count; n++)
			{
				if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Resource[n], out this.DoFavor.Combat) && this.DoFavor.Combat.BeChecked)
				{
					result = true;
					if (messagePacket2 == null)
					{
						messagePacket2 = new MessagePacket(1024);
					}
					messagePacket2.Protocol = Protocol._MSG_REQUEST_DELETREPORT;
					messagePacket2.AddSeqId();
					messagePacket2.Add(2);
					messagePacket2.Add(this.DoFavor.Combat.More);
					for (int num = 0; num < this.Mailing.ReportSerial.Resource.Count; num++)
					{
						messagePacket2.Add(this.Mailing.ReportSerial.Resource[num]);
					}
					messagePacket2.Send(false);
					messagePacket2 = null;
					break;
				}
			}
			for (int num2 = 0; num2 < this.Mailing.ReportSerial.AntiScout.Count; num2++)
			{
				if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.AntiScout[num2], out this.DoFavor.Combat) && this.DoFavor.Combat.BeChecked)
				{
					result = true;
					if (messagePacket2 == null)
					{
						messagePacket2 = new MessagePacket(1024);
					}
					messagePacket2.Protocol = Protocol._MSG_REQUEST_DELETREPORT;
					messagePacket2.AddSeqId();
					messagePacket2.Add(3);
					messagePacket2.Add(this.DoFavor.Combat.More);
					for (int num3 = 0; num3 < this.Mailing.ReportSerial.AntiScout.Count; num3++)
					{
						messagePacket2.Add(this.Mailing.ReportSerial.AntiScout[num3]);
					}
					messagePacket2.Send(false);
					messagePacket2 = null;
					break;
				}
			}
			for (int num4 = 0; num4 < this.Mailing.ReportSerial.Inbox.Length; num4++)
			{
				if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[num4].Serial, out this.DoFavor.Combat) && this.DoFavor.Combat.BeChecked && this.DoFavor.Combat.More == 0)
				{
					id += 1u;
				}
			}
			if (id > 0u)
			{
				result = true;
				if (messagePacket2 == null)
				{
					messagePacket2 = new MessagePacket(1024);
				}
				messagePacket2.Protocol = Protocol._MSG_REQUEST_DELETREPORT;
				messagePacket2.AddSeqId();
				messagePacket2.Add(0);
				messagePacket2.Add((byte)id);
				for (int num5 = 0; num5 < this.Mailing.ReportSerial.Inbox.Length; num5++)
				{
					if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[num5].Serial, out this.DoFavor.Combat) && this.DoFavor.Combat.BeChecked && this.DoFavor.Combat.More == 0)
					{
						messagePacket2.Add(this.DoFavor.Combat.SerialID);
					}
				}
				messagePacket2.Send(false);
				messagePacket2 = null;
			}
			if (messagePacket2 != null)
			{
				messagePacket2.Send(false);
			}
			return result;
		}
		return false;
	}

	// Token: 0x06000395 RID: 917 RVA: 0x000341CC File Offset: 0x000323CC
	public bool MailReportDelete(uint id)
	{
		this.DoFavor.Serial = id;
		this.DoFavor.Kind = this.OpenMail.Kind;
		this.DoFavor.Type = this.OpenMail.Type;
		if (this.MailReportGet(ref this.DoFavor))
		{
			GUIManager.Instance.ShowUILock(EUILock.Mailing_Delete);
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.AddSeqId();
			messagePacket.Add(1);
			if (this.DoFavor.Kind == MailType.EMAIL_FAVORY)
			{
				messagePacket.Protocol = Protocol._MSG_REQUEST_DELETSAVE;
				messagePacket.Add(0);
			}
			else
			{
				messagePacket.Protocol = Protocol._MSG_REQUEST_DELETEMAIL;
			}
			messagePacket.Add(id);
			messagePacket.Send(false);
			return true;
		}
		if (id == 0u)
		{
			MessagePacket messagePacket2 = new MessagePacket(1024);
			messagePacket2.Protocol = Protocol._MSG_REQUEST_DELETEMAIL;
			messagePacket2.AddSeqId();
			messagePacket2.Add((byte)this.Mailing.MailSerial.Select);
			int num = 0;
			while ((long)num < (long)((ulong)this.Mailing.MailSerial.Count))
			{
				if (this.Mailing.MailSerial.Mail.TryGetValue(this.Mailing.MailSerial.Inbox[num].Serial, out this.DoFavor.Mail) && this.DoFavor.Mail.BeChecked)
				{
					if (this.DoFavor.Mail.More > 1)
					{
						SubContent subContent;
						List<uint> list;
						if (this.Mailing.MailSerial.SubMail.TryGetValue(this.DoFavor.Mail.ReplyID, out subContent) && subContent.Mail.TryGetValue(this.DoFavor.Mail.SenderName, out list))
						{
							for (int i = 0; i < list.Count; i++)
							{
								messagePacket2.Add(list[i]);
							}
						}
					}
					else
					{
						messagePacket2.Add(this.DoFavor.Mail.SerialID);
					}
				}
				num++;
			}
			messagePacket2.Send(false);
			GUIManager.Instance.ShowUILock(EUILock.Mailing_Delete);
			return true;
		}
		return false;
	}

	// Token: 0x06000396 RID: 918 RVA: 0x00034404 File Offset: 0x00032604
	public bool MailReportDelete(uint id, uint ReplyID, string ReplySender)
	{
		this.DoFavor.Serial = id;
		this.DoFavor.Kind = this.OpenMail.Kind;
		this.DoFavor.Type = this.OpenMail.Type;
		if (this.MailReportGet(ref this.DoFavor))
		{
			GUIManager.Instance.ShowUILock(EUILock.Mailing_Delete);
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_DELETEMAIL;
			messagePacket.AddSeqId();
			messagePacket.Add(1);
			messagePacket.Add(id);
			messagePacket.Send(false);
			return true;
		}
		SubContent subContent;
		List<uint> list;
		if (id == 0u && this.Mailing.MailSerial.SubMail.TryGetValue(ReplyID, out subContent) && subContent.Mail.TryGetValue(ReplySender, out list))
		{
			for (int i = 0; i < list.Count; i++)
			{
				if (this.Mailing.MailSerial.Mail.TryGetValue(list[i], out this.DoFavor.Mail) && this.DoFavor.Mail.BeChecked)
				{
					id += 1u;
				}
			}
			GUIManager.Instance.ShowUILock(EUILock.Mailing_Delete);
			MessagePacket messagePacket2 = new MessagePacket(1024);
			messagePacket2.Protocol = Protocol._MSG_REQUEST_DELETEMAIL;
			messagePacket2.AddSeqId();
			messagePacket2.Add((byte)id);
			for (int j = 0; j < list.Count; j++)
			{
				if (this.Mailing.MailSerial.Mail.TryGetValue(list[j], out this.DoFavor.Mail) && this.DoFavor.Mail.BeChecked)
				{
					messagePacket2.Add(this.DoFavor.Mail.SerialID);
				}
			}
			messagePacket2.Send(false);
			return true;
		}
		return false;
	}

	// Token: 0x06000397 RID: 919 RVA: 0x000345E4 File Offset: 0x000327E4
	public void SystemReportSave(int id)
	{
		if (id >= 0 && (long)id < (long)((ulong)this.Mailing.SystemSerial.Count) && this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Inbox[id].Serial, out this.DoFavor.System))
		{
			this.SystemReportSave(this.DoFavor.System.SerialID);
		}
	}

	// Token: 0x06000398 RID: 920 RVA: 0x00034668 File Offset: 0x00032868
	public bool SystemReportDelete(uint id)
	{
		this.DoFavor.Serial = id;
		this.DoFavor.Kind = this.OpenMail.Kind;
		this.DoFavor.Type = this.OpenMail.Type;
		if (this.MailReportGet(ref this.DoFavor))
		{
			GUIManager.Instance.ShowUILock(EUILock.Mailing_Delete);
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.AddSeqId();
			messagePacket.Add(1);
			if (this.DoFavor.Kind == MailType.EMAIL_FAVORY)
			{
				messagePacket.Protocol = Protocol._MSG_REQUEST_DELETSAVE;
				if (this.DoFavor.Type == MailType.EMAIL_LETTER)
				{
					this.DoFavor.Type = MailType.EMAIL_SYSTEM;
				}
				else if (this.DoFavor.Type == MailType.EMAIL_SYSTEM)
				{
					this.DoFavor.Type = MailType.EMAIL_FAVORY;
				}
				messagePacket.Add((byte)this.DoFavor.Type);
			}
			else
			{
				messagePacket.Protocol = Protocol._MSG_REQUEST_DELETENOTICE;
			}
			messagePacket.Add(id);
			messagePacket.Send(false);
			return true;
		}
		if (id == 0u)
		{
			MessagePacket messagePacket2 = new MessagePacket(1024);
			messagePacket2.Protocol = Protocol._MSG_REQUEST_DELETENOTICE;
			messagePacket2.AddSeqId();
			messagePacket2.Add((byte)this.Mailing.SystemSerial.Select);
			int num = 0;
			while ((long)num < (long)((ulong)this.Mailing.SystemSerial.Count))
			{
				if (this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Inbox[num].Serial, out this.DoFavor.System) && this.DoFavor.System.BeChecked)
				{
					messagePacket2.Add(this.DoFavor.System.SerialID);
				}
				num++;
			}
			messagePacket2.Send(false);
			GUIManager.Instance.ShowUILock(EUILock.Mailing_Delete);
			return true;
		}
		return false;
	}

	// Token: 0x06000399 RID: 921 RVA: 0x00034850 File Offset: 0x00032A50
	public void BattleReportSave(int id, byte num)
	{
		if (this.Mailing.FavorSerial.Total == 100u)
		{
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(6019u), 255, true);
			return;
		}
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_SAVEREPORT;
		CombatReport combatReport = this.CombatReportGet(id);
		combatReport.BeSave = true;
		messagePacket.AddSeqId();
		messagePacket.Add(0);
		messagePacket.Add(combatReport.SerialID);
		messagePacket.Send(false);
		if (!this.Mailing.FavorSerial.Combat.Mail.ContainsKey(combatReport.SerialID))
		{
			this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Total)].Type = MailType.EMAIL_BATTLE;
			this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Total)].Serial = combatReport.SerialID;
			this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Total)].Timing = combatReport.Times;
			this.Mailing.FavorSerial.Total += 1u;
		}
		this.Mailing.FavorSerial.Combat.Mail[combatReport.SerialID] = combatReport;
		this.MailDataRefresh(MailType.EMAIL_FAVORY);
		this.Mailing.ReportSerial.Mail.Remove(combatReport.SerialID);
		for (int i = 0; i < this.Mailing.ReportSerial.Inbox.Length; i++)
		{
			if (this.Mailing.ReportSerial.Inbox[i].Serial == combatReport.SerialID)
			{
				this.Mailing.ReportSerial.Inbox[i].Serial = 0u;
				break;
			}
		}
		this.Mailing.ReportSerial.Count -= 1u;
		this.Mailing.ReportSerial.Change += 1u;
		this.MailDataRefresh(MailType.EMAIL_BATTLE);
		GameManager.OnRefresh(NetworkNews.Refresh_Mailing, null);
		GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(682u), 255, true);
	}

	// Token: 0x0600039A RID: 922 RVA: 0x00034AB4 File Offset: 0x00032CB4
	public void BattleReportSave(int id)
	{
		if (id >= 0 && (long)id < (long)((ulong)this.Mailing.ReportSerial.Count) && this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[id].Serial, out this.DoFavor.Combat))
		{
			this.BattleReportSave(this.DoFavor.Combat.SerialID);
		}
	}

	// Token: 0x0600039B RID: 923 RVA: 0x00034B38 File Offset: 0x00032D38
	public bool BattleReportSave(uint id)
	{
		if (this.Mailing.FavorSerial.Count == 100u)
		{
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(6019u), 255, true);
			return false;
		}
		CombatReport combatReport = this.CombatReportGet(id);
		if (combatReport != null)
		{
			GUIManager.Instance.ShowUILock(EUILock.Mailing_Save);
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_SAVEREPORT;
			messagePacket.AddSeqId();
			messagePacket.Add(0);
			messagePacket.Add(combatReport.SerialID);
			messagePacket.Send(false);
			return true;
		}
		return false;
	}

	// Token: 0x0600039C RID: 924 RVA: 0x00034BD4 File Offset: 0x00032DD4
	public bool SystemReportSave(uint id)
	{
		if (this.Mailing.FavorSerial.Count == 100u)
		{
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(6019u), 255, true);
			return false;
		}
		GUIManager.Instance.ShowUILock(EUILock.Mailing_Save);
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_SAVENOTICE;
		messagePacket.AddSeqId();
		messagePacket.Add(id);
		messagePacket.Send(false);
		return true;
	}

	// Token: 0x0600039D RID: 925 RVA: 0x00034C54 File Offset: 0x00032E54
	public void MailReportSave(int id)
	{
		MailContent mailContent = this.MailReportGet(id);
		if (mailContent != null)
		{
			this.MailReportSave(mailContent.SerialID);
		}
	}

	// Token: 0x0600039E RID: 926 RVA: 0x00034C7C File Offset: 0x00032E7C
	public void MailReportSave(int id, uint ReplyID, string ReplySender)
	{
		MailContent mailContent = this.MailReportGet(id, ReplyID, ReplySender);
		if (mailContent != null)
		{
			this.MailReportSave(mailContent.SerialID);
		}
	}

	// Token: 0x0600039F RID: 927 RVA: 0x00034CA8 File Offset: 0x00032EA8
	public bool MailReportSave(uint id)
	{
		if (this.Mailing.FavorSerial.Count == 100u)
		{
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(6019u), 255, true);
			return false;
		}
		MailContent mailContent = this.MailReportGet(id);
		if (mailContent != null)
		{
			GUIManager.Instance.ShowUILock(EUILock.Mailing_Save);
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_SAVEMAIL;
			messagePacket.AddSeqId();
			messagePacket.Add(mailContent.SerialID);
			messagePacket.Send(false);
			return true;
		}
		return false;
	}

	// Token: 0x060003A0 RID: 928 RVA: 0x00034D3C File Offset: 0x00032F3C
	public void CheckMailer()
	{
		if (NetworkManager.UserID != this.Mailing.UserId)
		{
			this.Mailing.MailSerial.Old = 0u;
			this.Mailing.ReportSerial.Old = 0u;
			this.SaveData<MailData>(ref this.Mailing, "Mail");
		}
		this.Mailing.UserId = NetworkManager.UserID;
		this.Mailing.Failed = false;
	}

	// Token: 0x060003A1 RID: 929 RVA: 0x00034DB0 File Offset: 0x00032FB0
	public MailContent MailReportGet(int id)
	{
		MailContent result;
		if (id >= 0 && (long)id < (long)((ulong)this.Mailing.MailSerial.Count) && this.Mailing.MailSerial.Mail.TryGetValue(this.Mailing.MailSerial.Inbox[id].Serial, out result))
		{
			return result;
		}
		return null;
	}

	// Token: 0x060003A2 RID: 930 RVA: 0x00034E18 File Offset: 0x00033018
	public MailContent MailReportGet(int id, uint ReplyID, string ReplySender)
	{
		SubContent subContent;
		List<uint> list;
		MailContent result;
		if (this.Mailing.MailSerial.SubMail.TryGetValue(ReplyID, out subContent) && subContent.Mail.TryGetValue(ReplySender, out list) && id >= 0 && id < list.Count && this.Mailing.MailSerial.Mail.TryGetValue(list[list.Count - id - 1], out result))
		{
			return result;
		}
		return null;
	}

	// Token: 0x060003A3 RID: 931 RVA: 0x00034E98 File Offset: 0x00033098
	public MailContent MailReportGet(uint id)
	{
		MailContent result;
		if (this.Mailing.MailSerial.Mail.TryGetValue(id, out result))
		{
			return result;
		}
		return null;
	}

	// Token: 0x060003A4 RID: 932 RVA: 0x00034EC8 File Offset: 0x000330C8
	public NoticeContent SystemReportGet(uint id)
	{
		NoticeContent result;
		if (this.Mailing.SystemSerial.Mail.TryGetValue(id, out result))
		{
			return result;
		}
		return null;
	}

	// Token: 0x060003A5 RID: 933 RVA: 0x00034EF8 File Offset: 0x000330F8
	public bool MailReportGet(ref MyFavorite MyFavor, bool Next)
	{
		switch (MyFavor.Kind)
		{
		case MailType.EMAIL_SYSTEM:
		{
			int num = 0;
			while ((long)num < (long)((ulong)this.Mailing.SystemSerial.Count))
			{
				if (this.Mailing.SystemSerial.Inbox[num].Serial == MyFavor.Serial)
				{
					if (Next && (long)num < (long)((ulong)(this.Mailing.SystemSerial.Count - 1u)))
					{
						MyFavor.Serial = this.Mailing.SystemSerial.Inbox[num + 1].Serial;
						MyFavor.Type = this.Mailing.SystemSerial.Inbox[num + 1].Type;
					}
					else
					{
						if (Next || num <= 0)
						{
							return false;
						}
						MyFavor.Serial = this.Mailing.SystemSerial.Inbox[num - 1].Serial;
						MyFavor.Type = this.Mailing.SystemSerial.Inbox[num - 1].Type;
					}
					break;
				}
				num++;
			}
			return this.MailReportGet(ref MyFavor);
		}
		case MailType.EMAIL_BATTLE:
		{
			int num2 = 0;
			while ((long)num2 < (long)((ulong)this.Mailing.ReportSerial.Count))
			{
				if (this.Mailing.ReportSerial.Inbox[num2].Serial == MyFavor.Serial)
				{
					if (Next && (long)num2 < (long)((ulong)(this.Mailing.ReportSerial.Count - 1u)))
					{
						MyFavor.Serial = this.Mailing.ReportSerial.Inbox[num2 + 1].Serial;
						MyFavor.Type = this.Mailing.ReportSerial.Inbox[num2 + 1].Type;
					}
					else
					{
						if (Next || num2 <= 0)
						{
							return false;
						}
						MyFavor.Serial = this.Mailing.ReportSerial.Inbox[num2 - 1].Serial;
						MyFavor.Type = this.Mailing.ReportSerial.Inbox[num2 - 1].Type;
					}
					break;
				}
				num2++;
			}
			return this.MailReportGet(ref MyFavor);
		}
		case MailType.EMAIL_LETTER:
		{
			int num3 = 0;
			while ((long)num3 < (long)((ulong)this.Mailing.MailSerial.Count))
			{
				if (this.Mailing.MailSerial.Inbox[num3].Serial == MyFavor.Serial)
				{
					if (Next && (long)num3 < (long)((ulong)(this.Mailing.MailSerial.Count - 1u)))
					{
						MyFavor.Serial = this.Mailing.MailSerial.Inbox[num3 + 1].Serial;
						MyFavor.Type = this.Mailing.MailSerial.Inbox[num3 + 1].Type;
					}
					else
					{
						if (Next || num3 <= 0)
						{
							return false;
						}
						MyFavor.Serial = this.Mailing.MailSerial.Inbox[num3 - 1].Serial;
						MyFavor.Type = this.Mailing.MailSerial.Inbox[num3 - 1].Type;
					}
					break;
				}
				num3++;
			}
			return this.MailReportGet(ref MyFavor);
		}
		case MailType.EMAIL_FAVORY:
		{
			int num4 = 0;
			while ((long)num4 < (long)((ulong)this.Mailing.FavorSerial.Count))
			{
				if (this.Mailing.FavorSerial.Inbox[num4].Serial == MyFavor.Serial && this.Mailing.FavorSerial.Inbox[num4].Type == MyFavor.Type)
				{
					if (Next && (long)num4 < (long)((ulong)(this.Mailing.FavorSerial.Count - 1u)))
					{
						MyFavor.Serial = this.Mailing.FavorSerial.Inbox[num4 + 1].Serial;
						MyFavor.Type = this.Mailing.FavorSerial.Inbox[num4 + 1].Type;
					}
					else
					{
						if (Next || num4 <= 0)
						{
							return false;
						}
						MyFavor.Serial = this.Mailing.FavorSerial.Inbox[num4 - 1].Serial;
						MyFavor.Type = this.Mailing.FavorSerial.Inbox[num4 - 1].Type;
					}
					break;
				}
				num4++;
			}
			return this.FavorReportGet(ref MyFavor);
		}
		default:
			return false;
		}
	}

	// Token: 0x060003A6 RID: 934 RVA: 0x000353D4 File Offset: 0x000335D4
	public bool MailReportGet(ref MyFavorite MyFavor, bool Next, uint ReplyID, string ReplySender)
	{
		SubContent subContent;
		List<uint> list;
		if (this.Mailing.MailSerial.SubMail.TryGetValue(ReplyID, out subContent) && subContent.Mail.TryGetValue(ReplySender, out list))
		{
			for (int i = list.Count - 1; i >= 0; i--)
			{
				if (list[i] == MyFavor.Serial)
				{
					if (!Next && i < list.Count - 1)
					{
						MyFavor.Serial = list[i + 1];
					}
					else
					{
						if (!Next || i <= 0)
						{
							return false;
						}
						MyFavor.Serial = list[i - 1];
					}
					return true;
				}
			}
		}
		return false;
	}

	// Token: 0x060003A7 RID: 935 RVA: 0x00035490 File Offset: 0x00033690
	public bool MailReportGet(ref MyFavorite MyFavor)
	{
		switch (MyFavor.Kind)
		{
		case MailType.EMAIL_SYSTEM:
			return this.Mailing.SystemSerial.Mail.TryGetValue(MyFavor.Serial, out MyFavor.System);
		case MailType.EMAIL_BATTLE:
			return this.Mailing.ReportSerial.Mail.TryGetValue(MyFavor.Serial, out MyFavor.Combat);
		case MailType.EMAIL_LETTER:
			return this.Mailing.MailSerial.Mail.TryGetValue(MyFavor.Serial, out MyFavor.Mail);
		case MailType.EMAIL_FAVORY:
			return this.FavorReportGet(ref MyFavor);
		default:
			return false;
		}
	}

	// Token: 0x060003A8 RID: 936 RVA: 0x00035538 File Offset: 0x00033738
	public bool MailSerialGet(ref MyFavorite MyFavor)
	{
		MyFavor.Kind = MyFavor.Type;
		MailType type = MyFavor.Type;
		if (type != MailType.EMAIL_BATTLE)
		{
			return type == MailType.EMAIL_LETTER && (this.Mailing.MailSerial.Mail.TryGetValue(MyFavor.Serial, out MyFavor.Mail) || this.FavorReportGet(ref MyFavor));
		}
		return this.Mailing.ReportSerial.Mail.TryGetValue(MyFavor.Serial, out MyFavor.Combat) || this.FavorReportGet(ref MyFavor);
	}

	// Token: 0x060003A9 RID: 937 RVA: 0x000355D8 File Offset: 0x000337D8
	public MyFavorite MailSerialGet(uint SerialID, MailType Type)
	{
		this.DoFavor.Type = Type;
		this.DoFavor.Serial = SerialID;
		this.MailSerialGet(ref this.DoFavor);
		return this.DoFavor;
	}

	// Token: 0x060003AA RID: 938 RVA: 0x00035608 File Offset: 0x00033808
	public MyFavorite FavorReportGet(int id)
	{
		if (id >= 0 && (long)id < (long)((ulong)this.Mailing.FavorSerial.Count))
		{
			switch (this.Mailing.FavorSerial.Inbox[id].Type)
			{
			case MailType.EMAIL_SYSTEM:
				if (this.Mailing.FavorSerial.System.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[id].Serial, out this.DoFavor.System))
				{
					return new MyFavorite(this.Mailing.FavorSerial.Inbox[id].Type, 0u)
					{
						Kind = MailType.EMAIL_FAVORY,
						System = this.DoFavor.System
					};
				}
				break;
			case MailType.EMAIL_BATTLE:
			{
				CombatReport combat;
				if (this.Mailing.FavorSerial.Combat.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[id].Serial, out combat))
				{
					return new MyFavorite(this.Mailing.FavorSerial.Inbox[id].Type, 0u)
					{
						Kind = MailType.EMAIL_FAVORY,
						Combat = combat
					};
				}
				break;
			}
			case MailType.EMAIL_LETTER:
			{
				MailContent mail;
				if (this.Mailing.FavorSerial.Mail.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[id].Serial, out mail))
				{
					return new MyFavorite(this.Mailing.FavorSerial.Inbox[id].Type, 0u)
					{
						Kind = MailType.EMAIL_FAVORY,
						Mail = mail
					};
				}
				break;
			}
			}
		}
		return null;
	}

	// Token: 0x060003AB RID: 939 RVA: 0x000357DC File Offset: 0x000339DC
	public NoticeContent SystemReportGet(int id)
	{
		NoticeContent result;
		if (id >= 0 && (long)id < (long)((ulong)this.Mailing.SystemSerial.Count) && this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Inbox[id].Serial, out result))
		{
			return result;
		}
		return null;
	}

	// Token: 0x060003AC RID: 940 RVA: 0x00035844 File Offset: 0x00033A44
	public CombatReport ReconReportGet(int id)
	{
		if (id >= 0 && id < this.Mailing.ReportSerial.AntiScout.Count && this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.AntiScout[id], out this.DoFavor.Combat))
		{
			return this.DoFavor.Combat;
		}
		return null;
	}

	// Token: 0x060003AD RID: 941 RVA: 0x000358BC File Offset: 0x00033ABC
	public CombatReport GatherReportGet(int id)
	{
		if (id >= 0 && id < this.Mailing.ReportSerial.Gather.Count && this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Gather[id], out this.DoFavor.Combat))
		{
			return this.DoFavor.Combat;
		}
		return null;
	}

	// Token: 0x060003AE RID: 942 RVA: 0x00035934 File Offset: 0x00033B34
	public CombatReport ResourceReportGet(int id)
	{
		if (id >= 0 && id < this.Mailing.ReportSerial.Resource.Count && this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Resource[id], out this.DoFavor.Combat))
		{
			return this.DoFavor.Combat;
		}
		return null;
	}

	// Token: 0x060003AF RID: 943 RVA: 0x000359AC File Offset: 0x00033BAC
	public bool FavorReportGet(ref MyFavorite MyFavor)
	{
		MyFavor.Kind = MailType.EMAIL_FAVORY;
		if (MyFavor.Serial >= 0u && this.Mailing.FavorSerial.Count > 0u)
		{
			switch (MyFavor.Type)
			{
			case MailType.EMAIL_SYSTEM:
				return this.Mailing.FavorSerial.System.Mail.TryGetValue(MyFavor.Serial, out MyFavor.System);
			case MailType.EMAIL_BATTLE:
				return this.Mailing.FavorSerial.Combat.Mail.TryGetValue(MyFavor.Serial, out MyFavor.Combat);
			case MailType.EMAIL_LETTER:
				return this.Mailing.FavorSerial.Mail.Mail.TryGetValue(MyFavor.Serial, out MyFavor.Mail);
			}
		}
		return false;
	}

	// Token: 0x060003B0 RID: 944 RVA: 0x00035A80 File Offset: 0x00033C80
	public CombatReport CombatReportGet(int id)
	{
		CombatReport result;
		if (id >= 0 && (long)id < (long)((ulong)this.Mailing.ReportSerial.Count) && this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[id].Serial, out result))
		{
			return result;
		}
		return null;
	}

	// Token: 0x060003B1 RID: 945 RVA: 0x00035AE8 File Offset: 0x00033CE8
	public CombatReport CombatReportGet(uint id)
	{
		CombatReport result;
		if (this.Mailing.ReportSerial.Mail.TryGetValue(id, out result))
		{
			return result;
		}
		return null;
	}

	// Token: 0x060003B2 RID: 946 RVA: 0x00035B18 File Offset: 0x00033D18
	public bool CombatReportGet(CombatReport CPR)
	{
		return this.Mailing.ReportSerial.Mail.TryGetValue(CPR.SerialID, out CPR);
	}

	// Token: 0x060003B3 RID: 947 RVA: 0x00035B38 File Offset: 0x00033D38
	public void InitialMailData()
	{
		this.DoFavor = new MyFavorite(MailType.EMAIL_MAX, 0u);
		this.CombatReport = new CombatReport[100];
		this.Mailing.MailPacksize = 1u;
		this.Mailing.MailSerial = new MailSerial();
		this.Mailing.FavorSerial = new FavorSerial();
		this.Mailing.ReportSerial = new ReportSerial();
		this.Mailing.SystemSerial = new SystemSerial();
	}

	// Token: 0x060003B4 RID: 948 RVA: 0x00035BAC File Offset: 0x00033DAC
	public bool CombatReportSelect(int id = -1, bool Refresh = true)
	{
		if (id == 0)
		{
			this.Mailing.ReportSerial.Select = 0u;
			this.Mailing.ReportSerial.Bulking = false;
			for (int i = 0; i < this.Mailing.ReportSerial.Inbox.Length; i++)
			{
				CombatReport combatReport;
				if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[i].Serial, out combatReport))
				{
					combatReport.BeChecked = false;
				}
			}
			if (Refresh)
			{
				this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_MAX);
			}
		}
		else if (id > 0)
		{
			if (this.Mailing.ReportSerial.Mail.TryGetValue((uint)id, out this.DoFavor.Combat))
			{
				this.Mailing.ReportSerial.Bulking = false;
				if (this.DoFavor.Combat.BeChecked = !this.DoFavor.Combat.BeChecked)
				{
					this.Mailing.ReportSerial.Select += 1u;
				}
				else
				{
					this.Mailing.ReportSerial.Select -= 1u;
				}
				return this.DoFavor.Combat.BeChecked;
			}
		}
		else
		{
			this.Mailing.ReportSerial.Select = 0u;
			for (int j = 0; j < this.Mailing.ReportSerial.Inbox.Length; j++)
			{
				CombatReport combatReport2;
				if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[j].Serial, out combatReport2))
				{
					combatReport2.BeChecked = true;
					this.Mailing.ReportSerial.Select += 1u;
					this.Mailing.ReportSerial.Bulking = true;
				}
			}
			if (Refresh)
			{
				this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_MAX);
			}
		}
		return false;
	}

	// Token: 0x060003B5 RID: 949 RVA: 0x00035DB8 File Offset: 0x00033FB8
	public bool SystemReportSelect(int id = -1, bool Refresh = true)
	{
		if (id == 0)
		{
			this.Mailing.SystemSerial.Select = 0u;
			this.Mailing.SystemSerial.Bulking = false;
			for (int i = 0; i < this.Mailing.SystemSerial.Inbox.Length; i++)
			{
				if (this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Inbox[i].Serial, out this.DoFavor.System))
				{
					this.DoFavor.System.BeChecked = false;
				}
			}
			if (Refresh)
			{
				this.MailingboxRefresh(MailType.EMAIL_SYSTEM, ReportSubSet.REPORTSet_MAX);
			}
		}
		else if (id > 0)
		{
			if (this.Mailing.SystemSerial.Mail.TryGetValue((uint)id, out this.DoFavor.System))
			{
				this.Mailing.SystemSerial.Bulking = false;
				if (this.DoFavor.System.BeChecked = !this.DoFavor.System.BeChecked)
				{
					this.Mailing.SystemSerial.Select += 1u;
				}
				else
				{
					this.Mailing.SystemSerial.Select -= 1u;
				}
				return this.DoFavor.System.BeChecked;
			}
		}
		else
		{
			this.Mailing.SystemSerial.Select = 0u;
			for (int j = 0; j < this.Mailing.SystemSerial.Inbox.Length; j++)
			{
				if (this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Inbox[j].Serial, out this.DoFavor.System))
				{
					this.Mailing.SystemSerial.Select += 1u;
					this.DoFavor.System.BeChecked = true;
					this.Mailing.SystemSerial.Bulking = true;
				}
			}
			if (Refresh)
			{
				this.MailingboxRefresh(MailType.EMAIL_SYSTEM, ReportSubSet.REPORTSet_MAX);
			}
		}
		return false;
	}

	// Token: 0x060003B6 RID: 950 RVA: 0x00035FE8 File Offset: 0x000341E8
	public bool MailReportSelect(int id = -1, bool Refresh = true)
	{
		if (id == 0)
		{
			this.Mailing.MailSerial.Select = 0u;
			this.Mailing.MailSerial.Bulking = false;
			int num = 0;
			while ((long)num < (long)((ulong)this.Mailing.MailSerial.Count))
			{
				MailContent mailContent;
				if (this.Mailing.MailSerial.Mail.TryGetValue(this.Mailing.MailSerial.Inbox[num].Serial, out mailContent))
				{
					if (mailContent.More > 1)
					{
						this.MailReportSelect(id, mailContent.ReplyID, mailContent.SenderName, false, true);
					}
					else
					{
						mailContent.BeChecked = false;
					}
				}
				num++;
			}
			if (Refresh)
			{
				this.MailingboxRefresh(MailType.EMAIL_LETTER, ReportSubSet.REPORTSet_MAX);
			}
		}
		else if (id > 0)
		{
			MailContent mailContent;
			if (this.Mailing.MailSerial.Mail.TryGetValue((uint)id, out mailContent))
			{
				this.Mailing.MailSerial.Bulking = false;
				mailContent.BeChecked = !mailContent.BeChecked;
				if (mailContent.More > 1)
				{
					this.MailReportSelect((!mailContent.BeChecked) ? 0 : -1, mailContent.ReplyID, mailContent.SenderName, false, false);
				}
				else if (mailContent.BeChecked)
				{
					this.Mailing.MailSerial.Select += 1u;
				}
				else
				{
					this.Mailing.MailSerial.Select -= 1u;
				}
				return mailContent.BeChecked;
			}
		}
		else
		{
			this.Mailing.MailSerial.Select = 0u;
			int num2 = 0;
			while ((long)num2 < (long)((ulong)this.Mailing.MailSerial.Count))
			{
				MailContent mailContent;
				if (this.Mailing.MailSerial.Mail.TryGetValue(this.Mailing.MailSerial.Inbox[num2].Serial, out mailContent))
				{
					if (mailContent.More > 1)
					{
						this.MailReportSelect(id, mailContent.ReplyID, mailContent.SenderName, false, false);
					}
					else
					{
						this.Mailing.MailSerial.Select += 1u;
						mailContent.BeChecked = true;
					}
				}
				num2++;
			}
			this.Mailing.MailSerial.Bulking = (this.Mailing.MailSerial.Select > 0u);
			if (Refresh)
			{
				this.MailingboxRefresh(MailType.EMAIL_LETTER, ReportSubSet.REPORTSet_MAX);
			}
		}
		return false;
	}

	// Token: 0x060003B7 RID: 951 RVA: 0x00036264 File Offset: 0x00034464
	public bool MailReportSelect(int id, uint ReplyID, string ReplySender, bool Refresh = true, bool bClear = true)
	{
		this.Mailing.MailSerial.Bulking = false;
		SubContent subContent;
		List<uint> list;
		if (this.Mailing.MailSerial.SubMail.TryGetValue(ReplyID, out subContent) && subContent.Mail.TryGetValue(ReplySender, out list))
		{
			if (id == 0)
			{
				for (int i = 0; i < list.Count; i++)
				{
					MailContent mailContent;
					if (this.Mailing.MailSerial.Mail.TryGetValue(list[i], out mailContent))
					{
						this.Mailing.MailSerial.Select -= 1u;
						mailContent.BeChecked = false;
					}
				}
				if (bClear)
				{
					this.Mailing.MailSerial.Select = 0u;
				}
				if (Refresh)
				{
					this.MailingboxRefresh(MailType.EMAIL_LETTER, ReportSubSet.REPORTSet_MAX);
				}
			}
			else if (id > 0)
			{
				MailContent mailContent;
				if (this.Mailing.MailSerial.Mail.TryGetValue((uint)id, out mailContent))
				{
					mailContent.BeChecked = !mailContent.BeChecked;
					if (mailContent.BeChecked)
					{
						this.Mailing.MailSerial.Select += 1u;
					}
					else
					{
						this.Mailing.MailSerial.Select -= 1u;
					}
					return mailContent.BeChecked;
				}
			}
			else
			{
				if (bClear)
				{
					this.Mailing.MailSerial.Select = 0u;
				}
				for (int j = 0; j < list.Count; j++)
				{
					MailContent mailContent;
					if (this.Mailing.MailSerial.Mail.TryGetValue(list[j], out mailContent))
					{
						this.Mailing.MailSerial.Select += 1u;
						mailContent.BeChecked = true;
					}
				}
				if (Refresh)
				{
					this.MailingboxRefresh(MailType.EMAIL_LETTER, ReportSubSet.REPORTSet_MAX);
				}
			}
		}
		return false;
	}

	// Token: 0x060003B8 RID: 952 RVA: 0x00036444 File Offset: 0x00034644
	public bool FavorReportSelect(int id, bool All = false, bool Refresh = true)
	{
		if (id >= 0 && (this.DoMeAFavor = this.FavorReportGet(id)) != null)
		{
			this.Mailing.FavorSerial.Bulking = false;
			switch (this.DoMeAFavor.Type)
			{
			case MailType.EMAIL_SYSTEM:
				if (this.DoMeAFavor.System.BeChecked = !this.DoMeAFavor.System.BeChecked)
				{
					this.Mailing.FavorSerial.Select += 1u;
				}
				else
				{
					this.Mailing.FavorSerial.Select -= 1u;
				}
				return this.DoMeAFavor.System.BeChecked;
			case MailType.EMAIL_BATTLE:
				if (this.DoMeAFavor.Combat.BeChecked = !this.DoMeAFavor.Combat.BeChecked)
				{
					this.Mailing.FavorSerial.Select += 1u;
				}
				else
				{
					this.Mailing.FavorSerial.Select -= 1u;
				}
				return this.DoMeAFavor.Combat.BeChecked;
			case MailType.EMAIL_LETTER:
				if (this.DoMeAFavor.Mail.BeChecked = !this.DoMeAFavor.Mail.BeChecked)
				{
					this.Mailing.FavorSerial.Select += 1u;
				}
				else
				{
					this.Mailing.FavorSerial.Select -= 1u;
				}
				return this.DoMeAFavor.Mail.BeChecked;
			}
		}
		else if (id < 0)
		{
			if (All)
			{
				this.Mailing.FavorSerial.Select = 0u;
				for (int i = 0; i < this.Mailing.FavorSerial.Inbox.Length; i++)
				{
					MyFavorite myFavorite;
					if ((myFavorite = this.FavorReportGet(i)) != null)
					{
						if (myFavorite.Combat != null)
						{
							myFavorite.Combat.BeChecked = true;
						}
						else if (myFavorite.Mail != null)
						{
							myFavorite.Mail.BeChecked = true;
						}
						else if (myFavorite.System != null)
						{
							myFavorite.System.BeChecked = true;
						}
						this.Mailing.FavorSerial.Bulking = true;
						this.Mailing.FavorSerial.Select += 1u;
					}
				}
			}
			else
			{
				this.Mailing.FavorSerial.Select = 0u;
				this.Mailing.FavorSerial.Bulking = false;
				for (int j = 0; j < this.Mailing.FavorSerial.Inbox.Length; j++)
				{
					MyFavorite myFavorite;
					if ((myFavorite = this.FavorReportGet(j)) != null)
					{
						if (myFavorite.Combat != null)
						{
							myFavorite.Combat.BeChecked = false;
						}
						else if (myFavorite.Mail != null)
						{
							myFavorite.Mail.BeChecked = false;
						}
						else if (myFavorite.System != null)
						{
							myFavorite.System.BeChecked = false;
						}
					}
				}
			}
		}
		if (Refresh)
		{
			this.MailingboxRefresh(MailType.EMAIL_FAVORY, ReportSubSet.REPORTSet_MAX);
		}
		return false;
	}

	// Token: 0x060003B9 RID: 953 RVA: 0x00036780 File Offset: 0x00034980
	public void SaveMail(MailType MT, bool Force)
	{
		if (!Force)
		{
			return;
		}
		if (MT == MailType.EMAIL_BATTLE)
		{
			this.SaveData<MailData>(ref this.Mailing, "Mail");
		}
	}

	// Token: 0x060003BA RID: 954 RVA: 0x000367B0 File Offset: 0x000349B0
	public void MailDataRefresh(MailType Type)
	{
		if (this.DoFavor == null)
		{
			this.DoFavor = new MyFavorite(MailType.EMAIL_MAX, 0u);
		}
		if (Type == MailType.EMAIL_BATTLE)
		{
			this.Mailing.ReportSerial.GatheringID = ((this.Mailing.ReportSerial.Gather.Count <= 0) ? 0u : this.Mailing.ReportSerial.Gather[this.Mailing.ReportSerial.Gather.Count - 1]);
			this.Mailing.ReportSerial.ResourceID = ((this.Mailing.ReportSerial.Resource.Count <= 0) ? 0u : this.Mailing.ReportSerial.Resource[this.Mailing.ReportSerial.Resource.Count - 1]);
			this.Mailing.ReportSerial.AntiScoutID = ((this.Mailing.ReportSerial.AntiScout.Count <= 0) ? 0u : this.Mailing.ReportSerial.AntiScout[this.Mailing.ReportSerial.AntiScout.Count - 1]);
			CombatReport combatReport = null;
			CombatReport combatReport2 = null;
			CombatReport combatReport3 = null;
			ushort num = 0;
			while ((int)num < this.Mailing.ReportSerial.Inbox.Length)
			{
				if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[(int)num].Serial, out this.DoFavor.Combat))
				{
					if (this.DoFavor.Combat.Type == CombatCollectReport.CCR_COLLECT)
					{
						if (this.Mailing.ReportSerial.Gather.Count > 0 && this.DoFavor.Combat.SerialID != this.Mailing.ReportSerial.Gather[this.Mailing.ReportSerial.Gather.Count - 1])
						{
							this.Mailing.ReportSerial.Inbox[(int)num].Serial = 0u;
							if (this.Mailing.ReportSerial.Count <= 0u)
							{
								this.ResetMail();
								return;
							}
							this.Mailing.ReportSerial.Count -= 1u;
						}
						else
						{
							combatReport2 = this.DoFavor.Combat;
							combatReport2.UnSeen = 0;
						}
					}
					else if (this.DoFavor.Combat.Type == CombatCollectReport.CCR_RESOURCE)
					{
						if (this.DoFavor.Combat.SerialID != this.Mailing.ReportSerial.ResourceID)
						{
							this.Mailing.ReportSerial.Inbox[(int)num].Serial = 0u;
							if (this.Mailing.ReportSerial.Count > 0u)
							{
								this.Mailing.ReportSerial.Count -= 1u;
							}
						}
						else
						{
							combatReport = this.DoFavor.Combat;
							combatReport.UnSeen = 0;
						}
					}
					else if (this.DoFavor.Combat.Type == CombatCollectReport.CCR_RECON)
					{
						if (this.DoFavor.Combat.SerialID != this.Mailing.ReportSerial.AntiScoutID)
						{
							this.Mailing.ReportSerial.Inbox[(int)num].Serial = 0u;
							if (this.Mailing.ReportSerial.Count > 0u)
							{
								this.Mailing.ReportSerial.Count -= 1u;
							}
						}
						else
						{
							combatReport3 = this.DoFavor.Combat;
							combatReport3.UnSeen = 0;
						}
					}
				}
				num += 1;
			}
			for (int i = this.Mailing.ReportSerial.Gather.Count; i > 0; i--)
			{
				if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Gather[i - 1], out this.DoFavor.Combat))
				{
					this.DoFavor.Combat.MoreIndex = (byte)(this.Mailing.ReportSerial.Gather.Count - i);
					this.DoFavor.Combat.More = (byte)this.Mailing.ReportSerial.Gather.Count;
					if (!this.DoFavor.Combat.BeRead && combatReport2 != null)
					{
						CombatReport combatReport4 = combatReport2;
						combatReport4.UnSeen += 1;
					}
				}
			}
			for (int j = this.Mailing.ReportSerial.Resource.Count; j > 0; j--)
			{
				if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Resource[j - 1], out this.DoFavor.Combat))
				{
					this.DoFavor.Combat.MoreIndex = (byte)(this.Mailing.ReportSerial.Resource.Count - j);
					this.DoFavor.Combat.More = (byte)this.Mailing.ReportSerial.Resource.Count;
					if (!this.DoFavor.Combat.BeRead && combatReport != null)
					{
						CombatReport combatReport5 = combatReport;
						combatReport5.UnSeen += 1;
					}
				}
			}
			for (int k = this.Mailing.ReportSerial.AntiScout.Count; k > 0; k--)
			{
				if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.AntiScout[k - 1], out this.DoFavor.Combat))
				{
					this.DoFavor.Combat.MoreIndex = (byte)(this.Mailing.ReportSerial.AntiScout.Count - k);
					this.DoFavor.Combat.More = (byte)this.Mailing.ReportSerial.AntiScout.Count;
					if (!this.DoFavor.Combat.BeRead && combatReport3 != null)
					{
						CombatReport combatReport6 = combatReport3;
						combatReport6.UnSeen += 1;
					}
				}
			}
			this.Mailing.ReportSerial.Sort();
			this.Mailing.ReportSerial.Unseen = 0u;
			if ((ulong)this.Mailing.ReportSerial.Count <= (ulong)((long)this.Mailing.ReportSerial.Inbox.Length))
			{
				ushort num2 = 0;
				while ((uint)num2 < this.Mailing.ReportSerial.Count)
				{
					if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[(int)num2].Serial, out this.DoFavor.Combat))
					{
						this.DoFavor.Combat.Index = (byte)num2;
						if (this.DoFavor.Combat.More > 1)
						{
							this.Mailing.ReportSerial.Unseen += (uint)this.DoFavor.Combat.UnSeen;
						}
						else if (!this.DoFavor.Combat.BeRead)
						{
							this.Mailing.ReportSerial.Unseen += 1u;
						}
					}
					num2 += 1;
				}
			}
		}
		else if (Type == MailType.EMAIL_FAVORY)
		{
			this.Mailing.FavorSerial.Sort();
			this.Mailing.FavorSerial.Unseen = 0u;
			byte b = 0;
			while (b < (byte)this.Mailing.FavorSerial.Count && (int)b < this.Mailing.FavorSerial.Inbox.Length)
			{
				switch (this.Mailing.FavorSerial.Inbox[(int)b].Type)
				{
				case MailType.EMAIL_SYSTEM:
					if (this.Mailing.FavorSerial.System.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[(int)b].Serial, out this.DoFavor.System))
					{
						this.DoFavor.System.Index = b;
						if (!this.DoFavor.System.BeRead)
						{
							this.Mailing.FavorSerial.Unseen += 1u;
						}
					}
					break;
				case MailType.EMAIL_BATTLE:
					if (this.Mailing.FavorSerial.Combat.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[(int)b].Serial, out this.DoFavor.Combat))
					{
						this.DoFavor.Combat.Index = b;
						if (!this.DoFavor.Combat.BeRead)
						{
							this.Mailing.FavorSerial.Unseen += 1u;
						}
					}
					break;
				case MailType.EMAIL_LETTER:
					if (this.Mailing.FavorSerial.Mail.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[(int)b].Serial, out this.DoFavor.Mail))
					{
						this.DoFavor.Mail.Index = b;
						if (!this.DoFavor.Mail.BeRead)
						{
							this.Mailing.FavorSerial.Unseen += 1u;
						}
					}
					break;
				}
				b += 1;
			}
		}
		else if (Type == MailType.EMAIL_LETTER)
		{
			ushort num3 = 0;
			while ((int)num3 < this.Mailing.MailSerial.Inbox.Length)
			{
				SubContent subContent;
				List<uint> list;
				if (this.Mailing.MailSerial.Mail.TryGetValue(this.Mailing.MailSerial.Inbox[(int)num3].Serial, out this.DoFavor.Mail) && (this.DoFavor.Mail.MailType == 4 || this.DoFavor.Mail.MailType == 0) && this.Mailing.MailSerial.SubMail.TryGetValue(this.DoFavor.Mail.ReplyID, out subContent) && subContent.Mail.TryGetValue(this.DoFavor.Mail.SenderName, out list) && list.Count > 0)
				{
					if (this.DoFavor.Mail.SerialID != list[list.Count - 1])
					{
						this.Mailing.MailSerial.Inbox[(int)num3].Serial = 0u;
						if (this.Mailing.MailSerial.Count <= 0u)
						{
							this.ResetMail();
							return;
						}
						this.Mailing.MailSerial.Count -= 1u;
					}
					else
					{
						this.DoFavor.Mail.UnSeen = 0;
						for (int l = list.Count; l > 0; l--)
						{
							MailContent mailContent;
							if (this.Mailing.MailSerial.Mail.TryGetValue(list[l - 1], out mailContent))
							{
								mailContent.MoreIndex = (byte)(list.Count - l);
								mailContent.More = (byte)list.Count;
								if (!mailContent.BeRead)
								{
									MailContent mail = this.DoFavor.Mail;
									mail.UnSeen += 1;
								}
							}
						}
					}
				}
				num3 += 1;
			}
			this.Mailing.MailSerial.Sort();
			this.Mailing.MailSerial.Unseen = 0u;
			int num4 = 0;
			while ((long)num4 < (long)((ulong)this.Mailing.MailSerial.Count) && num4 < 100)
			{
				if (this.Mailing.MailSerial.Mail.TryGetValue(this.Mailing.MailSerial.Inbox[num4].Serial, out this.DoFavor.Mail))
				{
					this.DoFavor.Mail.Index = (byte)num4;
					if (this.DoFavor.Mail.More > 1)
					{
						this.Mailing.MailSerial.Unseen += (uint)this.DoFavor.Mail.UnSeen;
					}
					else if (!this.DoFavor.Mail.BeRead)
					{
						this.Mailing.MailSerial.Unseen += 1u;
					}
				}
				num4++;
			}
		}
		else if (Type == MailType.EMAIL_SYSTEM)
		{
			this.Mailing.SystemSerial.Sort();
			this.Mailing.SystemSerial.Unseen = 0u;
			if ((ulong)this.Mailing.SystemSerial.Count <= (ulong)((long)this.Mailing.SystemSerial.Inbox.Length))
			{
				byte b2 = 0;
				while ((uint)b2 < this.Mailing.SystemSerial.Count)
				{
					if (this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Inbox[(int)b2].Serial, out this.DoFavor.System))
					{
						this.DoFavor.System.Index = b2;
						if (!this.DoFavor.System.BeRead)
						{
							this.Mailing.SystemSerial.Unseen += 1u;
						}
					}
					b2 += 1;
				}
			}
		}
	}

	// Token: 0x060003BB RID: 955 RVA: 0x000375C0 File Offset: 0x000357C0
	public bool CheckMail(MailType MT)
	{
		return false;
	}

	// Token: 0x060003BC RID: 956 RVA: 0x000375C4 File Offset: 0x000357C4
	public bool CheckMail(Protocol Protocol = Protocol._MSG_REQUEST_MAILINFO)
	{
		return false;
	}

	// Token: 0x060003BD RID: 957 RVA: 0x000375D4 File Offset: 0x000357D4
	public bool LoadMail(MailType MT)
	{
		try
		{
			Directory.CreateDirectory(string.Format("{0}/Data/{1}", AssetManager.persistentDataPath, NetworkManager.UserID));
			try
			{
				using (FileStream fileStream = new FileStream(string.Format("{0}/Data/{1}/{2}", AssetManager.persistentDataPath, NetworkManager.UserID, MailType.EMAIL_LETTER), FileMode.OpenOrCreate, FileAccess.Read))
				{
					if (fileStream.Length > 0L)
					{
						using (BinaryReader binaryReader = new BinaryReader(fileStream))
						{
							this.DoFavor.Type = MailType.EMAIL_LETTER;
							if (binaryReader.ReadByte() != 7)
							{
								throw new Exception();
							}
							this.Mailing.MailSerial.Disavow = false;
							this.Mailing.MailSerial.TotalSave = binaryReader.ReadUInt32();
							this.Mailing.MailSerial.UnreadSave = binaryReader.ReadUInt32();
							this.Mailing.MailSerial.MaxSave = binaryReader.ReadUInt32();
							this.Mailing.MailSerial.Fetch = binaryReader.ReadUInt32();
							this.Mailing.MailSerial.New = binaryReader.ReadUInt32();
							this.Mailing.MailSerial.Old = binaryReader.ReadUInt32();
							this.Mailing.MailSerial.Count = binaryReader.ReadUInt32();
							this.Mailing.MailSerial.LastSave = (this.Mailing.MailSerial.Fetch = (this.Mailing.MailSerial.New = binaryReader.ReadUInt32()));
							if (this.Mailing.MailSerial.Count > 0u && (ulong)this.Mailing.MailSerial.Count <= (ulong)((long)this.Mailing.MailSerial.Inbox.Length))
							{
								ushort num = 0;
								while ((uint)num < this.Mailing.MailSerial.Count && (int)num < this.Mailing.MailSerial.Inbox.Length)
								{
									this.Mailing.MailSerial.Count += (uint)binaryReader.ReadByte();
									this.Mailing.MailSerial.Inbox[(int)num].Serial = binaryReader.ReadUInt32();
									this.Mailing.MailSerial.Inbox[(int)num].Type = (MailType)binaryReader.ReadByte();
									this.Mailing.MailSerial.Inbox[(int)num].Timing = binaryReader.ReadInt64();
									this.Mailing.MailSerial.Inbox[(int)num].Change = binaryReader.ReadBoolean();
									this.DoFavor.Type = this.Mailing.MailSerial.Inbox[(int)num].Type;
									if (binaryReader.ReadBoolean() && this.LoadMail(MailType.EMAIL_LETTER, this.Mailing.MailSerial.Inbox[(int)num].Serial) && this.DoFavor.Mail.SerialID == this.Mailing.MailSerial.Inbox[(int)num].Serial)
									{
										if (this.DoFavor.Mail.ReplyID > 0u && (this.DoFavor.Mail.MailType == 0 || this.DoFavor.Mail.MailType == 4))
										{
											SubContent subContent;
											if (!this.Mailing.MailSerial.SubMail.TryGetValue(this.DoFavor.Mail.ReplyID, out subContent))
											{
												this.Mailing.MailSerial.SubMail.Add(this.DoFavor.Mail.ReplyID, subContent = new SubContent());
											}
											List<uint> list;
											if (!subContent.Mail.TryGetValue(this.DoFavor.Mail.SenderName, out list))
											{
												subContent.Mail.Add(this.DoFavor.Mail.SenderName, list = new List<uint>());
											}
											list.Add(this.DoFavor.Mail.SerialID);
											list.Sort();
											this.DoFavor.Mail.More = (byte)list.Count;
										}
										this.Mailing.MailSerial.Matrix[this.DoFavor.Mail.SerialID] = new SerialBox(this.DoFavor.Mail.SerialID, this.DoFavor.Mail.Flag, this.DoFavor.Mail.BeRead, this.DoFavor.Mail.BeSave, true, true);
										this.Mailing.MailSerial.Mail[this.DoFavor.Mail.SerialID] = this.DoFavor.Mail;
									}
									else
									{
										MailBox[] inbox = this.Mailing.MailSerial.Inbox;
										ushort num2 = num;
										num = num2 - 1;
										inbox[(int)num2].Serial = 0u;
										this.Mailing.MailSerial.Count -= 1u;
									}
									num += 1;
								}
								if ((ulong)this.Mailing.MailSerial.Count > (ulong)((long)this.Mailing.MailSerial.Inbox.Length))
								{
									this.Mailing.MailSerial.Count = (uint)this.Mailing.MailSerial.Inbox.Length;
								}
							}
							else
							{
								this.Mailing.MailSerial.Count = 0u;
							}
							uint num3 = binaryReader.ReadUInt32();
							if (num3 > 0u)
							{
								if ((ulong)num3 > (ulong)((long)this.Mailing.FavorSerial.Inbox.Length - (long)((ulong)this.Mailing.FavorSerial.Count)))
								{
									throw new Exception();
								}
								ushort num4 = 0;
								while ((uint)num4 < num3)
								{
									Debug.Log(num4);
									this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial = binaryReader.ReadUInt32();
									this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Type = (MailType)binaryReader.ReadByte();
									this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Timing = binaryReader.ReadInt64();
									this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Change = binaryReader.ReadBoolean();
									this.DoFavor.Type = this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Type;
									if (this.LoadFavorMail(MailType.EMAIL_FAVORY, this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial) && this.DoFavor.Mail.SerialID == this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial)
									{
										this.Mailing.MailSerial.Matrix[this.DoFavor.Mail.SerialID] = new SerialBox(this.DoFavor.Mail.SerialID, this.DoFavor.Mail.Flag, this.DoFavor.Mail.BeRead, this.DoFavor.Mail.BeSave, true, true);
										this.Mailing.FavorSerial.Mail.Mail[this.DoFavor.Mail.SerialID] = this.DoFavor.Mail;
										this.Mailing.FavorSerial.Count += 1u;
									}
									else
									{
										this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial = 0u;
									}
									num4 += 1;
								}
							}
							if (this.Mailing.MailSerial.TotalSave + this.Mailing.MailSerial.UnreadSave + this.Mailing.MailSerial.MaxSave != binaryReader.ReadUInt32())
							{
								this.Mailing.MailSerial.Disavow = true;
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				this.Mailing.MailSerial.Disavow = true;
			}
			if (this.Mailing.MailSerial.Disavow)
			{
				this.ClearMail(MailType.EMAIL_LETTER, false);
			}
			try
			{
				using (FileStream fileStream2 = new FileStream(string.Format("{0}/Data/{1}/{2}", AssetManager.persistentDataPath, NetworkManager.UserID, MailType.EMAIL_BATTLE), FileMode.OpenOrCreate, FileAccess.Read))
				{
					if (fileStream2.Length > 0L)
					{
						using (BinaryReader binaryReader2 = new BinaryReader(fileStream2))
						{
							this.Mailing.ReportSerial.Disavow = false;
							if (binaryReader2.ReadByte() != 7)
							{
								throw new Exception();
							}
							this.Mailing.ReportSerial.TotalSave = binaryReader2.ReadUInt32();
							this.Mailing.ReportSerial.UnreadSave = binaryReader2.ReadUInt32();
							this.Mailing.ReportSerial.MaxSave = binaryReader2.ReadUInt32();
							this.Mailing.ReportSerial.Fetch = binaryReader2.ReadUInt32();
							this.Mailing.ReportSerial.New = binaryReader2.ReadUInt32();
							this.Mailing.ReportSerial.Old = binaryReader2.ReadUInt32();
							this.Mailing.ReportSerial.Count = binaryReader2.ReadUInt32();
							this.Mailing.ReportSerial.LastSave = (this.Mailing.ReportSerial.Fetch = (this.Mailing.ReportSerial.New = binaryReader2.ReadUInt32()));
							this.Mailing.ReportSerial.Count = binaryReader2.ReadUInt32();
							if (this.Mailing.ReportSerial.Count > 0u && (ulong)this.Mailing.ReportSerial.Count <= (ulong)((long)this.Mailing.ReportSerial.Inbox.Length))
							{
								ushort num5 = 0;
								while ((uint)num5 < this.Mailing.ReportSerial.Count)
								{
									Debug.Log(num5);
									this.Mailing.ReportSerial.Inbox[(int)num5].Serial = binaryReader2.ReadUInt32();
									this.Mailing.ReportSerial.Inbox[(int)num5].Type = (MailType)binaryReader2.ReadByte();
									this.Mailing.ReportSerial.Inbox[(int)num5].Timing = binaryReader2.ReadInt64();
									this.Mailing.ReportSerial.Inbox[(int)num5].Change = binaryReader2.ReadBoolean();
									this.DoFavor.Type = this.Mailing.ReportSerial.Inbox[(int)num5].Type;
									if (this.LoadMail(MailType.EMAIL_BATTLE, this.Mailing.ReportSerial.Inbox[(int)num5].Serial) && this.DoFavor.Combat.SerialID == this.Mailing.ReportSerial.Inbox[(int)num5].Serial)
									{
										this.Mailing.ReportSerial.Matrix[this.DoFavor.Combat.SerialID] = new SerialBox(this.DoFavor.Combat.SerialID, this.DoFavor.Combat.Flag, this.DoFavor.Combat.BeRead, this.DoFavor.Combat.BeSave, true, true);
										this.Mailing.ReportSerial.Mail[this.DoFavor.Combat.SerialID] = this.DoFavor.Combat;
									}
									else
									{
										MailBox[] inbox2 = this.Mailing.ReportSerial.Inbox;
										ushort num6 = num5;
										num5 = num6 - 1;
										inbox2[(int)num6].Serial = 0u;
										this.Mailing.ReportSerial.Count -= 1u;
									}
									num5 += 1;
								}
							}
							else
							{
								this.Mailing.ReportSerial.Count = 0u;
							}
							uint num7 = binaryReader2.ReadUInt32();
							if (num7 > 0u)
							{
								if ((ulong)num7 > (ulong)((long)this.Mailing.FavorSerial.Inbox.Length - (long)((ulong)this.Mailing.FavorSerial.Count)))
								{
									throw new Exception();
								}
								ushort num8 = 0;
								while ((uint)num8 < num7)
								{
									this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial = binaryReader2.ReadUInt32();
									this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Type = (MailType)binaryReader2.ReadByte();
									this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Timing = binaryReader2.ReadInt64();
									this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Change = binaryReader2.ReadBoolean();
									this.DoFavor.Type = this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Type;
									if (this.LoadFavorMail(MailType.EMAIL_FAVORY, this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial) && this.DoFavor.Combat.SerialID == this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial)
									{
										this.Mailing.ReportSerial.Matrix[this.DoFavor.Combat.SerialID] = new SerialBox(this.DoFavor.Combat.SerialID, this.DoFavor.Combat.Flag, this.DoFavor.Combat.BeRead, this.DoFavor.Combat.BeSave, true, true);
										this.Mailing.FavorSerial.Combat.Mail[this.DoFavor.Combat.SerialID] = this.DoFavor.Combat;
										this.Mailing.FavorSerial.Count += 1u;
									}
									else
									{
										this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial = 0u;
									}
									num8 += 1;
								}
							}
							if (this.Mailing.ReportSerial.TotalSave + this.Mailing.ReportSerial.UnreadSave + this.Mailing.ReportSerial.MaxSave != binaryReader2.ReadUInt32())
							{
								this.Mailing.ReportSerial.Disavow = true;
							}
						}
					}
				}
			}
			catch (Exception ex2)
			{
				this.Mailing.ReportSerial.Disavow = true;
			}
			if (this.Mailing.ReportSerial.Disavow)
			{
				this.ClearMail(MailType.EMAIL_BATTLE, false);
			}
			try
			{
				using (FileStream fileStream3 = new FileStream(string.Format("{0}/Data/{1}/{2}", AssetManager.persistentDataPath, NetworkManager.UserID, MailType.EMAIL_SYSTEM), FileMode.OpenOrCreate, FileAccess.Read))
				{
					if (fileStream3.Length > 0L)
					{
						using (BinaryReader binaryReader3 = new BinaryReader(fileStream3))
						{
							this.Mailing.SystemSerial.Disavow = false;
							if (binaryReader3.ReadByte() != 7)
							{
								throw new Exception();
							}
							this.Mailing.SystemSerial.TotalSave = binaryReader3.ReadUInt32();
							this.Mailing.SystemSerial.UnreadSave = binaryReader3.ReadUInt32();
							this.Mailing.SystemSerial.MaxSave = binaryReader3.ReadUInt32();
							this.Mailing.SystemSerial.Fetch = binaryReader3.ReadUInt32();
							this.Mailing.SystemSerial.New = binaryReader3.ReadUInt32();
							this.Mailing.SystemSerial.Old = binaryReader3.ReadUInt32();
							this.Mailing.SystemSerial.Count = binaryReader3.ReadUInt32();
							this.Mailing.SystemSerial.LastSave = (this.Mailing.SystemSerial.Fetch = (this.Mailing.SystemSerial.New = binaryReader3.ReadUInt32()));
							this.Mailing.SystemSerial.Count = binaryReader3.ReadUInt32();
							if (this.Mailing.SystemSerial.Count > 0u && (ulong)this.Mailing.SystemSerial.Count <= (ulong)((long)this.Mailing.SystemSerial.Inbox.Length))
							{
								ushort num9 = 0;
								while ((uint)num9 < this.Mailing.SystemSerial.Count)
								{
									Debug.Log(num9);
									this.Mailing.SystemSerial.Inbox[(int)num9].Serial = binaryReader3.ReadUInt32();
									this.Mailing.SystemSerial.Inbox[(int)num9].Type = (MailType)binaryReader3.ReadByte();
									this.Mailing.SystemSerial.Inbox[(int)num9].Timing = binaryReader3.ReadInt64();
									this.Mailing.SystemSerial.Inbox[(int)num9].Change = binaryReader3.ReadBoolean();
									this.DoFavor.Type = this.Mailing.SystemSerial.Inbox[(int)num9].Type;
									if (this.LoadMail(MailType.EMAIL_SYSTEM, this.Mailing.SystemSerial.Inbox[(int)num9].Serial) && this.DoFavor.System.SerialID == this.Mailing.SystemSerial.Inbox[(int)num9].Serial)
									{
										this.Mailing.SystemSerial.Matrix[this.DoFavor.System.SerialID] = new SerialBox(this.DoFavor.System.SerialID, this.DoFavor.System.Flag, this.DoFavor.System.BeRead, this.DoFavor.System.BeSave, true, true);
										this.Mailing.SystemSerial.Mail[this.DoFavor.System.SerialID] = this.DoFavor.System;
									}
									else
									{
										MailBox[] inbox3 = this.Mailing.SystemSerial.Inbox;
										ushort num10 = num9;
										num9 = num10 - 1;
										inbox3[(int)num10].Serial = 0u;
										this.Mailing.SystemSerial.Count -= 1u;
									}
									num9 += 1;
								}
							}
							uint num11 = binaryReader3.ReadUInt32();
							if (num11 > 0u)
							{
								if ((ulong)num11 > (ulong)((long)this.Mailing.FavorSerial.Inbox.Length - (long)((ulong)this.Mailing.FavorSerial.Count)))
								{
									throw new Exception();
								}
								ushort num12 = 0;
								while ((uint)num12 < num11)
								{
									this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial = binaryReader3.ReadUInt32();
									this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Type = (MailType)binaryReader3.ReadByte();
									this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Timing = binaryReader3.ReadInt64();
									this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Change = binaryReader3.ReadBoolean();
									this.DoFavor.Type = this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Type;
									if (this.LoadFavorMail(MailType.EMAIL_FAVORY, this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial) && this.DoFavor.System.SerialID == this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial)
									{
										this.Mailing.SystemSerial.Matrix[this.DoFavor.System.SerialID] = new SerialBox(this.DoFavor.System.SerialID, this.DoFavor.System.Flag, this.DoFavor.System.BeRead, this.DoFavor.System.BeSave, true, true);
										this.Mailing.FavorSerial.System.Mail[this.DoFavor.System.SerialID] = this.DoFavor.System;
										this.Mailing.FavorSerial.Count += 1u;
									}
									else
									{
										this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial = 0u;
									}
									num12 += 1;
								}
							}
							if (this.Mailing.SystemSerial.TotalSave + this.Mailing.SystemSerial.UnreadSave + this.Mailing.SystemSerial.MaxSave != binaryReader3.ReadUInt32())
							{
								this.Mailing.SystemSerial.Disavow = true;
							}
						}
					}
				}
			}
			catch (Exception ex3)
			{
				this.Mailing.SystemSerial.Disavow = true;
			}
			if (this.Mailing.SystemSerial.Disavow)
			{
				this.ClearMail(MailType.EMAIL_SYSTEM, false);
			}
		}
		catch (Exception ex4)
		{
		}
		this.MailDataRefresh(MailType.EMAIL_SYSTEM);
		this.MailDataRefresh(MailType.EMAIL_LETTER);
		this.MailDataRefresh(MailType.EMAIL_BATTLE);
		this.MailDataRefresh(MailType.EMAIL_FAVORY);
		return true;
	}

	// Token: 0x060003BE RID: 958 RVA: 0x00038E1C File Offset: 0x0003701C
	public bool SaveMail(MailType MT)
	{
		try
		{
			StringBuilder stringBuilder = new StringBuilder();
			stringBuilder.AppendFormat("{0}/Data/{1}/{2}", AssetManager.persistentDataPath, NetworkManager.UserID, MT);
			using (FileStream fileStream = new FileStream(stringBuilder.ToString(), FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.Read, 4096))
			{
				using (BinaryWriter binaryWriter = new BinaryWriter(fileStream))
				{
					binaryWriter.Write(7);
					if (MT == MailType.EMAIL_LETTER)
					{
						binaryWriter.Write(this.Mailing.MailSerial.Total);
						binaryWriter.Write(this.Mailing.MailSerial.Unread);
						binaryWriter.Write(this.Mailing.MailSerial.Max);
						binaryWriter.Write(this.Mailing.MailSerial.Fetch);
						binaryWriter.Write(this.Mailing.MailSerial.New);
						binaryWriter.Write(this.Mailing.MailSerial.Old);
						binaryWriter.Write(this.Mailing.MailSerial.Count);
						binaryWriter.Write(this.Mailing.MailSerial.LastSave);
						ushort num = 0;
						while ((uint)num < this.Mailing.MailSerial.Count)
						{
							if (this.Mailing.MailSerial.Mail.TryGetValue(this.Mailing.MailSerial.Inbox[(int)num].Serial, out this.DoFavor.Mail))
							{
								bool beKept = this.DoFavor.Mail.BeKept;
								SubContent subContent;
								List<uint> list;
								if ((this.DoFavor.Mail.MailType == 4 || this.DoFavor.Mail.MailType == 0) && this.DoFavor.Mail.More > 1 && this.Mailing.MailSerial.SubMail.TryGetValue(this.DoFavor.Mail.ReplyID, out subContent) && subContent.Mail.TryGetValue(this.DoFavor.Mail.SenderName, out list))
								{
									ushort num2 = 0;
									while ((int)num2 < list.Count - 1)
									{
										if (this.Mailing.MailSerial.Mail.TryGetValue(list[(int)num2], out this.DoFavor.Mail) && this.DoFavor.Mail.BeKept)
										{
											binaryWriter.Write(1);
											binaryWriter.Write(this.DoFavor.Mail.SerialID);
											binaryWriter.Write((byte)MT);
											binaryWriter.Write(this.DoFavor.Mail.Times);
											binaryWriter.Write(false);
											binaryWriter.Write(true);
										}
										num2 += 1;
									}
								}
								binaryWriter.Write(0);
								binaryWriter.Write(this.Mailing.MailSerial.Inbox[(int)num].Serial);
								binaryWriter.Write((byte)this.Mailing.MailSerial.Inbox[(int)num].Type);
								binaryWriter.Write(this.Mailing.MailSerial.Inbox[(int)num].Timing);
								binaryWriter.Write(this.Mailing.MailSerial.Inbox[(int)num].Change);
								binaryWriter.Write(beKept);
							}
							num += 1;
						}
						uint num3 = 0u;
						if (this.Mailing.FavorSerial.Count > 0u)
						{
							for (int i = (int)(this.Mailing.FavorSerial.Count - 1u); i >= 0; i--)
							{
								if (this.Mailing.FavorSerial.Inbox[i].Type == MT && this.Mailing.FavorSerial.Mail.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[i].Serial, out this.DoFavor.Mail) && this.DoFavor.Mail.BeKept)
								{
									num3 += 1u;
								}
							}
							binaryWriter.Write(num3);
							for (int j = (int)(this.Mailing.FavorSerial.Count - 1u); j >= 0; j--)
							{
								if (this.Mailing.FavorSerial.Inbox[j].Type == MT && this.Mailing.FavorSerial.Mail.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[j].Serial, out this.DoFavor.Mail) && this.DoFavor.Mail.BeKept)
								{
									binaryWriter.Write(this.Mailing.FavorSerial.Inbox[j].Serial);
									binaryWriter.Write((byte)this.Mailing.FavorSerial.Inbox[j].Type);
									binaryWriter.Write(this.Mailing.FavorSerial.Inbox[j].Timing);
									binaryWriter.Write(this.Mailing.FavorSerial.Inbox[j].Change);
								}
							}
						}
						else
						{
							binaryWriter.Write(num3);
						}
						binaryWriter.Write(this.Mailing.MailSerial.Total + this.Mailing.MailSerial.Unread + this.Mailing.MailSerial.Max);
					}
					else if (MT == MailType.EMAIL_SYSTEM)
					{
						binaryWriter.Write(this.Mailing.SystemSerial.Total);
						binaryWriter.Write(this.Mailing.SystemSerial.Unread);
						binaryWriter.Write(this.Mailing.SystemSerial.Max);
						binaryWriter.Write(this.Mailing.SystemSerial.Fetch);
						binaryWriter.Write(this.Mailing.SystemSerial.New);
						binaryWriter.Write(this.Mailing.SystemSerial.Old);
						binaryWriter.Write(this.Mailing.SystemSerial.Count);
						binaryWriter.Write(this.Mailing.SystemSerial.LastSave);
						uint num4 = 0u;
						if (this.Mailing.SystemSerial.Count > 0u)
						{
							for (int k = (int)(this.Mailing.SystemSerial.Count - 1u); k >= 0; k--)
							{
								if (this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Inbox[k].Serial, out this.DoFavor.System) && this.DoFavor.System.BeKept)
								{
									num4 += 1u;
								}
							}
							binaryWriter.Write(num4);
							for (int l = (int)(this.Mailing.SystemSerial.Count - 1u); l >= 0; l--)
							{
								if (this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Inbox[l].Serial, out this.DoFavor.System) && this.DoFavor.System.BeKept)
								{
									binaryWriter.Write(this.Mailing.SystemSerial.Inbox[l].Serial);
									binaryWriter.Write((byte)this.Mailing.SystemSerial.Inbox[l].Type);
									binaryWriter.Write(this.Mailing.SystemSerial.Inbox[l].Timing);
									binaryWriter.Write(this.Mailing.SystemSerial.Inbox[l].Change);
								}
							}
						}
						else
						{
							binaryWriter.Write(num4);
						}
						num4 = 0u;
						if (this.Mailing.FavorSerial.Count > 0u)
						{
							for (int m = (int)(this.Mailing.FavorSerial.Count - 1u); m >= 0; m--)
							{
								if (this.Mailing.FavorSerial.Inbox[m].Type == MT && this.Mailing.FavorSerial.System.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[m].Serial, out this.DoFavor.System) && this.DoFavor.System.BeKept)
								{
									num4 += 1u;
								}
							}
							binaryWriter.Write(num4);
							for (int n = (int)(this.Mailing.FavorSerial.Count - 1u); n >= 0; n--)
							{
								if (this.Mailing.FavorSerial.Inbox[n].Type == MT && this.Mailing.FavorSerial.System.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[n].Serial, out this.DoFavor.System) && this.DoFavor.System.BeKept)
								{
									binaryWriter.Write(this.Mailing.FavorSerial.Inbox[n].Serial);
									binaryWriter.Write((byte)this.Mailing.FavorSerial.Inbox[n].Type);
									binaryWriter.Write(this.Mailing.FavorSerial.Inbox[n].Timing);
									binaryWriter.Write(this.Mailing.FavorSerial.Inbox[n].Change);
								}
							}
						}
						else
						{
							binaryWriter.Write(num4);
						}
						binaryWriter.Write(this.Mailing.SystemSerial.Total + this.Mailing.SystemSerial.Unread + this.Mailing.SystemSerial.Max);
					}
					else if (MT == MailType.EMAIL_BATTLE)
					{
						binaryWriter.Write(this.Mailing.ReportSerial.Total);
						binaryWriter.Write(this.Mailing.ReportSerial.Unread);
						binaryWriter.Write(this.Mailing.ReportSerial.Max);
						binaryWriter.Write(this.Mailing.ReportSerial.Fetch);
						binaryWriter.Write(this.Mailing.ReportSerial.New);
						binaryWriter.Write(this.Mailing.ReportSerial.Old);
						binaryWriter.Write(this.Mailing.ReportSerial.Count);
						binaryWriter.Write(this.Mailing.ReportSerial.LastSave);
						uint num5 = 0u;
						if (this.Mailing.ReportSerial.Count > 0u)
						{
							for (int num6 = (int)(this.Mailing.ReportSerial.Count - 1u); num6 >= 0; num6--)
							{
								if (!this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[num6].Serial, out this.DoFavor.Combat) || !this.DoFavor.Combat.BeKept)
								{
									break;
								}
								if (this.Mailing.ReportSerial.Inbox[num6].Serial != this.Mailing.ReportSerial.ResourceID && this.Mailing.ReportSerial.Inbox[num6].Serial != this.Mailing.ReportSerial.GatheringID && this.Mailing.ReportSerial.Inbox[num6].Serial != this.Mailing.ReportSerial.AntiScoutID)
								{
									num5 += 1u;
								}
							}
							for (int num7 = 0; num7 < this.Mailing.ReportSerial.Gather.Count; num7++)
							{
								if (!this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Gather[num7], out this.DoFavor.Combat) || !this.DoFavor.Combat.BeKept)
								{
									break;
								}
								num5 += 1u;
							}
							for (int num8 = 0; num8 < this.Mailing.ReportSerial.Resource.Count; num8++)
							{
								if (!this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Resource[num8], out this.DoFavor.Combat) || !this.DoFavor.Combat.BeKept)
								{
									break;
								}
								num5 += 1u;
							}
							for (int num9 = 0; num9 < this.Mailing.ReportSerial.AntiScout.Count; num9++)
							{
								if (!this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.AntiScout[num9], out this.DoFavor.Combat) || !this.DoFavor.Combat.BeKept)
								{
									break;
								}
								num5 += 1u;
							}
							binaryWriter.Write(num5);
							for (int num10 = (int)(this.Mailing.ReportSerial.Count - 1u); num10 >= 0; num10--)
							{
								if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Inbox[num10].Serial, out this.DoFavor.Combat) && this.DoFavor.Combat.BeKept && this.DoFavor.Combat.Type != CombatCollectReport.CCR_RESOURCE && this.DoFavor.Combat.Type != CombatCollectReport.CCR_COLLECT && this.DoFavor.Combat.Type != CombatCollectReport.CCR_RECON)
								{
									binaryWriter.Write(this.Mailing.ReportSerial.Inbox[num10].Serial);
									binaryWriter.Write((byte)this.Mailing.ReportSerial.Inbox[num10].Type);
									binaryWriter.Write(this.Mailing.ReportSerial.Inbox[num10].Timing);
									binaryWriter.Write(this.Mailing.ReportSerial.Inbox[num10].Change);
								}
							}
							for (int num11 = 0; num11 < this.Mailing.ReportSerial.Gather.Count; num11++)
							{
								if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Gather[num11], out this.DoFavor.Combat) && this.DoFavor.Combat.BeKept)
								{
									binaryWriter.Write(this.Mailing.ReportSerial.Gather[num11]);
									binaryWriter.Write(1);
									binaryWriter.Write(this.DoFavor.Combat.Times);
									binaryWriter.Write(false);
								}
							}
							for (int num12 = 0; num12 < this.Mailing.ReportSerial.Resource.Count; num12++)
							{
								if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Resource[num12], out this.DoFavor.Combat) && this.DoFavor.Combat.BeKept)
								{
									binaryWriter.Write(this.Mailing.ReportSerial.Resource[num12]);
									binaryWriter.Write(1);
									binaryWriter.Write(this.DoFavor.Combat.Times);
									binaryWriter.Write(false);
								}
							}
							for (int num13 = 0; num13 < this.Mailing.ReportSerial.AntiScout.Count; num13++)
							{
								if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.AntiScout[num13], out this.DoFavor.Combat) && this.DoFavor.Combat.BeKept)
								{
									binaryWriter.Write(this.Mailing.ReportSerial.AntiScout[num13]);
									binaryWriter.Write(1);
									binaryWriter.Write(this.DoFavor.Combat.Times);
									binaryWriter.Write(false);
								}
							}
						}
						else
						{
							binaryWriter.Write(num5);
						}
						num5 = 0u;
						if (this.Mailing.FavorSerial.Count > 0u)
						{
							for (int num14 = (int)(this.Mailing.FavorSerial.Count - 1u); num14 >= 0; num14--)
							{
								if (this.Mailing.FavorSerial.Inbox[num14].Type == MT)
								{
									if (!this.Mailing.FavorSerial.Combat.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[num14].Serial, out this.DoFavor.Combat) || !this.DoFavor.Combat.BeKept)
									{
										break;
									}
									num5 += 1u;
								}
							}
							binaryWriter.Write(num5);
							for (int num15 = (int)(this.Mailing.FavorSerial.Count - 1u); num15 >= 0; num15--)
							{
								if (this.Mailing.FavorSerial.Inbox[num15].Type == MT && this.Mailing.FavorSerial.Combat.Mail.TryGetValue(this.Mailing.FavorSerial.Inbox[num15].Serial, out this.DoFavor.Combat) && this.DoFavor.Combat.BeKept)
								{
									binaryWriter.Write(this.Mailing.FavorSerial.Inbox[num15].Serial);
									binaryWriter.Write((byte)this.Mailing.FavorSerial.Inbox[num15].Type);
									binaryWriter.Write(this.Mailing.FavorSerial.Inbox[num15].Timing);
									binaryWriter.Write(this.Mailing.FavorSerial.Inbox[num15].Change);
								}
							}
						}
						else
						{
							binaryWriter.Write(num5);
						}
						binaryWriter.Write(this.Mailing.ReportSerial.Total + this.Mailing.ReportSerial.Unread + this.Mailing.ReportSerial.Max);
					}
					else if (MT == MailType.EMAIL_FAVORY)
					{
						binaryWriter.Write(this.Mailing.FavorSerial.Total);
						binaryWriter.Write(this.Mailing.FavorSerial.Unread);
						binaryWriter.Write(this.Mailing.FavorSerial.Max);
						binaryWriter.Write(this.Mailing.FavorSerial.Fetch);
						binaryWriter.Write(this.Mailing.FavorSerial.New);
						binaryWriter.Write(this.Mailing.FavorSerial.Old);
						binaryWriter.Write(this.Mailing.FavorSerial.Count);
						ushort num16 = 0;
						while ((uint)num16 < this.Mailing.FavorSerial.Count)
						{
							binaryWriter.Write(this.Mailing.FavorSerial.Inbox[(int)num16].Serial);
							binaryWriter.Write(this.Mailing.FavorSerial.Inbox[(int)num16].Timing);
							binaryWriter.Write(this.Mailing.FavorSerial.Inbox[(int)num16].Change);
							binaryWriter.Write((byte)this.Mailing.FavorSerial.Inbox[(int)num16].Type);
							num16 += 1;
						}
						binaryWriter.Write(this.Mailing.FavorSerial.Total + this.Mailing.FavorSerial.Unread + this.Mailing.FavorSerial.Max + this.Mailing.FavorSerial.Fetch + this.Mailing.FavorSerial.New);
					}
				}
			}
		}
		catch (Exception ex)
		{
			return false;
		}
		return true;
	}

	// Token: 0x060003BF RID: 959 RVA: 0x0003A400 File Offset: 0x00038600
	public bool LoadMail(MyFavorite data, BinaryReader br)
	{
		data.MailVer = br.ReadByte();
		if (data.Type == MailType.EMAIL_LETTER)
		{
			data.Mail = new MailContent();
			data.Mail.SerialID = br.ReadUInt32();
			data.Mail.SetData(br.ReadByte(), br.ReadInt64());
			data.Mail.MailType = br.ReadByte();
			data.Mail.ReplyID = br.ReadUInt32();
			data.Mail.SenderHead = br.ReadUInt16();
			data.Mail.SenderKindom = br.ReadUInt16();
			data.Mail.SenderTag = br.ReadString();
			data.Mail.SenderName = br.ReadString();
			data.Mail.ExtraFlag = br.ReadByte();
			data.Mail.TitleLen = br.ReadByte();
			data.Mail.ContentLen = br.ReadUInt16();
			data.Mail.AttachNum = br.ReadByte();
			data.Mail.BeRead = ((data.Mail.Flag & 1) > 0);
			data.Mail.BeSave = ((data.Mail.Flag & 2) > 0);
			data.Mail.BeKept = true;
			data.Mail.TitleT = (data.Mail.ContentT = string.Empty);
			int num = 0;
			while (num < 6 && num < (int)data.Mail.AttachNum)
			{
				data.Mail.Attach[num].KingdomID = br.ReadUInt16();
				data.Mail.Attach[num].ZoneID = br.ReadUInt16();
				data.Mail.Attach[num].PointID = br.ReadByte();
				num++;
			}
			data.Mail.Title = br.ReadString();
			data.Mail.Content = br.ReadString();
			if (data.MailVer >= 6)
			{
				data.Mail.LanguageSource = br.ReadByte();
				data.Mail.LanguageTarget = br.ReadByte();
				data.Mail.Translation = br.ReadBoolean();
				data.Mail.TitleT = br.ReadString();
				data.Mail.ContentT = br.ReadString();
			}
		}
		else if (data.Type == MailType.EMAIL_BATTLE)
		{
			data.Combat = new CombatReport(br.ReadUInt32(), CombatCollectReport.CCR_BATTLE);
			data.Combat.SetData(br.ReadByte(), br.ReadInt64());
			data.Combat.Type = (CombatCollectReport)br.ReadByte();
			data.Combat.BeRead = ((data.Combat.Flag & 1) > 0);
			data.Combat.BeSave = ((data.Combat.Flag & 2) > 0);
			data.Combat.BeKept = true;
			if (data.Combat.Type == CombatCollectReport.CCR_BATTLE)
			{
				data.Combat.Combat = new CombatReportContent();
				data.Combat.Combat.KingdomID = br.ReadUInt16();
				data.Combat.Combat.CombatlZone = br.ReadUInt16();
				data.Combat.Combat.CombatPoint = br.ReadByte();
				data.Combat.Combat.CombatPointKind = (POINT_KIND)br.ReadByte();
				data.Combat.Combat.Side = br.ReadByte();
				data.Combat.Combat.AssaultKingdomID = br.ReadUInt16();
				data.Combat.Combat.AssaultAllianceTag = br.ReadString();
				data.Combat.Combat.AssaultName = br.ReadString();
				data.Combat.Combat.DefenceKingdomID = br.ReadUInt16();
				data.Combat.Combat.DefenceAllianceTag = br.ReadString();
				data.Combat.Combat.DefenceName = br.ReadString();
				data.Combat.Combat.Result = (CombatReportResultType)br.ReadByte();
				data.Combat.Combat.Resource = new int[5];
				byte b = 0;
				while ((int)b < data.Combat.Combat.Resource.Length)
				{
					data.Combat.Combat.Resource[(int)b] = br.ReadInt32();
					b += 1;
				}
				data.Combat.Combat.HeroData = new CombatHeroExpData[5];
				for (int i = 0; i < 5; i++)
				{
					data.Combat.Combat.HeroData[i] = new CombatHeroExpData();
					data.Combat.Combat.HeroData[i].HeroID = br.ReadUInt16();
					data.Combat.Combat.HeroData[i].Star = br.ReadByte();
				}
				data.Combat.Combat.EarnLordExp = br.ReadUInt32();
				data.Combat.Combat.EarnHeroExp = br.ReadUInt32();
				data.Combat.Combat.DetailAutoID = br.ReadUInt64();
				data.Combat.Combat.DetailDbServerID = br.ReadInt32();
				data.Combat.Combat.AccessKey = br.ReadInt32();
				data.Combat.Combat.DetailSelfIndex = br.ReadByte();
				data.Combat.Combat.CaptureResult = (ECombatReportCaptureResultType)br.ReadByte();
				data.Combat.Combat.Summary.AssaultCapitalZone = br.ReadUInt16();
				data.Combat.Combat.Summary.AssaultCapitalPoint = br.ReadByte();
				data.Combat.Combat.Summary.AssaultLosePower = br.ReadUInt64();
				data.Combat.Combat.Summary.AssaultTroopForce = br.ReadUInt32();
				data.Combat.Combat.Summary.AssaultTroopInjure = br.ReadUInt32();
				data.Combat.Combat.Summary.AssaultTroopDeath = br.ReadUInt32();
				data.Combat.Combat.Summary.DefenceCapitalZone = br.ReadUInt16();
				data.Combat.Combat.Summary.DefenceCapitalPoint = br.ReadByte();
				data.Combat.Combat.Summary.DefenceLosePower = br.ReadUInt64();
				data.Combat.Combat.Summary.DefenceTroopForce = br.ReadUInt32();
				data.Combat.Combat.Summary.DefenceTroopInjure = br.ReadUInt32();
				data.Combat.Combat.Summary.DefenceTroopDeath = br.ReadUInt32();
				data.Combat.Combat.Summary.WallDefence = br.ReadUInt32();
				data.Combat.Combat.Summary.WallDamage = br.ReadUInt32();
				data.Combat.Combat.Summary.TrapNumber = br.ReadUInt32();
				data.Combat.Combat.Summary.LoseTrapNumber = br.ReadUInt32();
				data.Combat.Combat.Summary.SaveTrapNumber = br.ReadUInt32();
				data.Combat.Combat.Summary.AssaultLevel = br.ReadByte();
				data.Combat.Combat.Summary.AssaultHead = br.ReadUInt16();
				data.Combat.Combat.Summary.AssaultLordInCombat = br.ReadByte();
				data.Combat.Combat.Summary.AssaultVIPLevel = br.ReadByte();
				data.Combat.Combat.Summary.IsLeader = br.ReadByte();
				data.Combat.Combat.Summary.DefenceLevel = br.ReadByte();
				data.Combat.Combat.Summary.DefenceHead = br.ReadUInt16();
				data.Combat.Combat.Summary.DefenceLordInCombat = br.ReadByte();
				data.Combat.Combat.Summary.DefenceVIPLevel = br.ReadByte();
				data.Combat.Combat.Summary.AssaultAllianceRank = br.ReadByte();
				data.Combat.Combat.Summary.DefenceAllianceRank = br.ReadByte();
				data.Combat.Combat.Version = br.ReadUInt32();
				data.Combat.Combat.PatchNo = br.ReadUInt32();
				data.Combat.Combat.Atkcoord = br.ReadByte();
				data.Combat.Combat.Defcoord = br.ReadByte();
				data.Combat.Combat.PetSkillPatchNo = br.ReadUInt32();
				data.Combat.Combat.m_AssaultPetSkill_ID = new ushort[20];
				for (int j = 0; j < data.Combat.Combat.m_AssaultPetSkill_ID.Length; j++)
				{
					data.Combat.Combat.m_AssaultPetSkill_ID[j] = br.ReadUInt16();
				}
				data.Combat.Combat.m_AssaultPetSkill_LV = new byte[20];
				for (int k = 0; k < data.Combat.Combat.m_AssaultPetSkill_LV.Length; k++)
				{
					data.Combat.Combat.m_AssaultPetSkill_LV[k] = br.ReadByte();
				}
				data.Combat.Combat.m_DefencePetSkill_ID = new ushort[20];
				for (int l = 0; l < data.Combat.Combat.m_DefencePetSkill_ID.Length; l++)
				{
					data.Combat.Combat.m_DefencePetSkill_ID[l] = br.ReadUInt16();
				}
				data.Combat.Combat.m_DefencePetSkill_LV = new byte[20];
				for (int m = 0; m < data.Combat.Combat.m_DefencePetSkill_LV.Length; m++)
				{
					data.Combat.Combat.m_DefencePetSkill_LV[m] = br.ReadByte();
				}
			}
			else if (data.Combat.Type == CombatCollectReport.CCR_RESOURCE)
			{
				data.Combat.Resource = new ResourceReportContent();
				data.Combat.Resource.Result = br.ReadByte();
				data.Combat.Resource.Name = br.ReadString();
				data.Combat.Resource.Resource = new uint[5];
				for (byte b2 = 0; b2 < 5; b2 += 1)
				{
					data.Combat.Resource.Resource[(int)b2] = br.ReadUInt32();
				}
				this.Mailing.ReportSerial.Resource.Add(data.Combat.SerialID);
				this.Mailing.ReportSerial.Resource.Sort();
			}
			else if (data.Combat.Type == CombatCollectReport.CCR_COLLECT)
			{
				data.Combat.Gather = new GatherReportContent();
				data.Combat.Gather.KingdomID = br.ReadUInt16();
				data.Combat.Gather.GatherZone = br.ReadUInt16();
				data.Combat.Gather.GatherPoint = br.ReadByte();
				data.Combat.Gather.GatherPointKind = (POINT_KIND)br.ReadByte();
				data.Combat.Gather.GatherPointLevel = br.ReadByte();
				data.Combat.Gather.Resource = br.ReadUInt32();
				data.Combat.Gather.HeroNum = br.ReadByte();
				data.Combat.Gather.ItemLen = br.ReadByte();
				data.Combat.Gather.Item = br.ReadBytes(85);
				if (data.Combat.Gather.HeroNum > 0)
				{
					data.Combat.Gather.mHero = new GatherHeroExpData[(int)data.Combat.Gather.HeroNum];
					for (int n = 0; n < (int)data.Combat.Gather.HeroNum; n++)
					{
						data.Combat.Gather.mHero[n] = new GatherHeroExpData();
						data.Combat.Gather.mHero[n].HeroID = br.ReadUInt16();
						data.Combat.Gather.mHero[n].Star = br.ReadByte();
						data.Combat.Gather.mHero[n].Exp = br.ReadUInt32();
					}
				}
				if (data.Combat.Gather.ItemLen > 0)
				{
					data.Combat.Gather.mResourceItem = new ResourceItem[(int)data.Combat.Gather.ItemLen];
					for (int num2 = 0; num2 < (int)data.Combat.Gather.ItemLen; num2++)
					{
						data.Combat.Gather.mResourceItem[num2] = new ResourceItem();
						data.Combat.Gather.mResourceItem[num2].ItemID = br.ReadUInt16();
						data.Combat.Gather.mResourceItem[num2].Quantity = br.ReadUInt16();
						data.Combat.Gather.mResourceItem[num2].Rank = br.ReadByte();
					}
				}
				this.Mailing.ReportSerial.Gather.Add(data.Combat.SerialID);
				this.Mailing.ReportSerial.Gather.Sort();
			}
			else if (data.Combat.Type == CombatCollectReport.CCR_SCOUT)
			{
				data.Combat.Scout = new ScoutReportContent();
				data.Combat.Scout.KingdomID = br.ReadUInt16();
				data.Combat.Scout.CombatlZone = br.ReadUInt16();
				data.Combat.Scout.CombatPoint = br.ReadByte();
				data.Combat.Scout.CombatPointKind = (POINT_KIND)br.ReadByte();
				data.Combat.Scout.ObjKingdomID = br.ReadUInt16();
				data.Combat.Scout.ObjAllianceTag = br.ReadString();
				data.Combat.Scout.ObjName = br.ReadString();
				data.Combat.Scout.ScoutResult = br.ReadByte();
				data.Combat.Scout.ScoutLevel = br.ReadByte();
				data.Combat.Scout.ScoutContentLen = br.ReadUInt16();
				data.Combat.Scout.ScoutContent = br.ReadBytes((int)data.Combat.Scout.ScoutContentLen);
			}
			else if (data.Combat.Type == CombatCollectReport.CCR_RECON && data.MailVer == 8)
			{
				data.Combat.Recon = new ReconReportContent();
				data.Combat.Recon.KingdomID = br.ReadUInt16();
				data.Combat.Recon.CombatlZone = br.ReadUInt16();
				data.Combat.Recon.CombatPoint = br.ReadByte();
				data.Combat.Recon.CombatPointKind = (POINT_KIND)br.ReadByte();
				data.Combat.Recon.AntiScout = br.ReadByte();
				data.Combat.Recon.WatchLevel = br.ReadByte();
				data.Combat.Recon.SrcKingdomID = br.ReadUInt16();
				data.Combat.Recon.SrcName = br.ReadString();
				data.Combat.Recon.SrcAllianceTag = br.ReadString();
				data.Combat.Recon.SrcHead = br.ReadUInt16();
				data.Combat.Recon.bAmbush = br.ReadByte();
				this.Mailing.ReportSerial.AntiScout.Add(data.Combat.SerialID);
				this.Mailing.ReportSerial.AntiScout.Sort();
			}
			else if (data.Combat.Type == CombatCollectReport.CCR_MONSTER)
			{
				data.Combat.Monster = new MonsterReportContent();
				data.Combat.Monster.KindgomID = br.ReadUInt16();
				data.Combat.Monster.Zone = br.ReadUInt16();
				data.Combat.Monster.Point = br.ReadByte();
				data.Combat.Monster.Result = br.ReadByte();
				if (data.Combat.Monster.Result < 2 || data.Combat.Monster.Result > 3)
				{
					data.Combat.Monster.Head = br.ReadUInt16();
					data.Combat.Monster.MonsterID = br.ReadUInt16();
					data.Combat.Monster.MonsterLv = br.ReadByte();
					data.Combat.Monster.BeginHPPercent = br.ReadUInt32();
					data.Combat.Monster.EndHPPercent = br.ReadUInt32();
					data.Combat.Monster.MonsterMaxHP = br.ReadUInt32();
					data.Combat.Monster.Exp = br.ReadUInt32();
					data.Combat.Monster.HeroID = new ushort[5];
					data.Combat.Monster.HeroExp = new uint[5];
					data.Combat.Monster.HeroData = new MonsterReportContent.HeroDataType[5];
					for (int num3 = 0; num3 < 5; num3++)
					{
						data.Combat.Monster.HeroID[num3] = br.ReadUInt16();
					}
					for (int num4 = 0; num4 < 5; num4++)
					{
						data.Combat.Monster.HeroExp[num4] = br.ReadUInt32();
					}
					for (int num5 = 0; num5 < 5; num5++)
					{
						data.Combat.Monster.HeroData[num5] = new MonsterReportContent.HeroDataType();
						data.Combat.Monster.HeroData[num5].SkillLV1 = br.ReadByte();
						data.Combat.Monster.HeroData[num5].SkillLV2 = br.ReadByte();
						data.Combat.Monster.HeroData[num5].SkillLV3 = br.ReadByte();
						data.Combat.Monster.HeroData[num5].SkillLV4 = br.ReadByte();
						data.Combat.Monster.HeroData[num5].LV = br.ReadByte();
						data.Combat.Monster.HeroData[num5].Star = br.ReadByte();
						data.Combat.Monster.HeroData[num5].Enhance = br.ReadByte();
						data.Combat.Monster.HeroData[num5].Equip = br.ReadByte();
					}
					data.Combat.Monster.SequentialDamageTimes = br.ReadByte();
					data.Combat.Monster.EffectiveDamageTimes = br.ReadByte();
					data.Combat.Monster.AttrScale = new MonsterReportContent.MonsterDataType();
					data.Combat.Monster.AttrScale.ActionTimes = br.ReadByte();
					data.Combat.Monster.AttrScale.SequentialDamageScale = br.ReadUInt32();
					data.Combat.Monster.AttrScale.DamageScale = br.ReadUInt32();
					data.Combat.Monster.AttrScale.MaxHPScale = br.ReadUInt32();
					data.Combat.Monster.AttrScale.HealingScale = br.ReadUInt32();
					data.Combat.Monster.AttrScale.InitMP = br.ReadUInt16();
					data.Combat.Monster.RandomSeed = br.ReadUInt16();
					data.Combat.Monster.RandomGap = br.ReadByte();
					data.Combat.Monster.Version = br.ReadUInt32();
					data.Combat.Monster.PatchNo = br.ReadUInt32();
					if (data.Combat.Monster.Result < 2)
					{
						data.Combat.Monster.ItemLen = br.ReadByte();
						data.Combat.Monster.Item = new MonsterReportContent.ItemDataType[30];
						int num6 = 0;
						while (num6 < (int)data.Combat.Monster.ItemLen && num6 < 30)
						{
							data.Combat.Monster.Item[num6] = new MonsterReportContent.ItemDataType();
							data.Combat.Monster.Item[num6].ItemID = br.ReadUInt16();
							data.Combat.Monster.Item[num6].Num = br.ReadUInt16();
							data.Combat.Monster.Item[num6].ItemRank = br.ReadByte();
							num6++;
						}
					}
					else
					{
						data.Combat.Monster.AllianceTag = br.ReadString();
					}
				}
			}
			else if (data.Combat.Type == CombatCollectReport.CCR_NPCSCOUT)
			{
				data.Combat.NPCScout = new NPCScoutReportContent();
				data.Combat.NPCScout.KingdomID = br.ReadUInt16();
				data.Combat.NPCScout.CombatlZone = br.ReadUInt16();
				data.Combat.NPCScout.CombatPoint = br.ReadByte();
				data.Combat.NPCScout.CombatPointKind = (POINT_KIND)br.ReadByte();
				data.Combat.NPCScout.NPCLevel = br.ReadByte();
				data.Combat.NPCScout.NPCID = br.ReadUInt16();
				data.Combat.NPCScout.Reward = br.ReadUInt16();
				data.Combat.NPCScout.ScoutResult = br.ReadByte();
				data.Combat.NPCScout.ScoutLevel = br.ReadByte();
				data.Combat.NPCScout.ScoutContentLen = br.ReadUInt16();
				data.Combat.NPCScout.ScoutContent = br.ReadBytes((int)data.Combat.NPCScout.ScoutContentLen);
			}
			else if (data.Combat.Type == CombatCollectReport.CCR_NPCCOMBAT)
			{
				data.Combat.NPCCombat = new NPCCombatReportContent();
				data.Combat.NPCCombat.KingdomID = br.ReadUInt16();
				data.Combat.NPCCombat.CombatlZone = br.ReadUInt16();
				data.Combat.NPCCombat.CombatPoint = br.ReadByte();
				data.Combat.NPCCombat.CombatPointKind = (POINT_KIND)br.ReadByte();
				data.Combat.NPCCombat.Side = br.ReadByte();
				data.Combat.NPCCombat.AssaultKingdomID = br.ReadUInt16();
				data.Combat.NPCCombat.AssaultAllianceTag = br.ReadString();
				data.Combat.NPCCombat.AssaultName = br.ReadString();
				data.Combat.NPCCombat.NPCLevel = br.ReadByte();
				data.Combat.NPCCombat.NPCID = br.ReadUInt16();
				data.Combat.NPCCombat.Result = (CombatReportResultType)br.ReadByte();
				data.Combat.NPCCombat.Reward = br.ReadUInt16();
				data.Combat.NPCCombat.HeroData = new CombatHeroExpData[5];
				for (int num7 = 0; num7 < data.Combat.NPCCombat.HeroData.Length; num7++)
				{
					data.Combat.NPCCombat.HeroData[num7] = new CombatHeroExpData();
					data.Combat.NPCCombat.HeroData[num7].HeroID = br.ReadUInt16();
					data.Combat.NPCCombat.HeroData[num7].Star = br.ReadByte();
				}
				data.Combat.NPCCombat.EarnLordExp = br.ReadUInt32();
				data.Combat.NPCCombat.EarnHeroExp = br.ReadUInt32();
				data.Combat.NPCCombat.DetailAutoID = br.ReadUInt64();
				data.Combat.NPCCombat.DetailDbServerID = br.ReadInt32();
				data.Combat.NPCCombat.AccessKey = br.ReadInt32();
				data.Combat.NPCCombat.DetailSelfIndex = br.ReadByte();
				data.Combat.NPCCombat.ResurrextTotal = br.ReadUInt32();
				data.Combat.NPCCombat.SummaryHead.AssaultCapitalZone = br.ReadUInt16();
				data.Combat.NPCCombat.SummaryHead.AssaultCapitalPoint = br.ReadByte();
				data.Combat.NPCCombat.SummaryHead.AssaultLosePower = br.ReadUInt64();
				data.Combat.NPCCombat.SummaryHead.AssaultTroopForce = br.ReadUInt32();
				data.Combat.NPCCombat.SummaryHead.AssaultTroopInjure = br.ReadUInt32();
				data.Combat.NPCCombat.SummaryHead.AssaultTroopDeath = br.ReadUInt32();
				data.Combat.NPCCombat.SummaryHead.DefenceCapitalZone = br.ReadUInt16();
				data.Combat.NPCCombat.SummaryHead.DefenceCapitalPoint = br.ReadByte();
				data.Combat.NPCCombat.SummaryHead.DefenceLosePower = br.ReadUInt64();
				data.Combat.NPCCombat.SummaryHead.DefenceTroopForce = br.ReadUInt32();
				data.Combat.NPCCombat.SummaryHead.DefenceTroopInjure = br.ReadUInt32();
				data.Combat.NPCCombat.SummaryHead.DefenceTroopDeath = br.ReadUInt32();
				data.Combat.NPCCombat.Summary.WallDefence = br.ReadUInt32();
				data.Combat.NPCCombat.Summary.WallDamage = br.ReadUInt32();
				data.Combat.NPCCombat.Summary.TrapNumber = br.ReadUInt32();
				data.Combat.NPCCombat.Summary.LoseTrapNumber = br.ReadUInt32();
				data.Combat.NPCCombat.Summary.SaveTrapNumber = br.ReadUInt32();
				data.Combat.NPCCombat.Summary.AssaultLevel = br.ReadByte();
				data.Combat.NPCCombat.Summary.AssaultHead = br.ReadUInt16();
				data.Combat.NPCCombat.Summary.AssaultLordInCombat = br.ReadByte();
				data.Combat.NPCCombat.Summary.AssaultVIPLevel = br.ReadByte();
				data.Combat.NPCCombat.Summary.IsLeader = br.ReadByte();
				data.Combat.NPCCombat.Summary.AssaultAllianceRank = br.ReadByte();
				data.Combat.NPCCombat.Version = br.ReadUInt32();
				data.Combat.NPCCombat.PatchNo = br.ReadUInt32();
				data.Combat.NPCCombat.AssaultArmyCoord = br.ReadByte();
				data.Combat.NPCCombat.DefenceArmyCoord = br.ReadByte();
				data.Combat.NPCCombat.PetSkillPatchNo = br.ReadUInt32();
				data.Combat.NPCCombat.m_AssaultPetSkill_ID = new ushort[20];
				for (int num8 = 0; num8 < data.Combat.NPCCombat.m_AssaultPetSkill_ID.Length; num8++)
				{
					data.Combat.NPCCombat.m_AssaultPetSkill_ID[num8] = br.ReadUInt16();
				}
				data.Combat.NPCCombat.m_AssaultPetSkill_LV = new byte[20];
				for (int num9 = 0; num9 < data.Combat.NPCCombat.m_AssaultPetSkill_LV.Length; num9++)
				{
					data.Combat.NPCCombat.m_AssaultPetSkill_LV[num9] = br.ReadByte();
				}
			}
			else
			{
				if (data.Combat.Type != CombatCollectReport.CCR_PETREPORT)
				{
					return false;
				}
				data.Combat.Pet = new PetReportContent();
				data.Combat.Pet.KindgomID = br.ReadUInt16();
				data.Combat.Pet.Zone = br.ReadUInt16();
				data.Combat.Pet.Point = br.ReadByte();
				data.Combat.Pet.Kind = br.ReadByte();
				data.Combat.Pet.Side = br.ReadByte();
				data.Combat.Pet.AssaultKingdomID = br.ReadUInt16();
				data.Combat.Pet.AssaultAllianceTag = br.ReadString();
				data.Combat.Pet.AssaultName = br.ReadString();
				data.Combat.Pet.AssaultCapitalZone = br.ReadUInt16();
				data.Combat.Pet.AssaultCapitalPoint = br.ReadByte();
				data.Combat.Pet.AssaultLevel = br.ReadByte();
				data.Combat.Pet.AssaultHead = br.ReadUInt16();
				data.Combat.Pet.AssaultVIPLevel = br.ReadByte();
				data.Combat.Pet.AssaultAllianceRank = br.ReadByte();
				data.Combat.Pet.DefenceKingdomID = br.ReadUInt16();
				data.Combat.Pet.DefenceAllianceTag = br.ReadString();
				data.Combat.Pet.DefenceName = br.ReadString();
				data.Combat.Pet.DefenceCapitalZone = br.ReadUInt16();
				data.Combat.Pet.DefenceCapitalPoint = br.ReadByte();
				data.Combat.Pet.DefenceLevel = br.ReadByte();
				data.Combat.Pet.DefenceHead = br.ReadUInt16();
				data.Combat.Pet.DefenceVIPLevel = br.ReadByte();
				data.Combat.Pet.DefenceAllianceRank = br.ReadByte();
				data.Combat.Pet.PatchNo = br.ReadUInt32();
				data.Combat.Pet.PetID = br.ReadUInt16();
				data.Combat.Pet.PetStar = br.ReadByte();
				data.Combat.Pet.SkillID = br.ReadUInt16();
				data.Combat.Pet.SkillLevel = br.ReadByte();
				data.Combat.Pet.Result = (PetReportResultType)br.ReadByte();
				data.Combat.Pet.Resource = new uint[5];
				byte b3 = 0;
				while ((int)b3 < data.Combat.Pet.Resource.Length)
				{
					data.Combat.Pet.Resource[(int)b3] = br.ReadUInt32();
					b3 += 1;
				}
				data.Combat.Pet.LostPower = br.ReadUInt64();
				data.Combat.Pet.TotalInjure = br.ReadUInt32();
				data.Combat.Pet.TotalDead = br.ReadUInt32();
				data.Combat.Pet.InjureTroops = new uint[16];
				byte b4 = 0;
				while ((int)b4 < data.Combat.Pet.InjureTroops.Length)
				{
					data.Combat.Pet.InjureTroops[(int)b4] = br.ReadUInt32();
					b4 += 1;
				}
				data.Combat.Pet.DeadTroops = new uint[16];
				byte b5 = 0;
				while ((int)b5 < data.Combat.Pet.DeadTroops.Length)
				{
					data.Combat.Pet.DeadTroops[(int)b5] = br.ReadUInt32();
					b5 += 1;
				}
				data.Combat.Pet.WallDamage = br.ReadUInt32();
			}
		}
		else
		{
			if (data.Type != MailType.EMAIL_SYSTEM)
			{
				return false;
			}
			data.System = new NoticeContent();
			data.System.SerialID = br.ReadUInt32();
			data.System.SetData(br.ReadByte(), br.ReadInt64());
			data.System.BeRead = ((data.System.Flag & 1) > 0);
			data.System.BeSave = ((data.System.Flag & 2) > 0);
			data.System.BeKept = true;
			data.System.Type = (NoticeReport)br.ReadByte();
			if (data.System.Type == NoticeReport.ENotice_Enhance)
			{
				data.System.NoticeHeroEnhance = new NoticeContent.Enhance();
				data.System.NoticeHeroEnhance.HeroID = br.ReadUInt16();
				data.System.NoticeHeroEnhance.Rank = br.ReadByte();
				data.System.NoticeHeroEnhance.Star = br.ReadByte();
			}
			else if (data.System.Type == NoticeReport.ENotice_StarUp)
			{
				data.System.NoticeHeroStarUp = new NoticeContent.StarUp();
				data.System.NoticeHeroStarUp.HeroID = br.ReadUInt16();
				data.System.NoticeHeroStarUp.Star = br.ReadByte();
				data.System.NoticeHeroStarUp.Rank = br.ReadByte();
			}
			else if (data.System.Type == NoticeReport.ENotice_JoinAlliance)
			{
				data.System.Notice_JoinAlliance = new NoticeContent.JoinAlliance();
				data.System.Notice_JoinAlliance.Tag = br.ReadString();
				data.System.Notice_JoinAlliance.Name = br.ReadString();
			}
			else if (data.System.Type == NoticeReport.Enotice_ApplyAlliance)
			{
				data.System.Notice_ApplyAlliance = new NoticeContent.ApplyAlliance();
				data.System.Notice_ApplyAlliance.Tag = br.ReadString();
				data.System.Notice_ApplyAlliance.Name = br.ReadString();
			}
			else if (data.System.Type == NoticeReport.Enotice_ApplyAllianceBeDenied)
			{
				data.System.Notice_ApplyAllianceBeDenied = new NoticeContent.ApplyAllianceBeDenied();
				data.System.Notice_ApplyAllianceBeDenied.Dealer = br.ReadString();
				data.System.Notice_ApplyAllianceBeDenied.Tag = br.ReadString();
				data.System.Notice_ApplyAllianceBeDenied.Name = br.ReadString();
			}
			else if (data.System.Type == NoticeReport.Enotice_AllianceDismiss)
			{
				data.System.Notice_AllianceDismiss = new NoticeContent.AllianceDismiss();
				data.System.Notice_AllianceDismiss.Leader = br.ReadString();
			}
			else if (data.System.Type == NoticeReport.Enotice_AllianceLeaderStepDown)
			{
				data.System.Notice_AllianceLeaderStepDown = new NoticeContent.AllianceLeaderStepDown();
				data.System.Notice_AllianceLeaderStepDown.OldLeader = br.ReadString();
				data.System.Notice_AllianceLeaderStepDown.NewLeader = br.ReadString();
			}
			else if (data.System.Type == NoticeReport.Enotice_ActivityDegreePrize)
			{
				data.System.Notice_ActivityDegreePrize = new NoticeContent.ActivityDegreePrize();
				data.System.Notice_ActivityDegreePrize.Type = (NoticeContent.ActivityCircleEventType)br.ReadByte();
				data.System.Notice_ActivityDegreePrize.Degree = br.ReadByte();
				data.System.Notice_ActivityDegreePrize.PrizeNum = br.ReadByte();
				data.System.Notice_ActivityDegreePrize.PrizeData = new NoticeContent.ActPrize[(int)data.System.Notice_ActivityDegreePrize.PrizeNum];
				for (byte b6 = 0; b6 < data.System.Notice_ActivityDegreePrize.PrizeNum; b6 += 1)
				{
					data.System.Notice_ActivityDegreePrize.PrizeData[(int)b6].Rank = br.ReadByte();
					data.System.Notice_ActivityDegreePrize.PrizeData[(int)b6].ItemID = br.ReadUInt16();
					data.System.Notice_ActivityDegreePrize.PrizeData[(int)b6].Num = br.ReadByte();
				}
			}
			else if (data.System.Type == NoticeReport.Enotice_ActivityRankPrize)
			{
				data.System.Notice_ActivityRankPrize = new NoticeContent.ActivityRankPrize();
				data.System.Notice_ActivityRankPrize.Type = (NoticeContent.ActivityCircleEventType)br.ReadByte();
				data.System.Notice_ActivityRankPrize.Place = br.ReadByte();
				data.System.Notice_ActivityRankPrize.PrizeNum = br.ReadByte();
				data.System.Notice_ActivityRankPrize.PrizeData = new NoticeContent.ActPrize[(int)data.System.Notice_ActivityRankPrize.PrizeNum];
				for (byte b7 = 0; b7 < data.System.Notice_ActivityRankPrize.PrizeNum; b7 += 1)
				{
					data.System.Notice_ActivityRankPrize.PrizeData[(int)b7].Rank = br.ReadByte();
					data.System.Notice_ActivityRankPrize.PrizeData[(int)b7].ItemID = br.ReadUInt16();
					data.System.Notice_ActivityRankPrize.PrizeData[(int)b7].Num = br.ReadByte();
				}
			}
			else if (data.System.Type == NoticeReport.Enotice_InviteAlliance)
			{
				data.System.Notice_InviteAlliance = new NoticeContent.InviteAlliance();
				data.System.Notice_InviteAlliance.AllianceID = br.ReadUInt32();
				data.System.Notice_InviteAlliance.InviterName = br.ReadString();
				data.System.Notice_InviteAlliance.Tag = br.ReadString();
				data.System.Notice_InviteAlliance.Name = br.ReadString();
			}
			else if (data.System.Type == NoticeReport.Enotice_SynLordEquip)
			{
				data.System.Notice_SynLordEquip = new NoticeContent.SynLordEquip();
				data.System.Notice_SynLordEquip.ItemID = br.ReadUInt16();
				data.System.Notice_SynLordEquip.Rank = br.ReadByte();
				data.System.Notice_SynLordEquip.AddExp = br.ReadUInt32();
			}
			else if (data.System.Type == NoticeReport.Enotice_RallyCancel)
			{
				data.System.Notice_RallyNotice = new NoticeContent.RallyNotice();
				data.System.Notice_RallyNotice.HostName = br.ReadString();
				data.System.Notice_RallyNotice.HostTag = br.ReadString();
				data.System.Notice_RallyNotice.TargetName = br.ReadString();
				data.System.Notice_RallyNotice.TargetTag = br.ReadString();
			}
			else if (data.System.Type == NoticeReport.Enotice_CryptFinish)
			{
				data.System.Notice_CryptNotice = new NoticeContent.CryptNotice();
				data.System.Notice_CryptNotice.Money = br.ReadUInt16();
				data.System.Notice_CryptNotice.Kind = br.ReadByte();
				data.System.Notice_CryptNotice.Level = br.ReadByte();
			}
			else if (data.System.Type == NoticeReport.Enotice_RallyCancel_AsTargetAlly)
			{
				data.System.Notice_AsTargetAlly = new NoticeContent.AsTargetAlly();
				data.System.Notice_AsTargetAlly.HostName = br.ReadString();
				data.System.Notice_AsTargetAlly.HostTag = br.ReadString();
				data.System.Notice_AsTargetAlly.TargetName = br.ReadString();
			}
			else if (data.System.Type == NoticeReport.Enotice_OtherSavedLord)
			{
				data.System.Notice_OtherSavedLord = new NoticeContent.OtherSavedLord();
				data.System.Notice_OtherSavedLord.HomeKingdom = br.ReadUInt16();
				data.System.Notice_OtherSavedLord.AllianceTag = br.ReadString();
				data.System.Notice_OtherSavedLord.Name = br.ReadString();
			}
			else if (data.System.Type != NoticeReport.Enotice_SelfSavedLord)
			{
				if (data.System.Type == NoticeReport.Enotice_LordBeingReleased)
				{
					data.System.Notice_LordBeingReleased = new NoticeContent.LordBeingReleased();
					data.System.Notice_LordBeingReleased.HomeKingdom = br.ReadUInt16();
					data.System.Notice_LordBeingReleased.AllianceTag = br.ReadString();
					data.System.Notice_LordBeingReleased.Name = br.ReadString();
				}
				else if (data.System.Type == NoticeReport.Enotice_LordBeingExecuted)
				{
					data.System.Notice_LordBeingExecuted = new NoticeContent.LordBeingExecuted();
					data.System.Notice_LordBeingExecuted.HomeKingdom = br.ReadUInt16();
					data.System.Notice_LordBeingExecuted.AllianceTag = br.ReadString();
					data.System.Notice_LordBeingExecuted.Name = br.ReadString();
				}
				else if (data.System.Type != NoticeReport.Enotice_LordEscaped)
				{
					if (data.System.Type == NoticeReport.Enotice_OtherBreakPrison)
					{
						data.System.Notice_OtherBreakPrison = new NoticeContent.OtherBreakPrison();
						data.System.Notice_OtherBreakPrison.HomeKingdom = br.ReadUInt16();
						data.System.Notice_OtherBreakPrison.AllianceTag = br.ReadString();
						data.System.Notice_OtherBreakPrison.Name = br.ReadString();
					}
					else if (data.System.Type == NoticeReport.Enotice_RescuedPrisoner)
					{
						data.System.Notice_RescuedPrisoner = new NoticeContent.RescuedPrisoner();
						data.System.Notice_RescuedPrisoner.HomeKingdom = br.ReadUInt16();
						data.System.Notice_RescuedPrisoner.AllianceTag = br.ReadString();
						data.System.Notice_RescuedPrisoner.Name = br.ReadString();
						data.System.Notice_RescuedPrisoner.PrisonerNum = br.ReadByte();
						data.System.Notice_RescuedPrisoner.ClaimReward = br.ReadUInt32();
					}
					else if (data.System.Type == NoticeReport.Enotice_RequestRansom)
					{
						data.System.Notice_RequestRansom = new NoticeContent.RequestRansom();
						data.System.Notice_RequestRansom.Ransom = br.ReadUInt32();
					}
					else if (data.System.Type == NoticeReport.Enotice_ReceivedRansom)
					{
						data.System.Notice_ReceivedRansom = new NoticeContent.ReceivedRansom();
						data.System.Notice_ReceivedRansom.Ransom = br.ReadUInt32();
					}
					else if (data.System.Type == NoticeReport.Enotice_PrisonFull)
					{
						data.System.Notice_PrisonFull = new NoticeContent.PrisonFull();
						data.System.Notice_PrisonFull.HomeKingdom = br.ReadUInt16();
						data.System.Notice_PrisonFull.AllianceTag = br.ReadString();
						data.System.Notice_PrisonFull.Name = br.ReadString();
					}
					else if (data.System.Type == NoticeReport.Enotice_BeQuitAlliance)
					{
						data.System.Notice_BeQuitAlliance = new NoticeContent.BeQuitAlliance();
						data.System.Notice_BeQuitAlliance.Dealer = br.ReadString();
						data.System.Notice_BeQuitAlliance.AllianceTag = br.ReadString();
						data.System.Notice_BeQuitAlliance.Alliance = br.ReadString();
					}
					else if (data.System.Type == NoticeReport.Enotice_BuyTreasure)
					{
						data.System.Notice_BuyTreasure = new NoticeContent.BuyTreasure();
						data.System.Notice_BuyTreasure.Crystal = br.ReadUInt32();
						data.System.Notice_BuyTreasure.BonusCrystal = br.ReadUInt32();
						data.System.Notice_BuyTreasure.Gift = new NoticeContent.TreasureAllianceGift[5];
						for (int num10 = 0; num10 < 5; num10++)
						{
							data.System.Notice_BuyTreasure.Gift[num10] = new NoticeContent.TreasureAllianceGift();
							data.System.Notice_BuyTreasure.Gift[num10].ItemID = br.ReadUInt16();
							data.System.Notice_BuyTreasure.Gift[num10].ItemNum = br.ReadUInt16();
						}
						data.System.Notice_BuyTreasure.ItemNum = br.ReadByte();
						data.System.Notice_BuyTreasure.Item = new NoticeContent.ComboBoxTBItem[(int)data.System.Notice_BuyTreasure.ItemNum];
						for (int num11 = 0; num11 < (int)data.System.Notice_BuyTreasure.ItemNum; num11++)
						{
							data.System.Notice_BuyTreasure.Item[num11] = new NoticeContent.ComboBoxTBItem();
							data.System.Notice_BuyTreasure.Item[num11].ItemID = br.ReadUInt16();
							data.System.Notice_BuyTreasure.Item[num11].ItemNum = br.ReadUInt16();
							data.System.Notice_BuyTreasure.Item[num11].ItemRank = br.ReadByte();
						}
						data.System.Notice_BuyTreasure.GiftTop = br.ReadByte();
					}
					else if (data.System.Type == NoticeReport.Enotice_RallyCancel_Moving)
					{
						data.System.Notice_RallyNotice_Moving = new NoticeContent.RallyNotice_Moving();
						data.System.Notice_RallyNotice_Moving.HostName = br.ReadString();
						data.System.Notice_RallyNotice_Moving.HostTag = br.ReadString();
						data.System.Notice_RallyNotice_Moving.TargetName = br.ReadString();
						data.System.Notice_RallyNotice_Moving.TargetTag = br.ReadString();
					}
					else if (data.System.Type == NoticeReport.Enotice_AtkFailedSelfShield)
					{
						data.System.Enotice_AtkFailedSelfShield = new NoticeContent.AtkFailedSelfShield();
						data.System.Enotice_AtkFailedSelfShield.FailedType = br.ReadByte();
						data.System.Enotice_AtkFailedSelfShield.KingdomID = br.ReadUInt16();
						data.System.Enotice_AtkFailedSelfShield.zoneID = br.ReadUInt16();
						data.System.Enotice_AtkFailedSelfShield.pointID = br.ReadByte();
					}
					else if (data.System.Type == NoticeReport.Enotice_RecivedGift)
					{
						data.System.Enotice_RecivedGift = new NoticeContent.Gifts();
						data.System.Enotice_RecivedGift.GiftsName = br.ReadString();
						data.System.Enotice_RecivedGift.GiftsTag = br.ReadString();
						data.System.Enotice_RecivedGift.Item = new NoticeContent.TreasureAllianceGift();
						data.System.Enotice_RecivedGift.Item.ItemID = br.ReadUInt16();
						data.System.Enotice_RecivedGift.Item.ItemNum = br.ReadUInt16();
					}
					else if (data.System.Type == NoticeReport.Enotice_PrisonAmnestied)
					{
						data.System.Enotice_PrisonAmnestied = new NoticeContent.PrisonAmnestied();
						data.System.Enotice_PrisonAmnestied.KingsHomeKingdom = br.ReadUInt16();
						data.System.Enotice_PrisonAmnestied.KingdomTag = br.ReadString();
						data.System.Enotice_PrisonAmnestied.KingdomName = br.ReadString();
					}
					else if (data.System.Type == NoticeReport.Enotice_LordBeingAmnestied)
					{
						data.System.Enotice_LordBeingAmnestied = new NoticeContent.LordBeingAmnestied();
						data.System.Enotice_LordBeingAmnestied.KingsHomeKingdom = br.ReadUInt16();
						data.System.Enotice_LordBeingAmnestied.KingdomTag = br.ReadString();
						data.System.Enotice_LordBeingAmnestied.KingdomName = br.ReadString();
						data.System.Enotice_LordBeingAmnestied.WardensHomeKingdom = br.ReadUInt16();
						data.System.Enotice_LordBeingAmnestied.Tag = br.ReadString();
						data.System.Enotice_LordBeingAmnestied.Name = br.ReadString();
					}
					else if (data.System.Type == NoticeReport.Enotice_RulerGift)
					{
						data.System.Enotice_RulerGift = new NoticeContent.RulerGift();
						data.System.Enotice_RulerGift.RulerKind = br.ReadByte();
						data.System.Enotice_RulerGift.RulerAllianceKingdomID = br.ReadUInt16();
						data.System.Enotice_RulerGift.Tag = br.ReadString();
						data.System.Enotice_RulerGift.Name = br.ReadString();
						data.System.Enotice_RulerGift.GiftKindNum = br.ReadByte();
						data.System.Enotice_RulerGift.Gifts = new NoticeContent.TreasureAllianceGift[16];
						for (int num12 = 0; num12 < (int)data.System.Enotice_RulerGift.GiftKindNum; num12++)
						{
							data.System.Enotice_RulerGift.Gifts[num12] = new NoticeContent.TreasureAllianceGift();
							data.System.Enotice_RulerGift.Gifts[num12].ItemID = br.ReadUInt16();
							data.System.Enotice_RulerGift.Gifts[num12].ItemNum = br.ReadUInt16();
						}
					}
					else if (data.System.Type == NoticeReport.Enotice_DismissAllianceLeader)
					{
						data.System.Enotice_DismissAllianceLeader = new NoticeContent.AllianceDismissLeader();
						data.System.Enotice_DismissAllianceLeader.OldLeader = br.ReadString();
						data.System.Enotice_DismissAllianceLeader.NewLeader = br.ReadString();
						data.System.Enotice_DismissAllianceLeader.OffLineDay = br.ReadByte();
					}
					else if (data.System.Type == NoticeReport.Enotice_AmbushDefSuccess)
					{
						data.System.Enotice_AmbushDefSuccess = new NoticeContent.Cantonment();
						data.System.Enotice_AmbushDefSuccess.AmbushName = br.ReadString();
						data.System.Enotice_AmbushDefSuccess.AtkPlayerHomeKingdom = br.ReadUInt16();
						data.System.Enotice_AmbushDefSuccess.AtkPlayerAllianceTag = br.ReadString();
						data.System.Enotice_AmbushDefSuccess.AtkPlayerName = br.ReadString();
					}
					else if (data.System.Type == NoticeReport.Enotice_AmbushDefFailed)
					{
						data.System.Enotice_AmbushDefFailed = new NoticeContent.Cantonment();
						data.System.Enotice_AmbushDefFailed.AmbushName = br.ReadString();
						data.System.Enotice_AmbushDefFailed.AtkPlayerHomeKingdom = br.ReadUInt16();
						data.System.Enotice_AmbushDefFailed.AtkPlayerAllianceTag = br.ReadString();
						data.System.Enotice_AmbushDefFailed.AtkPlayerName = br.ReadString();
					}
					else if (data.System.Type == NoticeReport.Enotice_ActivityKVKDegreePrize)
					{
						data.System.Enotice_ActivityKVKDegreePrize = new NoticeContent.ActivityKVKDegreePrize();
						data.System.Enotice_ActivityKVKDegreePrize.ActType = (EActivityType)br.ReadByte();
						data.System.Enotice_ActivityKVKDegreePrize.EventType = (EActivityKingdomEventType)br.ReadByte();
						data.System.Enotice_ActivityKVKDegreePrize.Degree = br.ReadByte();
						data.System.Enotice_ActivityKVKDegreePrize.PrizeNum = br.ReadByte();
						data.System.Enotice_ActivityKVKDegreePrize.PrizeData = new NoticeContent.ActPrize[(int)data.System.Enotice_ActivityKVKDegreePrize.PrizeNum];
						for (byte b8 = 0; b8 < data.System.Enotice_ActivityKVKDegreePrize.PrizeNum; b8 += 1)
						{
							data.System.Enotice_ActivityKVKDegreePrize.PrizeData[(int)b8].Rank = br.ReadByte();
							data.System.Enotice_ActivityKVKDegreePrize.PrizeData[(int)b8].ItemID = br.ReadUInt16();
							data.System.Enotice_ActivityKVKDegreePrize.PrizeData[(int)b8].Num = br.ReadByte();
						}
					}
					else if (data.System.Type == NoticeReport.Enotice_ActivityKVKRankPrize)
					{
						data.System.Enotice_ActivityKVKRankPrize = new NoticeContent.ActivityKVKRankPrize();
						data.System.Enotice_ActivityKVKRankPrize.ActType = (EActivityType)br.ReadByte();
						data.System.Enotice_ActivityKVKRankPrize.EventType = (EActivityKingdomEventType)br.ReadByte();
						data.System.Enotice_ActivityKVKRankPrize.Place = br.ReadByte();
						data.System.Enotice_ActivityKVKRankPrize.PrizeNum = br.ReadByte();
						data.System.Enotice_ActivityKVKRankPrize.PrizeData = new NoticeContent.ActPrize[(int)data.System.Enotice_ActivityKVKRankPrize.PrizeNum];
						for (byte b9 = 0; b9 < data.System.Enotice_ActivityKVKRankPrize.PrizeNum; b9 += 1)
						{
							data.System.Enotice_ActivityKVKRankPrize.PrizeData[(int)b9].Rank = br.ReadByte();
							data.System.Enotice_ActivityKVKRankPrize.PrizeData[(int)b9].ItemID = br.ReadUInt16();
							data.System.Enotice_ActivityKVKRankPrize.PrizeData[(int)b9].Num = br.ReadByte();
						}
					}
					else if (data.System.Type == NoticeReport.Enotice_BuyBlackMarketTreasure)
					{
						data.System.Enotice_BuyBlackMarketTreasure = new NoticeContent.BuyTreasure();
						data.System.Enotice_BuyBlackMarketTreasure.Crystal = br.ReadUInt32();
						data.System.Enotice_BuyBlackMarketTreasure.BonusCrystal = br.ReadUInt32();
						data.System.Enotice_BuyBlackMarketTreasure.Gift = new NoticeContent.TreasureAllianceGift[5];
						for (int num13 = 0; num13 < 5; num13++)
						{
							data.System.Enotice_BuyBlackMarketTreasure.Gift[num13] = new NoticeContent.TreasureAllianceGift();
							data.System.Enotice_BuyBlackMarketTreasure.Gift[num13].ItemID = br.ReadUInt16();
							data.System.Enotice_BuyBlackMarketTreasure.Gift[num13].ItemNum = br.ReadUInt16();
						}
						data.System.Enotice_BuyBlackMarketTreasure.ItemNum = br.ReadByte();
						data.System.Enotice_BuyBlackMarketTreasure.Item = new NoticeContent.ComboBoxTBItem[(int)data.System.Enotice_BuyBlackMarketTreasure.ItemNum];
						for (int num14 = 0; num14 < (int)data.System.Enotice_BuyBlackMarketTreasure.ItemNum; num14++)
						{
							data.System.Enotice_BuyBlackMarketTreasure.Item[num14] = new NoticeContent.ComboBoxTBItem();
							data.System.Enotice_BuyBlackMarketTreasure.Item[num14].ItemID = br.ReadUInt16();
							data.System.Enotice_BuyBlackMarketTreasure.Item[num14].ItemNum = br.ReadUInt16();
							data.System.Enotice_BuyBlackMarketTreasure.Item[num14].ItemRank = br.ReadByte();
						}
					}
					else if (data.System.Type == NoticeReport.Enotice_KickOffTeam)
					{
						data.System.Enotice_KickOffTeam = new NoticeContent.KickOffTeam();
						data.System.Enotice_KickOffTeam.HostName = br.ReadString();
						data.System.Enotice_KickOffTeam.AllianceTag = br.ReadString();
					}
					else if (data.System.Type == NoticeReport.Enotice_AMRankPrize)
					{
						data.System.Enotice_AMRankPrize = new NoticeContent.ActivityKVKRankPrize();
						data.System.Enotice_AMRankPrize.ActType = (EActivityType)br.ReadByte();
						data.System.Enotice_AMRankPrize.EventType = (EActivityKingdomEventType)br.ReadByte();
						data.System.Enotice_AMRankPrize.Place = br.ReadByte();
						data.System.Enotice_AMRankPrize.PrizeNum = br.ReadByte();
						data.System.Enotice_AMRankPrize.PrizeData = new NoticeContent.ActPrize[(int)data.System.Enotice_AMRankPrize.PrizeNum];
						for (byte b10 = 0; b10 < data.System.Enotice_AMRankPrize.PrizeNum; b10 += 1)
						{
							data.System.Enotice_AMRankPrize.PrizeData[(int)b10].Rank = br.ReadByte();
							data.System.Enotice_AMRankPrize.PrizeData[(int)b10].ItemID = br.ReadUInt16();
							data.System.Enotice_AMRankPrize.PrizeData[(int)b10].Num = br.ReadByte();
						}
					}
					else if (data.System.Type == NoticeReport.Enotice_AllianceHomeKingdom)
					{
						data.System.Enotice_AllianceHomeKingdom = new NoticeContent.AllianceChangeHomeKingdom();
						data.System.Enotice_AllianceHomeKingdom.AllianceTag = br.ReadString();
						data.System.Enotice_AllianceHomeKingdom.Leader = br.ReadString();
						data.System.Enotice_AllianceHomeKingdom.HomeKingdom = br.ReadUInt16();
					}
					else if (data.System.Type == NoticeReport.Enotice_WorldKingPrize)
					{
						data.System.Enotice_WorldKingPrize = new NoticeContent.WorldKingPrize();
						data.System.Enotice_WorldKingPrize.PrizeNum = br.ReadByte();
						data.System.Enotice_WorldKingPrize.PrizeData = new NoticeContent.ActPrize[(int)data.System.Enotice_WorldKingPrize.PrizeNum];
						for (byte b11 = 0; b11 < data.System.Enotice_WorldKingPrize.PrizeNum; b11 += 1)
						{
							data.System.Enotice_WorldKingPrize.PrizeData[(int)b11].Rank = br.ReadByte();
							data.System.Enotice_WorldKingPrize.PrizeData[(int)b11].ItemID = br.ReadUInt16();
							data.System.Enotice_WorldKingPrize.PrizeData[(int)b11].Num = br.ReadByte();
						}
					}
					else if (data.System.Type == NoticeReport.Enotice_BackendAddCrystal)
					{
						data.System.Enotice_BackendAddCrystal = new NoticeContent.AddCrystal();
						data.System.Enotice_BackendAddCrystal.Crystal = br.ReadUInt32();
					}
					else if (data.System.Type == NoticeReport.Enotice_LoginConpensate)
					{
						data.System.Enotice_LoginConpensate = new NoticeContent.AddCrystal();
						data.System.Enotice_LoginConpensate.Crystal = br.ReadUInt32();
					}
					else if (data.System.Type == NoticeReport.Enotice_PurchaseConpensate)
					{
						data.System.Enotice_PurchaseConpensate = new NoticeContent.AddCrystal();
						data.System.Enotice_PurchaseConpensate.Crystal = br.ReadUInt32();
					}
					else if (data.System.Type == NoticeReport.Enotice_RallyNPCCancel)
					{
						data.System.Enotice_RallyNPCCancel = new NoticeContent.RallyNpcCancel();
						data.System.Enotice_RallyNPCCancel.HostName = br.ReadString();
						data.System.Enotice_RallyNPCCancel.AllianceTag = br.ReadString();
						data.System.Enotice_RallyNPCCancel.NPCLevel = br.ReadByte();
						data.System.Enotice_RallyNPCCancel.NPCID = br.ReadUInt16();
					}
					else if (data.System.Type == NoticeReport.Enotice_RallyNPCCancelInvalid)
					{
						data.System.Enotice_RallyNPCCancelInvalid = new NoticeContent.RallyNpcCancel();
						data.System.Enotice_RallyNPCCancelInvalid.HostName = br.ReadString();
						data.System.Enotice_RallyNPCCancelInvalid.AllianceTag = br.ReadString();
						data.System.Enotice_RallyNPCCancelInvalid.NPCLevel = br.ReadByte();
						data.System.Enotice_RallyNPCCancelInvalid.NPCID = br.ReadUInt16();
					}
					else if (data.System.Type == NoticeReport.Enotice_LordEquipExpire)
					{
						data.System.Enotice_LordEquipExpire = new NoticeContent.LordEquipExpire();
						data.System.Enotice_LordEquipExpire.ItemID = br.ReadUInt16();
						data.System.Enotice_LordEquipExpire.Rank = br.ReadByte();
					}
					else if (data.System.Type == NoticeReport.Enotice_WorldNotKingPrize)
					{
						data.System.Enotice_WorldNotKingPrize = new NoticeContent.WorldKingPrize_NotKing();
						data.System.Enotice_WorldNotKingPrize.Place = br.ReadByte();
						data.System.Enotice_WorldNotKingPrize.PrizeNum = br.ReadByte();
						data.System.Enotice_WorldNotKingPrize.PrizeData = new NoticeContent.ActPrize[(int)data.System.Enotice_WorldNotKingPrize.PrizeNum];
						for (byte b12 = 0; b12 < data.System.Enotice_WorldNotKingPrize.PrizeNum; b12 += 1)
						{
							data.System.Enotice_WorldNotKingPrize.PrizeData[(int)b12].Rank = br.ReadByte();
							data.System.Enotice_WorldNotKingPrize.PrizeData[(int)b12].ItemID = br.ReadUInt16();
							data.System.Enotice_WorldNotKingPrize.PrizeData[(int)b12].Num = br.ReadByte();
						}
					}
					else if (data.System.Type == NoticeReport.Enotice_BuyEmoteTreasure)
					{
						data.System.Enotice_BuyEmoteTreasure = new NoticeContent.BuyEmoteTreasure();
						data.System.Enotice_BuyEmoteTreasure.ItemID = br.ReadUInt16();
						data.System.Enotice_BuyEmoteTreasure.ItemNum = br.ReadByte();
					}
					else if (data.System.Type == NoticeReport.Enotice_PrisnerUsePoison)
					{
						data.System.Enotice_PrisnerUsePoison = new NoticeContent.PrisonerUsePoison();
						data.System.Enotice_PrisnerUsePoison.HomeKingdom = br.ReadUInt16();
						data.System.Enotice_PrisnerUsePoison.AllianceTag = br.ReadString();
						data.System.Enotice_PrisnerUsePoison.Name = br.ReadString();
						data.System.Enotice_PrisnerUsePoison.EffectTime = br.ReadUInt32();
					}
					else if (data.System.Type == NoticeReport.Enotice_PrisnerPoisonEffect)
					{
						data.System.Enotice_PrisnerPoisonEffect = new NoticeContent.PrisonerPoisonEffect();
						data.System.Enotice_PrisnerPoisonEffect.HomeKingdom = br.ReadUInt16();
						data.System.Enotice_PrisnerPoisonEffect.AllianceTag = br.ReadString();
						data.System.Enotice_PrisnerPoisonEffect.Name = br.ReadString();
					}
					else if (data.System.Type == NoticeReport.Enotice_BackendActivity)
					{
						data.System.Enotice_BackendActivity = new NoticeContent.BackendActivity();
						data.System.Enotice_BackendActivity.Crystal = br.ReadUInt32();
						data.System.Enotice_BackendActivity.ItemNum = br.ReadByte();
						data.System.Enotice_BackendActivity.Item = new NoticeContent.ComboBoxTBItem[(int)data.System.Enotice_BackendActivity.ItemNum];
						for (int num15 = 0; num15 < (int)data.System.Enotice_BackendActivity.ItemNum; num15++)
						{
							data.System.Enotice_BackendActivity.Item[num15] = new NoticeContent.ComboBoxTBItem();
							data.System.Enotice_BackendActivity.Item[num15].ItemID = br.ReadUInt16();
							data.System.Enotice_BackendActivity.Item[num15].ItemNum = br.ReadUInt16();
							data.System.Enotice_BackendActivity.Item[num15].ItemRank = br.ReadByte();
						}
					}
					else if (data.System.Type == NoticeReport.Enotice_BuyCastleSkinTreasure)
					{
						data.System.Enotice_BuyCastleSkinTreasure = new NoticeContent.BuyCastleSkinreasure();
						data.System.Enotice_BuyCastleSkinTreasure.CastleSkinID = br.ReadUInt16();
						data.System.Enotice_BuyCastleSkinTreasure.ItemID = br.ReadUInt16();
						data.System.Enotice_BuyCastleSkinTreasure.ItemNum = br.ReadByte();
					}
					else if (data.System.Type == NoticeReport.Enotice_FederalRankPrize)
					{
						data.System.Enotice_FederalRankPrize = new NoticeContent.WorldKingPrize_NotKing();
						data.System.Enotice_FederalRankPrize.Place = br.ReadByte();
						data.System.Enotice_FederalRankPrize.PrizeNum = br.ReadByte();
						data.System.Enotice_FederalRankPrize.PrizeData = new NoticeContent.ActPrize[(int)data.System.Enotice_FederalRankPrize.PrizeNum];
						for (byte b13 = 0; b13 < data.System.Enotice_FederalRankPrize.PrizeNum; b13 += 1)
						{
							data.System.Enotice_FederalRankPrize.PrizeData[(int)b13].Rank = br.ReadByte();
							data.System.Enotice_FederalRankPrize.PrizeData[(int)b13].ItemID = br.ReadUInt16();
							data.System.Enotice_FederalRankPrize.PrizeData[(int)b13].Num = br.ReadByte();
						}
					}
					else if (data.System.Type == NoticeReport.Enotice_TreasureBackPrize)
					{
						data.System.Enotice_TreasureBackPrize = new NoticeContent.BuyTreasure();
						data.System.Enotice_TreasureBackPrize.Crystal = br.ReadUInt32();
						data.System.Enotice_TreasureBackPrize.BonusCrystal = br.ReadUInt32();
						data.System.Enotice_TreasureBackPrize.Gift = new NoticeContent.TreasureAllianceGift[5];
						for (int num16 = 0; num16 < 5; num16++)
						{
							data.System.Enotice_TreasureBackPrize.Gift[num16] = new NoticeContent.TreasureAllianceGift();
							data.System.Enotice_TreasureBackPrize.Gift[num16].ItemID = br.ReadUInt16();
							data.System.Enotice_TreasureBackPrize.Gift[num16].ItemNum = br.ReadUInt16();
						}
						data.System.Enotice_TreasureBackPrize.ItemNum = br.ReadByte();
						data.System.Enotice_TreasureBackPrize.Item = new NoticeContent.ComboBoxTBItem[(int)data.System.Enotice_TreasureBackPrize.ItemNum];
						for (int num17 = 0; num17 < (int)data.System.Enotice_TreasureBackPrize.ItemNum; num17++)
						{
							data.System.Enotice_TreasureBackPrize.Item[num17] = new NoticeContent.ComboBoxTBItem();
							data.System.Enotice_TreasureBackPrize.Item[num17].ItemID = br.ReadUInt16();
							data.System.Enotice_TreasureBackPrize.Item[num17].ItemNum = br.ReadUInt16();
							data.System.Enotice_TreasureBackPrize.Item[num17].ItemRank = br.ReadByte();
						}
					}
					else if (data.System.Type == NoticeReport.Enotice_LookingForStringTable)
					{
						data.System.Enotice_LookingForStringTable = new NoticeContent.LookingForStringTable();
						data.System.Enotice_LookingForStringTable.Title = br.ReadUInt32();
						data.System.Enotice_LookingForStringTable.Content = br.ReadUInt32();
					}
					else if (data.System.Type == NoticeReport.Enotice_MarchingPet_Cancel)
					{
						data.System.Enotice_MarchingPet_Cancel = new NoticeContent.MarchingPet_Cancel();
						data.System.Enotice_MarchingPet_Cancel.HasTarget = br.ReadByte();
						data.System.Enotice_MarchingPet_Cancel.HomeKingdom = br.ReadUInt16();
						data.System.Enotice_MarchingPet_Cancel.AllianceTag = br.ReadString();
						data.System.Enotice_MarchingPet_Cancel.Name = br.ReadString();
						data.System.Enotice_MarchingPet_Cancel.PetID = br.ReadUInt16();
						data.System.Enotice_MarchingPet_Cancel.Skill_ID = br.ReadUInt16();
						data.System.Enotice_MarchingPet_Cancel.Skill_LV = br.ReadByte();
					}
					else if (data.System.Type == NoticeReport.ENotice_PetStarUp)
					{
						data.System.ENotice_PetStarUp = new NoticeContent.PetStarUp();
						data.System.ENotice_PetStarUp.PetID = br.ReadUInt16();
						data.System.ENotice_PetStarUp.PetStar = br.ReadByte();
					}
					else if (data.System.Type == NoticeReport.ENotice_PrisonerPetSkillEscaped)
					{
						data.System.ENotice_PrisonerPetSkillEscaped = new NoticeContent.PetSkillEscaped();
						data.System.ENotice_PrisonerPetSkillEscaped.PetID = br.ReadUInt16();
						data.System.ENotice_PrisonerPetSkillEscaped.Skill_ID = br.ReadUInt16();
						data.System.ENotice_PrisonerPetSkillEscaped.Skill_LV = br.ReadByte();
					}
					else if (data.System.Type == NoticeReport.ENotice_LordPetSkillEscaped)
					{
						data.System.ENotice_LordPetSkillEscaped = new NoticeContent.PetSkillEscaped();
						data.System.ENotice_LordPetSkillEscaped.PetID = br.ReadUInt16();
						data.System.ENotice_LordPetSkillEscaped.Skill_ID = br.ReadUInt16();
						data.System.ENotice_LordPetSkillEscaped.Skill_LV = br.ReadByte();
					}
					else if (data.System.Type == NoticeReport.Enotice_ScoutTargetLeave)
					{
						data.System.Enotice_ScoutTargetLeave = new NoticeContent.MarchTargetLeave();
						data.System.Enotice_ScoutTargetLeave.OffsetLen = data.System.OffsetLen;
						if (data.System.Enotice_ScoutTargetLeave.OffsetLen > 0u)
						{
							data.System.Enotice_ScoutTargetLeave.HomeKingdom = br.ReadUInt16();
							data.System.Enotice_ScoutTargetLeave.AllianceTag = br.ReadString();
							data.System.Enotice_ScoutTargetLeave.Name = br.ReadString();
						}
					}
					else if (data.System.Type == NoticeReport.Enotice_AttackTargetLeave)
					{
						data.System.Enotice_AttackTargetLeave = new NoticeContent.MarchTargetLeave();
						data.System.Enotice_AttackTargetLeave.OffsetLen = data.System.OffsetLen;
						if (data.System.Enotice_AttackTargetLeave.OffsetLen > 0u)
						{
							data.System.Enotice_AttackTargetLeave.HomeKingdom = br.ReadUInt16();
							data.System.Enotice_AttackTargetLeave.AllianceTag = br.ReadString();
							data.System.Enotice_AttackTargetLeave.Name = br.ReadString();
						}
					}
					else if (data.System.Type == NoticeReport.Enotice_MaintainCompensation)
					{
						data.System.Enotice_MaintainCompensation = new NoticeContent.MaintainCompensation();
						data.System.Enotice_MaintainCompensation.MailTitleStrID = br.ReadUInt16();
						data.System.Enotice_MaintainCompensation.MailContentStrID = br.ReadUInt16();
						data.System.Enotice_MaintainCompensation.Crystal = br.ReadUInt32();
						data.System.Enotice_MaintainCompensation.ItemNum = br.ReadByte();
						data.System.Enotice_MaintainCompensation.Item = new NoticeContent.ComboBoxTBItem[(int)data.System.Enotice_MaintainCompensation.ItemNum];
						for (int num18 = 0; num18 < (int)data.System.Enotice_MaintainCompensation.ItemNum; num18++)
						{
							data.System.Enotice_MaintainCompensation.Item[num18] = new NoticeContent.ComboBoxTBItem();
							data.System.Enotice_MaintainCompensation.Item[num18].ItemID = br.ReadUInt16();
							data.System.Enotice_MaintainCompensation.Item[num18].ItemNum = br.ReadUInt16();
							data.System.Enotice_MaintainCompensation.Item[num18].ItemRank = br.ReadByte();
						}
					}
					else if (data.System.Type == NoticeReport.Enotice_BuyRedPocketTreasure)
					{
						data.System.Enotice_BuyRedPocketTreasure = new NoticeContent.BuyRedPocketTreasure();
						data.System.Enotice_BuyRedPocketTreasure.StringID = br.ReadUInt16();
					}
					else if (data.System.Type == NoticeReport.Enotice_SocialFriendModify)
					{
						data.System.Enotice_SocialFriendModify = new NoticeContent.SocialFriendMail();
						data.System.Enotice_SocialFriendModify.RemoveType = br.ReadByte();
						data.System.Enotice_SocialFriendModify.TargetName = br.ReadString();
						data.System.Enotice_SocialFriendModify.PlayerName = br.ReadString();
						data.System.Enotice_SocialFriendModify.PlayerTag = br.ReadString();
					}
					else if (data.System.Type == NoticeReport.Enotice_ReturnCeremony)
					{
						data.System.Enotice_ReturnCeremony = new NoticeContent.ReturnCeremony();
						data.System.Enotice_ReturnCeremony.Crystal = br.ReadUInt32();
						data.System.Enotice_ReturnCeremony.ItemNum = br.ReadByte();
						data.System.Enotice_ReturnCeremony.Item = new NoticeContent.ComboBoxTBItem[(int)data.System.Enotice_ReturnCeremony.ItemNum];
						for (int num19 = 0; num19 < (int)data.System.Enotice_ReturnCeremony.ItemNum; num19++)
						{
							data.System.Enotice_ReturnCeremony.Item[num19] = new NoticeContent.ComboBoxTBItem();
							data.System.Enotice_ReturnCeremony.Item[num19].ItemID = br.ReadUInt16();
							data.System.Enotice_ReturnCeremony.Item[num19].ItemNum = br.ReadUInt16();
							data.System.Enotice_ReturnCeremony.Item[num19].ItemRank = br.ReadByte();
						}
					}
					else if (data.System.Type == NoticeReport.Enotice_FirstBuyTreasurePrize)
					{
						data.System.Enotice_FirstBuyTreasurePrize = new NoticeContent.ReturnCeremony();
						data.System.Enotice_FirstBuyTreasurePrize.Crystal = br.ReadUInt32();
						data.System.Enotice_FirstBuyTreasurePrize.ItemNum = br.ReadByte();
						data.System.Enotice_FirstBuyTreasurePrize.Item = new NoticeContent.ComboBoxTBItem[(int)data.System.Enotice_FirstBuyTreasurePrize.ItemNum];
						for (int num20 = 0; num20 < (int)data.System.Enotice_FirstBuyTreasurePrize.ItemNum; num20++)
						{
							data.System.Enotice_FirstBuyTreasurePrize.Item[num20] = new NoticeContent.ComboBoxTBItem();
							data.System.Enotice_FirstBuyTreasurePrize.Item[num20].ItemID = br.ReadUInt16();
							data.System.Enotice_FirstBuyTreasurePrize.Item[num20].ItemNum = br.ReadUInt16();
							data.System.Enotice_FirstBuyTreasurePrize.Item[num20].ItemRank = br.ReadByte();
						}
					}
				}
			}
		}
		return true;
	}

	// Token: 0x060003C0 RID: 960 RVA: 0x0003ED78 File Offset: 0x0003CF78
	public bool LoadFavorMail(MailType MT, bool Force)
	{
		this.DoFavor.Type = MailType.EMAIL_LETTER;
		try
		{
			ushort num = 0;
			while ((int)num < this.Mailing.FavorSerial.Inbox.Length)
			{
				if (this.Mailing.FavorSerial.Inbox[(int)num].Serial > 0u && this.Mailing.FavorSerial.Inbox[(int)num].Type == this.DoFavor.Type)
				{
					using (FileStream fileStream = new FileStream(string.Format("{0}/Data/{1}/{2}{3}-{4}", new object[]
					{
						AssetManager.persistentDataPath,
						NetworkManager.UserID,
						MT,
						(byte)this.Mailing.FavorSerial.Inbox[(int)num].Type,
						this.Mailing.FavorSerial.Inbox[(int)num].Serial
					}), FileMode.OpenOrCreate, FileAccess.Read))
					{
						if (fileStream.Length <= 0L)
						{
							throw new Exception();
						}
						using (BinaryReader binaryReader = new BinaryReader(fileStream))
						{
							if (!this.LoadMail(this.DoFavor, binaryReader) || this.DoFavor.Mail.SerialID != this.Mailing.FavorSerial.Inbox[(int)num].Serial)
							{
								throw new Exception();
							}
							this.Mailing.FavorSerial.Mail.Mail[this.Mailing.FavorSerial.Inbox[(int)num].Serial] = this.DoFavor.Mail;
						}
					}
				}
				num += 1;
			}
		}
		catch (Exception ex)
		{
			this.ClearMail(this.DoFavor.Type, false);
		}
		this.DoFavor.Type = MailType.EMAIL_BATTLE;
		try
		{
			ushort num2 = 0;
			while ((int)num2 < this.Mailing.FavorSerial.Inbox.Length)
			{
				if (this.Mailing.FavorSerial.Inbox[(int)num2].Serial > 0u && this.Mailing.FavorSerial.Inbox[(int)num2].Type == this.DoFavor.Type)
				{
					using (FileStream fileStream2 = new FileStream(string.Format("{0}/Data/{1}/{2}{3}-{4}", new object[]
					{
						AssetManager.persistentDataPath,
						NetworkManager.UserID,
						MT,
						(byte)this.Mailing.FavorSerial.Inbox[(int)num2].Type,
						this.Mailing.FavorSerial.Inbox[(int)num2].Serial
					}), FileMode.OpenOrCreate, FileAccess.Read))
					{
						if (fileStream2.Length <= 0L)
						{
							throw new Exception();
						}
						using (BinaryReader binaryReader2 = new BinaryReader(fileStream2))
						{
							if (!this.LoadMail(this.DoFavor, binaryReader2) || this.DoFavor.Combat.SerialID != this.Mailing.FavorSerial.Inbox[(int)num2].Serial)
							{
								throw new Exception();
							}
							this.Mailing.FavorSerial.Combat.Mail[this.Mailing.FavorSerial.Inbox[(int)num2].Serial] = this.DoFavor.Combat;
						}
					}
				}
				num2 += 1;
			}
		}
		catch (Exception ex2)
		{
			this.ClearMail(this.DoFavor.Type, false);
		}
		this.DoFavor.Type = MailType.EMAIL_SYSTEM;
		try
		{
			ushort num3 = 0;
			while ((int)num3 < this.Mailing.FavorSerial.Inbox.Length)
			{
				if (this.Mailing.FavorSerial.Inbox[(int)num3].Serial > 0u && this.Mailing.FavorSerial.Inbox[(int)num3].Type == this.DoFavor.Type)
				{
					using (FileStream fileStream3 = new FileStream(string.Format("{0}/Data/{1}/{2}{3}-{4}", new object[]
					{
						AssetManager.persistentDataPath,
						NetworkManager.UserID,
						MT,
						(byte)this.Mailing.FavorSerial.Inbox[(int)num3].Type,
						this.Mailing.FavorSerial.Inbox[(int)num3].Serial
					}), FileMode.OpenOrCreate, FileAccess.Read))
					{
						if (fileStream3.Length <= 0L)
						{
							throw new Exception();
						}
						using (BinaryReader binaryReader3 = new BinaryReader(fileStream3))
						{
							if (!this.LoadMail(this.DoFavor, binaryReader3) || this.DoFavor.System.SerialID != this.Mailing.FavorSerial.Inbox[(int)num3].Serial)
							{
								throw new Exception();
							}
							this.Mailing.FavorSerial.System.Mail[this.Mailing.FavorSerial.Inbox[(int)num3].Serial] = this.DoFavor.System;
						}
					}
				}
				num3 += 1;
			}
		}
		catch (Exception ex3)
		{
			this.ClearMail(this.DoFavor.Type, false);
		}
		this.MailDataRefresh(MailType.EMAIL_FAVORY);
		return true;
	}

	// Token: 0x060003C1 RID: 961 RVA: 0x0003F444 File Offset: 0x0003D644
	public bool LoadSystemMail(MailType MT, bool Force)
	{
		if (!this.Mailing.SystemSerial.Loading)
		{
			return false;
		}
		ushort num = 0;
		while ((int)num < this.Mailing.SystemSerial.Inbox.Length)
		{
			if (this.Mailing.SystemSerial.Inbox[(int)num].Serial > 0u)
			{
				try
				{
					using (FileStream fileStream = new FileStream(string.Format("{0}/Data/{1}/{2}{3}-{4}", new object[]
					{
						Application.persistentDataPath,
						NetworkManager.UserID,
						MT,
						this.Mailing.SystemSerial.Inbox[(int)num].Serial,
						0
					}), FileMode.OpenOrCreate, FileAccess.Read))
					{
						if (fileStream.Length > 0L)
						{
							using (BinaryReader binaryReader = new BinaryReader(fileStream))
							{
								this.DoFavor.Type = this.Mailing.SystemSerial.Inbox[(int)num].Type;
								if (this.LoadMail(this.DoFavor, binaryReader))
								{
									this.Mailing.SystemSerial.Mail[this.DoFavor.System.SerialID] = this.DoFavor.System;
								}
							}
						}
						else
						{
							this.ResetMail();
						}
					}
				}
				catch (Exception ex)
				{
					return false;
				}
			}
			num += 1;
		}
		this.Mailing.SystemSerial.Loading = false;
		this.MailDataRefresh(MailType.EMAIL_SYSTEM);
		return true;
	}

	// Token: 0x060003C2 RID: 962 RVA: 0x0003F638 File Offset: 0x0003D838
	public bool LoadReportMail(MailType MT, bool Force)
	{
		if (!this.Mailing.ReportSerial.Loading)
		{
			return false;
		}
		ushort num = 0;
		while ((int)num < this.Mailing.ReportSerial.Inbox.Length)
		{
			if (this.Mailing.ReportSerial.Inbox[(int)num].Serial > 0u)
			{
				try
				{
					using (FileStream fileStream = new FileStream(string.Format("{0}/Data/{1}/{2}{3}-{4}", new object[]
					{
						Application.persistentDataPath,
						NetworkManager.UserID,
						MT,
						this.Mailing.ReportSerial.Inbox[(int)num].Serial,
						0
					}), FileMode.OpenOrCreate, FileAccess.Read))
					{
						if (fileStream.Length > 0L)
						{
							using (BinaryReader binaryReader = new BinaryReader(fileStream))
							{
								this.DoFavor.Type = this.Mailing.ReportSerial.Inbox[(int)num].Type;
								if (this.LoadMail(this.DoFavor, binaryReader))
								{
									this.Mailing.ReportSerial.Mail[this.DoFavor.Combat.SerialID] = this.DoFavor.Combat;
								}
							}
						}
						else
						{
							this.ResetMail();
						}
					}
				}
				catch (Exception ex)
				{
					return false;
				}
			}
			num += 1;
		}
		this.Mailing.ReportSerial.Loading = false;
		this.MailDataRefresh(MailType.EMAIL_BATTLE);
		return true;
	}

	// Token: 0x060003C3 RID: 963 RVA: 0x0003F82C File Offset: 0x0003DA2C
	public bool LoadMail(MailType MT, bool Force)
	{
		if (!this.Mailing.MailSerial.Loading)
		{
			return false;
		}
		ushort num = 0;
		while ((int)num < this.Mailing.MailSerial.Inbox.Length)
		{
			if (this.Mailing.MailSerial.Inbox[(int)num].Serial > 0u)
			{
				try
				{
					using (FileStream fileStream = new FileStream(string.Format("{0}/Data/{1}/{2}{3}-{4}", new object[]
					{
						Application.persistentDataPath,
						NetworkManager.UserID,
						MT,
						this.Mailing.MailSerial.Inbox[(int)num].Serial,
						0
					}), FileMode.OpenOrCreate, FileAccess.Read))
					{
						if (fileStream.Length > 0L)
						{
							using (BinaryReader binaryReader = new BinaryReader(fileStream))
							{
								this.DoFavor.Type = this.Mailing.MailSerial.Inbox[(int)num].Type;
								if (this.LoadMail(this.DoFavor, binaryReader))
								{
									if (!this.Mailing.MailSerial.Mail.ContainsKey(this.DoFavor.Mail.SerialID) && this.DoFavor.Mail.ReplyID > 0u && this.DoFavor.Mail.MailType == 0)
									{
										SubContent subContent;
										if (!this.Mailing.MailSerial.SubMail.TryGetValue(this.DoFavor.Mail.ReplyID, out subContent))
										{
											this.Mailing.MailSerial.SubMail.Add(this.DoFavor.Mail.ReplyID, subContent = new SubContent());
										}
										List<uint> list;
										if (!subContent.Mail.TryGetValue(this.DoFavor.Mail.SenderName, out list))
										{
											subContent.Mail.Add(this.DoFavor.Mail.SenderName, list = new List<uint>());
										}
										list.Add(this.DoFavor.Mail.SerialID);
										this.DoFavor.Mail.More = (byte)list.Count;
									}
									this.Mailing.MailSerial.Mail[this.DoFavor.Mail.SerialID] = this.DoFavor.Mail;
								}
							}
						}
						else
						{
							this.ResetMail();
						}
					}
				}
				catch (Exception ex)
				{
					return false;
				}
			}
			num += 1;
		}
		this.Mailing.MailSerial.Loading = (this.MIB.Check = false);
		this.MailDataRefresh(MailType.EMAIL_LETTER);
		return true;
	}

	// Token: 0x060003C4 RID: 964 RVA: 0x0003FB50 File Offset: 0x0003DD50
	public bool DeleteMail(MailType MT, uint ID)
	{
		MyFavorite myFavorite = new MyFavorite(MT, ID);
		if (this.FavorReportGet(ref myFavorite))
		{
			if (myFavorite.Type == MailType.EMAIL_SYSTEM)
			{
				if (myFavorite.System.BeChecked && this.Outlooking && this.Mailing.FavorSerial.Select > 0u)
				{
					this.Mailing.FavorSerial.Select -= 1u;
				}
				this.DeleteFavorMail(myFavorite, myFavorite.Serial, 0u);
				this.Mailing.FavorSerial.Inbox[(int)myFavorite.System.Index].Serial = 0u;
				this.Mailing.FavorSerial.System.Mail.Remove(myFavorite.Serial);
			}
			else if (myFavorite.Type == MailType.EMAIL_BATTLE)
			{
				if (myFavorite.Combat.BeChecked && this.Outlooking && this.Mailing.FavorSerial.Select > 0u)
				{
					this.Mailing.FavorSerial.Select -= 1u;
				}
				this.DeleteFavorMail(myFavorite, myFavorite.Serial, 0u);
				this.Mailing.FavorSerial.Inbox[(int)myFavorite.Combat.Index].Serial = 0u;
				this.Mailing.FavorSerial.Combat.Mail.Remove(myFavorite.Serial);
			}
			else if (myFavorite.Type == MailType.EMAIL_LETTER)
			{
				if (myFavorite.Mail.BeChecked && this.Outlooking && this.Mailing.FavorSerial.Select > 0u)
				{
					this.Mailing.FavorSerial.Select -= 1u;
				}
				this.DeleteFavorMail(myFavorite, myFavorite.Serial, 0u);
				this.Mailing.FavorSerial.Inbox[(int)myFavorite.Mail.Index].Serial = 0u;
				this.Mailing.FavorSerial.Mail.Mail.Remove(myFavorite.Serial);
			}
			if (this.Mailing.FavorSerial.Count > 0u)
			{
				this.Mailing.FavorSerial.Count -= 1u;
			}
		}
		else
		{
			MyFavorite myFavorite2 = new MyFavorite(MT, ID);
			if (MT == MailType.EMAIL_LETTER)
			{
				MailContent mailContent;
				if ((mailContent = this.MailReportGet(myFavorite.Serial)) != null)
				{
					myFavorite2.Kind = MailType.EMAIL_LETTER;
					mailContent.BeKill = true;
					if (mailContent.BeChecked && this.Outlooking && this.Mailing.MailSerial.Select > 0u)
					{
						this.Mailing.MailSerial.Select -= 1u;
					}
					SubContent subContent;
					List<uint> list;
					if (mailContent.More > 1)
					{
						if (this.Mailing.MailSerial.SubMail.TryGetValue(mailContent.ReplyID, out subContent) && subContent.Mail.TryGetValue(mailContent.SenderName, out list))
						{
							myFavorite.Serial = list[list.Count - 1];
							for (int i = list.Count; i > 0; i--)
							{
								if (mailContent.SerialID == list[i - 1])
								{
									list.RemoveAt(i - 1);
									myFavorite2.Serial = list[list.Count - 1];
									if (list.Count == 1 && this.Mailing.MailSerial.Mail.TryGetValue(list[0], out myFavorite2.Mail))
									{
										myFavorite2.Mail.More = 1;
									}
									break;
								}
							}
							if (myFavorite.Serial == mailContent.SerialID && this.MailReportGet(ref myFavorite2))
							{
								this.Mailing.MailSerial.Inbox[(int)mailContent.Index].Serial = myFavorite2.Mail.SerialID;
								this.Mailing.MailSerial.Inbox[(int)mailContent.Index].Timing = myFavorite2.Mail.Times;
								this.Mailing.MailSerial.Inbox[(int)mailContent.Index].Type = myFavorite2.Kind;
							}
						}
					}
					else
					{
						this.Mailing.MailSerial.Inbox[(int)mailContent.Index].Serial = 0u;
						if (this.Mailing.MailSerial.Count > 0u)
						{
							this.Mailing.MailSerial.Count -= 1u;
						}
					}
					if (this.Mailing.MailSerial.SubMail.TryGetValue(mailContent.ReplyID, out subContent) && subContent.Mail.TryGetValue(mailContent.SenderName, out list) && list.Count == 1 && list[0] == mailContent.SerialID)
					{
						subContent.Mail.Remove(mailContent.SenderName);
					}
					this.DeleteMail(myFavorite2, mailContent.SerialID, 0u);
					this.Mailing.MailSerial.Mail.Remove(mailContent.SerialID);
				}
			}
			else if (MT == MailType.EMAIL_BATTLE)
			{
				CombatReport combatReport;
				if ((combatReport = this.CombatReportGet(myFavorite.Serial)) != null)
				{
					combatReport.BeKill = true;
					if (combatReport.BeChecked && this.Outlooking && this.Mailing.ReportSerial.Select > 0u)
					{
						this.Mailing.ReportSerial.Select -= 1u;
					}
					if (combatReport.Type == CombatCollectReport.CCR_COLLECT)
					{
						myFavorite2.Kind = MailType.EMAIL_BATTLE;
						myFavorite2.Serial = (myFavorite.Serial = this.Mailing.ReportSerial.Gather[this.Mailing.ReportSerial.Gather.Count - 1]);
						for (int j = this.Mailing.ReportSerial.Gather.Count; j > 0; j--)
						{
							if (combatReport.SerialID == this.Mailing.ReportSerial.Gather[j - 1])
							{
								this.Mailing.ReportSerial.Gather.RemoveAt(j - 1);
								myFavorite2.Serial = ((this.Mailing.ReportSerial.Gather.Count <= 0) ? 0u : this.Mailing.ReportSerial.Gather[this.Mailing.ReportSerial.Gather.Count - 1]);
								break;
							}
						}
						if (myFavorite.Serial == combatReport.SerialID)
						{
							if (this.MailReportGet(ref myFavorite2))
							{
								this.Mailing.ReportSerial.Inbox[(int)combatReport.Index].Serial = myFavorite2.Combat.SerialID;
								this.Mailing.ReportSerial.Inbox[(int)combatReport.Index].Timing = myFavorite2.Combat.Times;
							}
							else
							{
								this.Mailing.ReportSerial.Inbox[(int)combatReport.Index].Serial = 0u;
								if (this.Mailing.ReportSerial.Count > 0u)
								{
									this.Mailing.ReportSerial.Count -= 1u;
								}
							}
						}
						GUIManager.Instance.UpdateUI(EGUIWindow.UI_Letter_Collection, 1, 0);
					}
					else if (combatReport.Type == CombatCollectReport.CCR_RESOURCE)
					{
						myFavorite2.Kind = MailType.EMAIL_BATTLE;
						myFavorite2.Serial = (myFavorite.Serial = this.Mailing.ReportSerial.ResourceID);
						for (int k = this.Mailing.ReportSerial.Resource.Count; k > 0; k--)
						{
							if (combatReport.SerialID == this.Mailing.ReportSerial.Resource[k - 1])
							{
								this.Mailing.ReportSerial.Resource.RemoveAt(k - 1);
								myFavorite2.Serial = ((this.Mailing.ReportSerial.Resource.Count <= 0) ? 0u : this.Mailing.ReportSerial.Resource[this.Mailing.ReportSerial.Resource.Count - 1]);
								break;
							}
						}
						if (myFavorite.Serial == combatReport.SerialID)
						{
							if (this.MailReportGet(ref myFavorite2))
							{
								this.Mailing.ReportSerial.Inbox[(int)combatReport.Index].Serial = myFavorite2.Combat.SerialID;
								this.Mailing.ReportSerial.Inbox[(int)combatReport.Index].Timing = myFavorite2.Combat.Times;
							}
							else
							{
								this.Mailing.ReportSerial.Inbox[(int)combatReport.Index].Serial = 0u;
								if (this.Mailing.ReportSerial.Count > 0u)
								{
									this.Mailing.ReportSerial.Count -= 1u;
								}
							}
						}
						GUIManager.Instance.UpdateUI(EGUIWindow.UI_Letter_Resources, 1, 0);
					}
					else if (combatReport.Type == CombatCollectReport.CCR_RECON)
					{
						myFavorite2.Kind = MailType.EMAIL_BATTLE;
						myFavorite2.Serial = (myFavorite.Serial = this.Mailing.ReportSerial.AntiScoutID);
						for (int l = this.Mailing.ReportSerial.AntiScout.Count; l > 0; l--)
						{
							if (combatReport.SerialID == this.Mailing.ReportSerial.AntiScout[l - 1])
							{
								this.Mailing.ReportSerial.AntiScout.RemoveAt(l - 1);
								myFavorite2.Serial = ((this.Mailing.ReportSerial.AntiScout.Count <= 0) ? 0u : this.Mailing.ReportSerial.AntiScout[this.Mailing.ReportSerial.AntiScout.Count - 1]);
								break;
							}
						}
						if (myFavorite.Serial == combatReport.SerialID)
						{
							if (this.MailReportGet(ref myFavorite2))
							{
								this.Mailing.ReportSerial.Inbox[(int)combatReport.Index].Serial = myFavorite2.Combat.SerialID;
								this.Mailing.ReportSerial.Inbox[(int)combatReport.Index].Timing = myFavorite2.Combat.Times;
							}
							else
							{
								this.Mailing.ReportSerial.Inbox[(int)combatReport.Index].Serial = 0u;
								if (this.Mailing.ReportSerial.Count > 0u)
								{
									this.Mailing.ReportSerial.Count -= 1u;
								}
							}
						}
						GUIManager.Instance.UpdateUI(EGUIWindow.UI_Letter_Watchtower_Recon, 1, 0);
					}
					else
					{
						for (int m = 0; m < this.Mailing.ReportSerial.Inbox.Length; m++)
						{
							if (this.Mailing.ReportSerial.Inbox[m].Serial == combatReport.SerialID)
							{
								this.Mailing.ReportSerial.Inbox[m].Serial = 0u;
								if (this.Mailing.ReportSerial.Count > 0u)
								{
									this.Mailing.ReportSerial.Count -= 1u;
								}
								break;
							}
						}
					}
					myFavorite2.Kind = MailType.EMAIL_BATTLE;
					this.DeleteMail(myFavorite2, combatReport.SerialID, 0u);
					this.Mailing.ReportSerial.Mail.Remove(combatReport.SerialID);
				}
			}
			else if (MT == MailType.EMAIL_SYSTEM)
			{
				myFavorite2.Type = MailType.EMAIL_SYSTEM;
				myFavorite2.Kind = MailType.EMAIL_SYSTEM;
				if ((myFavorite2.System = this.SystemReportGet(myFavorite2.Serial)) != null)
				{
					myFavorite2.System.BeKill = true;
					if (myFavorite2.System.BeChecked && this.Outlooking && this.Mailing.SystemSerial.Select > 0u)
					{
						this.Mailing.SystemSerial.Select -= 1u;
					}
					this.Mailing.SystemSerial.Inbox[(int)myFavorite2.System.Index].Serial = 0u;
					if (this.Mailing.SystemSerial.Count > 0u)
					{
						this.Mailing.SystemSerial.Count -= 1u;
					}
					this.DeleteMail(myFavorite2, myFavorite2.Serial, 0u);
					this.Mailing.SystemSerial.Mail.Remove(myFavorite2.Serial);
				}
			}
		}
		return true;
	}

	// Token: 0x060003C5 RID: 965 RVA: 0x00040884 File Offset: 0x0003EA84
	public bool LoadMail(MailType MT, uint ID)
	{
		try
		{
			using (FileStream fileStream = new FileStream(string.Format("{0}/Data/{1}/{2}{3}-{4}", new object[]
			{
				AssetManager.persistentDataPath,
				NetworkManager.UserID,
				MT,
				ID,
				0
			}), FileMode.OpenOrCreate, FileAccess.Read))
			{
				if (fileStream.Length > 0L)
				{
					using (BinaryReader binaryReader = new BinaryReader(fileStream))
					{
						return this.LoadMail(this.DoFavor, binaryReader);
					}
				}
			}
		}
		catch (Exception ex)
		{
			return false;
		}
		return false;
	}

	// Token: 0x060003C6 RID: 966 RVA: 0x00040988 File Offset: 0x0003EB88
	public bool LoadFavorMail(MailType MT, uint ID)
	{
		try
		{
			using (FileStream fileStream = new FileStream(string.Format("{0}/Data/{1}/{2}{3}-{4}", new object[]
			{
				AssetManager.persistentDataPath,
				NetworkManager.UserID,
				MT,
				(byte)this.DoFavor.Type,
				ID
			}), FileMode.OpenOrCreate, FileAccess.Read))
			{
				if (fileStream.Length > 0L)
				{
					using (BinaryReader binaryReader = new BinaryReader(fileStream))
					{
						return this.LoadMail(this.DoFavor, binaryReader);
					}
				}
			}
		}
		catch (Exception ex)
		{
			return false;
		}
		return false;
	}

	// Token: 0x060003C7 RID: 967 RVA: 0x00040A94 File Offset: 0x0003EC94
	public bool DeleteMail(MyFavorite Data, uint Serial, uint SubSerial = 0u)
	{
		try
		{
			File.Delete(string.Format("{0}/Data/{1}/{2}{3}-{4}", new object[]
			{
				AssetManager.persistentDataPath,
				NetworkManager.UserID,
				Data.Kind,
				Serial,
				SubSerial
			}));
		}
		catch (Exception ex)
		{
			return false;
		}
		return true;
	}

	// Token: 0x060003C8 RID: 968 RVA: 0x00040B1C File Offset: 0x0003ED1C
	public bool DeleteFavorMail(MyFavorite Data, uint Serial, uint SubSerial = 0u)
	{
		try
		{
			File.Delete(string.Format("{0}/Data/{1}/{2}{3}-{4}", new object[]
			{
				AssetManager.persistentDataPath,
				NetworkManager.UserID,
				Data.Kind,
				(byte)Data.Type,
				Serial
			}));
		}
		catch (Exception ex)
		{
			return false;
		}
		return true;
	}

	// Token: 0x060003C9 RID: 969 RVA: 0x00040BAC File Offset: 0x0003EDAC
	public bool SaveMail(MyFavorite Data, uint Serial, uint SubSerial = 0u, uint SubType = 0u)
	{
		try
		{
			StringBuilder stringBuilder = new StringBuilder();
			stringBuilder.AppendFormat("{0}/Data/{1}/{2}{3}-{4}", new object[]
			{
				AssetManager.persistentDataPath,
				NetworkManager.UserID,
				Data.Type,
				Serial,
				SubSerial
			});
			using (FileStream fileStream = new FileStream(stringBuilder.ToString(), FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.Read, 4096))
			{
				using (BinaryWriter binaryWriter = new BinaryWriter(fileStream))
				{
					this.SaveMail(Data, binaryWriter);
				}
			}
		}
		catch (Exception ex)
		{
			return false;
		}
		return true;
	}

	// Token: 0x060003CA RID: 970 RVA: 0x00040CB0 File Offset: 0x0003EEB0
	public void SaveMail(MyFavorite Data, BinaryWriter bw)
	{
		if (Data.Type == MailType.EMAIL_LETTER)
		{
			bw.Write(6);
			bw.Write(Data.Mail.SerialID);
			bw.Write(Data.Mail.Flag);
			bw.Write(Data.Mail.Times);
			bw.Write(Data.Mail.MailType);
			bw.Write(Data.Mail.ReplyID);
			bw.Write(Data.Mail.SenderHead);
			bw.Write(Data.Mail.SenderKindom);
			bw.Write(Data.Mail.SenderTag);
			bw.Write(Data.Mail.SenderName);
			bw.Write(Data.Mail.ExtraFlag);
			bw.Write(Data.Mail.TitleLen);
			bw.Write(Data.Mail.ContentLen);
			bw.Write(Data.Mail.AttachNum);
			int num = 0;
			while (num < 6 && num < (int)Data.Mail.AttachNum)
			{
				bw.Write(Data.Mail.Attach[num].KingdomID);
				bw.Write(Data.Mail.Attach[num].ZoneID);
				bw.Write(Data.Mail.Attach[num].PointID);
				num++;
			}
			bw.Write(Data.Mail.Title);
			bw.Write(Data.Mail.Content);
			bw.Write(Data.Mail.LanguageSource);
			bw.Write(Data.Mail.LanguageTarget);
			bw.Write(Data.Mail.Translation);
			bw.Write(Data.Mail.TitleT);
			bw.Write(Data.Mail.ContentT);
		}
		else if (Data.Type == MailType.EMAIL_BATTLE)
		{
			bw.Write(8);
			bw.Write(Data.Combat.SerialID);
			bw.Write(Data.Combat.Flag);
			bw.Write(Data.Combat.Times);
			bw.Write((byte)Data.Combat.Type);
			if (Data.Combat.Type == CombatCollectReport.CCR_BATTLE)
			{
				bw.Write(Data.Combat.Combat.KingdomID);
				bw.Write(Data.Combat.Combat.CombatlZone);
				bw.Write(Data.Combat.Combat.CombatPoint);
				bw.Write((byte)Data.Combat.Combat.CombatPointKind);
				bw.Write(Data.Combat.Combat.Side);
				bw.Write(Data.Combat.Combat.AssaultKingdomID);
				bw.Write(Data.Combat.Combat.AssaultAllianceTag);
				bw.Write(Data.Combat.Combat.AssaultName);
				bw.Write(Data.Combat.Combat.DefenceKingdomID);
				bw.Write(Data.Combat.Combat.DefenceAllianceTag);
				bw.Write(Data.Combat.Combat.DefenceName);
				bw.Write((byte)Data.Combat.Combat.Result);
				for (int i = 0; i < 5; i++)
				{
					bw.Write(Data.Combat.Combat.Resource[i]);
				}
				for (int j = 0; j < 5; j++)
				{
					bw.Write(Data.Combat.Combat.HeroData[j].HeroID);
					bw.Write(Data.Combat.Combat.HeroData[j].Star);
				}
				bw.Write(Data.Combat.Combat.EarnLordExp);
				bw.Write(Data.Combat.Combat.EarnHeroExp);
				bw.Write(Data.Combat.Combat.DetailAutoID);
				bw.Write(Data.Combat.Combat.DetailDbServerID);
				bw.Write(Data.Combat.Combat.AccessKey);
				bw.Write(Data.Combat.Combat.DetailSelfIndex);
				bw.Write((byte)Data.Combat.Combat.CaptureResult);
				bw.Write(Data.Combat.Combat.Summary.AssaultCapitalZone);
				bw.Write(Data.Combat.Combat.Summary.AssaultCapitalPoint);
				bw.Write(Data.Combat.Combat.Summary.AssaultLosePower);
				bw.Write(Data.Combat.Combat.Summary.AssaultTroopForce);
				bw.Write(Data.Combat.Combat.Summary.AssaultTroopInjure);
				bw.Write(Data.Combat.Combat.Summary.AssaultTroopDeath);
				bw.Write(Data.Combat.Combat.Summary.DefenceCapitalZone);
				bw.Write(Data.Combat.Combat.Summary.DefenceCapitalPoint);
				bw.Write(Data.Combat.Combat.Summary.DefenceLosePower);
				bw.Write(Data.Combat.Combat.Summary.DefenceTroopForce);
				bw.Write(Data.Combat.Combat.Summary.DefenceTroopInjure);
				bw.Write(Data.Combat.Combat.Summary.DefenceTroopDeath);
				bw.Write(Data.Combat.Combat.Summary.WallDefence);
				bw.Write(Data.Combat.Combat.Summary.WallDamage);
				bw.Write(Data.Combat.Combat.Summary.TrapNumber);
				bw.Write(Data.Combat.Combat.Summary.LoseTrapNumber);
				bw.Write(Data.Combat.Combat.Summary.SaveTrapNumber);
				bw.Write(Data.Combat.Combat.Summary.AssaultLevel);
				bw.Write(Data.Combat.Combat.Summary.AssaultHead);
				bw.Write(Data.Combat.Combat.Summary.AssaultLordInCombat);
				bw.Write(Data.Combat.Combat.Summary.AssaultVIPLevel);
				bw.Write(Data.Combat.Combat.Summary.IsLeader);
				bw.Write(Data.Combat.Combat.Summary.DefenceLevel);
				bw.Write(Data.Combat.Combat.Summary.DefenceHead);
				bw.Write(Data.Combat.Combat.Summary.DefenceLordInCombat);
				bw.Write(Data.Combat.Combat.Summary.DefenceVIPLevel);
				bw.Write(Data.Combat.Combat.Summary.AssaultAllianceRank);
				bw.Write(Data.Combat.Combat.Summary.DefenceAllianceRank);
				bw.Write(Data.Combat.Combat.Version);
				bw.Write(Data.Combat.Combat.PatchNo);
				bw.Write(Data.Combat.Combat.Atkcoord);
				bw.Write(Data.Combat.Combat.Defcoord);
				bw.Write(Data.Combat.Combat.PetSkillPatchNo);
				for (int k = 0; k < 20; k++)
				{
					bw.Write(Data.Combat.Combat.m_AssaultPetSkill_ID[k]);
				}
				for (int l = 0; l < 20; l++)
				{
					bw.Write(Data.Combat.Combat.m_AssaultPetSkill_LV[l]);
				}
				for (int m = 0; m < 20; m++)
				{
					bw.Write(Data.Combat.Combat.m_DefencePetSkill_ID[m]);
				}
				for (int n = 0; n < 20; n++)
				{
					bw.Write(Data.Combat.Combat.m_DefencePetSkill_LV[n]);
				}
			}
			else if (Data.Combat.Type == CombatCollectReport.CCR_RECON)
			{
				bw.Write(Data.Combat.Recon.KingdomID);
				bw.Write(Data.Combat.Recon.CombatlZone);
				bw.Write(Data.Combat.Recon.CombatPoint);
				bw.Write((byte)Data.Combat.Recon.CombatPointKind);
				bw.Write(Data.Combat.Recon.AntiScout);
				bw.Write(Data.Combat.Recon.WatchLevel);
				bw.Write(Data.Combat.Recon.SrcKingdomID);
				bw.Write(Data.Combat.Recon.SrcName);
				bw.Write(Data.Combat.Recon.SrcAllianceTag);
				bw.Write(Data.Combat.Recon.SrcHead);
				bw.Write(Data.Combat.Recon.bAmbush);
			}
			else if (Data.Combat.Type == CombatCollectReport.CCR_RESOURCE)
			{
				bw.Write(Data.Combat.Resource.Result);
				bw.Write(Data.Combat.Resource.Name);
				for (int num2 = 0; num2 < 5; num2++)
				{
					bw.Write(Data.Combat.Resource.Resource[num2]);
				}
			}
			else if (Data.Combat.Type == CombatCollectReport.CCR_COLLECT)
			{
				bw.Write(Data.Combat.Gather.KingdomID);
				bw.Write(Data.Combat.Gather.GatherZone);
				bw.Write(Data.Combat.Gather.GatherPoint);
				bw.Write((byte)Data.Combat.Gather.GatherPointKind);
				bw.Write(Data.Combat.Gather.GatherPointLevel);
				bw.Write(Data.Combat.Gather.Resource);
				bw.Write(Data.Combat.Gather.HeroNum);
				bw.Write(Data.Combat.Gather.ItemLen);
				bw.Write(Data.Combat.Gather.Item);
				if (Data.Combat.Gather.HeroNum > 0)
				{
					for (int num3 = 0; num3 < (int)Data.Combat.Gather.HeroNum; num3++)
					{
						bw.Write(Data.Combat.Gather.mHero[num3].HeroID);
						bw.Write(Data.Combat.Gather.mHero[num3].Star);
						bw.Write(Data.Combat.Gather.mHero[num3].Exp);
					}
				}
				if (Data.Combat.Gather.ItemLen > 0)
				{
					for (int num4 = 0; num4 < Data.Combat.Gather.mResourceItem.Length; num4++)
					{
						bw.Write(Data.Combat.Gather.mResourceItem[num4].ItemID);
						bw.Write(Data.Combat.Gather.mResourceItem[num4].Quantity);
						bw.Write(Data.Combat.Gather.mResourceItem[num4].Rank);
					}
				}
			}
			else if (Data.Combat.Type == CombatCollectReport.CCR_SCOUT)
			{
				bw.Write(Data.Combat.Scout.KingdomID);
				bw.Write(Data.Combat.Scout.CombatlZone);
				bw.Write(Data.Combat.Scout.CombatPoint);
				bw.Write((byte)Data.Combat.Scout.CombatPointKind);
				bw.Write(Data.Combat.Scout.ObjKingdomID);
				bw.Write(Data.Combat.Scout.ObjAllianceTag);
				bw.Write(Data.Combat.Scout.ObjName);
				bw.Write(Data.Combat.Scout.ScoutResult);
				bw.Write(Data.Combat.Scout.ScoutLevel);
				bw.Write(Data.Combat.Scout.ScoutContentLen);
				bw.Write(Data.Combat.Scout.ScoutContent);
			}
			else if (Data.Combat.Type == CombatCollectReport.CCR_MONSTER)
			{
				bw.Write(Data.Combat.Monster.KindgomID);
				bw.Write(Data.Combat.Monster.Zone);
				bw.Write(Data.Combat.Monster.Point);
				bw.Write(Data.Combat.Monster.Result);
				if (Data.Combat.Monster.Result < 2 || Data.Combat.Monster.Result > 3)
				{
					bw.Write(Data.Combat.Monster.Head);
					bw.Write(Data.Combat.Monster.MonsterID);
					bw.Write(Data.Combat.Monster.MonsterLv);
					bw.Write(Data.Combat.Monster.BeginHPPercent);
					bw.Write(Data.Combat.Monster.EndHPPercent);
					bw.Write(Data.Combat.Monster.MonsterMaxHP);
					bw.Write(Data.Combat.Monster.Exp);
					for (int num5 = 0; num5 < 5; num5++)
					{
						bw.Write(Data.Combat.Monster.HeroID[num5]);
					}
					for (int num6 = 0; num6 < 5; num6++)
					{
						bw.Write(Data.Combat.Monster.HeroExp[num6]);
					}
					for (int num7 = 0; num7 < 5; num7++)
					{
						bw.Write(Data.Combat.Monster.HeroData[num7].SkillLV1);
						bw.Write(Data.Combat.Monster.HeroData[num7].SkillLV2);
						bw.Write(Data.Combat.Monster.HeroData[num7].SkillLV3);
						bw.Write(Data.Combat.Monster.HeroData[num7].SkillLV4);
						bw.Write(Data.Combat.Monster.HeroData[num7].LV);
						bw.Write(Data.Combat.Monster.HeroData[num7].Star);
						bw.Write(Data.Combat.Monster.HeroData[num7].Enhance);
						bw.Write(Data.Combat.Monster.HeroData[num7].Equip);
					}
					bw.Write(Data.Combat.Monster.SequentialDamageTimes);
					bw.Write(Data.Combat.Monster.EffectiveDamageTimes);
					bw.Write(Data.Combat.Monster.AttrScale.ActionTimes);
					bw.Write(Data.Combat.Monster.AttrScale.SequentialDamageScale);
					bw.Write(Data.Combat.Monster.AttrScale.DamageScale);
					bw.Write(Data.Combat.Monster.AttrScale.MaxHPScale);
					bw.Write(Data.Combat.Monster.AttrScale.HealingScale);
					bw.Write(Data.Combat.Monster.AttrScale.InitMP);
					bw.Write(Data.Combat.Monster.RandomSeed);
					bw.Write(Data.Combat.Monster.RandomGap);
					bw.Write(Data.Combat.Monster.Version);
					bw.Write(Data.Combat.Monster.PatchNo);
					if (Data.Combat.Monster.Result < 2)
					{
						bw.Write(Data.Combat.Monster.ItemLen);
						for (int num8 = 0; num8 < (int)Data.Combat.Monster.ItemLen; num8++)
						{
							bw.Write(Data.Combat.Monster.Item[num8].ItemID);
							bw.Write(Data.Combat.Monster.Item[num8].Num);
							bw.Write(Data.Combat.Monster.Item[num8].ItemRank);
						}
					}
					else
					{
						bw.Write(Data.Combat.Monster.AllianceTag);
					}
				}
			}
			else if (Data.Combat.Type == CombatCollectReport.CCR_NPCCOMBAT)
			{
				bw.Write(Data.Combat.NPCCombat.KingdomID);
				bw.Write(Data.Combat.NPCCombat.CombatlZone);
				bw.Write(Data.Combat.NPCCombat.CombatPoint);
				bw.Write((byte)Data.Combat.NPCCombat.CombatPointKind);
				bw.Write(Data.Combat.NPCCombat.Side);
				bw.Write(Data.Combat.NPCCombat.AssaultKingdomID);
				bw.Write(Data.Combat.NPCCombat.AssaultAllianceTag);
				bw.Write(Data.Combat.NPCCombat.AssaultName);
				bw.Write(Data.Combat.NPCCombat.NPCLevel);
				bw.Write(Data.Combat.NPCCombat.NPCID);
				bw.Write((byte)Data.Combat.NPCCombat.Result);
				bw.Write(Data.Combat.NPCCombat.Reward);
				for (int num9 = 0; num9 < Data.Combat.NPCCombat.HeroData.Length; num9++)
				{
					bw.Write(Data.Combat.NPCCombat.HeroData[num9].HeroID);
					bw.Write(Data.Combat.NPCCombat.HeroData[num9].Star);
				}
				bw.Write(Data.Combat.NPCCombat.EarnLordExp);
				bw.Write(Data.Combat.NPCCombat.EarnHeroExp);
				bw.Write(Data.Combat.NPCCombat.DetailAutoID);
				bw.Write(Data.Combat.NPCCombat.DetailDbServerID);
				bw.Write(Data.Combat.NPCCombat.AccessKey);
				bw.Write(Data.Combat.NPCCombat.DetailSelfIndex);
				bw.Write(Data.Combat.NPCCombat.ResurrextTotal);
				bw.Write(Data.Combat.NPCCombat.SummaryHead.AssaultCapitalZone);
				bw.Write(Data.Combat.NPCCombat.SummaryHead.AssaultCapitalPoint);
				bw.Write(Data.Combat.NPCCombat.SummaryHead.AssaultLosePower);
				bw.Write(Data.Combat.NPCCombat.SummaryHead.AssaultTroopForce);
				bw.Write(Data.Combat.NPCCombat.SummaryHead.AssaultTroopInjure);
				bw.Write(Data.Combat.NPCCombat.SummaryHead.AssaultTroopDeath);
				bw.Write(Data.Combat.NPCCombat.SummaryHead.DefenceCapitalZone);
				bw.Write(Data.Combat.NPCCombat.SummaryHead.DefenceCapitalPoint);
				bw.Write(Data.Combat.NPCCombat.SummaryHead.DefenceLosePower);
				bw.Write(Data.Combat.NPCCombat.SummaryHead.DefenceTroopForce);
				bw.Write(Data.Combat.NPCCombat.SummaryHead.DefenceTroopInjure);
				bw.Write(Data.Combat.NPCCombat.SummaryHead.DefenceTroopDeath);
				bw.Write(Data.Combat.NPCCombat.Summary.WallDefence);
				bw.Write(Data.Combat.NPCCombat.Summary.WallDamage);
				bw.Write(Data.Combat.NPCCombat.Summary.TrapNumber);
				bw.Write(Data.Combat.NPCCombat.Summary.LoseTrapNumber);
				bw.Write(Data.Combat.NPCCombat.Summary.SaveTrapNumber);
				bw.Write(Data.Combat.NPCCombat.Summary.AssaultLevel);
				bw.Write(Data.Combat.NPCCombat.Summary.AssaultHead);
				bw.Write(Data.Combat.NPCCombat.Summary.AssaultLordInCombat);
				bw.Write(Data.Combat.NPCCombat.Summary.AssaultVIPLevel);
				bw.Write(Data.Combat.NPCCombat.Summary.IsLeader);
				bw.Write(Data.Combat.NPCCombat.Summary.AssaultAllianceRank);
				bw.Write(Data.Combat.NPCCombat.Version);
				bw.Write(Data.Combat.NPCCombat.PatchNo);
				bw.Write(Data.Combat.NPCCombat.AssaultArmyCoord);
				bw.Write(Data.Combat.NPCCombat.DefenceArmyCoord);
				bw.Write(Data.Combat.NPCCombat.PetSkillPatchNo);
				for (int num10 = 0; num10 < 20; num10++)
				{
					bw.Write(Data.Combat.NPCCombat.m_AssaultPetSkill_ID[num10]);
				}
				for (int num11 = 0; num11 < 20; num11++)
				{
					bw.Write(Data.Combat.NPCCombat.m_AssaultPetSkill_LV[num11]);
				}
			}
			else if (Data.Combat.Type == CombatCollectReport.CCR_NPCSCOUT)
			{
				bw.Write(Data.Combat.NPCScout.KingdomID);
				bw.Write(Data.Combat.NPCScout.CombatlZone);
				bw.Write(Data.Combat.NPCScout.CombatPoint);
				bw.Write((byte)Data.Combat.NPCScout.CombatPointKind);
				bw.Write(Data.Combat.NPCScout.NPCLevel);
				bw.Write(Data.Combat.NPCScout.NPCID);
				bw.Write(Data.Combat.NPCScout.Reward);
				bw.Write(Data.Combat.NPCScout.ScoutResult);
				bw.Write(Data.Combat.NPCScout.ScoutLevel);
				bw.Write(Data.Combat.NPCScout.ScoutContentLen);
				bw.Write(Data.Combat.NPCScout.ScoutContent);
			}
			else if (Data.Combat.Type == CombatCollectReport.CCR_PETREPORT)
			{
				bw.Write(Data.Combat.Pet.KindgomID);
				bw.Write(Data.Combat.Pet.Zone);
				bw.Write(Data.Combat.Pet.Point);
				bw.Write(Data.Combat.Pet.Kind);
				bw.Write(Data.Combat.Pet.Side);
				bw.Write(Data.Combat.Pet.AssaultKingdomID);
				bw.Write(Data.Combat.Pet.AssaultAllianceTag);
				bw.Write(Data.Combat.Pet.AssaultName);
				bw.Write(Data.Combat.Pet.AssaultCapitalZone);
				bw.Write(Data.Combat.Pet.AssaultCapitalPoint);
				bw.Write(Data.Combat.Pet.AssaultLevel);
				bw.Write(Data.Combat.Pet.AssaultHead);
				bw.Write(Data.Combat.Pet.AssaultVIPLevel);
				bw.Write(Data.Combat.Pet.AssaultAllianceRank);
				bw.Write(Data.Combat.Pet.DefenceKingdomID);
				bw.Write(Data.Combat.Pet.DefenceAllianceTag);
				bw.Write(Data.Combat.Pet.DefenceName);
				bw.Write(Data.Combat.Pet.DefenceCapitalZone);
				bw.Write(Data.Combat.Pet.DefenceCapitalPoint);
				bw.Write(Data.Combat.Pet.DefenceLevel);
				bw.Write(Data.Combat.Pet.DefenceHead);
				bw.Write(Data.Combat.Pet.DefenceVIPLevel);
				bw.Write(Data.Combat.Pet.DefenceAllianceRank);
				bw.Write(Data.Combat.Pet.PatchNo);
				bw.Write(Data.Combat.Pet.PetID);
				bw.Write(Data.Combat.Pet.PetStar);
				bw.Write(Data.Combat.Pet.SkillID);
				bw.Write(Data.Combat.Pet.SkillLevel);
				bw.Write((byte)Data.Combat.Pet.Result);
				for (int num12 = 0; num12 < 5; num12++)
				{
					bw.Write(Data.Combat.Pet.Resource[num12]);
				}
				bw.Write(Data.Combat.Pet.LostPower);
				bw.Write(Data.Combat.Pet.TotalInjure);
				bw.Write(Data.Combat.Pet.TotalDead);
				for (int num13 = 0; num13 < Data.Combat.Pet.InjureTroops.Length; num13++)
				{
					bw.Write(Data.Combat.Pet.InjureTroops[num13]);
				}
				for (int num14 = 0; num14 < Data.Combat.Pet.DeadTroops.Length; num14++)
				{
					bw.Write(Data.Combat.Pet.DeadTroops[num14]);
				}
				bw.Write(Data.Combat.Pet.WallDamage);
			}
		}
		else if (Data.Type == MailType.EMAIL_SYSTEM)
		{
			bw.Write(7);
			bw.Write(Data.System.SerialID);
			bw.Write(Data.System.Flag);
			bw.Write(Data.System.Times);
			bw.Write((byte)Data.System.Type);
			if (Data.System.Type == NoticeReport.ENotice_Enhance)
			{
				bw.Write(Data.System.NoticeHeroEnhance.HeroID);
				bw.Write(Data.System.NoticeHeroEnhance.Rank);
				bw.Write(Data.System.NoticeHeroEnhance.Star);
			}
			else if (Data.System.Type == NoticeReport.ENotice_StarUp)
			{
				bw.Write(Data.System.NoticeHeroStarUp.HeroID);
				bw.Write(Data.System.NoticeHeroStarUp.Star);
				bw.Write(Data.System.NoticeHeroStarUp.Rank);
			}
			else if (Data.System.Type == NoticeReport.ENotice_JoinAlliance)
			{
				bw.Write(Data.System.Notice_JoinAlliance.Tag);
				bw.Write(Data.System.Notice_JoinAlliance.Name);
			}
			else if (Data.System.Type == NoticeReport.Enotice_ApplyAlliance)
			{
				bw.Write(Data.System.Notice_ApplyAlliance.Tag);
				bw.Write(Data.System.Notice_ApplyAlliance.Name);
			}
			else if (Data.System.Type == NoticeReport.Enotice_ApplyAllianceBeDenied)
			{
				bw.Write(Data.System.Notice_ApplyAllianceBeDenied.Dealer);
				bw.Write(Data.System.Notice_ApplyAllianceBeDenied.Tag);
				bw.Write(Data.System.Notice_ApplyAllianceBeDenied.Name);
			}
			else if (Data.System.Type == NoticeReport.Enotice_AllianceDismiss)
			{
				bw.Write(Data.System.Notice_AllianceDismiss.Leader);
			}
			else if (Data.System.Type == NoticeReport.Enotice_AllianceLeaderStepDown)
			{
				bw.Write(Data.System.Notice_AllianceLeaderStepDown.OldLeader);
				bw.Write(Data.System.Notice_AllianceLeaderStepDown.NewLeader);
			}
			else if (Data.System.Type == NoticeReport.Enotice_ActivityDegreePrize)
			{
				bw.Write((byte)Data.System.Notice_ActivityDegreePrize.Type);
				bw.Write(Data.System.Notice_ActivityDegreePrize.Degree);
				bw.Write(Data.System.Notice_ActivityDegreePrize.PrizeNum);
				for (int num15 = 0; num15 < (int)Data.System.Notice_ActivityDegreePrize.PrizeNum; num15++)
				{
					bw.Write(Data.System.Notice_ActivityDegreePrize.PrizeData[num15].Rank);
					bw.Write(Data.System.Notice_ActivityDegreePrize.PrizeData[num15].ItemID);
					bw.Write(Data.System.Notice_ActivityDegreePrize.PrizeData[num15].Num);
				}
			}
			else if (Data.System.Type == NoticeReport.Enotice_ActivityRankPrize)
			{
				bw.Write((byte)Data.System.Notice_ActivityRankPrize.Type);
				bw.Write(Data.System.Notice_ActivityRankPrize.Place);
				bw.Write(Data.System.Notice_ActivityRankPrize.PrizeNum);
				for (int num16 = 0; num16 < (int)Data.System.Notice_ActivityRankPrize.PrizeNum; num16++)
				{
					bw.Write(Data.System.Notice_ActivityRankPrize.PrizeData[num16].Rank);
					bw.Write(Data.System.Notice_ActivityRankPrize.PrizeData[num16].ItemID);
					bw.Write(Data.System.Notice_ActivityRankPrize.PrizeData[num16].Num);
				}
			}
			else if (Data.System.Type == NoticeReport.Enotice_InviteAlliance)
			{
				bw.Write(Data.System.Notice_InviteAlliance.AllianceID);
				bw.Write(Data.System.Notice_InviteAlliance.InviterName);
				bw.Write(Data.System.Notice_InviteAlliance.Tag);
				bw.Write(Data.System.Notice_InviteAlliance.Name);
			}
			else if (Data.System.Type == NoticeReport.Enotice_SynLordEquip)
			{
				bw.Write(Data.System.Notice_SynLordEquip.ItemID);
				bw.Write(Data.System.Notice_SynLordEquip.Rank);
				bw.Write(Data.System.Notice_SynLordEquip.AddExp);
			}
			else if (Data.System.Type == NoticeReport.Enotice_RallyCancel)
			{
				bw.Write(Data.System.Notice_RallyNotice.HostName);
				bw.Write(Data.System.Notice_RallyNotice.HostTag);
				bw.Write(Data.System.Notice_RallyNotice.TargetName);
				bw.Write(Data.System.Notice_RallyNotice.TargetTag);
			}
			else if (Data.System.Type == NoticeReport.Enotice_CryptFinish)
			{
				bw.Write(Data.System.Notice_CryptNotice.Money);
				bw.Write(Data.System.Notice_CryptNotice.Kind);
				bw.Write(Data.System.Notice_CryptNotice.Level);
			}
			else if (Data.System.Type == NoticeReport.Enotice_RallyCancel_AsTargetAlly)
			{
				bw.Write(Data.System.Notice_AsTargetAlly.HostName);
				bw.Write(Data.System.Notice_AsTargetAlly.HostTag);
				bw.Write(Data.System.Notice_AsTargetAlly.TargetName);
			}
			else if (Data.System.Type == NoticeReport.Enotice_OtherSavedLord)
			{
				bw.Write(Data.System.Notice_OtherSavedLord.HomeKingdom);
				bw.Write(Data.System.Notice_OtherSavedLord.AllianceTag);
				bw.Write(Data.System.Notice_OtherSavedLord.Name);
			}
			else if (Data.System.Type != NoticeReport.Enotice_SelfSavedLord)
			{
				if (Data.System.Type == NoticeReport.Enotice_LordBeingReleased)
				{
					bw.Write(Data.System.Notice_LordBeingReleased.HomeKingdom);
					bw.Write(Data.System.Notice_LordBeingReleased.AllianceTag);
					bw.Write(Data.System.Notice_LordBeingReleased.Name);
				}
				else if (Data.System.Type == NoticeReport.Enotice_LordBeingExecuted)
				{
					bw.Write(Data.System.Notice_LordBeingExecuted.HomeKingdom);
					bw.Write(Data.System.Notice_LordBeingExecuted.AllianceTag);
					bw.Write(Data.System.Notice_LordBeingExecuted.Name);
				}
				else if (Data.System.Type != NoticeReport.Enotice_LordEscaped)
				{
					if (Data.System.Type == NoticeReport.Enotice_OtherBreakPrison)
					{
						bw.Write(Data.System.Notice_OtherBreakPrison.HomeKingdom);
						bw.Write(Data.System.Notice_OtherBreakPrison.AllianceTag);
						bw.Write(Data.System.Notice_OtherBreakPrison.Name);
					}
					else if (Data.System.Type == NoticeReport.Enotice_RescuedPrisoner)
					{
						bw.Write(Data.System.Notice_RescuedPrisoner.HomeKingdom);
						bw.Write(Data.System.Notice_RescuedPrisoner.AllianceTag);
						bw.Write(Data.System.Notice_RescuedPrisoner.Name);
						bw.Write(Data.System.Notice_RescuedPrisoner.PrisonerNum);
						bw.Write(Data.System.Notice_RescuedPrisoner.ClaimReward);
					}
					else if (Data.System.Type == NoticeReport.Enotice_RequestRansom)
					{
						bw.Write(Data.System.Notice_RequestRansom.Ransom);
					}
					else if (Data.System.Type == NoticeReport.Enotice_ReceivedRansom)
					{
						bw.Write(Data.System.Notice_ReceivedRansom.Ransom);
					}
					else if (Data.System.Type == NoticeReport.Enotice_PrisonFull)
					{
						bw.Write(Data.System.Notice_PrisonFull.HomeKingdom);
						bw.Write(Data.System.Notice_PrisonFull.AllianceTag);
						bw.Write(Data.System.Notice_PrisonFull.Name);
					}
					else if (Data.System.Type == NoticeReport.Enotice_BeQuitAlliance)
					{
						bw.Write(Data.System.Notice_BeQuitAlliance.Dealer);
						bw.Write(Data.System.Notice_BeQuitAlliance.AllianceTag);
						bw.Write(Data.System.Notice_BeQuitAlliance.Alliance);
					}
					else if (Data.System.Type == NoticeReport.Enotice_BuyTreasure)
					{
						bw.Write(Data.System.Notice_BuyTreasure.Crystal);
						bw.Write(Data.System.Notice_BuyTreasure.BonusCrystal);
						for (int num17 = 0; num17 < 5; num17++)
						{
							bw.Write(Data.System.Notice_BuyTreasure.Gift[num17].ItemID);
							bw.Write(Data.System.Notice_BuyTreasure.Gift[num17].ItemNum);
						}
						bw.Write(Data.System.Notice_BuyTreasure.ItemNum);
						for (int num18 = 0; num18 < (int)Data.System.Notice_BuyTreasure.ItemNum; num18++)
						{
							bw.Write(Data.System.Notice_BuyTreasure.Item[num18].ItemID);
							bw.Write(Data.System.Notice_BuyTreasure.Item[num18].ItemNum);
							bw.Write(Data.System.Notice_BuyTreasure.Item[num18].ItemRank);
						}
						bw.Write(Data.System.Notice_BuyTreasure.GiftTop);
					}
					else if (Data.System.Type == NoticeReport.Enotice_RallyCancel_Moving)
					{
						bw.Write(Data.System.Notice_RallyNotice_Moving.HostName);
						bw.Write(Data.System.Notice_RallyNotice_Moving.HostTag);
						bw.Write(Data.System.Notice_RallyNotice_Moving.TargetName);
						bw.Write(Data.System.Notice_RallyNotice_Moving.TargetTag);
					}
					else if (Data.System.Type == NoticeReport.Enotice_AtkFailedSelfShield)
					{
						bw.Write(Data.System.Enotice_AtkFailedSelfShield.FailedType);
						bw.Write(Data.System.Enotice_AtkFailedSelfShield.KingdomID);
						bw.Write(Data.System.Enotice_AtkFailedSelfShield.zoneID);
						bw.Write(Data.System.Enotice_AtkFailedSelfShield.pointID);
					}
					else if (Data.System.Type == NoticeReport.Enotice_RecivedGift)
					{
						bw.Write(Data.System.Enotice_RecivedGift.GiftsName);
						bw.Write(Data.System.Enotice_RecivedGift.GiftsTag);
						bw.Write(Data.System.Enotice_RecivedGift.Item.ItemID);
						bw.Write(Data.System.Enotice_RecivedGift.Item.ItemNum);
					}
					else if (Data.System.Type == NoticeReport.Enotice_PrisonAmnestied)
					{
						bw.Write(Data.System.Enotice_PrisonAmnestied.KingsHomeKingdom);
						bw.Write(Data.System.Enotice_PrisonAmnestied.KingdomTag);
						bw.Write(Data.System.Enotice_PrisonAmnestied.KingdomName);
					}
					else if (Data.System.Type == NoticeReport.Enotice_LordBeingAmnestied)
					{
						bw.Write(Data.System.Enotice_LordBeingAmnestied.KingsHomeKingdom);
						bw.Write(Data.System.Enotice_LordBeingAmnestied.KingdomTag);
						bw.Write(Data.System.Enotice_LordBeingAmnestied.KingdomName);
						bw.Write(Data.System.Enotice_LordBeingAmnestied.WardensHomeKingdom);
						bw.Write(Data.System.Enotice_LordBeingAmnestied.Tag);
						bw.Write(Data.System.Enotice_LordBeingAmnestied.Name);
					}
					else if (Data.System.Type == NoticeReport.Enotice_RulerGift)
					{
						bw.Write(Data.System.Enotice_RulerGift.RulerKind);
						bw.Write(Data.System.Enotice_RulerGift.RulerAllianceKingdomID);
						bw.Write(Data.System.Enotice_RulerGift.Tag);
						bw.Write(Data.System.Enotice_RulerGift.Name);
						bw.Write(Data.System.Enotice_RulerGift.GiftKindNum);
						for (int num19 = 0; num19 < (int)Data.System.Enotice_RulerGift.GiftKindNum; num19++)
						{
							bw.Write(Data.System.Enotice_RulerGift.Gifts[num19].ItemID);
							bw.Write(Data.System.Enotice_RulerGift.Gifts[num19].ItemNum);
						}
					}
					else if (Data.System.Type == NoticeReport.Enotice_DismissAllianceLeader)
					{
						bw.Write(Data.System.Enotice_DismissAllianceLeader.OldLeader);
						bw.Write(Data.System.Enotice_DismissAllianceLeader.NewLeader);
						bw.Write(Data.System.Enotice_DismissAllianceLeader.OffLineDay);
					}
					else if (Data.System.Type == NoticeReport.Enotice_AmbushDefSuccess)
					{
						bw.Write(Data.System.Enotice_AmbushDefSuccess.AmbushName);
						bw.Write(Data.System.Enotice_AmbushDefSuccess.AtkPlayerHomeKingdom);
						bw.Write(Data.System.Enotice_AmbushDefSuccess.AtkPlayerAllianceTag);
						bw.Write(Data.System.Enotice_AmbushDefSuccess.AtkPlayerName);
					}
					else if (Data.System.Type == NoticeReport.Enotice_AmbushDefFailed)
					{
						bw.Write(Data.System.Enotice_AmbushDefFailed.AmbushName);
						bw.Write(Data.System.Enotice_AmbushDefFailed.AtkPlayerHomeKingdom);
						bw.Write(Data.System.Enotice_AmbushDefFailed.AtkPlayerAllianceTag);
						bw.Write(Data.System.Enotice_AmbushDefFailed.AtkPlayerName);
					}
					else if (Data.System.Type == NoticeReport.Enotice_ActivityKVKDegreePrize)
					{
						bw.Write((byte)Data.System.Enotice_ActivityKVKDegreePrize.ActType);
						bw.Write((byte)Data.System.Enotice_ActivityKVKDegreePrize.EventType);
						bw.Write(Data.System.Enotice_ActivityKVKDegreePrize.Degree);
						bw.Write(Data.System.Enotice_ActivityKVKDegreePrize.PrizeNum);
						for (int num20 = 0; num20 < (int)Data.System.Enotice_ActivityKVKDegreePrize.PrizeNum; num20++)
						{
							bw.Write(Data.System.Enotice_ActivityKVKDegreePrize.PrizeData[num20].Rank);
							bw.Write(Data.System.Enotice_ActivityKVKDegreePrize.PrizeData[num20].ItemID);
							bw.Write(Data.System.Enotice_ActivityKVKDegreePrize.PrizeData[num20].Num);
						}
					}
					else if (Data.System.Type == NoticeReport.Enotice_ActivityKVKRankPrize)
					{
						bw.Write((byte)Data.System.Enotice_ActivityKVKRankPrize.ActType);
						bw.Write((byte)Data.System.Enotice_ActivityKVKRankPrize.EventType);
						bw.Write(Data.System.Enotice_ActivityKVKRankPrize.Place);
						bw.Write(Data.System.Enotice_ActivityKVKRankPrize.PrizeNum);
						for (int num21 = 0; num21 < (int)Data.System.Enotice_ActivityKVKRankPrize.PrizeNum; num21++)
						{
							bw.Write(Data.System.Enotice_ActivityKVKRankPrize.PrizeData[num21].Rank);
							bw.Write(Data.System.Enotice_ActivityKVKRankPrize.PrizeData[num21].ItemID);
							bw.Write(Data.System.Enotice_ActivityKVKRankPrize.PrizeData[num21].Num);
						}
					}
					else if (Data.System.Type == NoticeReport.Enotice_BuyBlackMarketTreasure)
					{
						bw.Write(Data.System.Enotice_BuyBlackMarketTreasure.Crystal);
						bw.Write(Data.System.Enotice_BuyBlackMarketTreasure.BonusCrystal);
						for (int num22 = 0; num22 < 5; num22++)
						{
							bw.Write(Data.System.Enotice_BuyBlackMarketTreasure.Gift[num22].ItemID);
							bw.Write(Data.System.Enotice_BuyBlackMarketTreasure.Gift[num22].ItemNum);
						}
						bw.Write(Data.System.Enotice_BuyBlackMarketTreasure.ItemNum);
						for (int num23 = 0; num23 < (int)Data.System.Enotice_BuyBlackMarketTreasure.ItemNum; num23++)
						{
							bw.Write(Data.System.Enotice_BuyBlackMarketTreasure.Item[num23].ItemID);
							bw.Write(Data.System.Enotice_BuyBlackMarketTreasure.Item[num23].ItemNum);
							bw.Write(Data.System.Enotice_BuyBlackMarketTreasure.Item[num23].ItemRank);
						}
					}
					else if (Data.System.Type == NoticeReport.Enotice_KickOffTeam)
					{
						bw.Write(Data.System.Enotice_KickOffTeam.HostName);
						bw.Write(Data.System.Enotice_KickOffTeam.AllianceTag);
					}
					else if (Data.System.Type == NoticeReport.Enotice_AMRankPrize)
					{
						bw.Write((byte)Data.System.Enotice_AMRankPrize.ActType);
						bw.Write((byte)Data.System.Enotice_AMRankPrize.EventType);
						bw.Write(Data.System.Enotice_AMRankPrize.Place);
						bw.Write(Data.System.Enotice_AMRankPrize.PrizeNum);
						for (int num24 = 0; num24 < (int)Data.System.Enotice_AMRankPrize.PrizeNum; num24++)
						{
							bw.Write(Data.System.Enotice_AMRankPrize.PrizeData[num24].Rank);
							bw.Write(Data.System.Enotice_AMRankPrize.PrizeData[num24].ItemID);
							bw.Write(Data.System.Enotice_AMRankPrize.PrizeData[num24].Num);
						}
					}
					else if (Data.System.Type == NoticeReport.Enotice_AllianceHomeKingdom)
					{
						bw.Write(Data.System.Enotice_AllianceHomeKingdom.AllianceTag);
						bw.Write(Data.System.Enotice_AllianceHomeKingdom.Leader);
						bw.Write(Data.System.Enotice_AllianceHomeKingdom.HomeKingdom);
					}
					else if (Data.System.Type == NoticeReport.Enotice_WorldKingPrize)
					{
						bw.Write(Data.System.Enotice_WorldKingPrize.PrizeNum);
						for (int num25 = 0; num25 < (int)Data.System.Enotice_WorldKingPrize.PrizeNum; num25++)
						{
							bw.Write(Data.System.Enotice_WorldKingPrize.PrizeData[num25].Rank);
							bw.Write(Data.System.Enotice_WorldKingPrize.PrizeData[num25].ItemID);
							bw.Write(Data.System.Enotice_WorldKingPrize.PrizeData[num25].Num);
						}
					}
					else if (Data.System.Type == NoticeReport.Enotice_BackendAddCrystal)
					{
						bw.Write(Data.System.Enotice_BackendAddCrystal.Crystal);
					}
					else if (Data.System.Type == NoticeReport.Enotice_LoginConpensate)
					{
						bw.Write(Data.System.Enotice_LoginConpensate.Crystal);
					}
					else if (Data.System.Type == NoticeReport.Enotice_PurchaseConpensate)
					{
						bw.Write(Data.System.Enotice_PurchaseConpensate.Crystal);
					}
					else if (Data.System.Type == NoticeReport.Enotice_RallyNPCCancel)
					{
						bw.Write(Data.System.Enotice_RallyNPCCancel.HostName);
						bw.Write(Data.System.Enotice_RallyNPCCancel.AllianceTag);
						bw.Write(Data.System.Enotice_RallyNPCCancel.NPCLevel);
						bw.Write(Data.System.Enotice_RallyNPCCancel.NPCID);
					}
					else if (Data.System.Type == NoticeReport.Enotice_RallyNPCCancelInvalid)
					{
						bw.Write(Data.System.Enotice_RallyNPCCancelInvalid.HostName);
						bw.Write(Data.System.Enotice_RallyNPCCancelInvalid.AllianceTag);
						bw.Write(Data.System.Enotice_RallyNPCCancelInvalid.NPCLevel);
						bw.Write(Data.System.Enotice_RallyNPCCancelInvalid.NPCID);
					}
					else if (Data.System.Type == NoticeReport.Enotice_LordEquipExpire)
					{
						bw.Write(Data.System.Enotice_LordEquipExpire.ItemID);
						bw.Write(Data.System.Enotice_LordEquipExpire.Rank);
					}
					else if (Data.System.Type == NoticeReport.Enotice_WorldNotKingPrize)
					{
						bw.Write(Data.System.Enotice_WorldNotKingPrize.Place);
						bw.Write(Data.System.Enotice_WorldNotKingPrize.PrizeNum);
						for (int num26 = 0; num26 < (int)Data.System.Enotice_WorldNotKingPrize.PrizeNum; num26++)
						{
							bw.Write(Data.System.Enotice_WorldNotKingPrize.PrizeData[num26].Rank);
							bw.Write(Data.System.Enotice_WorldNotKingPrize.PrizeData[num26].ItemID);
							bw.Write(Data.System.Enotice_WorldNotKingPrize.PrizeData[num26].Num);
						}
					}
					else if (Data.System.Type == NoticeReport.Enotice_BuyEmoteTreasure)
					{
						bw.Write(Data.System.Enotice_BuyEmoteTreasure.ItemID);
						bw.Write(Data.System.Enotice_BuyEmoteTreasure.ItemNum);
					}
					else if (Data.System.Type == NoticeReport.Enotice_PrisnerUsePoison)
					{
						bw.Write(Data.System.Enotice_PrisnerUsePoison.HomeKingdom);
						bw.Write(Data.System.Enotice_PrisnerUsePoison.AllianceTag);
						bw.Write(Data.System.Enotice_PrisnerUsePoison.Name);
						bw.Write(Data.System.Enotice_PrisnerUsePoison.EffectTime);
					}
					else if (Data.System.Type == NoticeReport.Enotice_PrisnerPoisonEffect)
					{
						bw.Write(Data.System.Enotice_PrisnerPoisonEffect.HomeKingdom);
						bw.Write(Data.System.Enotice_PrisnerPoisonEffect.AllianceTag);
						bw.Write(Data.System.Enotice_PrisnerPoisonEffect.Name);
					}
					else if (Data.System.Type == NoticeReport.Enotice_BackendActivity)
					{
						bw.Write(Data.System.Enotice_BackendActivity.Crystal);
						bw.Write(Data.System.Enotice_BackendActivity.ItemNum);
						for (int num27 = 0; num27 < (int)Data.System.Enotice_BackendActivity.ItemNum; num27++)
						{
							bw.Write(Data.System.Enotice_BackendActivity.Item[num27].ItemID);
							bw.Write(Data.System.Enotice_BackendActivity.Item[num27].ItemNum);
							bw.Write(Data.System.Enotice_BackendActivity.Item[num27].ItemRank);
						}
					}
					else if (Data.System.Type == NoticeReport.Enotice_BuyCastleSkinTreasure)
					{
						bw.Write(Data.System.Enotice_BuyCastleSkinTreasure.CastleSkinID);
						bw.Write(Data.System.Enotice_BuyCastleSkinTreasure.ItemID);
						bw.Write(Data.System.Enotice_BuyCastleSkinTreasure.ItemNum);
					}
					else if (Data.System.Type == NoticeReport.Enotice_FederalRankPrize)
					{
						bw.Write(Data.System.Enotice_FederalRankPrize.Place);
						bw.Write(Data.System.Enotice_FederalRankPrize.PrizeNum);
						for (int num28 = 0; num28 < (int)Data.System.Enotice_FederalRankPrize.PrizeNum; num28++)
						{
							bw.Write(Data.System.Enotice_FederalRankPrize.PrizeData[num28].Rank);
							bw.Write(Data.System.Enotice_FederalRankPrize.PrizeData[num28].ItemID);
							bw.Write(Data.System.Enotice_FederalRankPrize.PrizeData[num28].Num);
						}
					}
					else if (Data.System.Type == NoticeReport.Enotice_TreasureBackPrize)
					{
						bw.Write(Data.System.Enotice_TreasureBackPrize.Crystal);
						bw.Write(Data.System.Enotice_TreasureBackPrize.BonusCrystal);
						for (int num29 = 0; num29 < 5; num29++)
						{
							bw.Write(Data.System.Enotice_TreasureBackPrize.Gift[num29].ItemID);
							bw.Write(Data.System.Enotice_TreasureBackPrize.Gift[num29].ItemNum);
						}
						bw.Write(Data.System.Enotice_TreasureBackPrize.ItemNum);
						for (int num30 = 0; num30 < (int)Data.System.Enotice_TreasureBackPrize.ItemNum; num30++)
						{
							bw.Write(Data.System.Enotice_TreasureBackPrize.Item[num30].ItemID);
							bw.Write(Data.System.Enotice_TreasureBackPrize.Item[num30].ItemNum);
							bw.Write(Data.System.Enotice_TreasureBackPrize.Item[num30].ItemRank);
						}
					}
					else if (Data.System.Type == NoticeReport.Enotice_LookingForStringTable)
					{
						bw.Write(Data.System.Enotice_LookingForStringTable.Title);
						bw.Write(Data.System.Enotice_LookingForStringTable.Content);
					}
					else if (Data.System.Type == NoticeReport.Enotice_MarchingPet_Cancel)
					{
						bw.Write(Data.System.Enotice_MarchingPet_Cancel.HasTarget);
						bw.Write(Data.System.Enotice_MarchingPet_Cancel.HomeKingdom);
						bw.Write(Data.System.Enotice_MarchingPet_Cancel.AllianceTag);
						bw.Write(Data.System.Enotice_MarchingPet_Cancel.Name);
						bw.Write(Data.System.Enotice_MarchingPet_Cancel.PetID);
						bw.Write(Data.System.Enotice_MarchingPet_Cancel.Skill_ID);
						bw.Write(Data.System.Enotice_MarchingPet_Cancel.Skill_LV);
					}
					else if (Data.System.Type == NoticeReport.ENotice_PetStarUp)
					{
						bw.Write(Data.System.ENotice_PetStarUp.PetID);
						bw.Write(Data.System.ENotice_PetStarUp.PetStar);
					}
					else if (Data.System.Type == NoticeReport.ENotice_LordPetSkillEscaped)
					{
						bw.Write(Data.System.ENotice_LordPetSkillEscaped.PetID);
						bw.Write(Data.System.ENotice_LordPetSkillEscaped.Skill_ID);
						bw.Write(Data.System.ENotice_LordPetSkillEscaped.Skill_LV);
					}
					else if (Data.System.Type == NoticeReport.ENotice_LordPetSkillEscaped)
					{
						bw.Write(Data.System.ENotice_LordPetSkillEscaped.PetID);
						bw.Write(Data.System.ENotice_LordPetSkillEscaped.Skill_ID);
						bw.Write(Data.System.ENotice_LordPetSkillEscaped.Skill_LV);
					}
					else if (Data.System.Type == NoticeReport.Enotice_ScoutTargetLeave)
					{
						bw.Write(Data.System.Enotice_ScoutTargetLeave.OffsetLen);
						if (Data.System.Enotice_ScoutTargetLeave.OffsetLen > 0u)
						{
							bw.Write(Data.System.Enotice_ScoutTargetLeave.HomeKingdom);
							bw.Write(Data.System.Enotice_ScoutTargetLeave.AllianceTag);
							bw.Write(Data.System.Enotice_ScoutTargetLeave.Name);
						}
					}
					else if (Data.System.Type == NoticeReport.Enotice_AttackTargetLeave)
					{
						bw.Write(Data.System.Enotice_AttackTargetLeave.OffsetLen);
						if (Data.System.Enotice_AttackTargetLeave.OffsetLen > 0u)
						{
							bw.Write(Data.System.Enotice_AttackTargetLeave.HomeKingdom);
							bw.Write(Data.System.Enotice_AttackTargetLeave.AllianceTag);
							bw.Write(Data.System.Enotice_AttackTargetLeave.Name);
						}
					}
					else if (Data.System.Type == NoticeReport.Enotice_MaintainCompensation)
					{
						bw.Write(Data.System.Enotice_MaintainCompensation.MailTitleStrID);
						bw.Write(Data.System.Enotice_MaintainCompensation.MailContentStrID);
						bw.Write(Data.System.Enotice_MaintainCompensation.Crystal);
						bw.Write(Data.System.Enotice_MaintainCompensation.ItemNum);
						for (int num31 = 0; num31 < (int)Data.System.Enotice_MaintainCompensation.ItemNum; num31++)
						{
							bw.Write(Data.System.Enotice_MaintainCompensation.Item[num31].ItemID);
							bw.Write(Data.System.Enotice_MaintainCompensation.Item[num31].ItemNum);
							bw.Write(Data.System.Enotice_MaintainCompensation.Item[num31].ItemRank);
						}
					}
					else if (Data.System.Type == NoticeReport.Enotice_BuyRedPocketTreasure)
					{
						bw.Write(Data.System.Enotice_BuyRedPocketTreasure.StringID);
					}
					else if (Data.System.Type == NoticeReport.Enotice_SocialFriendModify)
					{
						bw.Write(Data.System.Enotice_SocialFriendModify.RemoveType);
						bw.Write(Data.System.Enotice_SocialFriendModify.TargetName);
						bw.Write(Data.System.Enotice_SocialFriendModify.PlayerName);
						bw.Write(Data.System.Enotice_SocialFriendModify.PlayerTag);
					}
					else if (Data.System.Type == NoticeReport.Enotice_ReturnCeremony)
					{
						bw.Write(Data.System.Enotice_ReturnCeremony.Crystal);
						bw.Write(Data.System.Enotice_ReturnCeremony.ItemNum);
						for (int num32 = 0; num32 < (int)Data.System.Enotice_ReturnCeremony.ItemNum; num32++)
						{
							bw.Write(Data.System.Enotice_ReturnCeremony.Item[num32].ItemID);
							bw.Write(Data.System.Enotice_ReturnCeremony.Item[num32].ItemNum);
							bw.Write(Data.System.Enotice_ReturnCeremony.Item[num32].ItemRank);
						}
					}
					else if (Data.System.Type == NoticeReport.Enotice_FirstBuyTreasurePrize)
					{
						bw.Write(Data.System.Enotice_FirstBuyTreasurePrize.Crystal);
						bw.Write(Data.System.Enotice_FirstBuyTreasurePrize.ItemNum);
						for (int num33 = 0; num33 < (int)Data.System.Enotice_FirstBuyTreasurePrize.ItemNum; num33++)
						{
							bw.Write(Data.System.Enotice_FirstBuyTreasurePrize.Item[num33].ItemID);
							bw.Write(Data.System.Enotice_FirstBuyTreasurePrize.Item[num33].ItemNum);
							bw.Write(Data.System.Enotice_FirstBuyTreasurePrize.Item[num33].ItemRank);
						}
					}
				}
			}
		}
	}

	// Token: 0x060003CB RID: 971 RVA: 0x00044914 File Offset: 0x00042B14
	public bool SaveFavoriteMail(MyFavorite Data, uint Serial)
	{
		try
		{
			StringBuilder stringBuilder = new StringBuilder();
			stringBuilder.AppendFormat("{0}/Data/{1}/{2}{3}-{4}", new object[]
			{
				AssetManager.persistentDataPath,
				NetworkManager.UserID,
				Data.Kind,
				(byte)Data.Type,
				Serial
			});
			using (FileStream fileStream = new FileStream(stringBuilder.ToString(), FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.Read, 4096))
			{
				using (BinaryWriter binaryWriter = new BinaryWriter(fileStream))
				{
					this.SaveMail(Data, binaryWriter);
				}
			}
		}
		catch (Exception ex)
		{
			return false;
		}
		return true;
	}

	// Token: 0x060003CC RID: 972 RVA: 0x00044A20 File Offset: 0x00042C20
	public bool UpdateMailData(bool Force = true)
	{
		if (NetworkManager.SynchTime >= 1f || Force)
		{
			for (int i = 0; i < ((!Force) ? 1 : 30); i++)
			{
				if (this.Mailing.MailSerial.Saviour.Count > 0)
				{
					this.DoFavor.Type = (this.DoFavor.Kind = MailType.EMAIL_LETTER);
					if (this.Mailing.MailSerial.Saviour[0].IsFavorite > 0)
					{
						this.DoFavor.Kind = MailType.EMAIL_FAVORY;
						if (this.Mailing.FavorSerial.Mail.Mail.TryGetValue(this.Mailing.MailSerial.Saviour[0].Id, out this.DoFavor.Mail))
						{
							this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Mail.SerialID);
						}
					}
					else if (this.Mailing.MailSerial.Mail.TryGetValue(this.Mailing.MailSerial.Saviour[0].Id, out this.DoFavor.Mail))
					{
						this.SaveMail(this.DoFavor, this.DoFavor.Mail.SerialID, 0u, 0u);
					}
					this.Mailing.MailSerial.Saviour.RemoveAt(0);
				}
				if (this.Mailing.SystemSerial.Order.Count > 0)
				{
					this.DoFavor.Type = (this.DoFavor.Kind = MailType.EMAIL_SYSTEM);
					if (this.Mailing.SystemSerial.Order[0].IsFavorite > 0)
					{
						if (this.Mailing.FavorSerial.System.Mail.TryGetValue(this.Mailing.SystemSerial.Order[0].Id, out this.DoFavor.System) && !this.DoFavor.System.BeKept)
						{
							this.DoFavor.Kind = MailType.EMAIL_FAVORY;
							this.SaveFavoriteMail(this.DoFavor, this.DoFavor.System.SerialID);
							this.DoFavor.System.BeKept = true;
							this.Mailing.SystemSerial.HoldSave += 1u;
						}
					}
					else if (this.Mailing.SystemSerial.Mail.TryGetValue(this.Mailing.SystemSerial.Order[0].Id, out this.DoFavor.System) && !this.DoFavor.System.BeKept)
					{
						this.SaveMail(this.DoFavor, this.DoFavor.System.SerialID, 0u, 0u);
						this.DoFavor.System.BeKept = true;
						this.Mailing.SystemSerial.HoldSave += 1u;
					}
					else if (this.Mailing.FavorSerial.System.Mail.TryGetValue(this.Mailing.SystemSerial.Order[0].Id, out this.DoFavor.System))
					{
						this.DoFavor.Kind = MailType.EMAIL_FAVORY;
						this.SaveFavoriteMail(this.DoFavor, this.DoFavor.System.SerialID);
						this.DoFavor.System.BeKept = true;
						this.Mailing.SystemSerial.HoldSave += 1u;
					}
					if (this.Mailing.SystemSerial.LastSave == 0u)
					{
						this.Mailing.SystemSerial.HoldSave = 50u;
					}
					this.Mailing.SystemSerial.LastSave = this.Mailing.SystemSerial.Order[0].Id;
					if (this.Mailing.SystemSerial.HoldSave > 10u)
					{
						this.SaveMail(this.DoFavor.Type);
						this.Mailing.SystemSerial.HoldSave = 0u;
					}
					this.Mailing.SystemSerial.Order.RemoveAt(0);
				}
				else if (this.Mailing.SystemSerial.HoldSave > 0u)
				{
					this.SaveMail(MailType.EMAIL_SYSTEM);
					this.Mailing.SystemSerial.HoldSave = 0u;
				}
				if (this.Mailing.MailSerial.Order.Count > 0)
				{
					this.DoFavor.Type = (this.DoFavor.Kind = MailType.EMAIL_LETTER);
					if (this.Mailing.MailSerial.Order[0].IsFavorite > 0)
					{
						if (this.Mailing.FavorSerial.Mail.Mail.TryGetValue(this.Mailing.MailSerial.Order[0].Id, out this.DoFavor.Mail) && !this.DoFavor.Mail.BeKept)
						{
							this.DoFavor.Kind = MailType.EMAIL_FAVORY;
							this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Mail.SerialID);
							this.DoFavor.Mail.BeKept = true;
							this.Mailing.MailSerial.HoldSave += 1u;
						}
					}
					else if (this.Mailing.MailSerial.Mail.TryGetValue(this.Mailing.MailSerial.Order[0].Id, out this.DoFavor.Mail) && !this.DoFavor.Mail.BeKept)
					{
						this.SaveMail(this.DoFavor, this.DoFavor.Mail.SerialID, 0u, 0u);
						this.DoFavor.Mail.BeKept = true;
						this.Mailing.MailSerial.HoldSave += 1u;
					}
					else if (this.Mailing.FavorSerial.Mail.Mail.TryGetValue(this.Mailing.MailSerial.Order[0].Id, out this.DoFavor.Mail) && !this.DoFavor.Mail.BeKept)
					{
						this.DoFavor.Kind = MailType.EMAIL_FAVORY;
						this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Mail.SerialID);
						this.DoFavor.Mail.BeKept = true;
						this.Mailing.MailSerial.HoldSave += 1u;
					}
					if (this.Mailing.MailSerial.LastSave == 0u)
					{
						this.Mailing.MailSerial.HoldSave = 100u;
					}
					this.Mailing.MailSerial.LastSave = this.Mailing.MailSerial.Order[0].Id;
					if (this.Mailing.MailSerial.HoldSave > 10u)
					{
						this.SaveMail(this.DoFavor.Type);
						this.Mailing.MailSerial.HoldSave = 0u;
					}
					this.Mailing.MailSerial.Order.RemoveAt(0);
				}
				else if (this.Mailing.MailSerial.HoldSave > 0u)
				{
					this.SaveMail(MailType.EMAIL_LETTER);
					this.Mailing.MailSerial.HoldSave = 0u;
				}
				if (this.Mailing.ReportSerial.Order.Count > 0)
				{
					this.DoFavor.Type = (this.DoFavor.Kind = MailType.EMAIL_BATTLE);
					if (this.Mailing.ReportSerial.Order[0].IsFavorite > 0)
					{
						if (this.Mailing.FavorSerial.Combat.Mail.TryGetValue(this.Mailing.ReportSerial.Order[0].Id, out this.DoFavor.Combat) && !this.DoFavor.Combat.BeKept)
						{
							this.DoFavor.Kind = MailType.EMAIL_FAVORY;
							this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Combat.SerialID);
							this.DoFavor.Combat.BeKept = true;
							this.Mailing.ReportSerial.HoldSave += 1u;
						}
					}
					else if (this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.Order[0].Id, out this.DoFavor.Combat) && !this.DoFavor.Combat.BeKept)
					{
						this.SaveMail(this.DoFavor, this.DoFavor.Combat.SerialID, 0u, 0u);
						this.DoFavor.Combat.BeKept = true;
						this.Mailing.ReportSerial.HoldSave += 1u;
					}
					else if (this.Mailing.FavorSerial.Combat.Mail.TryGetValue(this.Mailing.ReportSerial.Order[0].Id, out this.DoFavor.Combat) && !this.DoFavor.Combat.BeKept)
					{
						this.DoFavor.Kind = MailType.EMAIL_FAVORY;
						this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Combat.SerialID);
						this.DoFavor.Combat.BeKept = true;
						this.Mailing.ReportSerial.HoldSave += 1u;
					}
					if (this.Mailing.ReportSerial.LastSave == 0u)
					{
						this.Mailing.ReportSerial.HoldSave = 400u;
					}
					this.Mailing.ReportSerial.LastSave = this.Mailing.ReportSerial.Order[0].Id;
					if (this.Mailing.ReportSerial.HoldSave > 10u)
					{
						this.SaveMail(this.DoFavor.Type);
						this.Mailing.ReportSerial.HoldSave = 0u;
					}
					this.Mailing.ReportSerial.Order.RemoveAt(0);
				}
				else
				{
					if (this.Mailing.ReportSerial.HoldSave <= 0u)
					{
						return true;
					}
					this.SaveMail(MailType.EMAIL_BATTLE);
					this.Mailing.ReportSerial.HoldSave = 0u;
				}
			}
		}
		if (this.MailTranslation.Serial > 0u && this.MIB.Serial == 0u)
		{
			if (this.MySysSetting.bAutoTranslate && IGGGameSDK.Instance.GetTranslateStatus())
			{
				if (this.MailTranslation.Kind == MailType.EMAIL_FAVORY)
				{
					if (this.Mailing.FavorSerial.Mail.Mail.TryGetValue(this.MailTranslation.Serial, out this.DoFavor.Mail) && this.DoFavor.Mail.MailType != 2 && this.DoFavor.Mail.LanguageTarget != (byte)this.UserLanguage)
					{
						CString cstring = StringManager.Instance.StaticString1024();
						CString cstring2 = StringManager.Instance.StaticString1024();
						if (GUIManager.Instance.CheckNeedTranslate(this.DoFavor.Mail.Title))
						{
							cstring.Append(this.DoFavor.Mail.Title);
							DataManager.MailData.Add(cstring);
						}
						if (GUIManager.Instance.CheckNeedTranslate(this.DoFavor.Mail.Content))
						{
							cstring2.Append(this.DoFavor.Mail.Content);
							DataManager.MailData.Add(cstring2);
						}
						if (DataManager.MailData.Count > 0)
						{
							IGGGameSDK.Instance.TranslateBatchByList_Mail(DataManager.MailData);
							this.DoFavor.Mail.LanguageSent = (byte)this.UserLanguage;
							this.MIB.Serial = this.DoFavor.Mail.SerialID;
							this.MIB.Kind = MailType.EMAIL_FAVORY;
							DataManager.MailData.Clear();
							return true;
						}
						this.DoFavor.Mail.LanguageTarget = (byte)this.UserLanguage;
					}
				}
				else if (this.Mailing.MailSerial.Mail.TryGetValue(this.MailTranslation.Serial, out this.DoFavor.Mail) && this.DoFavor.Mail.MailType != 2 && this.DoFavor.Mail.LanguageTarget != (byte)this.UserLanguage)
				{
					CString cstring3 = StringManager.Instance.StaticString1024();
					CString cstring4 = StringManager.Instance.StaticString1024();
					if (GUIManager.Instance.CheckNeedTranslate(this.DoFavor.Mail.Title))
					{
						cstring3.Append(this.DoFavor.Mail.Title);
						DataManager.MailData.Add(cstring3);
					}
					if (GUIManager.Instance.CheckNeedTranslate(this.DoFavor.Mail.Content))
					{
						cstring4.Append(this.DoFavor.Mail.Content);
						DataManager.MailData.Add(cstring4);
					}
					if (DataManager.MailData.Count > 0)
					{
						IGGGameSDK.Instance.TranslateBatchByList_Mail(DataManager.MailData);
						this.DoFavor.Mail.LanguageSent = (byte)this.UserLanguage;
						this.MIB.Serial = this.DoFavor.Mail.SerialID;
						this.MIB.Kind = MailType.EMAIL_LETTER;
						DataManager.MailData.Clear();
						return true;
					}
					this.DoFavor.Mail.LanguageTarget = (byte)this.UserLanguage;
				}
			}
		}
		else if (this.MIB.Change)
		{
			if ((this.MIB.Kind == MailType.EMAIL_FAVORY && this.Mailing.FavorSerial.Mail.Mail.TryGetValue(this.MIB.Serial, out this.DoFavor.Mail)) || this.Mailing.MailSerial.Mail.TryGetValue(this.MIB.Serial, out this.DoFavor.Mail))
			{
				if (this.MIB.Read)
				{
					this.DoFavor.Mail.Translation = (this.DoFavor.Mail.TranslationError = false);
					if (GUIManager.Instance.CheckNeedTranslate(this.DoFavor.Mail.Title))
					{
						CString cstring5 = StringManager.Instance.StaticString1024();
						int j;
						for (j = 0; j < IGGGameSDK.Instance.TranslateString_Mail[0].Length; j++)
						{
							if (IGGGameSDK.Instance.TranslateString_Mail[0][j] == '\u007f')
							{
								break;
							}
							cstring5.Append(IGGGameSDK.Instance.TranslateString_Mail[0][j]);
						}
						cstring5.SetLength(cstring5.Length);
						this.DoFavor.Mail.LanguageSource = IGGGameSDK.Instance.GetTranslateLanguageStringId(cstring5.ToString());
						cstring5.SetLength(cstring5.MaxLength);
						cstring5.Length = 0;
						cstring5.Substring(IGGGameSDK.Instance.TranslateString_Mail[0], j + 1);
						cstring5.CheckBannedWord();
						this.DoFavor.Mail.Translation = true;
						CString cstring6 = new CString(cstring5.Length);
						cstring6.Append(cstring5);
						this.DoFavor.Mail.TitleT = cstring6.ToString();
					}
					if (GUIManager.Instance.CheckNeedTranslate(this.DoFavor.Mail.Content))
					{
						if (!this.DoFavor.Mail.Translation)
						{
							CString cstring7 = StringManager.Instance.StaticString1024();
							int k;
							for (k = 0; k < IGGGameSDK.Instance.TranslateString_Mail[0].Length; k++)
							{
								if (IGGGameSDK.Instance.TranslateString_Mail[0][k] == '\u007f')
								{
									break;
								}
								cstring7.Append(IGGGameSDK.Instance.TranslateString_Mail[0][k]);
							}
							cstring7.SetLength(cstring7.Length);
							this.DoFavor.Mail.LanguageSource = IGGGameSDK.Instance.GetTranslateLanguageStringId(cstring7.ToString());
							cstring7.SetLength(cstring7.MaxLength);
							cstring7.Length = 0;
							cstring7.Substring(IGGGameSDK.Instance.TranslateString_Mail[0], k + 1);
							cstring7.CheckBannedWord();
							this.DoFavor.Mail.Translation = true;
							CString cstring8 = new CString(cstring7.Length);
							cstring8.Append(cstring7);
							this.DoFavor.Mail.ContentT = cstring8.ToString();
						}
						else
						{
							CString cstring9 = StringManager.Instance.StaticString1024();
							int l;
							for (l = 0; l < IGGGameSDK.Instance.TranslateString_Mail[1].Length; l++)
							{
								if (IGGGameSDK.Instance.TranslateString_Mail[1][l] == '\u007f')
								{
									break;
								}
								cstring9.Append(IGGGameSDK.Instance.TranslateString_Mail[1][l]);
							}
							cstring9.SetLength(cstring9.Length);
							this.DoFavor.Mail.LanguageSource = IGGGameSDK.Instance.GetTranslateLanguageStringId(cstring9.ToString());
							cstring9.SetLength(cstring9.MaxLength);
							cstring9.Length = 0;
							cstring9.Substring(IGGGameSDK.Instance.TranslateString_Mail[1], l + 1);
							cstring9.CheckBannedWord();
							this.DoFavor.Mail.Translation = true;
							CString cstring10 = new CString(cstring9.Length);
							cstring10.Append(cstring9);
							this.DoFavor.Mail.ContentT = cstring10.ToString();
						}
					}
					this.DoFavor.Mail.LanguageTarget = this.DoFavor.Mail.LanguageSent;
					this.DoFavor.Mail.Translation = true;
					this.DoFavor.Mail.BeKept = true;
					this.DoFavor.Kind = this.MIB.Kind;
					if (this.DoFavor.Mail.BeSave)
					{
						this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Mail.SerialID);
					}
					else
					{
						this.SaveMail(this.DoFavor, this.DoFavor.Mail.SerialID, 0u, 0u);
					}
				}
				else
				{
					this.DoFavor.Mail.TranslationError = true;
				}
			}
			this.MIB.Change = false;
			DataManager.msgBuffer[0] = ((this.MailTranslation.Serial <= 0u) ? 0 : 1);
			DataManager.msgBuffer[1] = ((!this.MIB.Read) ? 1 : 0);
			DataManager.msgBuffer[2] = (byte)this.MIB.Kind;
			GameConstants.GetBytes(this.MIB.Serial, DataManager.msgBuffer, 3);
			this.MailTranslation.Serial = (this.MIB.Serial = 0u);
			GameManager.OnRefresh(NetworkNews.Refresh_Letter, DataManager.msgBuffer);
		}
		return false;
	}

	// Token: 0x060003CD RID: 973 RVA: 0x00045E08 File Offset: 0x00044008
	public void SaveMailData(Protocol Protocol = Protocol._MSG_RESP_MAILINFO)
	{
		if (Protocol == Protocol._MSG_RESP_MAILMETA)
		{
			this.Mailing.MailSerial.Metalog = true;
		}
		else if (Protocol == Protocol._MSG_RESP_NOTICEMETA)
		{
			this.Mailing.SystemSerial.Metalog = true;
		}
		else if (Protocol == Protocol._MSG_RESP_REPORTMETA)
		{
			this.Mailing.ReportSerial.Metalog = true;
		}
		else if (Protocol == Protocol._MSG_RESP_SAVEMAILMETA)
		{
			this.Mailing.FavorSerial.Metalog = true;
		}
		else if (Protocol == Protocol._MSG_RESP_MAILINFOEND)
		{
			this.MIB.Check = false;
			this.Mailing.MailSerial.Infolog = true;
			if (this.Mailing.MailSerial.Total == 0u && this.Mailing.MailSerial.Order.Count == 0)
			{
				this.Mailing.MailSerial.LastSave = this.Mailing.MailSerial.Fetch;
				this.Mailing.MailSerial.New = this.Mailing.MailSerial.Max;
				this.SaveMail(MailType.EMAIL_LETTER);
			}
		}
		else if (Protocol == Protocol._MSG_RESP_REPORINFOEND)
		{
			this.Mailing.ReportSerial.Infolog = true;
			if (this.Mailing.ReportSerial.Total == 0u && this.Mailing.ReportSerial.Order.Count == 0)
			{
				this.Mailing.ReportSerial.LastSave = this.Mailing.ReportSerial.Fetch;
				this.Mailing.ReportSerial.New = this.Mailing.ReportSerial.Max;
				this.SaveMail(MailType.EMAIL_BATTLE);
			}
		}
		else if (Protocol == Protocol._MSG_RESP_NOTICEINFOEND)
		{
			this.Mailing.SystemSerial.Infolog = true;
			if (this.Mailing.SystemSerial.Total == 0u && this.Mailing.SystemSerial.Order.Count == 0)
			{
				this.Mailing.SystemSerial.LastSave = this.Mailing.SystemSerial.Fetch;
				this.Mailing.SystemSerial.New = this.Mailing.SystemSerial.Max;
				this.SaveMail(MailType.EMAIL_SYSTEM);
			}
		}
	}

	// Token: 0x060003CE RID: 974 RVA: 0x00046068 File Offset: 0x00044268
	public bool SaveData<T>(ref T Data, string Name)
	{
		bool result;
		try
		{
			Directory.CreateDirectory(string.Format("{0}/Data/{1}", Application.persistentDataPath, Name.Substring(0, Math.Max(Name.LastIndexOf("/"), 0))));
			using (FileStream fileStream = new FileStream(string.Format("{0}/Data/{1}", Application.persistentDataPath, Name), FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.Read, 4096))
			{
				if (Data != null)
				{
					Environment.SetEnvironmentVariable("MONO_REFLECTION_SERIALIZER", "yes");
					this.BF.Binder = new DataManager.SerialKiller();
					this.BF.Serialize(fileStream, Data);
					result = true;
				}
				else
				{
					fileStream.SetLength(0L);
					result = false;
				}
			}
		}
		catch (Exception ex)
		{
			result = false;
		}
		return result;
	}

	// Token: 0x060003CF RID: 975 RVA: 0x00046178 File Offset: 0x00044378
	public bool LoadData<T>(ref T Data, string Name)
	{
		Directory.CreateDirectory(string.Format("{0}/Data/{1}", Application.persistentDataPath, Name.Substring(0, Math.Max(Name.LastIndexOf("/"), 0))));
		using (FileStream fileStream = new FileStream(string.Format("{0}/Data/{1}", Application.persistentDataPath, Name), FileMode.OpenOrCreate, FileAccess.Read))
		{
			if (fileStream.Length > 0L)
			{
				Environment.SetEnvironmentVariable("MONO_REFLECTION_SERIALIZER", "yes");
				try
				{
					this.BF.Binder = new DataManager.SerialKiller();
					Data = (T)((object)this.BF.UnsafeDeserialize(fileStream, null));
				}
				catch (Exception ex)
				{
					return false;
				}
				return true;
			}
		}
		return false;
	}

	// Token: 0x060003D0 RID: 976 RVA: 0x00046270 File Offset: 0x00044470
	public unsafe void RecvMailing(MessagePacket MP)
	{
		Protocol protocol = MP.Protocol;
		switch (protocol)
		{
		case Protocol._MSG_RESP_MAILMETA:
		{
			this.Mailing.MailSerial.SerialNumber = (uint)MP.ReadByte(-1);
			this.Mailing.MailSerial.Caliber.Clear();
			this.Mailing.MailSerial.SID.Clear();
			this.Mailing.MailSerial.Last = 0u;
			int num = 0;
			while ((long)num < (long)((ulong)this.Mailing.MailSerial.SerialNumber))
			{
				uint num2 = MP.ReadUInt(-1);
				byte b = MP.ReadByte(-1);
				SerialBox serialBox = new SerialBox();
				serialBox.Serial = num2;
				serialBox.Flag = b;
				serialBox.Read = ((b & 1) > 0);
				serialBox.Save = ((b & 2) > 0);
				this.Mailing.MailSerial.SID.Add(num2, serialBox);
				SerialBox serialBox2;
				if (!this.Mailing.MailSerial.Matrix.TryGetValue(num2, out serialBox2) || (this.Mailing.Refresh && !serialBox2.Pull))
				{
					this.Mailing.MailSerial.Matrix[num2] = serialBox;
					this.Mailing.MailSerial.Caliber.Add(num2);
				}
				num++;
			}
			this.Mailing.FavorSerial.Mail.Unread = (this.Mailing.MailSerial.Unread = 0u);
			this.Mailing.MailSerial.Total = (this.Mailing.FavorSerial.Mail.Total = 0u);
			List<uint> list = new List<uint>();
			foreach (SerialBox serialBox3 in this.Mailing.MailSerial.Matrix.Values)
			{
				SerialBox serialBox4 = this.Mailing.MailSerial.SID.Find(serialBox3.Serial);
				if (serialBox4 != null)
				{
					if (serialBox3.Pull)
					{
						if (serialBox4.Save != serialBox3.Save)
						{
							this.DeleteMail(MailType.EMAIL_LETTER, serialBox3.Serial);
							this.Mailing.MailSerial.Caliber.Add(serialBox3.Serial);
							serialBox3.Save = serialBox4.Save;
							serialBox3.Read = serialBox4.Read;
							serialBox3.Flag = serialBox4.Flag;
							serialBox3.Pull = false;
							serialBox3.Keep = false;
						}
						else if (serialBox4.Read != serialBox3.Read && this.Mailing.MailSerial.Mail.TryGetValue(serialBox4.Serial, out this.DoFavor.Mail))
						{
							serialBox3.Flag = serialBox4.Flag;
							this.DoFavor.Mail.Flag = serialBox4.Flag;
							this.DoFavor.Mail.BeRead = serialBox4.Read;
							this.DoFavor.Type = MailType.EMAIL_LETTER;
							this.SaveMail(this.DoFavor, this.DoFavor.Mail.SerialID, 0u, 0u);
						}
					}
				}
				else
				{
					this.DeleteMail(MailType.EMAIL_LETTER, serialBox3.Serial);
					list.Add(serialBox3.Serial);
				}
			}
			foreach (uint key in list)
			{
				this.Mailing.MailSerial.Matrix.Remove(key);
			}
			if (list.Count > 0)
			{
				list.Clear();
			}
			GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 10, 0);
			break;
		}
		case Protocol._MSG_RESP_REPORTMETA:
		{
			this.Mailing.ReportSerial.SerialNumber = (uint)MP.ReadByte(-1);
			this.Mailing.ReportSerial.Caliber.Clear();
			this.Mailing.ReportSerial.SID.Clear();
			this.Mailing.ReportSerial.Last = 0u;
			int num3 = 0;
			while ((long)num3 < (long)((ulong)this.Mailing.ReportSerial.SerialNumber))
			{
				uint num4 = MP.ReadUInt(-1);
				byte b2 = MP.ReadByte(-1);
				SerialBox serialBox5 = new SerialBox();
				serialBox5.Serial = num4;
				serialBox5.Flag = b2;
				serialBox5.Read = ((b2 & 1) > 0);
				serialBox5.Save = ((b2 & 2) > 0);
				serialBox5.Type = MP.ReadByte(-1);
				this.Mailing.ReportSerial.SID.Add(num4, serialBox5);
				SerialBox serialBox6;
				if (!this.Mailing.ReportSerial.Matrix.TryGetValue(num4, out serialBox6) || (this.Mailing.Refresh && !serialBox6.Pull))
				{
					this.Mailing.ReportSerial.Matrix[num4] = serialBox5;
					this.Mailing.ReportSerial.Caliber.Add(num4);
				}
				num3++;
			}
			this.Mailing.FavorSerial.System.Unread = (this.Mailing.ReportSerial.Unread = 0u);
			this.Mailing.ReportSerial.Total = (this.Mailing.FavorSerial.System.Total = 0u);
			List<uint> list2 = new List<uint>();
			foreach (SerialBox serialBox7 in this.Mailing.ReportSerial.Matrix.Values)
			{
				SerialBox serialBox8 = this.Mailing.ReportSerial.SID.Find(serialBox7.Serial);
				if (serialBox8 != null)
				{
					if (serialBox7.Pull)
					{
						if (serialBox8.Save != serialBox7.Save)
						{
							this.DeleteMail(MailType.EMAIL_BATTLE, serialBox7.Serial);
							this.Mailing.ReportSerial.Caliber.Add(serialBox7.Serial);
							serialBox7.Save = serialBox8.Save;
							serialBox7.Read = serialBox8.Read;
							serialBox7.Flag = serialBox8.Flag;
							serialBox7.Pull = false;
							serialBox7.Keep = false;
						}
						else if (serialBox8.Read != serialBox7.Read && this.Mailing.ReportSerial.Mail.TryGetValue(serialBox8.Serial, out this.DoFavor.Combat))
						{
							serialBox7.Flag = serialBox8.Flag;
							this.DoFavor.Combat.Flag = serialBox8.Flag;
							this.DoFavor.Combat.BeRead = serialBox8.Read;
							this.DoFavor.Type = MailType.EMAIL_BATTLE;
							this.SaveMail(this.DoFavor, this.DoFavor.Combat.SerialID, 0u, 0u);
						}
					}
				}
				else
				{
					this.DeleteMail(MailType.EMAIL_BATTLE, serialBox7.Serial);
					list2.Add(serialBox7.Serial);
				}
			}
			foreach (uint key2 in list2)
			{
				this.Mailing.ReportSerial.Matrix.Remove(key2);
			}
			if (list2.Count > 0)
			{
				list2.Clear();
			}
			GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 10, 0);
			break;
		}
		case Protocol._MSG_RESP_SAVEMAILMETA:
			this.Mailing.FavorSerial.Total = (uint)MP.ReadByte(-1);
			this.Mailing.FavorSerial.Unread = (uint)MP.ReadByte(-1);
			GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 10, 0);
			this.SaveMailData(MP.Protocol);
			break;
		case Protocol._MSG_RESP_NOTICEMETA:
		{
			this.Mailing.SystemSerial.SerialNumber = (uint)MP.ReadByte(-1);
			this.Mailing.SystemSerial.Caliber.Clear();
			this.Mailing.SystemSerial.SID.Clear();
			this.Mailing.SystemSerial.Last = 0u;
			int num5 = 0;
			while ((long)num5 < (long)((ulong)this.Mailing.SystemSerial.SerialNumber))
			{
				uint num6 = MP.ReadUInt(-1);
				byte b3 = MP.ReadByte(-1);
				SerialBox serialBox9 = new SerialBox();
				serialBox9.Serial = num6;
				serialBox9.Flag = b3;
				serialBox9.Read = ((b3 & 1) > 0);
				serialBox9.Save = ((b3 & 2) > 0);
				this.Mailing.SystemSerial.SID.Add(num6, serialBox9);
				SerialBox serialBox10;
				if (!this.Mailing.SystemSerial.Matrix.TryGetValue(num6, out serialBox10) || (this.Mailing.Refresh && !serialBox10.Pull))
				{
					this.Mailing.SystemSerial.Matrix[num6] = serialBox9;
					this.Mailing.SystemSerial.Caliber.Add(num6);
				}
				num5++;
			}
			this.Mailing.FavorSerial.System.Unread = (this.Mailing.SystemSerial.Unread = 0u);
			this.Mailing.SystemSerial.Total = (this.Mailing.FavorSerial.System.Total = 0u);
			List<uint> list3 = new List<uint>();
			foreach (SerialBox serialBox11 in this.Mailing.SystemSerial.Matrix.Values)
			{
				SerialBox serialBox12 = this.Mailing.SystemSerial.SID.Find(serialBox11.Serial);
				if (serialBox12 != null)
				{
					if (serialBox11.Pull)
					{
						if (serialBox12.Save != serialBox11.Save)
						{
							this.DeleteMail(MailType.EMAIL_SYSTEM, serialBox11.Serial);
							this.Mailing.SystemSerial.Caliber.Add(serialBox11.Serial);
							serialBox11.Save = serialBox12.Save;
							serialBox11.Read = serialBox12.Read;
							serialBox11.Flag = serialBox12.Flag;
							serialBox11.Pull = false;
							serialBox11.Keep = false;
						}
						else if (serialBox12.Read != serialBox11.Read && this.Mailing.SystemSerial.Mail.TryGetValue(serialBox12.Serial, out this.DoFavor.System))
						{
							serialBox11.Flag = serialBox12.Flag;
							this.DoFavor.System.Flag = serialBox12.Flag;
							this.DoFavor.System.BeRead = serialBox12.Read;
							this.DoFavor.Type = MailType.EMAIL_SYSTEM;
							this.SaveMail(this.DoFavor, this.DoFavor.System.SerialID, 0u, 0u);
						}
					}
				}
				else
				{
					this.DeleteMail(MailType.EMAIL_SYSTEM, serialBox11.Serial);
					list3.Add(serialBox11.Serial);
				}
			}
			foreach (uint key3 in list3)
			{
				this.Mailing.SystemSerial.Matrix.Remove(key3);
			}
			if (list3.Count > 0)
			{
				list3.Clear();
			}
			GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 10, 0);
			break;
		}
		default:
			switch (protocol)
			{
			case Protocol._MSG_RESP_MAIL_ERROR:
				this.DeleteMail(MailType.EMAIL_LETTER, this.DoFavor.Serial = MP.ReadUInt(-1));
				this.Mailing.MailSerial.Matrix.Remove(this.DoFavor.Serial);
				this.MailDataRefresh(MailType.EMAIL_FAVORY);
				this.MailDataRefresh(MailType.EMAIL_LETTER);
				this.MailingboxRefresh(MailType.EMAIL_LETTER, ReportSubSet.REPORTSet_MAX);
				GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
				break;
			case Protocol._MSG_RESP_REPORT_ERROR:
				this.DeleteMail(MailType.EMAIL_BATTLE, this.DoFavor.Serial = MP.ReadUInt(-1));
				this.Mailing.ReportSerial.Matrix.Remove(this.DoFavor.Serial);
				this.MailDataRefresh(MailType.EMAIL_FAVORY);
				this.MailDataRefresh(MailType.EMAIL_BATTLE);
				this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_MAX);
				GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
				break;
			case Protocol._MSG_RESP_NOTICE_ERROR:
				this.DeleteMail(MailType.EMAIL_SYSTEM, this.DoFavor.Serial = MP.ReadUInt(-1));
				this.Mailing.SystemSerial.Matrix.Remove(this.DoFavor.Serial);
				this.MailDataRefresh(MailType.EMAIL_FAVORY);
				this.MailDataRefresh(MailType.EMAIL_SYSTEM);
				this.MailingboxRefresh(MailType.EMAIL_SYSTEM, ReportSubSet.REPORTSet_MAX);
				GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
				break;
			default:
				if (protocol != Protocol._MSG_RESP_SCOUT_NPC_REPORTINFO)
				{
					if (protocol != Protocol._MSG_RESP_NPC_COMBATREPORTINFO)
					{
						if (protocol == Protocol._MSG_RESP_PET_REPORTINFO)
						{
							CombatReport combatReport = new CombatReport(this.Mailing.ReportSerial.New = MP.ReadUInt(-1), CombatCollectReport.CCR_PETREPORT);
							combatReport.Pet = new PetReportContent();
							combatReport.SetData(MP.ReadByte(-1), MP.ReadLong(-1));
							combatReport.BeRead = ((combatReport.Flag & 1) > 0);
							combatReport.BeSave = ((combatReport.Flag & 2) > 0);
							combatReport.Pet.KindgomID = MP.ReadUShort(-1);
							combatReport.Pet.Zone = MP.ReadUShort(-1);
							combatReport.Pet.Point = MP.ReadByte(-1);
							combatReport.Pet.Kind = MP.ReadByte(-1);
							combatReport.Pet.Side = MP.ReadByte(-1);
							combatReport.Pet.AssaultKingdomID = MP.ReadUShort(-1);
							combatReport.Pet.AssaultAllianceTag = MP.ReadString(3, -1);
							combatReport.Pet.AssaultName = MP.ReadString(13, -1);
							combatReport.Pet.AssaultCapitalZone = MP.ReadUShort(-1);
							combatReport.Pet.AssaultCapitalPoint = MP.ReadByte(-1);
							combatReport.Pet.AssaultLevel = MP.ReadByte(-1);
							combatReport.Pet.AssaultHead = MP.ReadUShort(-1);
							combatReport.Pet.AssaultVIPLevel = MP.ReadByte(-1);
							combatReport.Pet.AssaultAllianceRank = MP.ReadByte(-1);
							combatReport.Pet.DefenceKingdomID = MP.ReadUShort(-1);
							combatReport.Pet.DefenceAllianceTag = MP.ReadString(3, -1);
							combatReport.Pet.DefenceName = MP.ReadString(13, -1);
							combatReport.Pet.DefenceCapitalZone = MP.ReadUShort(-1);
							combatReport.Pet.DefenceCapitalPoint = MP.ReadByte(-1);
							combatReport.Pet.DefenceLevel = MP.ReadByte(-1);
							combatReport.Pet.DefenceHead = MP.ReadUShort(-1);
							combatReport.Pet.DefenceVIPLevel = MP.ReadByte(-1);
							combatReport.Pet.DefenceAllianceRank = MP.ReadByte(-1);
							combatReport.Pet.PatchNo = MP.ReadUInt(-1);
							combatReport.Pet.PetID = MP.ReadUShort(-1);
							combatReport.Pet.PetStar = MP.ReadByte(-1);
							combatReport.Pet.SkillID = MP.ReadUShort(-1);
							combatReport.Pet.SkillLevel = MP.ReadByte(-1);
							combatReport.Pet.DeadTroops = new uint[16];
							combatReport.Pet.InjureTroops = new uint[16];
							combatReport.Pet.Resource = new uint[5];
							combatReport.Pet.Result = (PetReportResultType)MP.ReadByte(-1);
							if (combatReport.Pet.Result == PetReportResultType.EPRR_ATTACK_RSS || combatReport.Pet.Result == PetReportResultType.EPRR_UNDERATTACKED_RSS)
							{
								byte b4 = 0;
								while ((int)b4 < combatReport.Pet.Resource.Length)
								{
									combatReport.Pet.Resource[(int)b4] = MP.ReadUInt(-1);
									b4 += 1;
								}
							}
							else if (combatReport.Pet.Result == PetReportResultType.EPRR_ATTACK_TROOP)
							{
								combatReport.Pet.LostPower = MP.ReadULong(-1);
								combatReport.Pet.TotalInjure = MP.ReadUInt(-1);
								combatReport.Pet.TotalDead = MP.ReadUInt(-1);
							}
							else if (combatReport.Pet.Result == PetReportResultType.EPRR_UNDERATTACKED_TROOP)
							{
								combatReport.Pet.LostPower = MP.ReadULong(-1);
								for (int i = 0; i < combatReport.Pet.InjureTroops.Length; i++)
								{
									combatReport.Pet.InjureTroops[i] = MP.ReadUInt(-1);
								}
								for (int j = 0; j < combatReport.Pet.DeadTroops.Length; j++)
								{
									combatReport.Pet.DeadTroops[j] = MP.ReadUInt(-1);
								}
							}
							else if (combatReport.Pet.Result == PetReportResultType.EPRR_UNDERATTACKED_WALL)
							{
								combatReport.Pet.WallDamage = MP.ReadUInt(-1);
							}
							if (this.Mailing.ReportSerial.Matrix.TryGetValue(combatReport.SerialID, out this.DoFavor.Box))
							{
								this.DoFavor.Box.Pull = true;
							}
							else
							{
								this.Mailing.ReportSerial.Matrix[combatReport.SerialID] = new SerialBox(combatReport.SerialID, combatReport.Flag, combatReport.BeRead, combatReport.BeSave, true, true);
							}
							if (combatReport.BeSave)
							{
								if (!this.Mailing.FavorSerial.Combat.Mail.ContainsKey(this.Mailing.ReportSerial.New) && (ulong)this.Mailing.FavorSerial.Count < (ulong)((long)this.Mailing.FavorSerial.Inbox.Length))
								{
									this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial = this.Mailing.ReportSerial.New;
									this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Timing = combatReport.Times;
									this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Type = MailType.EMAIL_BATTLE;
									this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Change = true;
									this.Mailing.FavorSerial.Count += 1u;
								}
								this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, 1));
								this.Mailing.FavorSerial.Combat.Mail[this.Mailing.ReportSerial.New] = combatReport;
								this.Mailing.FavorSerial.Infolog = true;
								this.MailDataRefresh(MailType.EMAIL_FAVORY);
							}
							else
							{
								this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, 0));
								if (!this.Mailing.ReportSerial.Mail.ContainsKey(this.Mailing.ReportSerial.New))
								{
									if (this.Mailing.ReportSerial.Mail.Count < 130)
									{
										this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Serial = this.Mailing.ReportSerial.New;
										this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Timing = combatReport.Times;
										this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Type = MailType.EMAIL_BATTLE;
										this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Change = true;
										if ((ulong)this.Mailing.ReportSerial.Count < (ulong)((long)(this.Mailing.ReportSerial.Inbox.Length - 1)))
										{
											this.Mailing.ReportSerial.Count += 1u;
										}
									}
								}
								this.Mailing.ReportSerial.Mail[this.Mailing.ReportSerial.New] = combatReport;
								this.MailDataRefresh(MailType.EMAIL_BATTLE);
							}
							if (!combatReport.BeRead)
							{
								GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
							}
							this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_COMBAT_SCOUT);
						}
					}
					else
					{
						CombatReport combatReport2 = new CombatReport(this.Mailing.ReportSerial.New = MP.ReadUInt(-1), CombatCollectReport.CCR_NPCCOMBAT);
						combatReport2.NPCCombat = new NPCCombatReportContent();
						combatReport2.SetData(MP.ReadByte(-1), MP.ReadLong(-1));
						combatReport2.BeRead = ((combatReport2.Flag & 1) > 0);
						combatReport2.BeSave = ((combatReport2.Flag & 2) > 0);
						combatReport2.NPCCombat.KingdomID = MP.ReadUShort(-1);
						combatReport2.NPCCombat.CombatlZone = MP.ReadUShort(-1);
						combatReport2.NPCCombat.CombatPoint = MP.ReadByte(-1);
						combatReport2.NPCCombat.CombatPointKind = (POINT_KIND)MP.ReadByte(-1);
						combatReport2.NPCCombat.Side = MP.ReadByte(-1);
						combatReport2.NPCCombat.AssaultKingdomID = MP.ReadUShort(-1);
						combatReport2.NPCCombat.AssaultAllianceTag = MP.ReadString(3, -1);
						combatReport2.NPCCombat.AssaultName = MP.ReadString(13, -1);
						combatReport2.NPCCombat.NPCLevel = MP.ReadByte(-1);
						combatReport2.NPCCombat.NPCID = MP.ReadUShort(-1);
						combatReport2.NPCCombat.Result = (CombatReportResultType)MP.ReadByte(-1);
						combatReport2.NPCCombat.Reward = MP.ReadUShort(-1);
						combatReport2.NPCCombat.HeroData = new CombatHeroExpData[5];
						for (int k = 0; k < combatReport2.NPCCombat.HeroData.Length; k++)
						{
							combatReport2.NPCCombat.HeroData[k] = new CombatHeroExpData();
							combatReport2.NPCCombat.HeroData[k].HeroID = MP.ReadUShort(-1);
							combatReport2.NPCCombat.HeroData[k].Star = MP.ReadByte(-1);
						}
						combatReport2.NPCCombat.EarnLordExp = MP.ReadUInt(-1);
						combatReport2.NPCCombat.EarnHeroExp = MP.ReadUInt(-1);
						combatReport2.NPCCombat.DetailAutoID = MP.ReadULong(-1);
						combatReport2.NPCCombat.DetailDbServerID = MP.ReadInt(-1);
						combatReport2.NPCCombat.AccessKey = MP.ReadInt(-1);
						combatReport2.NPCCombat.DetailSelfIndex = MP.ReadByte(-1);
						combatReport2.NPCCombat.ResurrextTotal = MP.ReadUInt(-1);
						combatReport2.NPCCombat.SummaryHead.AssaultCapitalZone = MP.ReadUShort(-1);
						combatReport2.NPCCombat.SummaryHead.AssaultCapitalPoint = MP.ReadByte(-1);
						combatReport2.NPCCombat.SummaryHead.AssaultLosePower = MP.ReadULong(-1);
						combatReport2.NPCCombat.SummaryHead.AssaultTroopForce = MP.ReadUInt(-1);
						combatReport2.NPCCombat.SummaryHead.AssaultTroopInjure = MP.ReadUInt(-1);
						combatReport2.NPCCombat.SummaryHead.AssaultTroopDeath = MP.ReadUInt(-1);
						combatReport2.NPCCombat.SummaryHead.DefenceCapitalZone = MP.ReadUShort(-1);
						combatReport2.NPCCombat.SummaryHead.DefenceCapitalPoint = MP.ReadByte(-1);
						combatReport2.NPCCombat.SummaryHead.DefenceLosePower = MP.ReadULong(-1);
						combatReport2.NPCCombat.SummaryHead.DefenceTroopForce = MP.ReadUInt(-1);
						combatReport2.NPCCombat.SummaryHead.DefenceTroopInjure = MP.ReadUInt(-1);
						combatReport2.NPCCombat.SummaryHead.DefenceTroopDeath = MP.ReadUInt(-1);
						combatReport2.NPCCombat.Summary.WallDefence = MP.ReadUInt(-1);
						combatReport2.NPCCombat.Summary.WallDamage = MP.ReadUInt(-1);
						combatReport2.NPCCombat.Summary.TrapNumber = MP.ReadUInt(-1);
						combatReport2.NPCCombat.Summary.LoseTrapNumber = MP.ReadUInt(-1);
						combatReport2.NPCCombat.Summary.SaveTrapNumber = MP.ReadUInt(-1);
						combatReport2.NPCCombat.Summary.AssaultLevel = MP.ReadByte(-1);
						combatReport2.NPCCombat.Summary.AssaultHead = MP.ReadUShort(-1);
						combatReport2.NPCCombat.Summary.AssaultLordInCombat = MP.ReadByte(-1);
						combatReport2.NPCCombat.Summary.AssaultVIPLevel = MP.ReadByte(-1);
						combatReport2.NPCCombat.Summary.IsLeader = MP.ReadByte(-1);
						combatReport2.NPCCombat.Summary.AssaultAllianceRank = MP.ReadByte(-1);
						combatReport2.NPCCombat.Version = MP.ReadUInt(-1);
						combatReport2.NPCCombat.PatchNo = MP.ReadUInt(-1);
						combatReport2.NPCCombat.AssaultArmyCoord = MP.ReadByte(-1);
						combatReport2.NPCCombat.DefenceArmyCoord = MP.ReadByte(-1);
						combatReport2.NPCCombat.PetSkillPatchNo = MP.ReadUInt(-1);
						combatReport2.NPCCombat.m_AssaultPetSkill_ID = new ushort[20];
						for (int l = 0; l < combatReport2.NPCCombat.m_AssaultPetSkill_ID.Length; l++)
						{
							combatReport2.NPCCombat.m_AssaultPetSkill_ID[l] = MP.ReadUShort(-1);
						}
						combatReport2.NPCCombat.m_AssaultPetSkill_LV = new byte[20];
						for (int m = 0; m < combatReport2.NPCCombat.m_AssaultPetSkill_LV.Length; m++)
						{
							combatReport2.NPCCombat.m_AssaultPetSkill_LV[m] = MP.ReadByte(-1);
						}
						if (this.Mailing.ReportSerial.Matrix.TryGetValue(combatReport2.SerialID, out this.DoFavor.Box))
						{
							this.DoFavor.Box.Pull = true;
						}
						else
						{
							this.Mailing.ReportSerial.Matrix[combatReport2.SerialID] = new SerialBox(combatReport2.SerialID, combatReport2.Flag, combatReport2.BeRead, combatReport2.BeSave, true, true);
							if (!combatReport2.BeRead)
							{
								AudioManager.Instance.PlayUISFX(UIKind.ReceiveMail);
							}
						}
						if (combatReport2.BeSave)
						{
							if (!this.Mailing.FavorSerial.Combat.Mail.ContainsKey(this.Mailing.ReportSerial.New) && (ulong)this.Mailing.FavorSerial.Count < (ulong)((long)this.Mailing.FavorSerial.Inbox.Length))
							{
								this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial = this.Mailing.ReportSerial.New;
								this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Timing = combatReport2.Times;
								this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Type = MailType.EMAIL_BATTLE;
								this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Change = true;
								this.Mailing.FavorSerial.Count += 1u;
							}
							this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, 1));
							this.Mailing.FavorSerial.Combat.Mail[this.Mailing.ReportSerial.New] = combatReport2;
							this.Mailing.FavorSerial.Infolog = true;
							this.MailDataRefresh(MailType.EMAIL_FAVORY);
						}
						else
						{
							this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, 0));
							if (!this.Mailing.ReportSerial.Mail.ContainsKey(this.Mailing.ReportSerial.New))
							{
								if (this.Mailing.ReportSerial.Mail.Count < 130)
								{
									this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Serial = this.Mailing.ReportSerial.New;
									this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Timing = combatReport2.Times;
									this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Type = MailType.EMAIL_BATTLE;
									this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Change = true;
									if ((ulong)this.Mailing.ReportSerial.Count < (ulong)((long)(this.Mailing.ReportSerial.Inbox.Length - 1)))
									{
										this.Mailing.ReportSerial.Count += 1u;
									}
								}
							}
							this.Mailing.ReportSerial.Mail[this.Mailing.ReportSerial.New] = combatReport2;
							this.MailDataRefresh(MailType.EMAIL_BATTLE);
						}
						if (!combatReport2.BeRead)
						{
							GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
						}
						this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_COMBAT_SCOUT);
					}
				}
				else
				{
					CombatReport combatReport3 = new CombatReport(this.Mailing.ReportSerial.New = MP.ReadUInt(-1), CombatCollectReport.CCR_NPCSCOUT);
					combatReport3.NPCScout = new NPCScoutReportContent();
					combatReport3.SetData(MP.ReadByte(-1), MP.ReadLong(-1));
					combatReport3.BeRead = ((combatReport3.Flag & 1) > 0);
					combatReport3.BeSave = ((combatReport3.Flag & 2) > 0);
					combatReport3.NPCScout.KingdomID = MP.ReadUShort(-1);
					combatReport3.NPCScout.CombatlZone = MP.ReadUShort(-1);
					combatReport3.NPCScout.CombatPoint = MP.ReadByte(-1);
					combatReport3.NPCScout.CombatPointKind = (POINT_KIND)MP.ReadByte(-1);
					combatReport3.NPCScout.NPCLevel = MP.ReadByte(-1);
					combatReport3.NPCScout.NPCID = MP.ReadUShort(-1);
					combatReport3.NPCScout.Reward = MP.ReadUShort(-1);
					combatReport3.NPCScout.ScoutResult = MP.ReadByte(-1);
					combatReport3.NPCScout.ScoutLevel = MP.ReadByte(-1);
					combatReport3.NPCScout.ScoutContentLen = MP.ReadUShort(-1);
					combatReport3.NPCScout.ScoutContent = new byte[(int)combatReport3.NPCScout.ScoutContentLen];
					MP.ReadBlock(combatReport3.NPCScout.ScoutContent, 0, (int)combatReport3.NPCScout.ScoutContentLen, -1);
					if (this.Mailing.ReportSerial.Matrix.TryGetValue(combatReport3.SerialID, out this.DoFavor.Box))
					{
						this.DoFavor.Box.Pull = true;
					}
					else
					{
						this.Mailing.ReportSerial.Matrix[combatReport3.SerialID] = new SerialBox(combatReport3.SerialID, combatReport3.Flag, combatReport3.BeRead, combatReport3.BeSave, true, true);
						if (!combatReport3.BeRead)
						{
							AudioManager.Instance.PlayUISFX(UIKind.ReceiveMail);
						}
					}
					if (combatReport3.BeSave)
					{
						if (!this.Mailing.FavorSerial.Combat.Mail.ContainsKey(this.Mailing.ReportSerial.New) && (ulong)this.Mailing.FavorSerial.Count < (ulong)((long)this.Mailing.FavorSerial.Inbox.Length))
						{
							this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial = this.Mailing.ReportSerial.New;
							this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Timing = combatReport3.Times;
							this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Type = MailType.EMAIL_BATTLE;
							this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Change = true;
							this.Mailing.FavorSerial.Count += 1u;
						}
						this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, 1));
						this.Mailing.FavorSerial.Combat.Mail[this.Mailing.ReportSerial.New] = combatReport3;
						this.Mailing.FavorSerial.Infolog = true;
						this.MailDataRefresh(MailType.EMAIL_FAVORY);
					}
					else
					{
						this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, 0));
						if (!this.Mailing.ReportSerial.Mail.ContainsKey(this.Mailing.ReportSerial.New))
						{
							if (this.Mailing.ReportSerial.Mail.Count < 130)
							{
								this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Serial = this.Mailing.ReportSerial.New;
								this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Timing = combatReport3.Times;
								this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Type = MailType.EMAIL_BATTLE;
								this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Change = true;
								if ((ulong)this.Mailing.ReportSerial.Count < (ulong)((long)(this.Mailing.ReportSerial.Inbox.Length - 1)))
								{
									this.Mailing.ReportSerial.Count += 1u;
								}
							}
						}
						this.Mailing.ReportSerial.Mail[this.Mailing.ReportSerial.New] = combatReport3;
						this.MailDataRefresh(MailType.EMAIL_BATTLE);
					}
					if (!combatReport3.BeRead)
					{
						GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
					}
					this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_COMBAT_SCOUT);
				}
				break;
			}
			break;
		case Protocol._MSG_RESP_MAILINFO:
		{
			MailContent mailContent = new MailContent();
			mailContent.SerialID = (this.Mailing.MailSerial.New = MP.ReadUInt(-1));
			mailContent.SetData(MP.ReadByte(-1), MP.ReadLong(-1));
			mailContent.TitleT = (mailContent.ContentT = string.Empty);
			mailContent.MailType = MP.ReadByte(-1);
			mailContent.ReplyID = MP.ReadUInt(-1);
			mailContent.SenderHead = MP.ReadUShort(-1);
			mailContent.SenderKindom = MP.ReadUShort(-1);
			mailContent.SenderTag = MP.ReadString(3, -1);
			mailContent.SenderName = MP.ReadString(13, -1);
			if (this.TalkData_BlackList.ContainsKey(mailContent.SenderName.GetHashCode()))
			{
				CString cstring = StringManager.Instance.StaticString1024();
				cstring.IntToFormat(1L, 1, false);
				cstring.AppendFormat(this.mStringTable.GetStringByID(8242u));
				GUIManager.Instance.AddHUDMessage(cstring.ToString(), 255, true);
				MessagePacket messagePacket = new MessagePacket(1024);
				messagePacket.Protocol = Protocol._MSG_REQUEST_DELETEMAIL;
				messagePacket.AddSeqId();
				messagePacket.Add(1);
				messagePacket.Add(mailContent.SerialID);
				messagePacket.Send(false);
				return;
			}
			mailContent.ExtraFlag = MP.ReadByte(-1);
			mailContent.TitleLen = MP.ReadByte(-1);
			mailContent.ContentLen = MP.ReadUShort(-1);
			mailContent.AttachNum = MP.ReadByte(-1);
			mailContent.BeRead = ((mailContent.Flag & 1) > 0);
			mailContent.BeSave = ((mailContent.Flag & 2) > 0);
			int num7 = 0;
			while (num7 < mailContent.Attach.Length && num7 < (int)mailContent.AttachNum)
			{
				mailContent.Attach[num7].KingdomID = MP.ReadUShort(-1);
				mailContent.Attach[num7].ZoneID = MP.ReadUShort(-1);
				mailContent.Attach[num7].PointID = MP.ReadByte(-1);
				num7++;
			}
			mailContent.Title = MP.ReadString((int)mailContent.TitleLen, -1);
			mailContent.Content = MP.ReadString((int)mailContent.ContentLen, -1);
			fixed (string text = mailContent.Content)
			{
				fixed (char* ptr = text + RuntimeHelpers.OffsetToStringData / 2)
				{
					for (int n = 0; n < mailContent.Content.Length; n++)
					{
						if (!this.isNotEmojiCharacter(mailContent.Content[n]))
						{
							ptr[n] = ' ';
						}
					}
					text = null;
					if (mailContent.MailType == 2)
					{
						mailContent.Content = ActivityManager.Instance.TransToLocalTime(mailContent.Content);
					}
					if (this.Mailing.MailSerial.Matrix.TryGetValue(mailContent.SerialID, out this.DoFavor.Box))
					{
						this.DoFavor.Box.Pull = true;
					}
					else
					{
						this.Mailing.MailSerial.Matrix[mailContent.SerialID] = new SerialBox(mailContent.SerialID, mailContent.Flag, mailContent.BeRead, mailContent.BeSave, true, true);
						if (!mailContent.BeRead)
						{
							AudioManager.Instance.PlayUISFX(UIKind.ReceiveMail);
						}
					}
					if (mailContent.BeSave)
					{
						if (!this.Mailing.FavorSerial.Mail.Mail.ContainsKey(this.Mailing.MailSerial.New) && (ulong)this.Mailing.FavorSerial.Count < (ulong)((long)this.Mailing.FavorSerial.Inbox.Length))
						{
							this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial = this.Mailing.MailSerial.New;
							this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Type = MailType.EMAIL_LETTER;
							this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Timing = mailContent.Times;
							this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Change = true;
							this.Mailing.FavorSerial.Count += 1u;
						}
						this.Mailing.MailSerial.Order.Add(new MailSaveOrder(this.Mailing.MailSerial.New, 1));
						this.Mailing.FavorSerial.Mail.Mail[this.Mailing.MailSerial.New] = mailContent;
						this.Mailing.FavorSerial.Infolog = true;
						this.MailDataRefresh(MailType.EMAIL_FAVORY);
					}
					else
					{
						this.Mailing.MailSerial.Order.Add(new MailSaveOrder(this.Mailing.MailSerial.New, 0));
						if (!this.Mailing.MailSerial.Mail.ContainsKey(this.Mailing.MailSerial.New))
						{
							if (this.Mailing.MailSerial.Mail.Count < this.Mailing.MailSerial.Inbox.Length)
							{
								if (mailContent.ReplyID > 0u && (mailContent.MailType == 4 || mailContent.MailType == 0))
								{
									SubContent subContent;
									if (!this.Mailing.MailSerial.SubMail.TryGetValue(mailContent.ReplyID, out subContent))
									{
										this.Mailing.MailSerial.SubMail.Add(mailContent.ReplyID, subContent = new SubContent());
									}
									List<uint> list4;
									if (!subContent.Mail.TryGetValue(mailContent.SenderName, out list4))
									{
										subContent.Mail.Add(mailContent.SenderName, list4 = new List<uint>());
									}
									list4.Add(mailContent.SerialID);
									list4.Sort();
									mailContent.More = (byte)list4.Count;
								}
								this.Mailing.MailSerial.Inbox[(int)((UIntPtr)this.Mailing.MailSerial.Count)].Serial = this.Mailing.MailSerial.New;
								this.Mailing.MailSerial.Inbox[(int)((UIntPtr)this.Mailing.MailSerial.Count)].Type = MailType.EMAIL_LETTER;
								this.Mailing.MailSerial.Inbox[(int)((UIntPtr)this.Mailing.MailSerial.Count)].Timing = mailContent.Times;
								this.Mailing.MailSerial.Inbox[(int)((UIntPtr)this.Mailing.MailSerial.Count)].Change = true;
								this.Mailing.MailSerial.Count += 1u;
							}
						}
						this.Mailing.MailSerial.Mail[this.Mailing.MailSerial.New] = mailContent;
						this.MailDataRefresh(MailType.EMAIL_LETTER);
					}
					if (!mailContent.BeRead)
					{
						GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
					}
					this.MailingboxRefresh(MailType.EMAIL_LETTER, ReportSubSet.REPORTSet_MAX);
					break;
				}
			}
		}
		case Protocol._MSG_RESP_MAILMARKREAD:
		{
			this.DoFavor.Type = MailType.EMAIL_LETTER;
			byte b5 = MP.ReadByte(-1);
			for (int num8 = 0; num8 < (int)b5; num8++)
			{
				this.DoFavor.Serial = MP.ReadUInt(-1);
				if (this.FavorReportGet(ref this.DoFavor))
				{
					this.DoFavor.Mail.BeRead = true;
					this.Mailing.FavorSerial.Unseen -= 1u;
				}
				else if (this.Mailing.MailSerial.Mail.TryGetValue(this.DoFavor.Serial, out this.DoFavor.Mail))
				{
					SubContent subContent2;
					List<uint> list5;
					MailContent mailContent2;
					if (this.DoFavor.Mail.More > 1 && this.Mailing.MailSerial.SubMail.TryGetValue(this.DoFavor.Mail.ReplyID, out subContent2) && subContent2.Mail.TryGetValue(this.DoFavor.Mail.SenderName, out list5) && list5.Count > 0 && this.Mailing.MailSerial.Mail.TryGetValue(list5[list5.Count - 1], out mailContent2))
					{
						MailContent mailContent3 = mailContent2;
						mailContent3.UnSeen -= 1;
					}
					this.Mailing.MailSerial.Unseen -= 1u;
					this.DoFavor.Mail.BeRead = true;
					MailContent mail = this.DoFavor.Mail;
					mail.Flag |= 1;
					if (this.DoFavor.Mail.BeKept)
					{
						this.SaveMail(this.DoFavor, this.DoFavor.Serial, 0u, 0u);
					}
				}
			}
			if (b5 > 0)
			{
				this.SaveMail(this.DoFavor.Type);
			}
			GUIManager.Instance.HideUILock(EUILock.Mailing_Read);
			GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
			this.MailingboxRefresh(MailType.EMAIL_LETTER, ReportSubSet.REPORTSet_MAX);
			break;
		}
		case Protocol._MSG_RESP_SAVEMAIL:
		{
			uint key4 = this.DoFavor.Serial = MP.ReadUInt(-1);
			this.DoFavor.Kind = MailType.EMAIL_LETTER;
			this.DoFavor.Type = MailType.EMAIL_LETTER;
			if (this.MailReportGet(ref this.DoFavor))
			{
				MailContent mail2 = this.DoFavor.Mail;
				mail2.Flag |= 2;
				this.DoFavor.Mail.BeSave = true;
				if (this.Mailing.FavorSerial.Mail.Mail.ContainsKey(this.DoFavor.Mail.SerialID) || (ulong)this.Mailing.FavorSerial.Count >= (ulong)((long)this.Mailing.FavorSerial.Inbox.Length))
				{
					return;
				}
				this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Type = this.DoFavor.Kind;
				this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial = this.DoFavor.Mail.SerialID;
				this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Timing = this.DoFavor.Mail.Times;
				this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Change = true;
				this.Mailing.FavorSerial.Infolog = true;
				this.Mailing.FavorSerial.Count += 1u;
				this.Mailing.FavorSerial.Mail.Mail[this.DoFavor.Mail.SerialID] = this.DoFavor.Mail;
				this.DeleteMail(this.DoFavor, this.DoFavor.Mail.SerialID, 0u);
				if (this.DoFavor.Mail.BeKept)
				{
					this.DoFavor.Kind = MailType.EMAIL_FAVORY;
					this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Serial);
				}
				if (this.DoFavor.Mail.More > 1)
				{
					SubContent subContent3;
					List<uint> list6;
					if (this.Mailing.MailSerial.SubMail.TryGetValue(this.DoFavor.Mail.ReplyID, out subContent3) && subContent3.Mail.TryGetValue(this.DoFavor.Mail.SenderName, out list6))
					{
						list6.RemoveAt(list6.Count - (int)this.DoFavor.Mail.MoreIndex - 1);
						if (this.DoFavor.Mail.MoreIndex == 0)
						{
							DataManager.msgBuffer[1] = this.DoFavor.Mail.Index;
							this.DoFavor.Kind = MailType.EMAIL_LETTER;
							this.DoFavor.Serial = list6[list6.Count - 1];
							if (!this.MailReportGet(ref this.DoFavor))
							{
								return;
							}
							this.Mailing.MailSerial.Inbox[(int)DataManager.msgBuffer[1]].Serial = this.DoFavor.Mail.SerialID;
							this.Mailing.MailSerial.Inbox[(int)DataManager.msgBuffer[1]].Timing = this.DoFavor.Mail.Times;
						}
					}
				}
				else
				{
					SubContent subContent3;
					if (this.Mailing.MailSerial.SubMail.TryGetValue(this.DoFavor.Mail.ReplyID, out subContent3) && subContent3.Mail.Remove(this.DoFavor.Mail.SenderName) && subContent3.Mail.Count == 0)
					{
						this.Mailing.MailSerial.SubMail.Remove(this.DoFavor.Mail.ReplyID);
					}
					this.Mailing.MailSerial.Inbox[(int)this.DoFavor.Mail.Index].Serial = 0u;
					if (this.Mailing.MailSerial.Count > 0u)
					{
						this.Mailing.MailSerial.Count -= 1u;
					}
				}
				this.Mailing.MailSerial.Change += 1u;
				this.Mailing.MailSerial.Mail.Remove(key4);
				this.MailDataRefresh(MailType.EMAIL_LETTER);
				this.MailDataRefresh(MailType.EMAIL_FAVORY);
				this.SaveMail(MailType.EMAIL_LETTER);
				this.MailingboxRefresh(MailType.EMAIL_LETTER, ReportSubSet.REPORTSet_MAX);
				this.MailingboxRefresh(MailType.EMAIL_FAVORY, ReportSubSet.REPORTSet_MAX);
				GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
				if (GUIManager.Instance.HideUILock(EUILock.Mailing_Save))
				{
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(681u), 255, true);
				}
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 10, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_LetterDetail, 2, 0);
			break;
		}
		case Protocol._MSG_RESP_DELETEMAIL:
		{
			byte b6 = MP.ReadByte(-1);
			MyFavorite myFavorite = new MyFavorite(MailType.EMAIL_LETTER, 0u);
			this.DoFavor.Kind = MailType.EMAIL_LETTER;
			for (int num9 = 0; num9 < (int)b6; num9++)
			{
				myFavorite.Serial = MP.ReadUInt(-1);
				MailContent mailContent4;
				if (this.FavorReportGet(ref myFavorite))
				{
					for (int num10 = 0; num10 < this.Mailing.FavorSerial.Inbox.Length; num10++)
					{
						if (this.Mailing.FavorSerial.Inbox[num10].Type == myFavorite.Type && this.Mailing.FavorSerial.Inbox[num10].Serial == myFavorite.Mail.SerialID)
						{
							this.Mailing.FavorSerial.Inbox[num10].Serial = 0u;
							this.Mailing.FavorSerial.Total -= 1u;
							break;
						}
					}
					this.Mailing.FavorSerial.Mail.Mail.Remove(myFavorite.Serial);
				}
				else if ((mailContent4 = this.MailReportGet(myFavorite.Serial)) != null)
				{
					this.DoFavor.Kind = MailType.EMAIL_LETTER;
					mailContent4.BeKill = true;
					if (mailContent4.BeChecked && this.Outlooking && this.Mailing.MailSerial.Select > 0u)
					{
						this.Mailing.MailSerial.Select -= 1u;
					}
					SubContent subContent4;
					List<uint> list7;
					if (mailContent4.More > 1)
					{
						if (this.Mailing.MailSerial.SubMail.TryGetValue(mailContent4.ReplyID, out subContent4) && subContent4.Mail.TryGetValue(mailContent4.SenderName, out list7))
						{
							myFavorite.Serial = list7[list7.Count - 1];
							for (int num11 = list7.Count; num11 > 0; num11--)
							{
								if (mailContent4.SerialID == list7[num11 - 1])
								{
									list7.RemoveAt(num11 - 1);
									this.DoFavor.Serial = list7[list7.Count - 1];
									if (list7.Count == 1 && this.Mailing.MailSerial.Mail.TryGetValue(list7[0], out this.DoFavor.Mail))
									{
										this.DoFavor.Mail.More = 1;
									}
									break;
								}
							}
							if (myFavorite.Serial == mailContent4.SerialID && this.MailReportGet(ref this.DoFavor))
							{
								this.Mailing.MailSerial.Inbox[(int)mailContent4.Index].Serial = this.DoFavor.Mail.SerialID;
								this.Mailing.MailSerial.Inbox[(int)mailContent4.Index].Timing = this.DoFavor.Mail.Times;
								this.Mailing.MailSerial.Inbox[(int)mailContent4.Index].Type = this.DoFavor.Kind;
							}
						}
					}
					else
					{
						this.Mailing.MailSerial.Inbox[(int)mailContent4.Index].Serial = 0u;
						if (this.Mailing.MailSerial.Count > 0u)
						{
							this.Mailing.MailSerial.Count -= 1u;
						}
					}
					if (this.Mailing.MailSerial.SubMail.TryGetValue(mailContent4.ReplyID, out subContent4) && subContent4.Mail.TryGetValue(mailContent4.SenderName, out list7) && list7.Count == 1 && list7[0] == mailContent4.SerialID)
					{
						subContent4.Mail.Remove(mailContent4.SenderName);
					}
					this.DeleteMail(this.DoFavor, mailContent4.SerialID, 0u);
					this.Mailing.MailSerial.Mail.Remove(mailContent4.SerialID);
				}
			}
			this.MailDataRefresh(MailType.EMAIL_LETTER);
			if (b6 > 0)
			{
				this.SaveMail(MailType.EMAIL_LETTER);
			}
			this.SaveMailData(MP.Protocol);
			if (GUIManager.Instance.HideUILock(EUILock.Mailing_Delete) && b6 > 0)
			{
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(683u), 255, true);
			}
			else if (GUIManager.Instance.HideUILock(EUILock.Mailing_Action) && b6 > 0)
			{
				GameManager.OnRefresh(NetworkNews.Refresh_Mailing, null);
				GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
				return;
			}
			this.MailDataRefresh(MailType.EMAIL_FAVORY);
			this.MailingboxRefresh(MailType.EMAIL_LETTER, ReportSubSet.REPORTSet_MAX);
			GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_LetterDetail, 2, 0);
			break;
		}
		case Protocol._MSG_RESP_SCOUTREPORTINFO:
		{
			CombatReport combatReport4 = new CombatReport(this.Mailing.ReportSerial.New = MP.ReadUInt(-1), CombatCollectReport.CCR_SCOUT);
			combatReport4.Scout = new ScoutReportContent();
			combatReport4.SetData(MP.ReadByte(-1), MP.ReadLong(-1));
			combatReport4.BeRead = ((combatReport4.Flag & 1) > 0);
			combatReport4.BeSave = ((combatReport4.Flag & 2) > 0);
			combatReport4.Scout.KingdomID = MP.ReadUShort(-1);
			combatReport4.Scout.CombatlZone = MP.ReadUShort(-1);
			combatReport4.Scout.CombatPoint = MP.ReadByte(-1);
			combatReport4.Scout.CombatPointKind = (POINT_KIND)MP.ReadByte(-1);
			combatReport4.Scout.ObjKingdomID = MP.ReadUShort(-1);
			combatReport4.Scout.ObjAllianceTag = MP.ReadString(3, -1);
			combatReport4.Scout.ObjName = MP.ReadString(13, -1);
			combatReport4.Scout.ScoutResult = MP.ReadByte(-1);
			combatReport4.Scout.ScoutLevel = MP.ReadByte(-1);
			combatReport4.Scout.ScoutContentLen = MP.ReadUShort(-1);
			combatReport4.Scout.ScoutContent = new byte[(int)combatReport4.Scout.ScoutContentLen];
			combatReport4.DateTime = GameConstants.GetDateTime(combatReport4.Times).ToString("MM/dd/yy HH:mm:ss");
			MP.ReadBlock(combatReport4.Scout.ScoutContent, 0, (int)combatReport4.Scout.ScoutContentLen, -1);
			if (this.Mailing.ReportSerial.Matrix.TryGetValue(combatReport4.SerialID, out this.DoFavor.Box))
			{
				this.DoFavor.Box.Pull = true;
			}
			else
			{
				this.Mailing.ReportSerial.Matrix[combatReport4.SerialID] = new SerialBox(combatReport4.SerialID, combatReport4.Flag, combatReport4.BeRead, combatReport4.BeSave, true, true);
				if (!combatReport4.BeRead)
				{
					AudioManager.Instance.PlayUISFX(UIKind.ReceiveMail);
				}
			}
			if (combatReport4.BeSave)
			{
				if (!this.Mailing.FavorSerial.Combat.Mail.ContainsKey(this.Mailing.ReportSerial.New) && (ulong)this.Mailing.FavorSerial.Count < (ulong)((long)this.Mailing.FavorSerial.Inbox.Length))
				{
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial = this.Mailing.ReportSerial.New;
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Timing = combatReport4.Times;
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Type = MailType.EMAIL_BATTLE;
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Change = true;
					this.Mailing.FavorSerial.Count += 1u;
				}
				this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, 1));
				this.Mailing.FavorSerial.Combat.Mail[this.Mailing.ReportSerial.New] = combatReport4;
				this.Mailing.FavorSerial.Infolog = true;
				this.MailDataRefresh(MailType.EMAIL_FAVORY);
			}
			else
			{
				this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, 0));
				if (!this.Mailing.ReportSerial.Mail.ContainsKey(this.Mailing.ReportSerial.New))
				{
					if (this.Mailing.ReportSerial.Mail.Count < 130)
					{
						this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Serial = this.Mailing.ReportSerial.New;
						this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Timing = combatReport4.Times;
						this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Type = MailType.EMAIL_BATTLE;
						this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Change = true;
						if ((ulong)this.Mailing.ReportSerial.Count < (ulong)((long)(this.Mailing.ReportSerial.Inbox.Length - 1)))
						{
							this.Mailing.ReportSerial.Count += 1u;
						}
					}
				}
				this.Mailing.ReportSerial.Mail[this.Mailing.ReportSerial.New] = combatReport4;
				this.MailDataRefresh(MailType.EMAIL_BATTLE);
			}
			if (!combatReport4.BeRead)
			{
				GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
			}
			this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_COMBAT_SCOUT);
			break;
		}
		case Protocol._MSG_RESP_COMBATREPORTINFO:
		{
			CombatReport combatReport5 = new CombatReport(this.Mailing.ReportSerial.New = MP.ReadUInt(-1), CombatCollectReport.CCR_BATTLE);
			combatReport5.Combat = new CombatReportContent();
			combatReport5.SetData(MP.ReadByte(-1), MP.ReadLong(-1));
			combatReport5.BeRead = ((combatReport5.Flag & 1) > 0);
			combatReport5.BeSave = ((combatReport5.Flag & 2) > 0);
			combatReport5.Combat.KingdomID = MP.ReadUShort(-1);
			combatReport5.Combat.CombatlZone = MP.ReadUShort(-1);
			combatReport5.Combat.CombatPoint = MP.ReadByte(-1);
			combatReport5.Combat.CombatPointKind = (POINT_KIND)MP.ReadByte(-1);
			combatReport5.Combat.Side = MP.ReadByte(-1);
			combatReport5.Combat.AssaultKingdomID = MP.ReadUShort(-1);
			combatReport5.Combat.AssaultAllianceTag = MP.ReadString(3, -1);
			combatReport5.Combat.AssaultName = MP.ReadString(13, -1);
			combatReport5.Combat.DefenceKingdomID = MP.ReadUShort(-1);
			combatReport5.Combat.DefenceAllianceTag = MP.ReadString(3, -1);
			combatReport5.Combat.DefenceName = MP.ReadString(13, -1);
			combatReport5.Combat.Result = (CombatReportResultType)MP.ReadByte(-1);
			combatReport5.Combat.Resource = new int[5];
			combatReport5.DateTime = GameConstants.GetDateTime(combatReport5.Times).ToString("MM/dd/yy HH:mm:ss");
			byte b7 = 0;
			while ((int)b7 < combatReport5.Combat.Resource.Length)
			{
				combatReport5.Combat.Resource[(int)b7] = MP.ReadInt(-1);
				b7 += 1;
			}
			combatReport5.Combat.HeroData = new CombatHeroExpData[5];
			for (int num12 = 0; num12 < 5; num12++)
			{
				combatReport5.Combat.HeroData[num12] = new CombatHeroExpData();
				combatReport5.Combat.HeroData[num12].HeroID = MP.ReadUShort(-1);
				combatReport5.Combat.HeroData[num12].Star = MP.ReadByte(-1);
			}
			combatReport5.Combat.EarnLordExp = MP.ReadUInt(-1);
			combatReport5.Combat.EarnHeroExp = MP.ReadUInt(-1);
			combatReport5.Combat.DetailAutoID = MP.ReadULong(-1);
			combatReport5.Combat.DetailDbServerID = MP.ReadInt(-1);
			combatReport5.Combat.AccessKey = MP.ReadInt(-1);
			combatReport5.Combat.DetailSelfIndex = MP.ReadByte(-1);
			combatReport5.Combat.CaptureResult = (ECombatReportCaptureResultType)MP.ReadByte(-1);
			combatReport5.Combat.Summary.AssaultCapitalZone = MP.ReadUShort(-1);
			combatReport5.Combat.Summary.AssaultCapitalPoint = MP.ReadByte(-1);
			combatReport5.Combat.Summary.AssaultLosePower = MP.ReadULong(-1);
			combatReport5.Combat.Summary.AssaultTroopForce = MP.ReadUInt(-1);
			combatReport5.Combat.Summary.AssaultTroopInjure = MP.ReadUInt(-1);
			combatReport5.Combat.Summary.AssaultTroopDeath = MP.ReadUInt(-1);
			combatReport5.Combat.Summary.DefenceCapitalZone = MP.ReadUShort(-1);
			combatReport5.Combat.Summary.DefenceCapitalPoint = MP.ReadByte(-1);
			combatReport5.Combat.Summary.DefenceLosePower = MP.ReadULong(-1);
			combatReport5.Combat.Summary.DefenceTroopForce = MP.ReadUInt(-1);
			combatReport5.Combat.Summary.DefenceTroopInjure = MP.ReadUInt(-1);
			combatReport5.Combat.Summary.DefenceTroopDeath = MP.ReadUInt(-1);
			combatReport5.Combat.Summary.WallDefence = MP.ReadUInt(-1);
			combatReport5.Combat.Summary.WallDamage = MP.ReadUInt(-1);
			combatReport5.Combat.Summary.TrapNumber = MP.ReadUInt(-1);
			combatReport5.Combat.Summary.LoseTrapNumber = MP.ReadUInt(-1);
			combatReport5.Combat.Summary.SaveTrapNumber = MP.ReadUInt(-1);
			combatReport5.Combat.Summary.AssaultLevel = MP.ReadByte(-1);
			combatReport5.Combat.Summary.AssaultHead = MP.ReadUShort(-1);
			combatReport5.Combat.Summary.AssaultLordInCombat = MP.ReadByte(-1);
			combatReport5.Combat.Summary.AssaultVIPLevel = MP.ReadByte(-1);
			combatReport5.Combat.Summary.IsLeader = MP.ReadByte(-1);
			combatReport5.Combat.Summary.DefenceLevel = MP.ReadByte(-1);
			combatReport5.Combat.Summary.DefenceHead = MP.ReadUShort(-1);
			combatReport5.Combat.Summary.DefenceLordInCombat = MP.ReadByte(-1);
			combatReport5.Combat.Summary.DefenceVIPLevel = MP.ReadByte(-1);
			combatReport5.Combat.Summary.AssaultAllianceRank = MP.ReadByte(-1);
			combatReport5.Combat.Summary.DefenceAllianceRank = MP.ReadByte(-1);
			combatReport5.Combat.Version = MP.ReadUInt(-1);
			combatReport5.Combat.PatchNo = MP.ReadUInt(-1);
			combatReport5.Combat.Atkcoord = MP.ReadByte(-1);
			combatReport5.Combat.Defcoord = MP.ReadByte(-1);
			combatReport5.Combat.PetSkillPatchNo = MP.ReadUInt(-1);
			combatReport5.Combat.m_AssaultPetSkill_ID = new ushort[20];
			for (int num13 = 0; num13 < combatReport5.Combat.m_AssaultPetSkill_ID.Length; num13++)
			{
				combatReport5.Combat.m_AssaultPetSkill_ID[num13] = MP.ReadUShort(-1);
			}
			combatReport5.Combat.m_AssaultPetSkill_LV = new byte[20];
			for (int num14 = 0; num14 < combatReport5.Combat.m_AssaultPetSkill_LV.Length; num14++)
			{
				combatReport5.Combat.m_AssaultPetSkill_LV[num14] = MP.ReadByte(-1);
			}
			combatReport5.Combat.m_DefencePetSkill_ID = new ushort[20];
			for (int num15 = 0; num15 < combatReport5.Combat.m_DefencePetSkill_ID.Length; num15++)
			{
				combatReport5.Combat.m_DefencePetSkill_ID[num15] = MP.ReadUShort(-1);
			}
			combatReport5.Combat.m_DefencePetSkill_LV = new byte[20];
			for (int num16 = 0; num16 < combatReport5.Combat.m_DefencePetSkill_LV.Length; num16++)
			{
				combatReport5.Combat.m_DefencePetSkill_LV[num16] = MP.ReadByte(-1);
			}
			if (this.Mailing.ReportSerial.Matrix.TryGetValue(combatReport5.SerialID, out this.DoFavor.Box))
			{
				this.DoFavor.Box.Pull = true;
			}
			else
			{
				this.Mailing.ReportSerial.Matrix[combatReport5.SerialID] = new SerialBox(combatReport5.SerialID, combatReport5.Flag, combatReport5.BeRead, combatReport5.BeSave, true, true);
				if (!combatReport5.BeRead)
				{
					AudioManager.Instance.PlayUISFX(UIKind.ReceiveMail);
				}
			}
			if (combatReport5.BeSave)
			{
				if (!this.Mailing.FavorSerial.Combat.Mail.ContainsKey(this.Mailing.ReportSerial.New) && (ulong)this.Mailing.FavorSerial.Count < (ulong)((long)this.Mailing.FavorSerial.Inbox.Length))
				{
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial = this.Mailing.ReportSerial.New;
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Timing = combatReport5.Times;
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Type = MailType.EMAIL_BATTLE;
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Change = true;
					this.Mailing.FavorSerial.Count += 1u;
				}
				this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, 1));
				this.Mailing.FavorSerial.Combat.Mail[this.Mailing.ReportSerial.New] = combatReport5;
				this.Mailing.FavorSerial.Infolog = true;
				this.MailDataRefresh(MailType.EMAIL_FAVORY);
			}
			else
			{
				this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, 0));
				if (!this.Mailing.ReportSerial.Mail.ContainsKey(this.Mailing.ReportSerial.New))
				{
					if (this.Mailing.ReportSerial.Mail.Count < 130)
					{
						this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Serial = this.Mailing.ReportSerial.New;
						this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Timing = combatReport5.Times;
						this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Type = MailType.EMAIL_BATTLE;
						this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Change = true;
						if ((ulong)this.Mailing.ReportSerial.Count < (ulong)((long)(this.Mailing.ReportSerial.Inbox.Length - 1)))
						{
							this.Mailing.ReportSerial.Count += 1u;
						}
					}
				}
				this.Mailing.ReportSerial.Mail[this.Mailing.ReportSerial.New] = combatReport5;
				this.MailDataRefresh(MailType.EMAIL_BATTLE);
			}
			if (!combatReport5.BeRead)
			{
				GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
			}
			this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_COMBAT_SCOUT);
			break;
		}
		case Protocol._MSG_RESP_GATHERREPORTINFO:
		{
			CombatReport combatReport6 = new CombatReport(this.Mailing.ReportSerial.New = MP.ReadUInt(-1), CombatCollectReport.CCR_COLLECT);
			combatReport6.Gather = new GatherReportContent();
			combatReport6.SetData(MP.ReadByte(-1), MP.ReadLong(-1));
			combatReport6.Gather.KingdomID = MP.ReadUShort(-1);
			combatReport6.Gather.GatherZone = MP.ReadUShort(-1);
			combatReport6.Gather.GatherPoint = MP.ReadByte(-1);
			combatReport6.Gather.GatherPointKind = (POINT_KIND)MP.ReadByte(-1);
			combatReport6.Gather.GatherPointLevel = MP.ReadByte(-1);
			combatReport6.Gather.Resource = MP.ReadUInt(-1);
			combatReport6.Gather.HeroNum = MP.ReadByte(-1);
			combatReport6.Gather.ItemLen = MP.ReadByte(-1);
			combatReport6.Gather.Item = new byte[85];
			MP.ReadBlock(combatReport6.Gather.Item, 0, 85, -1);
			int num17 = 0;
			if (combatReport6.Gather.HeroNum > 0)
			{
				combatReport6.Gather.mHero = new GatherHeroExpData[(int)combatReport6.Gather.HeroNum];
				for (int num18 = 0; num18 < (int)combatReport6.Gather.HeroNum; num18++)
				{
					combatReport6.Gather.mHero[num18] = new GatherHeroExpData();
					combatReport6.Gather.mHero[num18].HeroID = GameConstants.ConvertBytesToUShort(combatReport6.Gather.Item, num17);
					num17 += 2;
					combatReport6.Gather.mHero[num18].Star = combatReport6.Gather.Item[num17];
					num17++;
					combatReport6.Gather.mHero[num18].Exp = GameConstants.ConvertBytesToUInt(combatReport6.Gather.Item, num17);
					num17 += 4;
				}
			}
			if (combatReport6.Gather.ItemLen > 0)
			{
				combatReport6.Gather.mResourceItem = new ResourceItem[(int)combatReport6.Gather.ItemLen];
				for (int num19 = 0; num19 < (int)combatReport6.Gather.ItemLen; num19++)
				{
					combatReport6.Gather.mResourceItem[num19] = new ResourceItem();
					combatReport6.Gather.mResourceItem[num19].ItemID = GameConstants.ConvertBytesToUShort(combatReport6.Gather.Item, num17);
					num17 += 2;
					combatReport6.Gather.mResourceItem[num19].Quantity = GameConstants.ConvertBytesToUShort(combatReport6.Gather.Item, num17);
					num17 += 2;
					combatReport6.Gather.mResourceItem[num19].Rank = combatReport6.Gather.Item[num17];
					num17++;
				}
			}
			combatReport6.DateTime = GameConstants.GetDateTime(combatReport6.Times).ToString("MM/dd/yy HH:mm:ss");
			combatReport6.BeRead = ((combatReport6.Flag & 1) > 0);
			combatReport6.BeSave = ((combatReport6.Flag & 2) > 0);
			if (this.Mailing.ReportSerial.Matrix.TryGetValue(combatReport6.SerialID, out this.DoFavor.Box))
			{
				this.DoFavor.Box.Pull = true;
			}
			else
			{
				this.Mailing.ReportSerial.Matrix[combatReport6.SerialID] = new SerialBox(combatReport6.SerialID, combatReport6.Flag, combatReport6.BeRead, combatReport6.BeSave, true, true);
				if (!combatReport6.BeRead)
				{
					AudioManager.Instance.PlayUISFX(UIKind.ReceiveMail);
				}
			}
			if (combatReport6.BeSave)
			{
				if (!this.Mailing.FavorSerial.Combat.Mail.ContainsKey(this.Mailing.ReportSerial.New) && (ulong)this.Mailing.FavorSerial.Total < (ulong)((long)this.Mailing.FavorSerial.Inbox.Length))
				{
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Total)].Serial = this.Mailing.ReportSerial.New;
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Total)].Timing = combatReport6.Times;
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Total)].Type = MailType.EMAIL_BATTLE;
					this.Mailing.FavorSerial.Total += 1u;
				}
				this.Mailing.FavorSerial.Combat.Mail[this.Mailing.ReportSerial.New] = combatReport6;
			}
			else
			{
				this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, 0));
				if (!this.Mailing.ReportSerial.Mail.ContainsKey(this.Mailing.ReportSerial.New))
				{
					if (this.Mailing.ReportSerial.Gather.Count >= 10 || this.Mailing.ReportSerial.Mail.Count >= 130)
					{
						break;
					}
					this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Serial = this.Mailing.ReportSerial.New;
					this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Timing = combatReport6.Times;
					this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Type = MailType.EMAIL_BATTLE;
					this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Change = true;
					if ((ulong)this.Mailing.ReportSerial.Count < (ulong)((long)(this.Mailing.ReportSerial.Inbox.Length - 1)))
					{
						this.Mailing.ReportSerial.Count += 1u;
					}
					this.Mailing.ReportSerial.Gather.Add(combatReport6.SerialID);
					this.Mailing.ReportSerial.Gather.Sort();
				}
				this.Mailing.ReportSerial.Mail[this.Mailing.ReportSerial.New] = combatReport6;
				this.MailDataRefresh(MailType.EMAIL_BATTLE);
			}
			if (!combatReport6.BeRead)
			{
				GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
			}
			this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_GATHER);
			break;
		}
		case Protocol._MSG_RESP_ANTISCOUTREPORTINFO:
		{
			CombatReport combatReport7 = new CombatReport(this.Mailing.ReportSerial.New = MP.ReadUInt(-1), CombatCollectReport.CCR_RECON);
			combatReport7.Recon = new ReconReportContent();
			combatReport7.SetData(MP.ReadByte(-1), MP.ReadLong(-1));
			combatReport7.BeRead = ((combatReport7.Flag & 1) > 0);
			combatReport7.BeSave = ((combatReport7.Flag & 2) > 0);
			combatReport7.Recon.KingdomID = MP.ReadUShort(-1);
			combatReport7.Recon.CombatlZone = MP.ReadUShort(-1);
			combatReport7.Recon.CombatPoint = MP.ReadByte(-1);
			combatReport7.Recon.CombatPointKind = (POINT_KIND)MP.ReadByte(-1);
			combatReport7.Recon.AntiScout = MP.ReadByte(-1);
			combatReport7.Recon.WatchLevel = MP.ReadByte(-1);
			combatReport7.Recon.SrcKingdomID = MP.ReadUShort(-1);
			combatReport7.Recon.SrcName = MP.ReadString(13, -1);
			combatReport7.Recon.SrcAllianceTag = MP.ReadString(3, -1);
			combatReport7.Recon.SrcHead = MP.ReadUShort(-1);
			combatReport7.Recon.bAmbush = MP.ReadByte(-1);
			combatReport7.DateTime = GameConstants.GetDateTime(combatReport7.Times).ToString("MM/dd/yy HH:mm:ss");
			if (this.Mailing.ReportSerial.Matrix.TryGetValue(combatReport7.SerialID, out this.DoFavor.Box))
			{
				this.DoFavor.Box.Pull = true;
			}
			else
			{
				this.Mailing.ReportSerial.Matrix[combatReport7.SerialID] = new SerialBox(combatReport7.SerialID, combatReport7.Flag, combatReport7.BeRead, combatReport7.BeSave, true, true);
				if (!combatReport7.BeRead)
				{
					AudioManager.Instance.PlayUISFX(UIKind.ReceiveMail);
				}
			}
			if (combatReport7.BeSave)
			{
				if (!this.Mailing.FavorSerial.Combat.Mail.ContainsKey(this.Mailing.ReportSerial.New) && (ulong)this.Mailing.FavorSerial.Count < (ulong)((long)this.Mailing.FavorSerial.Inbox.Length))
				{
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial = this.Mailing.ReportSerial.New;
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Timing = combatReport7.Times;
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Type = MailType.EMAIL_BATTLE;
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Change = true;
					this.Mailing.FavorSerial.Count += 1u;
				}
				this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, 1));
				this.Mailing.FavorSerial.Combat.Mail[this.Mailing.ReportSerial.New] = combatReport7;
				this.Mailing.FavorSerial.Infolog = true;
				this.MailDataRefresh(MailType.EMAIL_FAVORY);
			}
			else
			{
				this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, 0));
				if (!this.Mailing.ReportSerial.Mail.ContainsKey(this.Mailing.ReportSerial.New))
				{
					if (this.Mailing.ReportSerial.AntiScout.Count >= 10 || this.Mailing.ReportSerial.Mail.Count >= 130)
					{
						break;
					}
					this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Serial = this.Mailing.ReportSerial.New;
					this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Timing = combatReport7.Times;
					this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Type = MailType.EMAIL_BATTLE;
					this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Change = true;
					if ((ulong)this.Mailing.ReportSerial.Count < (ulong)((long)(this.Mailing.ReportSerial.Inbox.Length - 1)))
					{
						this.Mailing.ReportSerial.Count += 1u;
					}
					this.Mailing.ReportSerial.AntiScout.Add(combatReport7.SerialID);
					this.Mailing.ReportSerial.AntiScout.Sort();
				}
				this.Mailing.ReportSerial.Mail[this.Mailing.ReportSerial.New] = combatReport7;
				this.MailDataRefresh(MailType.EMAIL_BATTLE);
			}
			if (!combatReport7.BeRead)
			{
				GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
			}
			this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_RECON);
			break;
		}
		case Protocol._MSG_RESP_RESHELPREPORTINFO:
		{
			CombatReport combatReport8 = new CombatReport(this.Mailing.ReportSerial.New = MP.ReadUInt(-1), CombatCollectReport.CCR_RESOURCE);
			combatReport8.Resource = new ResourceReportContent();
			combatReport8.SetData(MP.ReadByte(-1), MP.ReadLong(-1));
			combatReport8.BeRead = ((combatReport8.Flag & 1) > 0);
			combatReport8.BeSave = ((combatReport8.Flag & 2) > 0);
			combatReport8.Resource.Result = MP.ReadByte(-1);
			combatReport8.Resource.Name = MP.ReadString(13, -1);
			combatReport8.Resource.Resource = new uint[5];
			for (byte b8 = 0; b8 < 5; b8 += 1)
			{
				combatReport8.Resource.Resource[(int)b8] = MP.ReadUInt(-1);
			}
			combatReport8.DateTime = GameConstants.GetDateTime(combatReport8.Times).ToString("MM/dd/yy HH:mm:ss");
			if (this.Mailing.ReportSerial.Matrix.TryGetValue(combatReport8.SerialID, out this.DoFavor.Box))
			{
				this.DoFavor.Box.Pull = true;
			}
			else
			{
				this.Mailing.ReportSerial.Matrix[combatReport8.SerialID] = new SerialBox(combatReport8.SerialID, combatReport8.Flag, combatReport8.BeRead, combatReport8.BeSave, true, true);
				if (!combatReport8.BeRead)
				{
					AudioManager.Instance.PlayUISFX(UIKind.ReceiveMail);
				}
			}
			if (combatReport8.BeSave)
			{
				if (!this.Mailing.FavorSerial.Combat.Mail.ContainsKey(this.Mailing.ReportSerial.New) && (ulong)this.Mailing.FavorSerial.Count < (ulong)((long)this.Mailing.FavorSerial.Inbox.Length))
				{
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial = this.Mailing.ReportSerial.New;
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Timing = combatReport8.Times;
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Type = MailType.EMAIL_BATTLE;
					this.Mailing.FavorSerial.Count += 1u;
				}
				this.Mailing.FavorSerial.Combat.Mail[this.Mailing.ReportSerial.New] = combatReport8;
			}
			else
			{
				this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, 0));
				if (!this.Mailing.ReportSerial.Mail.ContainsKey(this.Mailing.ReportSerial.New))
				{
					if (this.Mailing.ReportSerial.Resource.Count >= 10 || this.Mailing.ReportSerial.Mail.Count >= 130)
					{
						break;
					}
					this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Serial = this.Mailing.ReportSerial.New;
					this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Timing = combatReport8.Times;
					this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Type = MailType.EMAIL_BATTLE;
					this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Change = true;
					if ((ulong)this.Mailing.ReportSerial.Count < (ulong)((long)(this.Mailing.ReportSerial.Inbox.Length - 1)))
					{
						this.Mailing.ReportSerial.Count += 1u;
					}
					this.Mailing.ReportSerial.Resource.Add(combatReport8.SerialID);
					this.Mailing.ReportSerial.Resource.Sort();
				}
				this.Mailing.ReportSerial.Mail[this.Mailing.ReportSerial.New] = combatReport8;
				this.MailDataRefresh(MailType.EMAIL_BATTLE);
			}
			if (!combatReport8.BeRead)
			{
				GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
			}
			this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_HELP);
			break;
		}
		case Protocol._MSG_RESP_MONSTERREPORTINFO:
		{
			CombatReport combatReport9 = new CombatReport(this.Mailing.ReportSerial.New = MP.ReadUInt(-1), CombatCollectReport.CCR_MONSTER);
			combatReport9.Monster = new MonsterReportContent();
			combatReport9.SetData(MP.ReadByte(-1), MP.ReadLong(-1));
			combatReport9.BeRead = ((combatReport9.Flag & 1) > 0);
			combatReport9.BeSave = ((combatReport9.Flag & 2) > 0);
			combatReport9.Monster.KindgomID = MP.ReadUShort(-1);
			combatReport9.Monster.Zone = MP.ReadUShort(-1);
			combatReport9.Monster.Point = MP.ReadByte(-1);
			combatReport9.Monster.Result = MP.ReadByte(-1);
			if (combatReport9.Monster.Result < 2 || combatReport9.Monster.Result > 3)
			{
				combatReport9.Monster.Head = MP.ReadUShort(-1);
				combatReport9.Monster.MonsterID = MP.ReadUShort(-1);
				combatReport9.Monster.MonsterLv = MP.ReadByte(-1);
				combatReport9.Monster.BeginHPPercent = MP.ReadUInt(-1);
				combatReport9.Monster.EndHPPercent = MP.ReadUInt(-1);
				combatReport9.Monster.MonsterMaxHP = MP.ReadUInt(-1);
				combatReport9.Monster.Exp = MP.ReadUInt(-1);
				combatReport9.Monster.HeroID = new ushort[5];
				combatReport9.Monster.HeroExp = new uint[5];
				combatReport9.Monster.HeroData = new MonsterReportContent.HeroDataType[5];
				for (int num20 = 0; num20 < 5; num20++)
				{
					combatReport9.Monster.HeroID[num20] = MP.ReadUShort(-1);
				}
				for (int num21 = 0; num21 < 5; num21++)
				{
					combatReport9.Monster.HeroExp[num21] = MP.ReadUInt(-1);
				}
				for (int num22 = 0; num22 < 5; num22++)
				{
					combatReport9.Monster.HeroData[num22] = new MonsterReportContent.HeroDataType();
					combatReport9.Monster.HeroData[num22].SkillLV1 = MP.ReadByte(-1);
					combatReport9.Monster.HeroData[num22].SkillLV2 = MP.ReadByte(-1);
					combatReport9.Monster.HeroData[num22].SkillLV3 = MP.ReadByte(-1);
					combatReport9.Monster.HeroData[num22].SkillLV4 = MP.ReadByte(-1);
					combatReport9.Monster.HeroData[num22].LV = MP.ReadByte(-1);
					combatReport9.Monster.HeroData[num22].Star = MP.ReadByte(-1);
					combatReport9.Monster.HeroData[num22].Enhance = MP.ReadByte(-1);
					combatReport9.Monster.HeroData[num22].Equip = MP.ReadByte(-1);
				}
				combatReport9.Monster.SequentialDamageTimes = MP.ReadByte(-1);
				combatReport9.Monster.EffectiveDamageTimes = MP.ReadByte(-1);
				combatReport9.Monster.AttrScale = new MonsterReportContent.MonsterDataType();
				combatReport9.Monster.AttrScale.ActionTimes = MP.ReadByte(-1);
				combatReport9.Monster.AttrScale.SequentialDamageScale = MP.ReadUInt(-1);
				combatReport9.Monster.AttrScale.DamageScale = MP.ReadUInt(-1);
				combatReport9.Monster.AttrScale.MaxHPScale = MP.ReadUInt(-1);
				combatReport9.Monster.AttrScale.HealingScale = MP.ReadUInt(-1);
				combatReport9.Monster.AttrScale.InitMP = MP.ReadUShort(-1);
				combatReport9.Monster.RandomSeed = MP.ReadUShort(-1);
				combatReport9.Monster.RandomGap = MP.ReadByte(-1);
				combatReport9.Monster.Version = MP.ReadUInt(-1);
				combatReport9.Monster.PatchNo = MP.ReadUInt(-1);
				if (combatReport9.Monster.Result < 2)
				{
					combatReport9.Monster.ItemLen = MP.ReadByte(-1);
					combatReport9.Monster.Item = new MonsterReportContent.ItemDataType[30];
					int num23 = 0;
					while (num23 < (int)combatReport9.Monster.ItemLen && num23 < 30)
					{
						combatReport9.Monster.Item[num23] = new MonsterReportContent.ItemDataType();
						combatReport9.Monster.Item[num23].ItemID = MP.ReadUShort(-1);
						combatReport9.Monster.Item[num23].Num = MP.ReadUShort(-1);
						combatReport9.Monster.Item[num23].ItemRank = MP.ReadByte(-1);
						num23++;
					}
				}
				else
				{
					combatReport9.Monster.AllianceTag = MP.ReadString(3, -1);
				}
			}
			if (this.Mailing.ReportSerial.Matrix.TryGetValue(combatReport9.SerialID, out this.DoFavor.Box))
			{
				this.DoFavor.Box.Pull = true;
			}
			else
			{
				this.Mailing.ReportSerial.Matrix[combatReport9.SerialID] = new SerialBox(combatReport9.SerialID, combatReport9.Flag, combatReport9.BeRead, combatReport9.BeSave, true, true);
				if (!combatReport9.BeRead)
				{
					AudioManager.Instance.PlayUISFX(UIKind.ReceiveMail);
				}
			}
			if (combatReport9.BeSave)
			{
				if (!this.Mailing.FavorSerial.Combat.Mail.ContainsKey(this.Mailing.ReportSerial.New) && (ulong)this.Mailing.FavorSerial.Count < (ulong)((long)this.Mailing.FavorSerial.Inbox.Length))
				{
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial = this.Mailing.ReportSerial.New;
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Timing = combatReport9.Times;
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Type = MailType.EMAIL_BATTLE;
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Change = true;
					this.Mailing.FavorSerial.Count += 1u;
				}
				this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, 1));
				this.Mailing.FavorSerial.Combat.Mail[this.Mailing.ReportSerial.New] = combatReport9;
				this.Mailing.FavorSerial.Infolog = true;
				this.MailDataRefresh(MailType.EMAIL_FAVORY);
			}
			else
			{
				this.Mailing.ReportSerial.Order.Add(new MailSaveOrder(this.Mailing.ReportSerial.New, 0));
				if (!this.Mailing.ReportSerial.Mail.ContainsKey(this.Mailing.ReportSerial.New))
				{
					if (this.Mailing.ReportSerial.Mail.Count < 130)
					{
						this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Serial = this.Mailing.ReportSerial.New;
						this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Timing = combatReport9.Times;
						this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Type = MailType.EMAIL_BATTLE;
						this.Mailing.ReportSerial.Inbox[(int)((UIntPtr)this.Mailing.ReportSerial.Count)].Change = true;
						if ((ulong)this.Mailing.ReportSerial.Count < (ulong)((long)(this.Mailing.ReportSerial.Inbox.Length - 1)))
						{
							this.Mailing.ReportSerial.Count += 1u;
						}
					}
				}
				this.Mailing.ReportSerial.Mail[this.Mailing.ReportSerial.New] = combatReport9;
				this.MailDataRefresh(MailType.EMAIL_BATTLE);
			}
			if (!combatReport9.BeRead)
			{
				GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
			}
			this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_COMBAT_SCOUT);
			break;
		}
		case Protocol._MSG_RESP_REPORTMARKREAD:
		{
			byte b9 = MP.ReadByte(-1);
			MyFavorite myFavorite2 = new MyFavorite(MailType.EMAIL_BATTLE, 0u);
			this.DoFavor.Type = MailType.EMAIL_BATTLE;
			for (int num24 = 0; num24 < (int)b9; num24++)
			{
				this.DoFavor.Serial = MP.ReadUInt(-1);
				if (this.FavorReportGet(ref myFavorite2))
				{
					this.Mailing.FavorSerial.Unseen -= 1u;
					myFavorite2.Combat.BeRead = true;
				}
				else
				{
					if (!this.Mailing.ReportSerial.Mail.TryGetValue(this.DoFavor.Serial, out this.DoFavor.Combat))
					{
						return;
					}
					if (this.DoFavor.Combat.Type == CombatCollectReport.CCR_COLLECT && this.Mailing.ReportSerial.Mail.TryGetValue(this.Mailing.ReportSerial.GatheringID, out myFavorite2.Combat))
					{
						CombatReport combat = myFavorite2.Combat;
						combat.UnSeen -= 1;
					}
					this.Mailing.ReportSerial.Unseen -= 1u;
					this.DoFavor.Combat.BeRead = true;
					CombatReport combat2 = this.DoFavor.Combat;
					combat2.Flag |= 1;
					if (this.DoFavor.Combat.BeKept)
					{
						this.SaveMail(this.DoFavor, this.DoFavor.Serial, 0u, 0u);
					}
				}
			}
			if (b9 > 0)
			{
				this.SaveMail(this.DoFavor.Type);
			}
			GUIManager.Instance.HideUILock(EUILock.Mailing_Read);
			GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
			this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_MAX);
			break;
		}
		case Protocol._MSG_RESP_SAVEREPORT:
			if (this.DoFavor == null)
			{
				this.DoFavor = new MyFavorite(MailType.EMAIL_MAX, 0u);
			}
			this.DoFavor.Serial = MP.ReadUInt(-1);
			this.DoFavor.Kind = MailType.EMAIL_BATTLE;
			this.DoFavor.Type = MailType.EMAIL_BATTLE;
			if (this.MailReportGet(ref this.DoFavor))
			{
				CombatReport combat3 = this.DoFavor.Combat;
				combat3.Flag |= 2;
				this.DoFavor.Combat.BeSave = true;
				if (this.Mailing.FavorSerial.Combat.Mail.ContainsKey(this.DoFavor.Combat.SerialID) || (ulong)this.Mailing.FavorSerial.Count >= (ulong)((long)this.Mailing.FavorSerial.Inbox.Length))
				{
					return;
				}
				this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Type = this.DoFavor.Kind;
				this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial = this.DoFavor.Combat.SerialID;
				this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Timing = this.DoFavor.Combat.Times;
				this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Change = true;
				this.Mailing.FavorSerial.Infolog = true;
				this.Mailing.FavorSerial.Count += 1u;
				this.Mailing.FavorSerial.Combat.Mail[this.DoFavor.Combat.SerialID] = this.DoFavor.Combat;
				this.DeleteMail(this.DoFavor, this.DoFavor.Combat.SerialID, 0u);
				if (this.DoFavor.Combat.BeKept)
				{
					this.DoFavor.Kind = MailType.EMAIL_FAVORY;
					this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Serial);
				}
				this.Mailing.ReportSerial.Inbox[(int)this.DoFavor.Combat.Index].Serial = 0u;
				this.Mailing.ReportSerial.Mail.Remove(this.DoFavor.Combat.SerialID);
				if (this.Mailing.ReportSerial.Count > 0u)
				{
					this.Mailing.ReportSerial.Count -= 1u;
				}
				this.Mailing.ReportSerial.Change += 1u;
				this.MailDataRefresh(MailType.EMAIL_BATTLE);
				this.MailDataRefresh(MailType.EMAIL_FAVORY);
				this.SaveMail(MailType.EMAIL_BATTLE);
				this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_MAX);
				this.MailingboxRefresh(MailType.EMAIL_FAVORY, ReportSubSet.REPORTSet_MAX);
				GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
				if (GUIManager.Instance.HideUILock(EUILock.Mailing_Save))
				{
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(682u), 255, true);
				}
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 10, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_FightingSummary, 2, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Letter_Watchtower, 2, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Letter_NPCScout, 2, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_LetterDetail, 2, 0);
			break;
		case Protocol._MSG_RESP_DELETEREPORT:
		{
			GUIManager guimanager = GUIManager.Instance;
			MyFavorite myFavorite3 = new MyFavorite(MailType.EMAIL_BATTLE, 0u);
			this.DoFavor.Kind = MailType.EMAIL_BATTLE;
			byte b10 = MP.ReadByte(-1);
			for (int num25 = 0; num25 < (int)b10; num25++)
			{
				myFavorite3.Serial = MP.ReadUInt(-1);
				if (guimanager.SerialNo > 0u && guimanager.SerialNo == myFavorite3.Serial && guimanager.m_BMButtonT != null)
				{
					guimanager.m_BMButtonT.gameObject.SetActive(false);
				}
				if (this.FavorReportGet(ref myFavorite3))
				{
					for (int num26 = 0; num26 < this.Mailing.FavorSerial.Inbox.Length; num26++)
					{
						if (this.Mailing.FavorSerial.Inbox[num26].Type == myFavorite3.Type && this.Mailing.FavorSerial.Inbox[num26].Serial == myFavorite3.Combat.SerialID)
						{
							this.Mailing.FavorSerial.Inbox[num26].Serial = 0u;
							this.Mailing.FavorSerial.Total -= 1u;
							break;
						}
					}
					this.Mailing.FavorSerial.Combat.Mail.Remove(myFavorite3.Serial);
				}
				else if (this.DeleteMail(MailType.EMAIL_BATTLE, myFavorite3.Serial))
				{
				}
			}
			if (GUIManager.Instance.HideUILock(EUILock.Mailing_Delete) && b10 > 0)
			{
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(684u), 255, true);
			}
			this.MailDataRefresh(MailType.EMAIL_BATTLE);
			this.MailDataRefresh(MailType.EMAIL_FAVORY);
			if (b10 > 0)
			{
				this.SaveMail(MailType.EMAIL_BATTLE);
			}
			this.SaveMailData(MP.Protocol);
			this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_MAX);
			GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_FightingSummary, 2, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Letter_NPCScout, 2, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Letter_Watchtower, 2, 0);
			break;
		}
		case Protocol._MSG_RESP_ALLREPORT_MOD:
			this.DoFavor.Type = MailType.EMAIL_BATTLE;
			this.Mailing.ReportSerial.Total = (uint)MP.ReadByte(-1);
			this.Mailing.ReportSerial.Unread = (uint)MP.ReadByte(-1);
			if (GUIManager.Instance.HideUILock(EUILock.Mailing_Read))
			{
				this.Mailing.ReportSerial.Unseen = 0u;
				int num27 = 0;
				while ((long)num27 < (long)((ulong)this.Mailing.ReportSerial.Count))
				{
					if ((this.DoFavor.Combat = this.CombatReportGet(num27)) != null && !this.DoFavor.Combat.BeRead)
					{
						CombatReport combat4 = this.DoFavor.Combat;
						combat4.Flag |= 1;
						this.DoFavor.Combat.BeRead = true;
						if (this.DoFavor.Combat.SerialID <= this.Mailing.ReportSerial.LastSave)
						{
							this.SaveMail(this.DoFavor, this.DoFavor.Combat.SerialID, 0u, 0u);
						}
					}
					num27++;
				}
			}
			else if (GUIManager.Instance.HideUILock(EUILock.Mailing_Delete))
			{
				this.Mailing.ReportSerial.Holding = true;
				this.LoadReportMail(MailType.EMAIL_BATTLE, true);
				this.DoFavor.Kind = MailType.EMAIL_BATTLE;
				GUIManager guimanager2 = GUIManager.Instance;
				if (guimanager2.SerialNo > 0u && guimanager2.m_BMButtonT != null)
				{
					guimanager2.m_BMButtonT.gameObject.SetActive(false);
				}
				for (int num28 = 0; num28 < this.Mailing.ReportSerial.Inbox.Length; num28++)
				{
					this.DeleteMail(this.DoFavor, this.Mailing.ReportSerial.Inbox[num28].Serial, 0u);
					this.Mailing.ReportSerial.Inbox[num28].Serial = 0u;
				}
				this.Mailing.ReportSerial.Resource.Clear();
				this.Mailing.ReportSerial.Gather.Clear();
				this.Mailing.ReportSerial.Mail.Clear();
				this.Mailing.ReportSerial.Unseen = 0u;
				this.Mailing.ReportSerial.Count = 0u;
				if (GUIManager.Instance.HideUILock(EUILock.Mailing_Delete))
				{
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(684u), 255, true);
				}
				this.MailDataRefresh(MailType.EMAIL_BATTLE);
				this.MailDataRefresh(MailType.EMAIL_FAVORY);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Letter_Resources, 1, 0);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Letter_Watchtower, 2, 0);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Letter_NPCScout, 2, 0);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_FightingSummary, 2, 0);
			}
			this.SaveMail(this.DoFavor.Type);
			GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Mailing, null);
			break;
		case Protocol._MSG_RESP_SAVEMARKREAD:
		{
			this.Mailing.FavorSerial.Last = (uint)MP.ReadByte(-1);
			int num29 = 0;
			while ((long)num29 < (long)((ulong)this.Mailing.FavorSerial.Last))
			{
				this.DoFavor.Type = (MailType)MP.ReadByte(-1);
				if (this.DoFavor.Type == MailType.EMAIL_FAVORY)
				{
					this.DoFavor.Type = MailType.EMAIL_SYSTEM;
				}
				else if (this.DoFavor.Type == MailType.EMAIL_SYSTEM)
				{
					this.DoFavor.Type = MailType.EMAIL_LETTER;
				}
				this.DoFavor.Serial = MP.ReadUInt(-1);
				if (!this.FavorReportGet(ref this.DoFavor))
				{
					return;
				}
				if (this.DoFavor.Type == MailType.EMAIL_SYSTEM)
				{
					this.DoFavor.System.BeRead = true;
					NoticeContent system = this.DoFavor.System;
					system.Flag |= 1;
					if (this.DoFavor.System.BeKept)
					{
						this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Serial);
					}
				}
				else if (this.DoFavor.Type == MailType.EMAIL_BATTLE)
				{
					this.DoFavor.Combat.BeRead = true;
					CombatReport combat5 = this.DoFavor.Combat;
					combat5.Flag |= 1;
					if (this.DoFavor.Combat.BeKept)
					{
						this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Serial);
					}
				}
				else if (this.DoFavor.Type == MailType.EMAIL_LETTER)
				{
					this.DoFavor.Mail.BeRead = true;
					MailContent mail3 = this.DoFavor.Mail;
					mail3.Flag |= 1;
					if (this.DoFavor.Mail.BeKept)
					{
						this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Serial);
					}
				}
				this.Mailing.FavorSerial.Unseen -= 1u;
				num29++;
			}
			GUIManager.Instance.HideUILock(EUILock.Mailing_Read);
			GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
			this.MailingboxRefresh(MailType.EMAIL_FAVORY, ReportSubSet.REPORTSet_MAX);
			break;
		}
		case Protocol._MSG_RESP_DELETESAVE:
		{
			this.Mailing.FavorSerial.Last = (uint)MP.ReadByte(-1);
			this.DoFavor.Kind = MailType.EMAIL_LETTER;
			int num30 = 0;
			while ((long)num30 < (long)((ulong)this.Mailing.FavorSerial.Last))
			{
				this.DoFavor.Type = (MailType)MP.ReadByte(-1);
				if (this.DoFavor.Type == MailType.EMAIL_FAVORY)
				{
					this.DoFavor.Type = MailType.EMAIL_SYSTEM;
				}
				else if (this.DoFavor.Type == MailType.EMAIL_SYSTEM)
				{
					this.DoFavor.Type = MailType.EMAIL_LETTER;
				}
				this.DoFavor.Serial = MP.ReadUInt(-1);
				if (!this.FavorReportGet(ref this.DoFavor))
				{
					this.ResetMail();
					return;
				}
				if (this.DoFavor.Type == MailType.EMAIL_SYSTEM)
				{
					if (this.DoFavor.System.BeChecked && this.Outlooking && this.Mailing.FavorSerial.Select > 0u)
					{
						this.Mailing.FavorSerial.Select -= 1u;
					}
					this.DeleteFavorMail(this.DoFavor, this.DoFavor.Serial, 0u);
					this.Mailing.FavorSerial.Inbox[(int)this.DoFavor.System.Index].Serial = 0u;
					this.Mailing.FavorSerial.System.Mail.Remove(this.DoFavor.Serial);
				}
				else if (this.DoFavor.Type == MailType.EMAIL_BATTLE)
				{
					if (this.DoFavor.Combat.BeChecked && this.Outlooking && this.Mailing.FavorSerial.Select > 0u)
					{
						this.Mailing.FavorSerial.Select -= 1u;
					}
					this.DeleteFavorMail(this.DoFavor, this.DoFavor.Serial, 0u);
					this.Mailing.FavorSerial.Inbox[(int)this.DoFavor.Combat.Index].Serial = 0u;
					this.Mailing.FavorSerial.Combat.Mail.Remove(this.DoFavor.Serial);
				}
				else if (this.DoFavor.Type == MailType.EMAIL_LETTER)
				{
					if (this.DoFavor.Mail.BeChecked && this.Outlooking && this.Mailing.FavorSerial.Select > 0u)
					{
						this.Mailing.FavorSerial.Select -= 1u;
					}
					this.DeleteFavorMail(this.DoFavor, this.DoFavor.Serial, 0u);
					this.Mailing.FavorSerial.Inbox[(int)this.DoFavor.Mail.Index].Serial = 0u;
					this.Mailing.FavorSerial.Mail.Mail.Remove(this.DoFavor.Serial);
				}
				if (this.Mailing.FavorSerial.Count > 0u)
				{
					this.Mailing.FavorSerial.Count -= 1u;
				}
				num30++;
			}
			if (GUIManager.Instance.HideUILock(EUILock.Mailing_Delete))
			{
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(683u), 255, true);
			}
			this.MailDataRefresh(MailType.EMAIL_SYSTEM);
			this.MailDataRefresh(MailType.EMAIL_LETTER);
			this.MailDataRefresh(MailType.EMAIL_BATTLE);
			this.MailDataRefresh(MailType.EMAIL_FAVORY);
			if (this.Mailing.FavorSerial.Last == 0u)
			{
				this.ResetMail();
			}
			else
			{
				this.SaveMail(MailType.EMAIL_LETTER);
				this.SaveMail(MailType.EMAIL_BATTLE);
				this.SaveMail(MailType.EMAIL_SYSTEM);
			}
			GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
			this.MailingboxRefresh(MailType.EMAIL_FAVORY, ReportSubSet.REPORTSet_MAX);
			break;
		}
		case Protocol._MSG_RESP_NOTICEINFO:
		{
			NoticeContent noticeContent = new NoticeContent();
			noticeContent.SerialID = (this.Mailing.SystemSerial.New = MP.ReadUInt(-1));
			noticeContent.SetData(MP.ReadByte(-1), MP.ReadLong(-1));
			noticeContent.BeRead = ((noticeContent.Flag & 1) > 0);
			noticeContent.BeSave = ((noticeContent.Flag & 2) > 0);
			noticeContent.Type = (NoticeReport)MP.ReadByte(-1);
			noticeContent.OffsetLen = MP.ReadUInt(-1);
			if (noticeContent.Type == NoticeReport.ENotice_Enhance)
			{
				noticeContent.NoticeHeroEnhance = new NoticeContent.Enhance();
				noticeContent.NoticeHeroEnhance.HeroID = MP.ReadUShort(-1);
				noticeContent.NoticeHeroEnhance.Rank = MP.ReadByte(-1);
				noticeContent.NoticeHeroEnhance.Star = MP.ReadByte(-1);
			}
			else if (noticeContent.Type == NoticeReport.ENotice_StarUp)
			{
				noticeContent.NoticeHeroStarUp = new NoticeContent.StarUp();
				noticeContent.NoticeHeroStarUp.HeroID = MP.ReadUShort(-1);
				noticeContent.NoticeHeroStarUp.Star = MP.ReadByte(-1);
				noticeContent.NoticeHeroStarUp.Rank = MP.ReadByte(-1);
			}
			else if (noticeContent.Type == NoticeReport.ENotice_JoinAlliance)
			{
				noticeContent.Notice_JoinAlliance = new NoticeContent.JoinAlliance();
				noticeContent.Notice_JoinAlliance.Tag = MP.ReadString(3, -1);
				noticeContent.Notice_JoinAlliance.Name = MP.ReadString(20, -1);
			}
			else if (noticeContent.Type == NoticeReport.Enotice_ApplyAlliance)
			{
				noticeContent.Notice_ApplyAlliance = new NoticeContent.ApplyAlliance();
				noticeContent.Notice_ApplyAlliance.Tag = MP.ReadString(3, -1);
				noticeContent.Notice_ApplyAlliance.Name = MP.ReadString(20, -1);
			}
			else if (noticeContent.Type == NoticeReport.Enotice_ApplyAllianceBeDenied)
			{
				noticeContent.Notice_ApplyAllianceBeDenied = new NoticeContent.ApplyAllianceBeDenied();
				noticeContent.Notice_ApplyAllianceBeDenied.Dealer = MP.ReadString(13, -1);
				noticeContent.Notice_ApplyAllianceBeDenied.Tag = MP.ReadString(3, -1);
				noticeContent.Notice_ApplyAllianceBeDenied.Name = MP.ReadString(20, -1);
			}
			else if (noticeContent.Type == NoticeReport.Enotice_AllianceDismiss)
			{
				noticeContent.Notice_AllianceDismiss = new NoticeContent.AllianceDismiss();
				noticeContent.Notice_AllianceDismiss.Leader = MP.ReadString(13, -1);
			}
			else if (noticeContent.Type == NoticeReport.Enotice_AllianceLeaderStepDown)
			{
				noticeContent.Notice_AllianceLeaderStepDown = new NoticeContent.AllianceLeaderStepDown();
				noticeContent.Notice_AllianceLeaderStepDown.OldLeader = MP.ReadString(13, -1);
				noticeContent.Notice_AllianceLeaderStepDown.NewLeader = MP.ReadString(13, -1);
			}
			else if (noticeContent.Type == NoticeReport.Enotice_ActivityDegreePrize)
			{
				noticeContent.Notice_ActivityDegreePrize = new NoticeContent.ActivityDegreePrize();
				noticeContent.Notice_ActivityDegreePrize.Type = (NoticeContent.ActivityCircleEventType)MP.ReadByte(-1);
				noticeContent.Notice_ActivityDegreePrize.Degree = MP.ReadByte(-1);
				noticeContent.Notice_ActivityDegreePrize.PrizeNum = MP.ReadByte(-1);
				noticeContent.Notice_ActivityDegreePrize.PrizeData = new NoticeContent.ActPrize[(int)noticeContent.Notice_ActivityDegreePrize.PrizeNum];
				for (byte b11 = 0; b11 < noticeContent.Notice_ActivityDegreePrize.PrizeNum; b11 += 1)
				{
					noticeContent.Notice_ActivityDegreePrize.PrizeData[(int)b11].Rank = MP.ReadByte(-1);
					noticeContent.Notice_ActivityDegreePrize.PrizeData[(int)b11].ItemID = MP.ReadUShort(-1);
					noticeContent.Notice_ActivityDegreePrize.PrizeData[(int)b11].Num = MP.ReadByte(-1);
				}
			}
			else if (noticeContent.Type == NoticeReport.Enotice_ActivityRankPrize)
			{
				noticeContent.Notice_ActivityRankPrize = new NoticeContent.ActivityRankPrize();
				noticeContent.Notice_ActivityRankPrize.Type = (NoticeContent.ActivityCircleEventType)MP.ReadByte(-1);
				noticeContent.Notice_ActivityRankPrize.Place = MP.ReadByte(-1);
				noticeContent.Notice_ActivityRankPrize.PrizeNum = MP.ReadByte(-1);
				noticeContent.Notice_ActivityRankPrize.PrizeData = new NoticeContent.ActPrize[(int)noticeContent.Notice_ActivityRankPrize.PrizeNum];
				for (byte b12 = 0; b12 < noticeContent.Notice_ActivityRankPrize.PrizeNum; b12 += 1)
				{
					noticeContent.Notice_ActivityRankPrize.PrizeData[(int)b12].Rank = MP.ReadByte(-1);
					noticeContent.Notice_ActivityRankPrize.PrizeData[(int)b12].ItemID = MP.ReadUShort(-1);
					noticeContent.Notice_ActivityRankPrize.PrizeData[(int)b12].Num = MP.ReadByte(-1);
				}
			}
			else if (noticeContent.Type == NoticeReport.Enotice_InviteAlliance)
			{
				noticeContent.Notice_InviteAlliance = new NoticeContent.InviteAlliance();
				noticeContent.Notice_InviteAlliance.AllianceID = MP.ReadUInt(-1);
				noticeContent.Notice_InviteAlliance.InviterName = MP.ReadString(13, -1);
				noticeContent.Notice_InviteAlliance.Tag = MP.ReadString(3, -1);
				noticeContent.Notice_InviteAlliance.Name = MP.ReadString(20, -1);
			}
			else if (noticeContent.Type == NoticeReport.Enotice_SynLordEquip)
			{
				noticeContent.Notice_SynLordEquip = new NoticeContent.SynLordEquip();
				noticeContent.Notice_SynLordEquip.ItemID = MP.ReadUShort(-1);
				noticeContent.Notice_SynLordEquip.Rank = MP.ReadByte(-1);
				noticeContent.Notice_SynLordEquip.AddExp = MP.ReadUInt(-1);
			}
			else if (noticeContent.Type == NoticeReport.Enotice_RallyCancel)
			{
				noticeContent.Notice_RallyNotice = new NoticeContent.RallyNotice();
				noticeContent.Notice_RallyNotice.HostName = MP.ReadString(13, -1);
				noticeContent.Notice_RallyNotice.HostTag = MP.ReadString(3, -1);
				noticeContent.Notice_RallyNotice.TargetName = MP.ReadString(13, -1);
				noticeContent.Notice_RallyNotice.TargetTag = MP.ReadString(3, -1);
			}
			else if (noticeContent.Type == NoticeReport.Enotice_CryptFinish)
			{
				noticeContent.Notice_CryptNotice = new NoticeContent.CryptNotice();
				noticeContent.Notice_CryptNotice.Money = MP.ReadUShort(-1);
				noticeContent.Notice_CryptNotice.Kind = MP.ReadByte(-1);
				noticeContent.Notice_CryptNotice.Level = MP.ReadByte(-1);
			}
			else if (noticeContent.Type == NoticeReport.Enotice_RallyCancel_AsTargetAlly)
			{
				noticeContent.Notice_AsTargetAlly = new NoticeContent.AsTargetAlly();
				noticeContent.Notice_AsTargetAlly.HostName = MP.ReadString(13, -1);
				noticeContent.Notice_AsTargetAlly.HostTag = MP.ReadString(3, -1);
				noticeContent.Notice_AsTargetAlly.TargetName = MP.ReadString(13, -1);
			}
			else if (noticeContent.Type == NoticeReport.Enotice_OtherSavedLord)
			{
				noticeContent.Notice_OtherSavedLord = new NoticeContent.OtherSavedLord();
				noticeContent.Notice_OtherSavedLord.HomeKingdom = MP.ReadUShort(-1);
				noticeContent.Notice_OtherSavedLord.AllianceTag = MP.ReadString(3, -1);
				noticeContent.Notice_OtherSavedLord.Name = MP.ReadString(13, -1);
			}
			else if (noticeContent.Type != NoticeReport.Enotice_SelfSavedLord)
			{
				if (noticeContent.Type == NoticeReport.Enotice_LordBeingReleased)
				{
					noticeContent.Notice_LordBeingReleased = new NoticeContent.LordBeingReleased();
					noticeContent.Notice_LordBeingReleased.HomeKingdom = MP.ReadUShort(-1);
					noticeContent.Notice_LordBeingReleased.AllianceTag = MP.ReadString(3, -1);
					noticeContent.Notice_LordBeingReleased.Name = MP.ReadString(13, -1);
				}
				else if (noticeContent.Type == NoticeReport.Enotice_LordBeingExecuted)
				{
					noticeContent.Notice_LordBeingExecuted = new NoticeContent.LordBeingExecuted();
					noticeContent.Notice_LordBeingExecuted.HomeKingdom = MP.ReadUShort(-1);
					noticeContent.Notice_LordBeingExecuted.AllianceTag = MP.ReadString(3, -1);
					noticeContent.Notice_LordBeingExecuted.Name = MP.ReadString(13, -1);
				}
				else if (noticeContent.Type != NoticeReport.Enotice_LordEscaped)
				{
					if (noticeContent.Type == NoticeReport.Enotice_OtherBreakPrison)
					{
						noticeContent.Notice_OtherBreakPrison = new NoticeContent.OtherBreakPrison();
						noticeContent.Notice_OtherBreakPrison.HomeKingdom = MP.ReadUShort(-1);
						noticeContent.Notice_OtherBreakPrison.AllianceTag = MP.ReadString(3, -1);
						noticeContent.Notice_OtherBreakPrison.Name = MP.ReadString(13, -1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_RescuedPrisoner)
					{
						noticeContent.Notice_RescuedPrisoner = new NoticeContent.RescuedPrisoner();
						noticeContent.Notice_RescuedPrisoner.HomeKingdom = MP.ReadUShort(-1);
						noticeContent.Notice_RescuedPrisoner.AllianceTag = MP.ReadString(3, -1);
						noticeContent.Notice_RescuedPrisoner.Name = MP.ReadString(13, -1);
						noticeContent.Notice_RescuedPrisoner.PrisonerNum = MP.ReadByte(-1);
						noticeContent.Notice_RescuedPrisoner.ClaimReward = MP.ReadUInt(-1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_RequestRansom)
					{
						noticeContent.Notice_RequestRansom = new NoticeContent.RequestRansom();
						noticeContent.Notice_RequestRansom.Ransom = MP.ReadUInt(-1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_ReceivedRansom)
					{
						noticeContent.Notice_ReceivedRansom = new NoticeContent.ReceivedRansom();
						noticeContent.Notice_ReceivedRansom.Ransom = MP.ReadUInt(-1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_PrisonFull)
					{
						noticeContent.Notice_PrisonFull = new NoticeContent.PrisonFull();
						noticeContent.Notice_PrisonFull.HomeKingdom = MP.ReadUShort(-1);
						noticeContent.Notice_PrisonFull.AllianceTag = MP.ReadString(3, -1);
						noticeContent.Notice_PrisonFull.Name = MP.ReadString(13, -1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_BeQuitAlliance)
					{
						noticeContent.Notice_BeQuitAlliance = new NoticeContent.BeQuitAlliance();
						noticeContent.Notice_BeQuitAlliance.Dealer = MP.ReadString(13, -1);
						noticeContent.Notice_BeQuitAlliance.AllianceTag = MP.ReadString(3, -1);
						noticeContent.Notice_BeQuitAlliance.Alliance = MP.ReadString(20, -1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_BuyTreasure)
					{
						noticeContent.Notice_BuyTreasure = new NoticeContent.BuyTreasure();
						noticeContent.Notice_BuyTreasure.Crystal = MP.ReadUInt(-1);
						noticeContent.Notice_BuyTreasure.BonusCrystal = MP.ReadUInt(-1);
						noticeContent.Notice_BuyTreasure.Gift = new NoticeContent.TreasureAllianceGift[5];
						for (int num31 = 0; num31 < 5; num31++)
						{
							noticeContent.Notice_BuyTreasure.Gift[num31] = new NoticeContent.TreasureAllianceGift();
							noticeContent.Notice_BuyTreasure.Gift[num31].ItemID = MP.ReadUShort(-1);
							noticeContent.Notice_BuyTreasure.Gift[num31].ItemNum = MP.ReadUShort(-1);
						}
						noticeContent.Notice_BuyTreasure.ItemNum = MP.ReadByte(-1);
						noticeContent.Notice_BuyTreasure.Item = new NoticeContent.ComboBoxTBItem[(int)noticeContent.Notice_BuyTreasure.ItemNum];
						for (int num32 = 0; num32 < (int)noticeContent.Notice_BuyTreasure.ItemNum; num32++)
						{
							noticeContent.Notice_BuyTreasure.Item[num32] = new NoticeContent.ComboBoxTBItem();
							noticeContent.Notice_BuyTreasure.Item[num32].ItemID = MP.ReadUShort(-1);
							noticeContent.Notice_BuyTreasure.Item[num32].ItemNum = MP.ReadUShort(-1);
							noticeContent.Notice_BuyTreasure.Item[num32].ItemRank = MP.ReadByte(-1);
						}
						noticeContent.Notice_BuyTreasure.GiftTop = MP.ReadByte(-1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_RallyCancel_Moving)
					{
						noticeContent.Notice_RallyNotice_Moving = new NoticeContent.RallyNotice_Moving();
						noticeContent.Notice_RallyNotice_Moving.HostName = MP.ReadString(13, -1);
						noticeContent.Notice_RallyNotice_Moving.HostTag = MP.ReadString(3, -1);
						noticeContent.Notice_RallyNotice_Moving.TargetName = MP.ReadString(13, -1);
						noticeContent.Notice_RallyNotice_Moving.TargetTag = MP.ReadString(3, -1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_AtkFailedSelfShield)
					{
						noticeContent.Enotice_AtkFailedSelfShield = new NoticeContent.AtkFailedSelfShield();
						noticeContent.Enotice_AtkFailedSelfShield.FailedType = MP.ReadByte(-1);
						noticeContent.Enotice_AtkFailedSelfShield.KingdomID = MP.ReadUShort(-1);
						noticeContent.Enotice_AtkFailedSelfShield.zoneID = MP.ReadUShort(-1);
						noticeContent.Enotice_AtkFailedSelfShield.pointID = MP.ReadByte(-1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_RecivedGift)
					{
						noticeContent.Enotice_RecivedGift = new NoticeContent.Gifts();
						noticeContent.Enotice_RecivedGift.GiftsName = MP.ReadString(13, -1);
						noticeContent.Enotice_RecivedGift.GiftsTag = MP.ReadString(3, -1);
						noticeContent.Enotice_RecivedGift.Item = new NoticeContent.TreasureAllianceGift();
						noticeContent.Enotice_RecivedGift.Item.ItemID = MP.ReadUShort(-1);
						noticeContent.Enotice_RecivedGift.Item.ItemNum = MP.ReadUShort(-1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_PrisonAmnestied)
					{
						noticeContent.Enotice_PrisonAmnestied = new NoticeContent.PrisonAmnestied();
						noticeContent.Enotice_PrisonAmnestied.KingsHomeKingdom = MP.ReadUShort(-1);
						noticeContent.Enotice_PrisonAmnestied.KingdomTag = MP.ReadString(3, -1);
						noticeContent.Enotice_PrisonAmnestied.KingdomName = MP.ReadString(13, -1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_LordBeingAmnestied)
					{
						noticeContent.Enotice_LordBeingAmnestied = new NoticeContent.LordBeingAmnestied();
						noticeContent.Enotice_LordBeingAmnestied.KingsHomeKingdom = MP.ReadUShort(-1);
						noticeContent.Enotice_LordBeingAmnestied.KingdomTag = MP.ReadString(3, -1);
						noticeContent.Enotice_LordBeingAmnestied.KingdomName = MP.ReadString(13, -1);
						noticeContent.Enotice_LordBeingAmnestied.WardensHomeKingdom = MP.ReadUShort(-1);
						noticeContent.Enotice_LordBeingAmnestied.Tag = MP.ReadString(3, -1);
						noticeContent.Enotice_LordBeingAmnestied.Name = MP.ReadString(13, -1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_RulerGift)
					{
						noticeContent.Enotice_RulerGift = new NoticeContent.RulerGift();
						noticeContent.Enotice_RulerGift.RulerKind = MP.ReadByte(-1);
						noticeContent.Enotice_RulerGift.RulerAllianceKingdomID = MP.ReadUShort(-1);
						noticeContent.Enotice_RulerGift.Tag = MP.ReadString(3, -1);
						noticeContent.Enotice_RulerGift.Name = MP.ReadString(13, -1);
						noticeContent.Enotice_RulerGift.GiftKindNum = MP.ReadByte(-1);
						noticeContent.Enotice_RulerGift.Gifts = new NoticeContent.TreasureAllianceGift[16];
						for (int num33 = 0; num33 < (int)noticeContent.Enotice_RulerGift.GiftKindNum; num33++)
						{
							noticeContent.Enotice_RulerGift.Gifts[num33] = new NoticeContent.TreasureAllianceGift();
							noticeContent.Enotice_RulerGift.Gifts[num33].ItemID = MP.ReadUShort(-1);
							noticeContent.Enotice_RulerGift.Gifts[num33].ItemNum = MP.ReadUShort(-1);
						}
					}
					else if (noticeContent.Type == NoticeReport.Enotice_DismissAllianceLeader)
					{
						noticeContent.Enotice_DismissAllianceLeader = new NoticeContent.AllianceDismissLeader();
						noticeContent.Enotice_DismissAllianceLeader.OldLeader = MP.ReadString(13, -1);
						noticeContent.Enotice_DismissAllianceLeader.NewLeader = MP.ReadString(13, -1);
						noticeContent.Enotice_DismissAllianceLeader.OffLineDay = MP.ReadByte(-1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_AmbushDefSuccess)
					{
						noticeContent.Enotice_AmbushDefSuccess = new NoticeContent.Cantonment();
						noticeContent.Enotice_AmbushDefSuccess.AmbushName = MP.ReadString(13, -1);
						noticeContent.Enotice_AmbushDefSuccess.AtkPlayerHomeKingdom = MP.ReadUShort(-1);
						noticeContent.Enotice_AmbushDefSuccess.AtkPlayerAllianceTag = MP.ReadString(3, -1);
						noticeContent.Enotice_AmbushDefSuccess.AtkPlayerName = MP.ReadString(13, -1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_AmbushDefFailed)
					{
						noticeContent.Enotice_AmbushDefFailed = new NoticeContent.Cantonment();
						noticeContent.Enotice_AmbushDefFailed.AmbushName = MP.ReadString(13, -1);
						noticeContent.Enotice_AmbushDefFailed.AtkPlayerHomeKingdom = MP.ReadUShort(-1);
						noticeContent.Enotice_AmbushDefFailed.AtkPlayerAllianceTag = MP.ReadString(3, -1);
						noticeContent.Enotice_AmbushDefFailed.AtkPlayerName = MP.ReadString(13, -1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_ActivityKVKDegreePrize)
					{
						noticeContent.Enotice_ActivityKVKDegreePrize = new NoticeContent.ActivityKVKDegreePrize();
						noticeContent.Enotice_ActivityKVKDegreePrize.ActType = (EActivityType)(MP.ReadByte(-1) - 1);
						noticeContent.Enotice_ActivityKVKDegreePrize.EventType = (EActivityKingdomEventType)MP.ReadByte(-1);
						noticeContent.Enotice_ActivityKVKDegreePrize.Degree = MP.ReadByte(-1);
						noticeContent.Enotice_ActivityKVKDegreePrize.PrizeNum = MP.ReadByte(-1);
						noticeContent.Enotice_ActivityKVKDegreePrize.PrizeData = new NoticeContent.ActPrize[(int)noticeContent.Enotice_ActivityKVKDegreePrize.PrizeNum];
						for (byte b13 = 0; b13 < noticeContent.Enotice_ActivityKVKDegreePrize.PrizeNum; b13 += 1)
						{
							noticeContent.Enotice_ActivityKVKDegreePrize.PrizeData[(int)b13].Rank = MP.ReadByte(-1);
							noticeContent.Enotice_ActivityKVKDegreePrize.PrizeData[(int)b13].ItemID = MP.ReadUShort(-1);
							noticeContent.Enotice_ActivityKVKDegreePrize.PrizeData[(int)b13].Num = MP.ReadByte(-1);
						}
					}
					else if (noticeContent.Type == NoticeReport.Enotice_ActivityKVKRankPrize)
					{
						noticeContent.Enotice_ActivityKVKRankPrize = new NoticeContent.ActivityKVKRankPrize();
						noticeContent.Enotice_ActivityKVKRankPrize.ActType = (EActivityType)(MP.ReadByte(-1) - 1);
						noticeContent.Enotice_ActivityKVKRankPrize.EventType = (EActivityKingdomEventType)MP.ReadByte(-1);
						noticeContent.Enotice_ActivityKVKRankPrize.Place = MP.ReadByte(-1);
						noticeContent.Enotice_ActivityKVKRankPrize.PrizeNum = MP.ReadByte(-1);
						noticeContent.Enotice_ActivityKVKRankPrize.PrizeData = new NoticeContent.ActPrize[(int)noticeContent.Enotice_ActivityKVKRankPrize.PrizeNum];
						for (byte b14 = 0; b14 < noticeContent.Enotice_ActivityKVKRankPrize.PrizeNum; b14 += 1)
						{
							noticeContent.Enotice_ActivityKVKRankPrize.PrizeData[(int)b14].Rank = MP.ReadByte(-1);
							noticeContent.Enotice_ActivityKVKRankPrize.PrizeData[(int)b14].ItemID = MP.ReadUShort(-1);
							noticeContent.Enotice_ActivityKVKRankPrize.PrizeData[(int)b14].Num = MP.ReadByte(-1);
						}
					}
					else if (noticeContent.Type == NoticeReport.Enotice_BuyBlackMarketTreasure)
					{
						noticeContent.Enotice_BuyBlackMarketTreasure = new NoticeContent.BuyTreasure();
						noticeContent.Enotice_BuyBlackMarketTreasure.Crystal = MP.ReadUInt(-1);
						noticeContent.Enotice_BuyBlackMarketTreasure.BonusCrystal = MP.ReadUInt(-1);
						noticeContent.Enotice_BuyBlackMarketTreasure.Gift = new NoticeContent.TreasureAllianceGift[5];
						for (int num34 = 0; num34 < 5; num34++)
						{
							noticeContent.Enotice_BuyBlackMarketTreasure.Gift[num34] = new NoticeContent.TreasureAllianceGift();
							noticeContent.Enotice_BuyBlackMarketTreasure.Gift[num34].ItemID = MP.ReadUShort(-1);
							noticeContent.Enotice_BuyBlackMarketTreasure.Gift[num34].ItemNum = MP.ReadUShort(-1);
						}
						noticeContent.Enotice_BuyBlackMarketTreasure.ItemNum = MP.ReadByte(-1);
						noticeContent.Enotice_BuyBlackMarketTreasure.Item = new NoticeContent.ComboBoxTBItem[(int)noticeContent.Enotice_BuyBlackMarketTreasure.ItemNum];
						for (int num35 = 0; num35 < (int)noticeContent.Enotice_BuyBlackMarketTreasure.ItemNum; num35++)
						{
							noticeContent.Enotice_BuyBlackMarketTreasure.Item[num35] = new NoticeContent.ComboBoxTBItem();
							noticeContent.Enotice_BuyBlackMarketTreasure.Item[num35].ItemID = MP.ReadUShort(-1);
							noticeContent.Enotice_BuyBlackMarketTreasure.Item[num35].ItemNum = MP.ReadUShort(-1);
							noticeContent.Enotice_BuyBlackMarketTreasure.Item[num35].ItemRank = MP.ReadByte(-1);
						}
					}
					else if (noticeContent.Type == NoticeReport.Enotice_KickOffTeam)
					{
						noticeContent.Enotice_KickOffTeam = new NoticeContent.KickOffTeam();
						noticeContent.Enotice_KickOffTeam.HostName = MP.ReadString(13, -1);
						noticeContent.Enotice_KickOffTeam.AllianceTag = MP.ReadString(3, -1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_AMRankPrize)
					{
						noticeContent.Enotice_AMRankPrize = new NoticeContent.ActivityKVKRankPrize();
						noticeContent.Enotice_AMRankPrize.ActType = (EActivityType)(MP.ReadByte(-1) - 1);
						noticeContent.Enotice_AMRankPrize.EventType = (EActivityKingdomEventType)MP.ReadByte(-1);
						noticeContent.Enotice_AMRankPrize.Place = MP.ReadByte(-1);
						noticeContent.Enotice_AMRankPrize.PrizeNum = MP.ReadByte(-1);
						noticeContent.Enotice_AMRankPrize.PrizeData = new NoticeContent.ActPrize[(int)noticeContent.Enotice_AMRankPrize.PrizeNum];
						for (byte b15 = 0; b15 < noticeContent.Enotice_AMRankPrize.PrizeNum; b15 += 1)
						{
							noticeContent.Enotice_AMRankPrize.PrizeData[(int)b15].Rank = MP.ReadByte(-1);
							noticeContent.Enotice_AMRankPrize.PrizeData[(int)b15].ItemID = MP.ReadUShort(-1);
							noticeContent.Enotice_AMRankPrize.PrizeData[(int)b15].Num = MP.ReadByte(-1);
						}
					}
					else if (noticeContent.Type == NoticeReport.Enotice_AllianceHomeKingdom)
					{
						noticeContent.Enotice_AllianceHomeKingdom = new NoticeContent.AllianceChangeHomeKingdom();
						noticeContent.Enotice_AllianceHomeKingdom.AllianceTag = MP.ReadString(3, -1);
						noticeContent.Enotice_AllianceHomeKingdom.Leader = MP.ReadString(13, -1);
						noticeContent.Enotice_AllianceHomeKingdom.HomeKingdom = MP.ReadUShort(-1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_WorldKingPrize)
					{
						noticeContent.Enotice_WorldKingPrize = new NoticeContent.WorldKingPrize();
						noticeContent.Enotice_WorldKingPrize.PrizeNum = MP.ReadByte(-1);
						noticeContent.Enotice_WorldKingPrize.PrizeData = new NoticeContent.ActPrize[(int)noticeContent.Enotice_WorldKingPrize.PrizeNum];
						for (byte b16 = 0; b16 < noticeContent.Enotice_WorldKingPrize.PrizeNum; b16 += 1)
						{
							noticeContent.Enotice_WorldKingPrize.PrizeData[(int)b16].Rank = MP.ReadByte(-1);
							noticeContent.Enotice_WorldKingPrize.PrizeData[(int)b16].ItemID = MP.ReadUShort(-1);
							noticeContent.Enotice_WorldKingPrize.PrizeData[(int)b16].Num = MP.ReadByte(-1);
						}
					}
					else if (noticeContent.Type == NoticeReport.Enotice_BackendAddCrystal)
					{
						noticeContent.Enotice_BackendAddCrystal = new NoticeContent.AddCrystal();
						noticeContent.Enotice_BackendAddCrystal.Crystal = MP.ReadUInt(-1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_LoginConpensate)
					{
						noticeContent.Enotice_LoginConpensate = new NoticeContent.AddCrystal();
						noticeContent.Enotice_LoginConpensate.Crystal = MP.ReadUInt(-1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_PurchaseConpensate)
					{
						noticeContent.Enotice_PurchaseConpensate = new NoticeContent.AddCrystal();
						noticeContent.Enotice_PurchaseConpensate.Crystal = MP.ReadUInt(-1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_RallyNPCCancel)
					{
						noticeContent.Enotice_RallyNPCCancel = new NoticeContent.RallyNpcCancel();
						noticeContent.Enotice_RallyNPCCancel.HostName = MP.ReadString(13, -1);
						noticeContent.Enotice_RallyNPCCancel.AllianceTag = MP.ReadString(3, -1);
						noticeContent.Enotice_RallyNPCCancel.NPCLevel = MP.ReadByte(-1);
						noticeContent.Enotice_RallyNPCCancel.NPCID = MP.ReadUShort(-1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_RallyNPCCancelInvalid)
					{
						noticeContent.Enotice_RallyNPCCancelInvalid = new NoticeContent.RallyNpcCancel();
						noticeContent.Enotice_RallyNPCCancelInvalid.HostName = MP.ReadString(13, -1);
						noticeContent.Enotice_RallyNPCCancelInvalid.AllianceTag = MP.ReadString(3, -1);
						noticeContent.Enotice_RallyNPCCancelInvalid.NPCLevel = MP.ReadByte(-1);
						noticeContent.Enotice_RallyNPCCancelInvalid.NPCID = MP.ReadUShort(-1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_LordEquipExpire)
					{
						noticeContent.Enotice_LordEquipExpire = new NoticeContent.LordEquipExpire();
						noticeContent.Enotice_LordEquipExpire.ItemID = MP.ReadUShort(-1);
						noticeContent.Enotice_LordEquipExpire.Rank = MP.ReadByte(-1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_WorldNotKingPrize)
					{
						noticeContent.Enotice_WorldNotKingPrize = new NoticeContent.WorldKingPrize_NotKing();
						noticeContent.Enotice_WorldNotKingPrize.Place = MP.ReadByte(-1);
						noticeContent.Enotice_WorldNotKingPrize.PrizeNum = MP.ReadByte(-1);
						noticeContent.Enotice_WorldNotKingPrize.PrizeData = new NoticeContent.ActPrize[(int)noticeContent.Enotice_WorldNotKingPrize.PrizeNum];
						for (byte b17 = 0; b17 < noticeContent.Enotice_WorldNotKingPrize.PrizeNum; b17 += 1)
						{
							noticeContent.Enotice_WorldNotKingPrize.PrizeData[(int)b17].Rank = MP.ReadByte(-1);
							noticeContent.Enotice_WorldNotKingPrize.PrizeData[(int)b17].ItemID = MP.ReadUShort(-1);
							noticeContent.Enotice_WorldNotKingPrize.PrizeData[(int)b17].Num = MP.ReadByte(-1);
						}
					}
					else if (noticeContent.Type == NoticeReport.Enotice_BuyEmoteTreasure)
					{
						noticeContent.Enotice_BuyEmoteTreasure = new NoticeContent.BuyEmoteTreasure();
						noticeContent.Enotice_BuyEmoteTreasure.ItemID = MP.ReadUShort(-1);
						noticeContent.Enotice_BuyEmoteTreasure.ItemNum = MP.ReadByte(-1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_PrisnerUsePoison)
					{
						noticeContent.Enotice_PrisnerUsePoison = new NoticeContent.PrisonerUsePoison();
						noticeContent.Enotice_PrisnerUsePoison.HomeKingdom = MP.ReadUShort(-1);
						noticeContent.Enotice_PrisnerUsePoison.AllianceTag = MP.ReadString(3, -1);
						noticeContent.Enotice_PrisnerUsePoison.Name = MP.ReadString(13, -1);
						noticeContent.Enotice_PrisnerUsePoison.EffectTime = MP.ReadUInt(-1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_PrisnerPoisonEffect)
					{
						noticeContent.Enotice_PrisnerPoisonEffect = new NoticeContent.PrisonerPoisonEffect();
						noticeContent.Enotice_PrisnerPoisonEffect.HomeKingdom = MP.ReadUShort(-1);
						noticeContent.Enotice_PrisnerPoisonEffect.AllianceTag = MP.ReadString(3, -1);
						noticeContent.Enotice_PrisnerPoisonEffect.Name = MP.ReadString(13, -1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_BackendActivity)
					{
						noticeContent.Enotice_BackendActivity = new NoticeContent.BackendActivity();
						noticeContent.Enotice_BackendActivity.Crystal = MP.ReadUInt(-1);
						noticeContent.Enotice_BackendActivity.ItemNum = MP.ReadByte(-1);
						noticeContent.Enotice_BackendActivity.Item = new NoticeContent.ComboBoxTBItem[(int)noticeContent.Enotice_BackendActivity.ItemNum];
						for (int num36 = 0; num36 < (int)noticeContent.Enotice_BackendActivity.ItemNum; num36++)
						{
							noticeContent.Enotice_BackendActivity.Item[num36] = new NoticeContent.ComboBoxTBItem();
							noticeContent.Enotice_BackendActivity.Item[num36].ItemID = MP.ReadUShort(-1);
							noticeContent.Enotice_BackendActivity.Item[num36].ItemNum = MP.ReadUShort(-1);
							noticeContent.Enotice_BackendActivity.Item[num36].ItemRank = MP.ReadByte(-1);
						}
					}
					else if (noticeContent.Type == NoticeReport.Enotice_BuyCastleSkinTreasure)
					{
						noticeContent.Enotice_BuyCastleSkinTreasure = new NoticeContent.BuyCastleSkinreasure();
						noticeContent.Enotice_BuyCastleSkinTreasure.CastleSkinID = MP.ReadUShort(-1);
						noticeContent.Enotice_BuyCastleSkinTreasure.ItemID = MP.ReadUShort(-1);
						noticeContent.Enotice_BuyCastleSkinTreasure.ItemNum = MP.ReadByte(-1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_FederalRankPrize)
					{
						noticeContent.Enotice_FederalRankPrize = new NoticeContent.WorldKingPrize_NotKing();
						noticeContent.Enotice_FederalRankPrize.Place = MP.ReadByte(-1);
						noticeContent.Enotice_FederalRankPrize.PrizeNum = MP.ReadByte(-1);
						noticeContent.Enotice_FederalRankPrize.PrizeData = new NoticeContent.ActPrize[(int)noticeContent.Enotice_FederalRankPrize.PrizeNum];
						for (byte b18 = 0; b18 < noticeContent.Enotice_FederalRankPrize.PrizeNum; b18 += 1)
						{
							noticeContent.Enotice_FederalRankPrize.PrizeData[(int)b18].Rank = MP.ReadByte(-1);
							noticeContent.Enotice_FederalRankPrize.PrizeData[(int)b18].ItemID = MP.ReadUShort(-1);
							noticeContent.Enotice_FederalRankPrize.PrizeData[(int)b18].Num = MP.ReadByte(-1);
						}
					}
					else if (noticeContent.Type == NoticeReport.Enotice_TreasureBackPrize)
					{
						noticeContent.Enotice_TreasureBackPrize = new NoticeContent.BuyTreasure();
						noticeContent.Enotice_TreasureBackPrize.Crystal = MP.ReadUInt(-1);
						noticeContent.Enotice_TreasureBackPrize.BonusCrystal = MP.ReadUInt(-1);
						noticeContent.Enotice_TreasureBackPrize.Gift = new NoticeContent.TreasureAllianceGift[5];
						for (int num37 = 0; num37 < 5; num37++)
						{
							noticeContent.Enotice_TreasureBackPrize.Gift[num37] = new NoticeContent.TreasureAllianceGift();
							noticeContent.Enotice_TreasureBackPrize.Gift[num37].ItemID = MP.ReadUShort(-1);
							noticeContent.Enotice_TreasureBackPrize.Gift[num37].ItemNum = MP.ReadUShort(-1);
						}
						noticeContent.Enotice_TreasureBackPrize.ItemNum = MP.ReadByte(-1);
						noticeContent.Enotice_TreasureBackPrize.Item = new NoticeContent.ComboBoxTBItem[(int)noticeContent.Enotice_TreasureBackPrize.ItemNum];
						for (int num38 = 0; num38 < (int)noticeContent.Enotice_TreasureBackPrize.ItemNum; num38++)
						{
							noticeContent.Enotice_TreasureBackPrize.Item[num38] = new NoticeContent.ComboBoxTBItem();
							noticeContent.Enotice_TreasureBackPrize.Item[num38].ItemID = MP.ReadUShort(-1);
							noticeContent.Enotice_TreasureBackPrize.Item[num38].ItemNum = MP.ReadUShort(-1);
							noticeContent.Enotice_TreasureBackPrize.Item[num38].ItemRank = MP.ReadByte(-1);
						}
					}
					else if (noticeContent.Type == NoticeReport.Enotice_LookingForStringTable)
					{
						noticeContent.Enotice_LookingForStringTable = new NoticeContent.LookingForStringTable();
						noticeContent.Enotice_LookingForStringTable.Title = MP.ReadUInt(-1);
						noticeContent.Enotice_LookingForStringTable.Content = MP.ReadUInt(-1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_MarchingPet_Cancel)
					{
						noticeContent.Enotice_MarchingPet_Cancel = new NoticeContent.MarchingPet_Cancel();
						noticeContent.Enotice_MarchingPet_Cancel.HasTarget = MP.ReadByte(-1);
						noticeContent.Enotice_MarchingPet_Cancel.HomeKingdom = MP.ReadUShort(-1);
						noticeContent.Enotice_MarchingPet_Cancel.AllianceTag = MP.ReadString(3, -1);
						noticeContent.Enotice_MarchingPet_Cancel.Name = MP.ReadString(13, -1);
						noticeContent.Enotice_MarchingPet_Cancel.PetID = MP.ReadUShort(-1);
						noticeContent.Enotice_MarchingPet_Cancel.Skill_ID = MP.ReadUShort(-1);
						noticeContent.Enotice_MarchingPet_Cancel.Skill_LV = MP.ReadByte(-1);
					}
					else if (noticeContent.Type == NoticeReport.ENotice_PetStarUp)
					{
						noticeContent.ENotice_PetStarUp = new NoticeContent.PetStarUp();
						noticeContent.ENotice_PetStarUp.PetID = MP.ReadUShort(-1);
						noticeContent.ENotice_PetStarUp.PetStar = MP.ReadByte(-1);
					}
					else if (noticeContent.Type == NoticeReport.ENotice_PrisonerPetSkillEscaped)
					{
						noticeContent.ENotice_PrisonerPetSkillEscaped = new NoticeContent.PetSkillEscaped();
						noticeContent.ENotice_PrisonerPetSkillEscaped.PetID = MP.ReadUShort(-1);
						noticeContent.ENotice_PrisonerPetSkillEscaped.Skill_ID = MP.ReadUShort(-1);
						noticeContent.ENotice_PrisonerPetSkillEscaped.Skill_LV = MP.ReadByte(-1);
					}
					else if (noticeContent.Type == NoticeReport.ENotice_LordPetSkillEscaped)
					{
						noticeContent.ENotice_LordPetSkillEscaped = new NoticeContent.PetSkillEscaped();
						noticeContent.ENotice_LordPetSkillEscaped.PetID = MP.ReadUShort(-1);
						noticeContent.ENotice_LordPetSkillEscaped.Skill_ID = MP.ReadUShort(-1);
						noticeContent.ENotice_LordPetSkillEscaped.Skill_LV = MP.ReadByte(-1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_ScoutTargetLeave)
					{
						noticeContent.Enotice_ScoutTargetLeave = new NoticeContent.MarchTargetLeave();
						noticeContent.Enotice_ScoutTargetLeave.OffsetLen = noticeContent.OffsetLen;
						if (noticeContent.Enotice_ScoutTargetLeave.OffsetLen > 0u)
						{
							noticeContent.Enotice_ScoutTargetLeave.HomeKingdom = MP.ReadUShort(-1);
							noticeContent.Enotice_ScoutTargetLeave.AllianceTag = MP.ReadString(3, -1);
							noticeContent.Enotice_ScoutTargetLeave.Name = MP.ReadString(13, -1);
						}
					}
					else if (noticeContent.Type == NoticeReport.Enotice_AttackTargetLeave)
					{
						noticeContent.Enotice_AttackTargetLeave = new NoticeContent.MarchTargetLeave();
						noticeContent.Enotice_AttackTargetLeave.OffsetLen = noticeContent.OffsetLen;
						if (noticeContent.Enotice_AttackTargetLeave.OffsetLen > 0u)
						{
							noticeContent.Enotice_AttackTargetLeave.HomeKingdom = MP.ReadUShort(-1);
							noticeContent.Enotice_AttackTargetLeave.AllianceTag = MP.ReadString(3, -1);
							noticeContent.Enotice_AttackTargetLeave.Name = MP.ReadString(13, -1);
						}
					}
					else if (noticeContent.Type == NoticeReport.Enotice_MaintainCompensation)
					{
						noticeContent.Enotice_MaintainCompensation = new NoticeContent.MaintainCompensation();
						noticeContent.Enotice_MaintainCompensation.MailTitleStrID = MP.ReadUShort(-1);
						noticeContent.Enotice_MaintainCompensation.MailContentStrID = MP.ReadUShort(-1);
						noticeContent.Enotice_MaintainCompensation.Crystal = MP.ReadUInt(-1);
						noticeContent.Enotice_MaintainCompensation.ItemNum = MP.ReadByte(-1);
						noticeContent.Enotice_MaintainCompensation.Item = new NoticeContent.ComboBoxTBItem[(int)noticeContent.Enotice_MaintainCompensation.ItemNum];
						for (int num39 = 0; num39 < (int)noticeContent.Enotice_MaintainCompensation.ItemNum; num39++)
						{
							noticeContent.Enotice_MaintainCompensation.Item[num39] = new NoticeContent.ComboBoxTBItem();
							noticeContent.Enotice_MaintainCompensation.Item[num39].ItemID = MP.ReadUShort(-1);
							noticeContent.Enotice_MaintainCompensation.Item[num39].ItemNum = MP.ReadUShort(-1);
							noticeContent.Enotice_MaintainCompensation.Item[num39].ItemRank = MP.ReadByte(-1);
						}
					}
					else if (noticeContent.Type == NoticeReport.Enotice_BuyRedPocketTreasure)
					{
						noticeContent.Enotice_BuyRedPocketTreasure = new NoticeContent.BuyRedPocketTreasure();
						noticeContent.Enotice_BuyRedPocketTreasure.StringID = MP.ReadUShort(-1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_SocialFriendModify)
					{
						noticeContent.Enotice_SocialFriendModify = new NoticeContent.SocialFriendMail();
						noticeContent.Enotice_SocialFriendModify.RemoveType = MP.ReadByte(-1);
						noticeContent.Enotice_SocialFriendModify.TargetName = MP.ReadString(41, -1);
						noticeContent.Enotice_SocialFriendModify.PlayerName = MP.ReadString(13, -1);
						noticeContent.Enotice_SocialFriendModify.PlayerTag = MP.ReadString(3, -1);
					}
					else if (noticeContent.Type == NoticeReport.Enotice_ReturnCeremony)
					{
						noticeContent.Enotice_ReturnCeremony = new NoticeContent.ReturnCeremony();
						noticeContent.Enotice_ReturnCeremony.Crystal = MP.ReadUInt(-1);
						noticeContent.Enotice_ReturnCeremony.ItemNum = MP.ReadByte(-1);
						noticeContent.Enotice_ReturnCeremony.Item = new NoticeContent.ComboBoxTBItem[(int)noticeContent.Enotice_ReturnCeremony.ItemNum];
						for (int num40 = 0; num40 < (int)noticeContent.Enotice_ReturnCeremony.ItemNum; num40++)
						{
							noticeContent.Enotice_ReturnCeremony.Item[num40] = new NoticeContent.ComboBoxTBItem();
							noticeContent.Enotice_ReturnCeremony.Item[num40].ItemID = MP.ReadUShort(-1);
							noticeContent.Enotice_ReturnCeremony.Item[num40].ItemNum = MP.ReadUShort(-1);
							noticeContent.Enotice_ReturnCeremony.Item[num40].ItemRank = MP.ReadByte(-1);
						}
					}
					else if (noticeContent.Type == NoticeReport.Enotice_FirstBuyTreasurePrize)
					{
						noticeContent.Enotice_FirstBuyTreasurePrize = new NoticeContent.ReturnCeremony();
						noticeContent.Enotice_FirstBuyTreasurePrize.Crystal = MP.ReadUInt(-1);
						noticeContent.Enotice_FirstBuyTreasurePrize.ItemNum = MP.ReadByte(-1);
						noticeContent.Enotice_FirstBuyTreasurePrize.Item = new NoticeContent.ComboBoxTBItem[(int)noticeContent.Enotice_FirstBuyTreasurePrize.ItemNum];
						for (int num41 = 0; num41 < (int)noticeContent.Enotice_FirstBuyTreasurePrize.ItemNum; num41++)
						{
							noticeContent.Enotice_FirstBuyTreasurePrize.Item[num41] = new NoticeContent.ComboBoxTBItem();
							noticeContent.Enotice_FirstBuyTreasurePrize.Item[num41].ItemID = MP.ReadUShort(-1);
							noticeContent.Enotice_FirstBuyTreasurePrize.Item[num41].ItemNum = MP.ReadUShort(-1);
							noticeContent.Enotice_FirstBuyTreasurePrize.Item[num41].ItemRank = MP.ReadByte(-1);
						}
					}
				}
			}
			if (this.Mailing.SystemSerial.Matrix.TryGetValue(noticeContent.SerialID, out this.DoFavor.Box))
			{
				this.DoFavor.Box.Pull = true;
			}
			else
			{
				this.Mailing.SystemSerial.Matrix[noticeContent.SerialID] = new SerialBox(noticeContent.SerialID, noticeContent.Flag, noticeContent.BeRead, noticeContent.BeSave, true, true);
				if (!noticeContent.BeRead)
				{
					AudioManager.Instance.PlayUISFX(UIKind.ReceiveMail);
				}
			}
			if (noticeContent.BeSave)
			{
				if (!this.Mailing.FavorSerial.System.Mail.ContainsKey(this.Mailing.SystemSerial.New) && (ulong)this.Mailing.FavorSerial.Count < (ulong)((long)this.Mailing.FavorSerial.Inbox.Length))
				{
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial = this.Mailing.SystemSerial.New;
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Timing = noticeContent.Times;
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Type = MailType.EMAIL_SYSTEM;
					this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Change = true;
					this.Mailing.FavorSerial.Count += 1u;
				}
				this.Mailing.SystemSerial.Order.Add(new MailSaveOrder(this.Mailing.SystemSerial.New, 1));
				this.Mailing.FavorSerial.System.Mail[this.Mailing.SystemSerial.New] = noticeContent;
				this.Mailing.FavorSerial.Infolog = true;
				this.MailDataRefresh(MailType.EMAIL_FAVORY);
			}
			else
			{
				this.Mailing.SystemSerial.Order.Add(new MailSaveOrder(this.Mailing.SystemSerial.New, 0));
				if (!this.Mailing.SystemSerial.Mail.ContainsKey(this.Mailing.SystemSerial.New))
				{
					if ((ulong)this.Mailing.SystemSerial.Count < (ulong)((long)this.Mailing.SystemSerial.Inbox.Length))
					{
						this.Mailing.SystemSerial.Inbox[(int)((UIntPtr)this.Mailing.SystemSerial.Count)].Serial = this.Mailing.SystemSerial.New;
						this.Mailing.SystemSerial.Inbox[(int)((UIntPtr)this.Mailing.SystemSerial.Count)].Timing = noticeContent.Times;
						this.Mailing.SystemSerial.Inbox[(int)((UIntPtr)this.Mailing.SystemSerial.Count)].Type = MailType.EMAIL_SYSTEM;
						this.Mailing.SystemSerial.Inbox[(int)((UIntPtr)this.Mailing.SystemSerial.Count)].Change = true;
						this.Mailing.SystemSerial.Count += 1u;
					}
				}
				this.Mailing.SystemSerial.Mail[this.Mailing.SystemSerial.New] = noticeContent;
				this.MailDataRefresh(MailType.EMAIL_SYSTEM);
			}
			if (!noticeContent.BeRead)
			{
				GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
			}
			this.MailingboxRefresh(MailType.EMAIL_SYSTEM, ReportSubSet.REPORTSet_MAX);
			break;
		}
		case Protocol._MSG_RESP_NOTICEMARKREAD:
		{
			this.Mailing.SystemSerial.Last = (uint)MP.ReadByte(-1);
			this.DoFavor.Type = MailType.EMAIL_SYSTEM;
			int num42 = 0;
			while ((long)num42 < (long)((ulong)this.Mailing.SystemSerial.Last))
			{
				this.DoFavor.Serial = MP.ReadUInt(-1);
				if (this.FavorReportGet(ref this.DoFavor))
				{
					this.DoFavor.Mail.BeRead = true;
					this.Mailing.FavorSerial.Unseen -= 1u;
				}
				else
				{
					if (!this.Mailing.SystemSerial.Mail.TryGetValue(this.DoFavor.Serial, out this.DoFavor.System))
					{
						return;
					}
					this.Mailing.SystemSerial.Unseen -= 1u;
					this.DoFavor.System.BeRead = true;
					NoticeContent system2 = this.DoFavor.System;
					system2.Flag |= 1;
					if (this.DoFavor.System.BeKept)
					{
						this.SaveMail(this.DoFavor, this.DoFavor.Serial, 0u, 0u);
					}
				}
				num42++;
			}
			if (this.Mailing.SystemSerial.Last > 0u)
			{
				this.SaveMail(this.DoFavor.Type);
			}
			GUIManager.Instance.HideUILock(EUILock.Mailing_Read);
			GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
			this.MailingboxRefresh(MailType.EMAIL_SYSTEM, ReportSubSet.REPORTSet_MAX);
			break;
		}
		case Protocol._MSG_RESP_SAVENOTICE:
			this.DoFavor.Serial = MP.ReadUInt(-1);
			this.DoFavor.Kind = MailType.EMAIL_SYSTEM;
			this.DoFavor.Type = MailType.EMAIL_SYSTEM;
			if (this.MailReportGet(ref this.DoFavor))
			{
				this.DoFavor.System.BeSave = true;
				NoticeContent system3 = this.DoFavor.System;
				system3.Flag |= 2;
				if (this.Mailing.FavorSerial.System.Mail.ContainsKey(this.DoFavor.System.SerialID) || (ulong)this.Mailing.FavorSerial.Count >= (ulong)((long)this.Mailing.FavorSerial.Inbox.Length))
				{
					return;
				}
				this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Type = this.DoFavor.Kind;
				this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Serial = this.DoFavor.System.SerialID;
				this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Timing = this.DoFavor.System.Times;
				this.Mailing.FavorSerial.Inbox[(int)((UIntPtr)this.Mailing.FavorSerial.Count)].Change = true;
				this.Mailing.FavorSerial.Infolog = true;
				this.Mailing.FavorSerial.Count += 1u;
				this.Mailing.FavorSerial.System.Mail[this.DoFavor.System.SerialID] = this.DoFavor.System;
				this.DeleteMail(this.DoFavor, this.DoFavor.System.SerialID, 0u);
				if (this.DoFavor.System.BeKept)
				{
					this.DoFavor.Kind = MailType.EMAIL_FAVORY;
					this.SaveFavoriteMail(this.DoFavor, this.DoFavor.Serial);
				}
				this.Mailing.SystemSerial.Inbox[(int)this.DoFavor.System.Index].Serial = 0u;
				this.Mailing.SystemSerial.Mail.Remove(this.DoFavor.System.SerialID);
				if (this.Mailing.SystemSerial.Count > 0u)
				{
					this.Mailing.SystemSerial.Count -= 1u;
				}
				this.Mailing.SystemSerial.Change += 1u;
				this.MailDataRefresh(MailType.EMAIL_SYSTEM);
				this.MailDataRefresh(MailType.EMAIL_FAVORY);
				this.SaveMail(MailType.EMAIL_SYSTEM);
				this.MailingboxRefresh(MailType.EMAIL_SYSTEM, ReportSubSet.REPORTSet_MAX);
				this.MailingboxRefresh(MailType.EMAIL_FAVORY, ReportSubSet.REPORTSet_MAX);
				GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
				if (GUIManager.Instance.HideUILock(EUILock.Mailing_Save))
				{
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(681u), 255, true);
				}
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 10, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_LetterDetail, 2, 0);
			break;
		case Protocol._MSG_RESP_DELETENOTICE:
		{
			this.Mailing.SystemSerial.Last = (uint)MP.ReadByte(-1);
			this.DoFavor.Type = MailType.EMAIL_SYSTEM;
			int num43 = 0;
			while ((long)num43 < (long)((ulong)this.Mailing.SystemSerial.Last))
			{
				this.DoFavor.Serial = MP.ReadUInt(-1);
				if (this.FavorReportGet(ref this.DoFavor))
				{
					for (int num44 = 0; num44 < this.Mailing.FavorSerial.Inbox.Length; num44++)
					{
						if (this.Mailing.FavorSerial.Inbox[num44].Type == this.DoFavor.Type && this.Mailing.FavorSerial.Inbox[num44].Serial == this.DoFavor.Mail.SerialID)
						{
							this.Mailing.FavorSerial.Inbox[num44].Serial = 0u;
							this.Mailing.FavorSerial.Count -= 1u;
							break;
						}
					}
					this.Mailing.FavorSerial.Mail.Mail.Remove(this.DoFavor.Serial);
				}
				else
				{
					this.DoFavor.Type = MailType.EMAIL_SYSTEM;
					this.DoFavor.Kind = MailType.EMAIL_SYSTEM;
					if ((this.DoFavor.System = this.SystemReportGet(this.DoFavor.Serial)) != null)
					{
						this.DoFavor.System.BeKill = true;
						if (this.DoFavor.System.BeChecked && this.Outlooking && this.Mailing.SystemSerial.Select > 0u)
						{
							this.Mailing.SystemSerial.Select -= 1u;
						}
						this.Mailing.SystemSerial.Inbox[(int)this.DoFavor.System.Index].Serial = 0u;
						if (this.Mailing.SystemSerial.Count > 0u)
						{
							this.Mailing.SystemSerial.Count -= 1u;
						}
						this.DeleteMail(this.DoFavor, this.DoFavor.Serial, 0u);
						this.Mailing.SystemSerial.Mail.Remove(this.DoFavor.Serial);
					}
				}
				num43++;
			}
			if (GUIManager.Instance.HideUILock(EUILock.Mailing_Delete) && this.Mailing.SystemSerial.Last > 0u)
			{
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(683u), 255, true);
			}
			this.MailDataRefresh(MailType.EMAIL_SYSTEM);
			if (this.Mailing.SystemSerial.Last > 0u)
			{
				this.SaveMail(MailType.EMAIL_SYSTEM);
			}
			this.SaveMailData(MP.Protocol);
			this.MailingboxRefresh(MailType.EMAIL_SYSTEM, ReportSubSet.REPORTSet_MAX);
			GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_LetterDetail, 2, 0);
			break;
		}
		}
	}

	// Token: 0x060003D1 RID: 977 RVA: 0x00050664 File Offset: 0x0004E864
	public bool isNotEmojiCharacter(char codePoint)
	{
		return codePoint == '\0' || codePoint == '\t' || codePoint == '\n' || codePoint == '\r' || (codePoint >= ' ' && codePoint <= '퟿') || (codePoint >= '' && codePoint <= '�');
	}

	// Token: 0x060003D2 RID: 978 RVA: 0x000506C0 File Offset: 0x0004E8C0
	public void InitialMail()
	{
	}

	// Token: 0x060003D3 RID: 979 RVA: 0x000506C4 File Offset: 0x0004E8C4
	public void PurgeMail()
	{
		this.Mailing.Flag = default(MailSave);
		this.Mailing.MailSerial = new MailSerial();
		this.Mailing.FavorSerial = new FavorSerial();
		this.Mailing.ReportSerial = new ReportSerial();
		this.Mailing.SystemSerial = new SystemSerial();
		this.SaveMail(MailType.EMAIL_LETTER);
		this.SaveMail(MailType.EMAIL_BATTLE);
		this.SaveMail(MailType.EMAIL_SYSTEM);
	}

	// Token: 0x060003D4 RID: 980 RVA: 0x00050740 File Offset: 0x0004E940
	public void ResetMail()
	{
		this.Mailing.Flag = default(MailSave);
		this.Mailing.MailSerial = new MailSerial();
		this.Mailing.FavorSerial = new FavorSerial();
		this.Mailing.ReportSerial = new ReportSerial();
		this.Mailing.SystemSerial = new SystemSerial();
		this.SaveMail(MailType.EMAIL_LETTER);
		this.SaveMail(MailType.EMAIL_BATTLE);
		this.SaveMail(MailType.EMAIL_SYSTEM);
		NetworkManager.Reload(true);
	}

	// Token: 0x060003D5 RID: 981 RVA: 0x000507C0 File Offset: 0x0004E9C0
	public bool ClearMail(MailType MT, bool Force = false)
	{
		if (MT == MailType.EMAIL_LETTER)
		{
			uint total = this.Mailing.MailSerial.Total;
			uint unread = this.Mailing.MailSerial.Unread;
			uint last = this.Mailing.MailSerial.Max = this.Mailing.MailSerial.Last;
			this.Mailing.MailSerial = new MailSerial();
			ushort num = 0;
			while ((int)num < this.Mailing.FavorSerial.Inbox.Length)
			{
				if (this.Mailing.FavorSerial.Inbox[(int)num].Serial > 0u && this.Mailing.FavorSerial.Inbox[(int)num].Type == MailType.EMAIL_LETTER)
				{
					this.Mailing.FavorSerial.Mail.Mail.Remove(this.Mailing.FavorSerial.Inbox[(int)num].Serial);
					this.Mailing.FavorSerial.Inbox[(int)num].Serial = 0u;
					if (this.Mailing.FavorSerial.Count > 0u)
					{
						this.Mailing.FavorSerial.Count -= 1u;
					}
				}
				num += 1;
			}
			this.MailDataRefresh(MailType.EMAIL_FAVORY);
			if (!Force)
			{
				this.Mailing.MailSerial.Total = total;
				this.Mailing.MailSerial.Unread = unread;
				this.Mailing.MailSerial.Max = (this.Mailing.MailSerial.Last = last);
			}
		}
		else if (MT == MailType.EMAIL_BATTLE)
		{
			uint total2 = this.Mailing.ReportSerial.Total;
			uint unread2 = this.Mailing.ReportSerial.Unread;
			uint last2 = this.Mailing.ReportSerial.Max = this.Mailing.ReportSerial.Last;
			this.Mailing.ReportSerial = new ReportSerial();
			ushort num2 = 0;
			while ((int)num2 < this.Mailing.FavorSerial.Inbox.Length)
			{
				if (this.Mailing.FavorSerial.Inbox[(int)num2].Serial > 0u && this.Mailing.FavorSerial.Inbox[(int)num2].Type == MailType.EMAIL_BATTLE)
				{
					this.Mailing.FavorSerial.Combat.Mail.Remove(this.Mailing.FavorSerial.Inbox[(int)num2].Serial);
					this.Mailing.FavorSerial.Inbox[(int)num2].Serial = 0u;
					if (this.Mailing.FavorSerial.Count > 0u)
					{
						this.Mailing.FavorSerial.Count -= 1u;
					}
				}
				num2 += 1;
			}
			this.MailDataRefresh(MailType.EMAIL_FAVORY);
			if (!Force)
			{
				this.Mailing.ReportSerial.Total = total2;
				this.Mailing.ReportSerial.Unread = unread2;
				this.Mailing.ReportSerial.Max = (this.Mailing.ReportSerial.Last = last2);
			}
		}
		else if (MT == MailType.EMAIL_SYSTEM)
		{
			uint total3 = this.Mailing.SystemSerial.Total;
			uint unread3 = this.Mailing.SystemSerial.Unread;
			uint last3 = this.Mailing.SystemSerial.Max = this.Mailing.SystemSerial.Last;
			this.Mailing.SystemSerial = new SystemSerial();
			ushort num3 = 0;
			while ((int)num3 < this.Mailing.FavorSerial.Inbox.Length)
			{
				if (this.Mailing.FavorSerial.Inbox[(int)num3].Serial > 0u && this.Mailing.FavorSerial.Inbox[(int)num3].Type == MailType.EMAIL_SYSTEM)
				{
					this.Mailing.FavorSerial.System.Mail.Remove(this.Mailing.FavorSerial.Inbox[(int)num3].Serial);
					this.Mailing.FavorSerial.Inbox[(int)num3].Serial = 0u;
					if (this.Mailing.FavorSerial.Count > 0u)
					{
						this.Mailing.FavorSerial.Count -= 1u;
					}
				}
				num3 += 1;
			}
			this.MailDataRefresh(MailType.EMAIL_FAVORY);
			if (!Force)
			{
				this.Mailing.SystemSerial.Total = total3;
				this.Mailing.SystemSerial.Unread = unread3;
				this.Mailing.SystemSerial.Max = (this.Mailing.SystemSerial.Last = last3);
			}
		}
		else
		{
			this.PurgeMail();
		}
		this.SaveMail(MT);
		if (Force)
		{
			NetworkManager.Reload(true);
		}
		return true;
	}

	// Token: 0x060003D6 RID: 982 RVA: 0x00050CE0 File Offset: 0x0004EEE0
	public void MailingboxRefresh(MailType MT = MailType.EMAIL_MAX, ReportSubSet RSS = ReportSubSet.REPORTSet_MAX)
	{
		DataManager.msgBuffer[0] = (byte)MT;
		DataManager.msgBuffer[1] = (byte)RSS;
		GameManager.OnRefresh(NetworkNews.Refresh_Mailing, DataManager.msgBuffer);
	}

	// Token: 0x060003D7 RID: 983 RVA: 0x00050D00 File Offset: 0x0004EF00
	public uint GetMailboxSize(MailType MT = MailType.EMAIL_MAX)
	{
		switch ((MT >= MailType.EMAIL_MAX) ? this.OpenMail.Kind : MT)
		{
		case MailType.EMAIL_SYSTEM:
			return this.Mailing.SystemSerial.Count;
		case MailType.EMAIL_BATTLE:
			return this.Mailing.ReportSerial.Count;
		case MailType.EMAIL_FAVORY:
			return this.Mailing.FavorSerial.Count;
		}
		return this.Mailing.MailSerial.Count;
	}

	// Token: 0x060003D8 RID: 984 RVA: 0x00050D84 File Offset: 0x0004EF84
	public uint GetMailboxUnread(MailType MT = MailType.EMAIL_MAX)
	{
		switch (MT)
		{
		case MailType.EMAIL_SYSTEM:
			return this.Mailing.SystemSerial.Unseen;
		case MailType.EMAIL_BATTLE:
			return this.Mailing.ReportSerial.Unseen;
		case MailType.EMAIL_LETTER:
			return this.Mailing.MailSerial.Unseen;
		case MailType.EMAIL_FAVORY:
			return this.Mailing.FavorSerial.Unseen;
		default:
			return this.Mailing.MailSerial.Unseen + this.Mailing.ReportSerial.Unseen + this.Mailing.FavorSerial.Unseen + this.Mailing.SystemSerial.Unseen;
		}
	}

	// Token: 0x060003D9 RID: 985 RVA: 0x00050E38 File Offset: 0x0004F038
	public byte GetSubMailboxUnread(uint SerialID)
	{
		byte b = 0;
		this.DoFavor.Kind = MailType.EMAIL_LETTER;
		this.DoFavor.Serial = SerialID;
		SubContent subContent;
		List<uint> list;
		if (this.MailReportGet(ref this.DoFavor) && this.Mailing.MailSerial.SubMail.TryGetValue(this.DoFavor.Mail.ReplyID, out subContent) && subContent.Mail.TryGetValue(this.DoFavor.Mail.SenderName, out list))
		{
			ushort num = 0;
			while ((int)num < list.Count)
			{
				this.DoFavor.Serial = list[(int)num];
				if (this.MailReportGet(ref this.DoFavor) && !this.DoFavor.Mail.BeRead)
				{
					b += 1;
				}
				num += 1;
			}
		}
		return b;
	}

	// Token: 0x060003DA RID: 986 RVA: 0x00050F14 File Offset: 0x0004F114
	public byte GetMailboxUnread(uint ReplyID, string ReplySender)
	{
		byte b = 0;
		this.DoFavor.Kind = MailType.EMAIL_LETTER;
		SubContent subContent;
		List<uint> list;
		if (this.Mailing.MailSerial.SubMail.TryGetValue(ReplyID, out subContent) && subContent.Mail.TryGetValue(ReplySender, out list))
		{
			ushort num = 0;
			while ((int)num < list.Count)
			{
				this.DoFavor.Serial = list[(int)num];
				if (this.MailReportGet(ref this.DoFavor) && !this.DoFavor.Mail.BeRead)
				{
					b += 1;
				}
				num += 1;
			}
		}
		return b;
	}

	// Token: 0x060003DB RID: 987 RVA: 0x00050FB8 File Offset: 0x0004F1B8
	public int GetMailboxSize(uint ReplyID, string ReplySender)
	{
		SubContent subContent;
		List<uint> list;
		if (this.Mailing.MailSerial.SubMail.TryGetValue(ReplyID, out subContent) && subContent.Mail.TryGetValue(ReplySender, out list))
		{
			return list.Count;
		}
		return 0;
	}

	// Token: 0x060003DC RID: 988 RVA: 0x00051000 File Offset: 0x0004F200
	public byte GetMailboxGatherUnread()
	{
		byte b = 0;
		for (int i = 0; i < this.Mailing.ReportSerial.Gather.Count; i++)
		{
			if (this.GatherReportGet(i) != null && !this.DoFavor.Combat.BeRead)
			{
				b += 1;
			}
		}
		return b;
	}

	// Token: 0x060003DD RID: 989 RVA: 0x0005105C File Offset: 0x0004F25C
	public int GetMailboxReportSize(ReportSubSet Type)
	{
		if (Type == ReportSubSet.REPORTSet_HELP)
		{
			return this.Mailing.ReportSerial.Resource.Count;
		}
		if (Type != ReportSubSet.REPORTSet_RECON)
		{
			return this.Mailing.ReportSerial.Gather.Count;
		}
		return this.Mailing.ReportSerial.AntiScout.Count;
	}

	// Token: 0x060003DE RID: 990 RVA: 0x000510C0 File Offset: 0x0004F2C0
	public uint GetMailboxReportSerial(ReportSubSet Type)
	{
		switch (Type)
		{
		case ReportSubSet.REPORTSet_GATHER:
			return this.Mailing.ReportSerial.GatheringID;
		case ReportSubSet.REPORTSet_RECON:
			return this.Mailing.ReportSerial.AntiScoutID;
		}
		return this.Mailing.ReportSerial.ResourceID;
	}

	// Token: 0x060003DF RID: 991 RVA: 0x0005111C File Offset: 0x0004F31C
	public int GetMailboxGatherSize()
	{
		return this.Mailing.ReportSerial.Gather.Count;
	}

	// Token: 0x060003E0 RID: 992 RVA: 0x00051134 File Offset: 0x0004F334
	public int GetMailboxReconSize()
	{
		return this.Mailing.ReportSerial.AntiScout.Count;
	}

	// Token: 0x060003E1 RID: 993 RVA: 0x0005114C File Offset: 0x0004F34C
	public int GetMailboxResourceSize()
	{
		return this.Mailing.ReportSerial.Resource.Count;
	}

	// Token: 0x060003E2 RID: 994 RVA: 0x00051164 File Offset: 0x0004F364
	public void ResetMailingData()
	{
		if (this.Mailing.Loaded && NetworkManager.UserID != this.Mailing.UserId)
		{
			this.PurgeMail();
			this.Mailing.Caliber = 0L;
			this.Mailing.MailSerial.Old = 0u;
			this.Mailing.ReportSerial.Old = 0u;
		}
		if (!this.Mailing.Loaded)
		{
			this.LoadMail(MailType.EMAIL_LETTER);
		}
		else
		{
			this.Mailing.MailSerial.Purge = 0u;
			this.Mailing.ReportSerial.Purge = 0u;
			this.Mailing.SystemSerial.Purge = 0u;
			this.Mailing.MailSerial.Fetch = this.Mailing.MailSerial.New;
			this.Mailing.ReportSerial.Fetch = this.Mailing.ReportSerial.New;
			this.Mailing.SystemSerial.Fetch = this.Mailing.SystemSerial.New;
		}
		this.Mailing.MailSerial.Pulling = false;
		this.Mailing.MailSerial.Parsing = false;
		this.Mailing.ReportSerial.Pulling = false;
		this.Mailing.ReportSerial.Parsing = false;
		this.Mailing.SystemSerial.Pulling = false;
		this.Mailing.SystemSerial.Parsing = false;
		this.Mailing.Refresh = true;
		this.Mailing.Loaded = true;
		this.Mailing.UserId = NetworkManager.UserID;
	}

	// Token: 0x060003E3 RID: 995 RVA: 0x0005130C File Offset: 0x0004F50C
	public void MIBDataCheck()
	{
		this.Mailing.Refresh = false;
		this.Mailing.Caliber = this.ServerTime;
		if (this.Mailing.MailSerial.Caliber.Count > 0)
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_MAILINFO;
			messagePacket.AddSeqId();
			messagePacket.Add((byte)this.Mailing.MailSerial.Caliber.Count);
			foreach (uint data in this.Mailing.MailSerial.Caliber)
			{
				messagePacket.Add(data);
			}
			messagePacket.Send(false);
			this.Mailing.MailSerial.Caliber.Clear();
		}
		if (this.Mailing.ReportSerial.Caliber.Count > 0)
		{
			MessagePacket messagePacket2 = new MessagePacket(1024);
			messagePacket2.Protocol = Protocol._MSG_REQUEST_REPORTINFO;
			messagePacket2.AddSeqId();
			messagePacket2.Add((byte)this.Mailing.ReportSerial.Caliber.Count);
			foreach (uint data2 in this.Mailing.ReportSerial.Caliber)
			{
				messagePacket2.Add(data2);
			}
			messagePacket2.Send(false);
			this.Mailing.ReportSerial.Caliber.Clear();
		}
		if (this.Mailing.SystemSerial.Caliber.Count > 0)
		{
			MessagePacket messagePacket3 = new MessagePacket(1024);
			messagePacket3.Protocol = Protocol._MSG_REQUEST_NOTICEINFO;
			messagePacket3.AddSeqId();
			messagePacket3.Add((byte)this.Mailing.SystemSerial.Caliber.Count);
			foreach (uint data3 in this.Mailing.SystemSerial.Caliber)
			{
				messagePacket3.Add(data3);
			}
			messagePacket3.Send(false);
			this.Mailing.SystemSerial.Caliber.Clear();
		}
		this.MailDataRefresh(MailType.EMAIL_SYSTEM);
		this.MailDataRefresh(MailType.EMAIL_LETTER);
		this.MailDataRefresh(MailType.EMAIL_BATTLE);
		this.MailDataRefresh(MailType.EMAIL_FAVORY);
		this.SaveMail(MailType.EMAIL_SYSTEM);
		this.SaveMail(MailType.EMAIL_LETTER);
		this.SaveMail(MailType.EMAIL_BATTLE);
		this.MailingboxRefresh(MailType.EMAIL_SYSTEM, ReportSubSet.REPORTSet_MAX);
		this.MailingboxRefresh(MailType.EMAIL_LETTER, ReportSubSet.REPORTSet_MAX);
		this.MailingboxRefresh(MailType.EMAIL_BATTLE, ReportSubSet.REPORTSet_MAX);
		this.MailingboxRefresh(MailType.EMAIL_FAVORY, ReportSubSet.REPORTSet_MAX);
		GameManager.OnRefresh(NetworkNews.Refresh_Mailbox, null);
		this.MIB.Serial = 0u;
		this.MIB.Change = (this.MIB.Check = false);
		if (this.MIB.Timing != NetworkManager.UserID)
		{
			long.TryParse(PlayerPrefs.GetString("Mailing" + (this.MIB.Timing = NetworkManager.UserID)), out this.BlackoutMail);
		}
	}

	// Token: 0x060003E4 RID: 996 RVA: 0x00051684 File Offset: 0x0004F884
	public void RecvUserRename(MessagePacket MP)
	{
		switch (MP.Protocol)
		{
		case Protocol._MSG_RESP_ROLE_NAME_CHECK:
			if (GUIManager.Instance.FindMenu(EGUIWindow.UI_AllianceInput))
			{
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_AllianceInput, (int)MP.ReadByte(-1), (int)MP.ReadByte(-1));
			}
			break;
		case Protocol._MSG_RESP_ROLE_RENAME:
			switch (DataManager.msgBuffer[0] = MP.ReadByte(-1))
			{
			case 0:
			{
				ushort itemID = MP.ReadUShort(-1);
				GameManager.OnRefresh(NetworkNews.Refresh_Inputbox, DataManager.msgBuffer);
				this.SetCurItemQuantity(itemID, MP.ReadUShort(-1), 0, 0L);
				MP.ReadStringPlus(13, this.RoleAttr.Name, -1);
				CString cstring = StringManager.Instance.StaticString1024();
				cstring.StringToFormat(this.RoleAttr.Name);
				cstring.AppendFormat(this.mStringTable.GetStringByID(701u));
				GUIManager.Instance.AddHUDMessage(cstring.ToString(), 18, true);
				GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), itemID, eSpentCredits.eMax);
				GameManager.OnRefresh(NetworkNews.Refresh_Item, null);
				DataManager.missionDataManager.CheckChanged(eMissionKind.Mark, 131, 1);
				break;
			}
			case 1:
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(702u), 255, true);
				break;
			case 2:
			case 5:
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(426u), 255, true);
				break;
			case 3:
			case 4:
				GameManager.OnRefresh(NetworkNews.Refresh_Inputbox, DataManager.msgBuffer);
				break;
			}
			GUIManager.Instance.HideUILock(EUILock.AllianceCreate);
			GameManager.OnRefresh(NetworkNews.Refresh_Attr, null);
			break;
		}
	}

	// Token: 0x060003E5 RID: 997 RVA: 0x00051844 File Offset: 0x0004FA44
	public void RecvItemInfo(MessagePacket MP)
	{
		this.RecvItemState = (DataManager.eMsgState)MP.ReadByte(-1);
		if (this.RecvItemState == DataManager.eMsgState.EMS_Begin || this.RecvItemState == DataManager.eMsgState.EMS_BeginAndEnd)
		{
			this.sortItemDataCountMax = 0;
			this.curItemDataCount = 0;
			this.curItemQuantity.Clear();
			Array.Clear(this.sortItemData, 0, this.sortItemData.Length);
		}
		short num = MP.ReadShort(-1);
		for (int i = 0; i < (int)num; i++)
		{
			ushort num2 = MP.ReadUShort(-1);
			if ((int)this.curItemDataCount + i >= 800)
			{
				break;
			}
			this.curItemQuantity.Add(num2, MP.ReadUShort(-1));
			this.sortItemData[(int)this.curItemDataCount + i] = num2;
		}
		this.curItemDataCount += num;
		if (this.curItemDataCount > 800)
		{
			this.curItemDataCount = 800;
		}
		if (this.RecvItemState == DataManager.eMsgState.EMS_End || this.RecvItemState == DataManager.eMsgState.EMS_BeginAndEnd)
		{
			this.sortItemDataCountMax = this.curItemDataCount;
			if ((this.SortItemDataType & 16) == 0)
			{
				this.SortItemDataType = 4;
			}
			this.SortStoreData();
			GameManager.OnRefresh(NetworkNews.Refresh_Item, null);
		}
	}

	// Token: 0x060003E6 RID: 998 RVA: 0x00051978 File Offset: 0x0004FB78
	public bool SendSellItem(ushort ItemID, ushort Quantity)
	{
		Equip recordByKey = this.EquipTable.GetRecordByKey(ItemID);
		if (recordByKey.EquipKey != ItemID)
		{
			return false;
		}
		if ((ulong)this.Resource[4].Stock + (ulong)(recordByKey.RecoverPrice * (uint)Quantity) > (ulong)-1)
		{
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(83u), 255, true);
			return false;
		}
		if (!GUIManager.Instance.ShowUILock(EUILock.SellItem))
		{
			return false;
		}
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_SELLITEM;
		messagePacket.AddSeqId();
		messagePacket.Add(1);
		messagePacket.Add(ItemID);
		messagePacket.Add(Quantity);
		messagePacket.Send(false);
		return true;
	}

	// Token: 0x060003E7 RID: 999 RVA: 0x00051A2C File Offset: 0x0004FC2C
	public void RecvSellItem(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 != 0)
		{
			if (b2 == 1)
			{
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(83u), 255, true);
			}
		}
		else
		{
			this.Resource[4].Stock = MP.ReadUInt(-1);
			byte b3 = MP.ReadByte(-1);
			CString cstring = StringManager.Instance.StaticString1024();
			CString cstring2 = StringManager.Instance.StaticString1024();
			for (int i = 0; i < (int)b3; i++)
			{
				ushort num = MP.ReadUShort(-1);
				this.SetCurItemQuantity(num, MP.ReadUShort(-1), 0, 0L);
				cstring.ClearString();
				cstring2.ClearString();
				Equip recordByKey = this.EquipTable.GetRecordByKey(num);
				UIItemInfo.SetNameProperties(null, null, cstring, null, ref recordByKey, null);
				cstring2.StringToFormat(cstring);
				cstring2.AppendFormat(this.mStringTable.GetStringByID(836u));
				GUIManager.Instance.AddHUDMessage(cstring2.ToString(), 18, true);
			}
			GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Item, null);
		}
		GUIManager.Instance.HideUILock(EUILock.SellItem);
	}

	// Token: 0x060003E8 RID: 1000 RVA: 0x00051B58 File Offset: 0x0004FD58
	private void SendUseItem(ushort ItemID, ushort Quantity, ushort Target = 0, ushort Parameter1 = 0, ushort Parameter2 = 0, uint Parameter3 = 0u, string Name = "")
	{
		if (!GUIManager.Instance.ShowUILock(EUILock.UseItem))
		{
			return;
		}
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_USEITEM;
		messagePacket.AddSeqId();
		messagePacket.Add(ItemID);
		messagePacket.Add(Quantity);
		messagePacket.Add(Target);
		messagePacket.Add(Parameter1);
		messagePacket.Add(Parameter2);
		if (ItemID == GameConstants.TalentSaveItemID)
		{
			messagePacket.Add((uint)this.TalentSaveZero);
			messagePacket.Add(Encoding.UTF8.GetBytes(this.SaveTalentData[0].TagName.ToString()), 0, (int)GameConstants.MAX_TALENT_CACHE_NAME_BYTE);
			byte b = 0;
			while ((ushort)b < Parameter2)
			{
				messagePacket.Add(this.TalentSaveQueue[(int)b].TalentID);
				messagePacket.Add(this.TalentSaveQueue[(int)b].AddLevel);
				b += 1;
			}
		}
		else if (ItemID == 1253)
		{
			messagePacket.Add(Parameter3);
			messagePacket.Add(Name, Encoding.UTF8.GetByteCount(Name));
		}
		else if (ItemID == GameConstants.LESaveItemID)
		{
			messagePacket.Add(Parameter3);
			messagePacket.Add(Encoding.UTF8.GetBytes(UILordEquipSetEdit.SetName.ToString()), 0, (int)GameConstants.MAX_TALENT_CACHE_NAME_BYTE);
			byte b2 = 0;
			while ((int)b2 < UILordEquipSetEdit.showingSet.SerialNO.Length)
			{
				messagePacket.Add(UILordEquipSetEdit.showingSet.SerialNO[(int)b2]);
				b2 += 1;
			}
		}
		else
		{
			messagePacket.Add(Parameter3);
		}
		messagePacket.Send(false);
	}

	// Token: 0x060003E9 RID: 1001 RVA: 0x00051CE8 File Offset: 0x0004FEE8
	public unsafe void RecvUseItem(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		bool flag = false;
		byte[] meg = null;
		switch (b)
		{
		case 0:
		{
			ushort num = MP.ReadUShort(-1);
			Equip recordByKey = DataManager.Instance.EquipTable.GetRecordByKey(num);
			if (recordByKey.EquipKey != num)
			{
				return;
			}
			int num2 = (int)this.GetCurItemQuantity(num, 0);
			this.SetCurItemQuantity(num, MP.ReadUShort(-1), 0, 0L);
			num2 -= (int)this.GetCurItemQuantity(num, 0);
			ushort num3 = MP.ReadUShort(-1);
			bool flag2 = true;
			EItemType eitemType = (EItemType)(recordByKey.EquipKind - 1);
			switch (eitemType)
			{
			case EItemType.EIT_CaseByCase:
				if (recordByKey.PropertiesInfo[0].Propertieskey == 1)
				{
					this.MarchEventData[(int)num3].Type = (EMarchEventType)MP.ReadByte(-1);
					this.MarchEventTime[(int)num3].BeginTime = MP.ReadLong(-1);
					this.MarchEventTime[(int)num3].RequireTime = MP.ReadUInt(-1);
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
					this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)num3, true, this.MarchEventTime[(int)num3].BeginTime, this.MarchEventTime[(int)num3].RequireTime);
				}
				else if ((recordByKey.PropertiesInfo[0].Propertieskey >= 2 && recordByKey.PropertiesInfo[0].Propertieskey < 6) || recordByKey.PropertiesInfo[0].Propertieskey == 38)
				{
					ECaseByCaseType ecaseByCaseType = (ECaseByCaseType)recordByKey.PropertiesInfo[0].Propertieskey;
					if (ecaseByCaseType == ECaseByCaseType.ECBCT_RandomTeleport)
					{
						DataManager.missionDataManager.CheckChanged(eMissionKind.Mark, 122, 1);
					}
					else if (ecaseByCaseType == ECaseByCaseType.ECBCT_AdvanceTeleport || ecaseByCaseType == ECaseByCaseType.ECBCT_NewbieTeleport || ecaseByCaseType == ECaseByCaseType.ECBCT_WorldTeleport)
					{
						DataManager.missionDataManager.CheckChanged(eMissionKind.Mark, 123, 1);
					}
					DataManager.MapDataController.updateCapitalPoint(MP.ReadUShort(-1), MP.ReadByte(-1), MP.ReadUShort(-1), true);
					flag = true;
				}
				else if (recordByKey.PropertiesInfo[0].Propertieskey == 8)
				{
					this.RoleTalentPoint = MP.ReadUShort(-1);
					if (MP.ReadByte(-1) == 0)
					{
						Array.Clear(this.AllTalentData, 0, this.AllTalentData.Length);
						this.NoUseTalent = 1;
						Array.Clear(this.CheckSendCount, 0, this.CheckSendCount.Length);
						this.CehckSendIdx = (this.CheckRecvIdx = 0);
						flag = true;
					}
					else
					{
						int num4 = (int)(MP.ReadByte(-1) + 1);
						this.NoUseTalent = 0;
						if (num4 < this.SaveTalentData.Length)
						{
							Buffer.BlockCopy(this.SaveTalentData[num4].SaveTalentData, 0, this.AllTalentData, 0, 100);
							GUIManager.Instance.UpdateUI(EGUIWindow.UI_TalentSave, -1, 0);
							GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(927u), 255, true);
						}
					}
					this.AttribVal.UpdateTalentData();
					GUIManager.Instance.UpdateUI(EGUIWindow.Door, 13, 0);
				}
				else if (recordByKey.PropertiesInfo[0].Propertieskey == 20 || recordByKey.PropertiesInfo[0].Propertieskey == 21)
				{
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID((uint)(1514 + (recordByKey.PropertiesInfo[0].Propertieskey - 20) * 2)), 255, true);
				}
				else if (recordByKey.PropertiesInfo[0].Propertieskey == 27)
				{
					this.RoleAttr.LordEquipBagSize = MP.ReadByte(-1);
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(7515u), 255, true);
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_LordEquip, 1, 0);
				}
				else if (recordByKey.PropertiesInfo[0].Propertieskey == 29 || recordByKey.PropertiesInfo[0].Propertieskey == 50)
				{
					LordEquipData.Instance().Recv_Gem_TAKEOFF(MP);
				}
				else if (recordByKey.PropertiesInfo[0].Propertieskey == 26)
				{
					this.RoleAttr.BookmarkLimit = this.RoleAttr.BookmarkLimit + recordByKey.PropertiesInfo[0].PropertiesValue;
					flag = true;
				}
				else if (recordByKey.PropertiesInfo[0].Propertieskey == 25)
				{
					flag = true;
					this.beCaptured.nowCaptureStat = LoadCaptureState.None;
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_LordInfo, 0, 0);
					GUIManager.Instance.UpdateUI(EGUIWindow.Door, 18, 0);
					ushort leaderID = DataManager.Instance.GetLeaderID();
					if (leaderID != 0)
					{
						DataManager.Instance.TempFightHeroID[(int)leaderID] = 0;
						DataManager.Instance.SetFightHeroData();
						GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
						GUIManager.Instance.UpdateUI(EGUIWindow.UI_HeroList_Soldier2, 0, 0);
						GUIManager.Instance.UpdateUI(EGUIWindow.UI_BattleHeroSelect, 2, 0);
					}
					DataManager.Instance.AttribVal.UpdateAttrVal(UpdateAttrKind.Hero);
					DataManager.Instance.AttribVal.UpdateLordEquipData();
				}
				else if (recordByKey.PropertiesInfo[0].Propertieskey == 30)
				{
					flag = true;
					this.RoleAttr.recvMonsterPoint = MP.ReadUInt(-1);
					this.RoleAttr.LastMonsterPointRecoverTime = MP.ReadLong(-1);
					this.UpdateMonsterPoint();
				}
				else if (recordByKey.PropertiesInfo[0].Propertieskey == 40)
				{
					flag = true;
					this.RoleAttr.ScardStar = MP.ReadUInt(-1);
				}
				else if (recordByKey.PropertiesInfo[0].Propertieskey == 33)
				{
					flag = true;
				}
				else if (recordByKey.PropertiesInfo[0].Propertieskey == 31 || recordByKey.PropertiesInfo[0].Propertieskey == 32)
				{
					this.RecvUpdateBuffInfo(MP);
					flag = true;
				}
				else if (recordByKey.PropertiesInfo[0].Propertieskey == 34)
				{
					LandWalkerManager.SetActionNormal();
					this.SetWallQueueBar();
					flag = true;
				}
				else if (recordByKey.PropertiesInfo[0].Propertieskey == 36)
				{
					byte saveIndex = this.SaveTalentData[0].SaveIndex;
					this.SaveTalentData[(int)saveIndex].InitSaveTalentData(MP);
					this.SaveTalentData[0].SaveIndex = 0;
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_Talent, -3, 0);
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(935u), 255, true);
				}
				else if (recordByKey.PropertiesInfo[0].Propertieskey == 35)
				{
					MP.ReadStringPlus(41, this.RoleAttr.NickName, -1);
					fixed (string text = this.RoleAttr.NickName.ToString())
					{
						fixed (char* ptr = text + RuntimeHelpers.OffsetToStringData / 2)
						{
							for (int i = 0; i < this.RoleAttr.NickName.Length; i++)
							{
								if (!this.isNotEmojiCharacter(this.RoleAttr.NickName[i]))
								{
									ptr[i] = ' ';
								}
							}
							text = null;
							GameManager.OnRefresh(NetworkNews.Refresh_Attr, null);
							GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9508u), 255, true);
						}
					}
				}
				else if (recordByKey.PropertiesInfo[0].Propertieskey == 37)
				{
					int num5 = (int)MP.ReadByte(-1);
					if (LordEquipData.Instance().LordEquipSets[num5] == null)
					{
						LordEquipData.Instance().LordEquipSets[num5] = new LordEquipSet();
					}
					if (LordEquipData.Instance().LordEquipSets[num5].Name == null)
					{
						LordEquipData.Instance().LordEquipSets[num5].Name = StringManager.Instance.SpawnString(30);
					}
					MP.ReadStringPlus((int)GameConstants.MAX_TALENT_CACHE_NAME_BYTE, LordEquipData.Instance().LordEquipSets[num5].Name, -1);
					for (int j = 0; j < 8; j++)
					{
						LordEquipData.Instance().LordEquipSets[num5].SerialNO[j] = MP.ReadUInt(-1);
					}
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_LordEquipSetEdit, 2, 0);
					GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(935u), 255, true);
				}
				else if (recordByKey.PropertiesInfo[0].Propertieskey != 41)
				{
					if (recordByKey.PropertiesInfo[0].Propertieskey == 43)
					{
						GUIManager.Instance.CloseMenu(EGUIWindow.UI_SuicideBox);
						flag = true;
					}
					else if (recordByKey.PropertiesInfo[0].Propertieskey == 44)
					{
						flag = false;
						flag2 = false;
					}
					else if (recordByKey.PropertiesInfo[0].Propertieskey == 49)
					{
						DataManager.Instance.PetResource.Stock = MP.ReadUInt(-1);
						GameManager.OnRefresh(NetworkNews.Refresh_PetResource, null);
						if (GUIManager.Instance.bContinuousUse)
						{
							GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(248u), 18, true);
						}
						else
						{
							flag = true;
						}
					}
				}
				break;
			case EItemType.EIT_Resource:
			{
				int propertieskey = (int)recordByKey.PropertiesInfo[0].Propertieskey;
				if (propertieskey >= 1 && propertieskey <= 5)
				{
					this.Resource[propertieskey - 1].Stock = MP.ReadUInt(-1);
					GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
					if (GUIManager.Instance.bContinuousUse)
					{
						GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(248u), 18, true);
					}
					else
					{
						flag = true;
					}
				}
				else if (propertieskey == 6)
				{
					GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eMax);
					GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
					if (GUIManager.Instance.bContinuousUse)
					{
						GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(248u), 18, true);
					}
					else
					{
						flag = true;
					}
					GameManager.OnRefresh(NetworkNews.Refresh, null);
				}
				else if (propertieskey == 7)
				{
					this.RoleAlliance.Money = MP.ReadUInt(-1);
					flag = true;
				}
				break;
			}
			case EItemType.EIT_SpeedUpPercent:
				if (recordByKey.PropertiesInfo[0].Propertieskey == 1 || recordByKey.PropertiesInfo[0].Propertieskey == 12 || recordByKey.PropertiesInfo[0].Propertieskey == 17 || recordByKey.PropertiesInfo[0].Propertieskey == 18 || recordByKey.PropertiesInfo[0].Propertieskey == 21)
				{
					if (num3 < (ushort)this.QueueIndexbyUesItemTarget.Length)
					{
						byte b2 = (byte)this.QueueIndexbyUesItemTarget[(int)num3];
						if (this.QueueIndexbyUesItemTarget[(int)num3] < EQueueBarIndex.MAX && this.queueBarData[(int)b2].bActive)
						{
							if (b2 == 16)
							{
								this.m_WallRepairBeginValue = MP.ReadUInt(-1);
								this.m_WallRepairNowValue = MP.ReadUInt(-1);
								if (this.m_WallRepairNowValue == this.m_WallRepairMaxValue)
								{
									AssetManager.SetCastleLevel(GUIManager.Instance.BuildingData.GetBuildData(12, 0).Level, 0);
									DataManager.Instance.SetQueueBarData(EQueueBarIndex.WallRepair, false, 0L, 0u);
									GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(3787u), 8, true);
								}
								else
								{
									this.bNeedShowWallQueueBar = true;
									this.SetWallQueueBar();
								}
							}
							else if (b2 == 18)
							{
								this.queueBarData[(int)b2].StartTime = MP.ReadLong(-1);
								this.queueBarData[(int)b2].TotalTime = MP.ReadUInt(-1);
								this.RoleAttr.LordEquipEventTime.BeginTime = this.queueBarData[(int)b2].StartTime;
								this.RoleAttr.LordEquipEventTime.RequireTime = this.queueBarData[(int)b2].TotalTime;
							}
							else
							{
								this.queueBarData[(int)b2].StartTime = MP.ReadLong(-1);
								this.queueBarData[(int)b2].TotalTime = MP.ReadUInt(-1);
								if (b2 == 19 || b2 == 20)
								{
									DataManager.missionDataManager.UpdateTimeMissionTime(b2);
								}
								else if (b2 == 21)
								{
									DataManager.missionDataManager.VipRewardStartTime = this.queueBarData[(int)b2].StartTime;
									DataManager.missionDataManager.UpdateVipTime();
								}
							}
						}
					}
					GameManager.OnRefresh(NetworkNews.Refresh_QBarTime, null);
					if (GUIManager.Instance.bContinuousUse)
					{
						GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(249u), 18, true);
					}
					else
					{
						CString cstring = StringManager.Instance.StaticString1024();
						cstring.StringToFormat(DataManager.Instance.mStringTable.GetStringByID((uint)recordByKey.EquipName));
						cstring.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(749u));
						GUIManager.Instance.AddHUDMessage(cstring.ToString(), 18, true);
					}
				}
				else if (recordByKey.PropertiesInfo[0].Propertieskey == 11)
				{
					if (num3 != 100)
					{
						if ((int)num3 == this.MarchEventTime.Length)
						{
							this.beCaptured.StartActionTime = MP.ReadLong(-1);
							this.beCaptured.TotalTime = MP.ReadUInt(-1);
							this.queueBarData[30].StartTime = this.beCaptured.StartActionTime;
							this.queueBarData[30].TotalTime = this.beCaptured.TotalTime;
						}
						else
						{
							this.MarchEventTime[(int)num3].BeginTime = MP.ReadLong(-1);
							this.MarchEventTime[(int)num3].RequireTime = MP.ReadUInt(-1);
							GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
							this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)num3, true, this.MarchEventTime[(int)num3].BeginTime, this.MarchEventTime[(int)num3].RequireTime);
						}
						GameManager.OnRefresh(NetworkNews.Refresh_QBarTime, null);
					}
					flag = true;
				}
				else if (recordByKey.PropertiesInfo[0].Propertieskey == 16)
				{
					if (this.MarchEventTime.Length > (int)num3)
					{
						this.MarchEventTime[(int)num3].BeginTime = MP.ReadLong(-1);
						this.MarchEventTime[(int)num3].RequireTime = MP.ReadUInt(-1);
						GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
					}
					GameManager.OnRefresh(NetworkNews.Refresh_QBarTime, null);
					flag = true;
				}
				else if (recordByKey.PropertiesInfo[0].Propertieskey == 22)
				{
					PetManager.Instance.ItemCraftBeginTime = MP.ReadLong(-1);
					PetManager.Instance.ItemCraftNeedTime = MP.ReadUInt(-1);
					if (PetManager.Instance.ItemCraftBeginTime > 0L && PetManager.Instance.ItemCraftNeedTime > 0u)
					{
						this.SetQueueBarData(EQueueBarIndex.PetFusion, true, PetManager.Instance.ItemCraftBeginTime, PetManager.Instance.ItemCraftNeedTime);
					}
					else
					{
						this.SetQueueBarData(EQueueBarIndex.PetFusion, false, 0L, 0u);
					}
					flag = true;
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_PetFusionbuilding, 1, 0);
					GameManager.OnRefresh(NetworkNews.Refresh_QBarTime, null);
				}
				else
				{
					this.RecvUpdateBuffInfo(MP);
					ESpeedUpPercent espeedUpPercent = (ESpeedUpPercent)recordByKey.PropertiesInfo[0].Propertieskey;
					if (espeedUpPercent >= ESpeedUpPercent.EUP_TIME_UNIT && espeedUpPercent <= ESpeedUpPercent.EUP_RESEARCH_TIME_UNIT)
					{
						if (DataManager.mapDataController.IsKing())
						{
							if (recordByKey.EquipKey != 1289)
							{
								flag = true;
							}
						}
						else if (DataManager.mapDataController.IsWorldKing())
						{
							if (recordByKey.EquipKey != 1290)
							{
								flag = true;
							}
						}
						else
						{
							flag = true;
						}
					}
					else if (espeedUpPercent == ESpeedUpPercent.EUP_PET_FUSION_SPEED)
					{
						flag = true;
					}
				}
				break;
			case EItemType.EIT_VIP:
				if (recordByKey.PropertiesInfo[0].Propertieskey == 1)
				{
					this.RoleAttr.VipPoint = MP.ReadUInt(-1);
					byte viplevel = this.RoleAttr.VIPLevel;
					this.RoleAttr.VIPLevel = this.GetVIPLevel(this.RoleAttr.VipPoint);
					DataManager.missionDataManager.UpdateVipState();
					if (viplevel != this.RoleAttr.VIPLevel)
					{
						GameManager.OnRefresh(NetworkNews.Refresh_VIP, null);
						GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_VipLevelUp, (int)this.RoleAttr.VIPLevel + ((int)viplevel << 16), 0, false, 0);
						this.AttribVal.UpdateAttrVal(UpdateAttrKind.VIP);
					}
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_VIP, 0, 0);
					flag = true;
				}
				break;
			case EItemType.EIT_Shield:
				if (recordByKey.PropertiesInfo[0].Propertieskey <= 2)
				{
					this.RecvUpdateBuffInfo(MP);
					CString cstring2 = StringManager.Instance.StaticString1024();
					cstring2.StringToFormat(this.mStringTable.GetStringByID((uint)recordByKey.EquipName));
					cstring2.AppendFormat(this.mStringTable.GetStringByID(749u));
					GUIManager.Instance.AddHUDMessage(cstring2.ToString(), 18, true);
				}
				break;
			case EItemType.EIT_TroopFight:
			case EItemType.EIT_RSGenerate:
				this.RecvUpdateBuffInfo(MP);
				flag = true;
				break;
			default:
				if (eitemType == EItemType.EIT_Consumables)
				{
					switch ((byte)recordByKey.PropertiesInfo[0].Propertieskey)
					{
					case 2:
					{
						GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, 0, 0);
						CurHeroData curHeroData = this.curHeroData[(uint)num3];
						DataManager.msgBuffer[0] = 5;
						byte b3 = DataManager.msgBuffer[1] = curHeroData.Level;
						this.UpdateHeroAttr(num3, MP);
						curHeroData = this.curHeroData[(uint)num3];
						LevelUp recordByKey2 = this.LevelUpTable.GetRecordByKey((ushort)curHeroData.Level);
						float value = curHeroData.Exp / recordByKey2.HeroExp;
						DataManager.msgBuffer[2] = curHeroData.Level;
						GameConstants.GetBytes(value, DataManager.msgBuffer, 3);
						GameConstants.GetBytes(num3, DataManager.msgBuffer, 7);
						if (curHeroData.Level > b3)
						{
							GUIManager.Instance.UpdateUI(EGUIWindow.Door, 5, -1);
						}
						meg = DataManager.msgBuffer;
						break;
					}
					case 4:
						DataManager.StageDataController.RoleAttrLevelUp(MP, 24);
						DataManager.instance.RoleAttr.TodayUseMoraleItemTimes = MP.ReadByte(-1);
						GameManager.OnRefresh(NetworkNews.Refresh_Morale, null);
						GUIManager.Instance.BuildingData.UpdateBuildState(5, 255);
						flag = true;
						break;
					case 5:
					case 6:
					{
						GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, 0, 0);
						PetManager petManager = PetManager.Instance;
						PetData petData = petManager.FindPetData(num3);
						if (petData != null)
						{
							byte level = petData.Level;
							petData.Level = MP.ReadByte(-1);
							petData.Exp = MP.ReadUInt(-1);
							PetManager.Instance.UpdatePetSort(false);
							DataManager.msgBuffer[0] = 5;
							DataManager.msgBuffer[1] = level;
							DataManager.msgBuffer[2] = petData.Level;
							PetTbl recordByKey3 = petManager.PetTable.GetRecordByKey(petData.ID);
							uint needExp = petManager.GetNeedExp(petData.Level, recordByKey3.Rare);
							float value2 = (needExp == 0u) ? 0f : (petData.Exp / needExp);
							GameConstants.GetBytes(value2, DataManager.msgBuffer, 3);
							GameConstants.GetBytes(num3, DataManager.msgBuffer, 7);
							meg = DataManager.msgBuffer;
							petData.UpdateLevelState();
						}
						break;
					}
					}
				}
				break;
			case EItemType.EIT_MaterialTreasureBox:
			case EItemType.EIT_ComboTreasureBox:
			{
				GUIManager guimanager = GUIManager.Instance;
				DataManager dataManager = DataManager.Instance;
				guimanager.OpenBoxCount = num2;
				guimanager.CommonGetCrystal = MP.ReadUInt(-1);
				guimanager.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eMax);
				guimanager.CommonGetAllianceCoin = MP.ReadUInt(-1);
				uint money = MP.ReadUInt(-1);
				dataManager.RoleAlliance.Money = money;
				byte b4 = MP.ReadByte(-1);
				if (recordByKey.EquipKind - 1 == 18 || guimanager.OpenBoxCount > 1)
				{
					byte b5 = (byte)((uint)b4 + guimanager.CommonGetCrystal + guimanager.CommonGetAllianceCoin);
					guimanager.CommonItemData.Clear();
					for (int k = 0; k < (int)b5; k++)
					{
						CommonItemDataType item = default(CommonItemDataType);
						item.ItemID = MP.ReadUShort(-1);
						item.Num = MP.ReadUShort(-1);
						item.ItemRank = MP.ReadByte(-1);
						guimanager.CommonItemData.Add(item);
						if (k < (int)b4)
						{
							int num6 = (int)(dataManager.GetCurItemQuantity(item.ItemID, item.ItemRank) + item.Num);
							if (num6 <= 65535)
							{
								dataManager.SetCurItemQuantity(item.ItemID, (ushort)num6, item.ItemRank, 0L);
								if (item.ItemRank > 0)
								{
									this.ReflashMaterialItem = 1;
								}
							}
						}
					}
					Door door = guimanager.FindMenu(EGUIWindow.Door) as Door;
					if (door != null)
					{
						door.OpenMenu(EGUIWindow.UI_OpenBox, 2, (int)num, false);
					}
				}
				else
				{
					ushort num7 = MP.ReadUShort(-1);
					ushort num8 = MP.ReadUShort(-1);
					byte b6 = MP.ReadByte(-1);
					if (b4 > 0)
					{
						int num9 = (int)(dataManager.GetCurItemQuantity(num7, b6) + num8);
						if (num9 <= 65535)
						{
							dataManager.SetCurItemQuantity(num7, (ushort)num9, b6, 0L);
							if (b6 > 0)
							{
								this.ReflashMaterialItem = 1;
							}
						}
					}
					Equip recordByKey4 = dataManager.EquipTable.GetRecordByKey(num7);
					CString cstring3 = StringManager.Instance.StaticString1024();
					cstring3.Append(dataManager.mStringTable.GetStringByID(840u));
					if (b6 != 0)
					{
						cstring3.StringToFormat(MallManager.Instance.GetItemRankName(b6));
						cstring3.AppendFormat(dataManager.mStringTable.GetStringByID(7739u));
					}
					CString cstring4 = StringManager.Instance.StaticString1024();
					UIItemInfo.SetNameProperties(null, null, cstring4, null, ref recordByKey4, null);
					cstring3.Append(cstring4);
					if (num8 > 1)
					{
						cstring3.IntToFormat((long)num8, 1, false);
						cstring3.AppendFormat("x{0}");
					}
					flag = false;
					CString cstring5 = StringManager.Instance.StaticString1024();
					cstring5.StringToFormat(DataManager.Instance.mStringTable.GetStringByID((uint)recordByKey.EquipName));
					cstring5.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(749u));
					GUIManager.Instance.AddHUDMessage(cstring5.ToString(), 18, true);
					GUIManager.Instance.AddHUDMessage(cstring3.ToString(), 255, true);
				}
				LordEquipData.Instance().Scan_MaterialOrEquipIncreace();
				GameManager.OnRefresh(NetworkNews.Refresh, null);
				break;
			}
			case EItemType.EIT_EnhanceStone:
			{
				Equip recordByKey5 = this.EquipTable.GetRecordByKey(recordByKey.SyntheticParts[1].SyntheticItem);
				CString cstring6 = StringManager.Instance.StaticString1024();
				cstring6.Append(this.mStringTable.GetStringByID(840u));
				CString cstring7 = StringManager.Instance.StaticString1024();
				UIItemInfo.SetNameProperties(null, null, cstring7, null, ref recordByKey5, null);
				cstring6.Append(cstring7);
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(14588u), 255, true);
				GUIManager.Instance.AddHUDMessage(cstring6.ToString(), 255, true);
				break;
			}
			}
			if (num2 != 0)
			{
				GameManager.OnRefresh(NetworkNews.Refresh_Item, meg);
			}
			if (flag)
			{
				CString cstring8 = StringManager.Instance.StaticString1024();
				cstring8.StringToFormat(DataManager.Instance.mStringTable.GetStringByID((uint)recordByKey.EquipName));
				cstring8.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(749u));
				GUIManager.Instance.AddHUDMessage(cstring8.ToString(), 18, true);
			}
			if (GUIManager.Instance.bContinuousUse)
			{
				GUIManager.Instance.bContinuousUse = false;
			}
			if (flag2)
			{
				AudioManager.Instance.PlayUISFX(UIKind.ItemUse);
			}
			goto IL_2036;
		}
		case 1:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(702u), 255, true);
			goto IL_2036;
		case 2:
		case 4:
		case 5:
		case 6:
		case 9:
		case 21:
		case 22:
		case 23:
		case 33:
		case 34:
		case 36:
		case 38:
		case 39:
		case 40:
		case 41:
		case 42:
		case 43:
		case 44:
		case 46:
		case 49:
		case 60:
		case 61:
		case 62:
		case 99:
		case 100:
		case 101:
		case 102:
		case 111:
		case 112:
		case 114:
		case 115:
		case 116:
		{
			CString cstring9 = StringManager.Instance.StaticString1024();
			cstring9.IntToFormat((long)b, 1, false);
			cstring9.AppendFormat(this.mStringTable.GetStringByID(10057u));
			GUIManager.Instance.AddHUDMessage(cstring9.ToString(), 255, true);
			goto IL_2036;
		}
		case 3:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(809u), 255, true);
			goto IL_2036;
		case 7:
		case 8:
		case 103:
		case 104:
		case 105:
		case 106:
		case 107:
		case 108:
		case 109:
		case 110:
		case 113:
			goto IL_2036;
		case 10:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(616u), null, null, 0, 0, false, false, false, false, false);
			goto IL_2036;
		case 11:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(5771u), 255, true);
			goto IL_2036;
		case 12:
		case 13:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(645u), null, null, 0, 0, false, false, false, false, false);
			goto IL_2036;
		case 14:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(7647u), null, null, 0, 0, false, false, false, false, false);
			goto IL_2036;
		case 15:
		case 16:
		case 18:
		case 19:
		case 25:
		case 32:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(5811u), 255, true);
			goto IL_2036;
		case 17:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(820u), 255, true);
			goto IL_2036;
		case 20:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(7528u), 255, true);
			goto IL_2036;
		case 24:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(888u), 255, true);
			goto IL_2036;
		case 26:
		case 27:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1478u), 255, true);
			goto IL_2036;
		case 28:
		case 59:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(952u), 255, true);
			goto IL_2036;
		case 29:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(10033u), 255, true);
			goto IL_2036;
		case 30:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(687u), 255, true);
			goto IL_2036;
		case 31:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(688u), null, null, 0, 0, false, false, false, false, false);
			goto IL_2036;
		case 35:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(956u), 255, true);
			goto IL_2036;
		case 37:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1504u), 255, true);
			goto IL_2036;
		case 45:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1456u), 255, true);
			goto IL_2036;
		case 47:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(420u), 255, true);
			goto IL_2036;
		case 48:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9369u), 255, true);
			goto IL_2036;
		case 50:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(9369u), null, null, 0, 0, false, false, false, false, false);
			goto IL_2036;
		case 51:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(954u), 255, true);
			goto IL_2036;
		case 52:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(956u), 255, true);
			goto IL_2036;
		case 53:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9943u), 255, true);
			goto IL_2036;
		case 54:
		case 57:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1478u), 255, true);
			goto IL_2036;
		case 55:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(8107u), 255, true);
			goto IL_2036;
		case 56:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(7744u), 255, true);
			goto IL_2036;
		case 58:
		{
			CString cstring10 = StringManager.Instance.StaticString1024();
			cstring10.ClearString();
			cstring10.IntToFormat(25L, 1, false);
			cstring10.AppendFormat(this.mStringTable.GetStringByID(9167u));
			GUIManager.Instance.AddHUDMessage(cstring10.ToString(), 255, true);
			goto IL_2036;
		}
		case 63:
		case 64:
			GUIManager.Instance.CloseMenu(EGUIWindow.UI_SuicideBox);
			break;
		case 65:
			GUIManager.Instance.MsgStr.ClearString();
			GUIManager.Instance.MsgStr.IntToFormat(24L, 1, false);
			GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(15001u));
			GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 255, true);
			GUIManager.Instance.CloseMenu(EGUIWindow.UI_SuicideBox);
			goto IL_2036;
		case 66:
			GUIManager.Instance.HideUILock(EUILock.UseItem);
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(15002u), 255, true);
			UISuicideBox.SendRefresh();
			return;
		case 120:
			this.SetCurItemQuantity(MP.ReadUShort(-1), MP.ReadUShort(-1), 0, 0L);
			GameManager.OnRefresh(NetworkNews.Refresh_Item, null);
			goto IL_2036;
		}
		CString cstring11 = StringManager.Instance.StaticString1024();
		cstring11.IntToFormat((long)b, 1, false);
		cstring11.AppendFormat(this.mStringTable.GetStringByID(10057u));
		GUIManager.Instance.AddHUDMessage(cstring11.ToString(), 255, true);
		IL_2036:
		GUIManager.Instance.HideUILock(EUILock.UseItem);
	}

	// Token: 0x060003EA RID: 1002 RVA: 0x00053D38 File Offset: 0x00051F38
	public void UpdateLoadItemNotify()
	{
		if (this.ReflashMaterialItem == 0)
		{
			return;
		}
		DataManager.Instance.mLordEquip.Scan_MaterialOrEquipIncreace();
		this.ReflashMaterialItem = 0;
	}

	// Token: 0x060003EB RID: 1003 RVA: 0x00053D68 File Offset: 0x00051F68
	public void SortCurItemData()
	{
		if (this.SortItemDataType == 8)
		{
			return;
		}
		this.SortItemDataType = 8;
		Array.Clear(this.sortItemDataStart, 0, this.sortItemDataStart.Length);
		Array.Clear(this.sortItemDataCount, 0, this.sortItemDataCount.Length);
		Array.Sort<ushort>(this.sortItemData, 0, (int)this.sortItemDataCountMax, this.itemDataComparer);
		this.sortItemDataCountMax = this.curItemDataCount;
		byte b = 0;
		for (int i = 0; i < (int)this.curItemDataCount; i++)
		{
			Equip recordByKey = this.EquipTable.GetRecordByKey(this.sortItemData[i]);
			if (recordByKey.EquipKey == this.sortItemData[i])
			{
				byte b2 = (recordByKey.EquipKind <= 0 || recordByKey.EquipKind > 30) ? 30 : (recordByKey.EquipKind - 1);
				if (b != b2)
				{
					this.sortItemDataCount[(int)b] = (ushort)(i - (int)this.sortItemDataStart[(int)b]);
					this.sortItemDataStart[(int)b2] = (ushort)i;
					b = b2;
				}
			}
		}
		this.sortItemDataCount[(int)b] = (ushort)(this.curItemDataCount - (short)this.sortItemDataStart[(int)b]);
	}

	// Token: 0x060003EC RID: 1004 RVA: 0x00053E84 File Offset: 0x00052084
	public void SortCurItemDataForBag()
	{
		if ((this.SortItemDataType & 1) > 0)
		{
			return;
		}
		this.SortItemDataType |= 1;
		Array.Clear(this.sortItemDataStart, 0, this.sortItemDataStart.Length);
		Array.Clear(this.sortItemDataCount, 0, this.sortItemDataCount.Length);
		this.bagitemDataComparer.SortType = 0;
		Array.Sort<ushort>(this.sortItemData, 0, (int)this.sortItemDataCountMax, this.bagitemDataComparer);
		byte b = 0;
		ushort num = 0;
		this.sortItemDataCountMax = this.curItemDataCount;
		int num2 = (int)this.curItemDataCount;
		for (int i = 0; i < num2; i++)
		{
			Equip recordByKey = this.EquipTable.GetRecordByKey(this.sortItemData[i]);
			if (recordByKey.EquipKey == this.sortItemData[i])
			{
				byte b2 = (recordByKey.EquipKind <= 0 || recordByKey.EquipKind > 30) ? 30 : (recordByKey.EquipKind - 1);
				if (b != b2)
				{
					this.sortItemDataCount[(int)b] = num;
					num = 1;
					this.sortItemDataStart[(int)b2] = (ushort)i;
					b = b2;
				}
				else
				{
					num += 1;
				}
			}
		}
		this.sortItemDataCount[(int)b] = num;
	}

	// Token: 0x060003ED RID: 1005 RVA: 0x00053FB4 File Offset: 0x000521B4
	public void SortStoreData()
	{
		if ((this.SortItemDataType & 4) > 0)
		{
			return;
		}
		int tableCount = this.StoreData.TableCount;
		if (tableCount == 0)
		{
			return;
		}
		if (this.TotalShopItemData == null)
		{
			this.TotalShopItemData = new CHashTable<ushort, ushort>(tableCount, true);
		}
		if ((this.SortItemDataType & 16) > 0)
		{
			this.SortSotreData = new ushort[tableCount];
			ushort num = 0;
			while ((int)num < this.SortSotreData.Length)
			{
				this.SortSotreData[(int)num] = this.StoreData.GetRecordByIndex((int)num).ID;
				num += 1;
			}
		}
		Array.Clear(this.SortSotreDataStart, 0, this.SortSotreDataStart.Length);
		Array.Clear(this.SortSotreDataCount, 0, this.SortSotreDataCount.Length);
		this.bagitemDataComparer.SortType = 1;
		Array.Sort<ushort>(this.SortSotreData, this.bagitemDataComparer);
		byte b = 0;
		ushort num2 = 0;
		for (int i = 0; i < tableCount; i++)
		{
			StoreTbl recordByKey = this.StoreData.GetRecordByKey(this.SortSotreData[i]);
			Equip recordByKey2 = this.EquipTable.GetRecordByKey(recordByKey.ItemID);
			if ((this.SortItemDataType & 16) > 0 && recordByKey.Num == 1)
			{
				this.TotalShopItemData.Add(recordByKey2.EquipKey, recordByKey.ID);
			}
			if (recordByKey2.EquipKey == recordByKey.ItemID)
			{
				byte equipKind = recordByKey2.EquipKind;
				if (b != equipKind)
				{
					this.SortSotreDataCount[(int)b] = num2;
					num2 = 1;
					this.SortSotreDataStart[(int)equipKind] = (ushort)i;
					b = equipKind;
				}
				else
				{
					num2 += 1;
				}
			}
		}
		this.SortSotreDataCount[(int)b] = num2;
		if ((this.SortItemDataType & 16) > 0)
		{
			this.SortItemDataType = 0;
		}
		this.SortItemDataType |= 4;
	}

	// Token: 0x060003EE RID: 1006 RVA: 0x00054190 File Offset: 0x00052390
	public void SortResourceFilterData()
	{
		if (this.SortItemDataType == 2 || this.SortSotreData == null)
		{
			return;
		}
		this.SortItemDataType = 2;
		int tableCount = this.StoreData.TableCount;
		Array.Clear(this.SortSotreDataStart, 0, this.SortSotreDataStart.Length);
		Array.Clear(this.SortSotreDataCount, 0, this.SortSotreDataCount.Length);
		this.bagitemDataComparer.SortType = 2;
		Array.Sort<ushort>(this.SortSotreData, this.bagitemDataComparer);
		ushort num = 0;
		ushort num2 = 0;
		ushort num3 = 0;
		while ((int)num3 < tableCount)
		{
			StoreTbl recordByKey = this.StoreData.GetRecordByKey(this.SortSotreData[(int)num3]);
			Equip recordByKey2 = this.EquipTable.GetRecordByKey(recordByKey.ItemID);
			if (recordByKey2.EquipKey == recordByKey.ItemID)
			{
				byte b = recordByKey2.EquipKind;
				b -= 1;
				if (b == 10)
				{
					ushort num4 = recordByKey2.PropertiesInfo[0].Propertieskey;
					if (num != num4)
					{
						this.SortSotreDataCount[(int)num] = num2;
						num2 = 1;
						this.SortSotreDataStart[(int)num4] = num3;
						num = num4;
					}
					else
					{
						num2 += 1;
					}
				}
				else if (b == 11)
				{
					ushort num4 = 6;
					if (num != num4)
					{
						this.SortSotreDataCount[(int)num] = num2;
						num2 = 1;
						this.SortSotreDataStart[(int)num4] = num3;
						num = num4;
					}
					else
					{
						num2 += 1;
					}
				}
				else if (b == 9 && recordByKey2.PropertiesInfo[0].Propertieskey == 49)
				{
					ushort num4 = 8;
					if (num != num4)
					{
						this.SortSotreDataCount[(int)num] = num2;
						num2 = 1;
						this.SortSotreDataStart[(int)num4] = num3;
						num = num4;
					}
					else
					{
						num2 += 1;
					}
				}
				else if (b == 9)
				{
					ushort num4 = 7;
					if (num != num4)
					{
						this.SortSotreDataCount[(int)num] = num2;
						num2 = 1;
						this.SortSotreDataStart[(int)num4] = num3;
						num = num4;
					}
					else
					{
						num2 += 1;
					}
				}
			}
			num3 += 1;
		}
		this.SortSotreDataCount[(int)num] = num2;
		Array.Clear(this.sortItemDataStart, 0, this.sortItemDataStart.Length);
		Array.Clear(this.sortItemDataCount, 0, this.sortItemDataCount.Length);
		this.bagitemDataComparer.SortType = 3;
		Array.Sort<ushort>(this.sortItemData, 0, (int)this.sortItemDataCountMax, this.bagitemDataComparer);
		num = 0;
		num2 = 0;
		this.sortItemDataCountMax = this.curItemDataCount;
		tableCount = (int)this.curItemDataCount;
		ushort num5 = 0;
		while ((int)num5 < tableCount)
		{
			Equip recordByKey2 = this.EquipTable.GetRecordByKey(this.sortItemData[(int)num5]);
			if (recordByKey2.EquipKey == this.sortItemData[(int)num5])
			{
				byte b = recordByKey2.EquipKind;
				b -= 1;
				if (b == 10)
				{
					ushort num4 = recordByKey2.PropertiesInfo[0].Propertieskey;
					if (num != num4)
					{
						this.sortItemDataCount[(int)num] = num2;
						num2 = 1;
						this.sortItemDataStart[(int)num4] = num5;
						num = num4;
					}
					else
					{
						num2 += 1;
					}
				}
				else if (b == 11)
				{
					ushort num4 = 12;
					if (num != num4)
					{
						this.sortItemDataCount[(int)num] = num2;
						num2 = 1;
						this.sortItemDataStart[(int)num4] = num5;
						num = num4;
					}
					else
					{
						num2 += 1;
					}
				}
				else if (b == 5 && recordByKey2.PropertiesInfo[0].Propertieskey == 2)
				{
					ushort num4 = 15;
					if (num != num4)
					{
						this.sortItemDataCount[(int)num] = num2;
						num2 = 1;
						this.sortItemDataStart[(int)num4] = num5;
						num = num4;
					}
					else
					{
						num2 += 1;
					}
				}
				else if (b == 9 && recordByKey2.PropertiesInfo[0].Propertieskey == 49)
				{
					ushort num4 = 8;
					if (num != num4)
					{
						this.sortItemDataCount[(int)num] = num2;
						num2 = 1;
						this.sortItemDataStart[(int)num4] = num5;
						num = num4;
					}
					else
					{
						num2 += 1;
					}
				}
			}
			num5 += 1;
		}
		this.sortItemDataCount[(int)num] = num2;
	}

	// Token: 0x060003EF RID: 1007 RVA: 0x000545AC File Offset: 0x000527AC
	public void SetCurItemQuantity(ushort ItemID, ushort Quantity, byte Rare = 0, long lastUpdateTime = 0L)
	{
		if (ItemID == 0)
		{
			return;
		}
		Equip recordByKey = DataManager.Instance.EquipTable.GetRecordByKey(ItemID);
		if (GameConstants.IsBetween((int)recordByKey.EquipKind, 20, 27))
		{
			LordEquipData.setItemQuantity(ItemID, Rare, Quantity, 0L);
			return;
		}
		if (PetManager.Instance.IsPetItem(ItemID))
		{
			PetManager.Instance.SetCurItemQuantity(ItemID, Quantity, Rare);
			return;
		}
		if (this.curItemQuantity.ContainsKey(ItemID))
		{
			this.curItemQuantity.Remove(ItemID);
			if (Quantity == 0)
			{
				this.SortItemDataType = 0;
				this.curItemDataCount -= 1;
				int num = Array.IndexOf<ushort>(this.sortItemData, ItemID);
				if (num >= 0)
				{
					this.sortItemData[num] = 0;
				}
			}
			else
			{
				this.curItemQuantity.Add(ItemID, Quantity);
			}
		}
		else if (Quantity != 0 && this.curItemDataCount < 800)
		{
			this.SortItemDataType = 0;
			int num2 = Array.IndexOf<ushort>(this.sortItemData, 0);
			if (num2 >= 0)
			{
				this.sortItemData[num2] = ItemID;
			}
			this.curItemDataCount += 1;
			this.sortItemDataCountMax = (short)Mathf.Max((int)this.curItemDataCount, (int)this.sortItemDataCountMax);
			this.curItemQuantity.Add(ItemID, Quantity);
		}
		if (this.MySysSetting.bShowBuildUp)
		{
			GUIManager.Instance.BuildingData.UpdateBuildState(9, 255);
		}
		if (recordByKey.EquipKey == ItemID && ((recordByKey.EquipKind >= 1 && recordByKey.EquipKind <= 4) || recordByKey.EquipKind == 5))
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 5, 0);
		}
	}

	// Token: 0x060003F0 RID: 1008 RVA: 0x00054754 File Offset: 0x00052954
	public ushort GetCurItemQuantity(ushort ItemID, byte Rare = 0)
	{
		if (GameConstants.IsBetween((int)DataManager.Instance.EquipTable.GetRecordByKey(ItemID).EquipKind, 20, 27))
		{
			return LordEquipData.getItemQuantity(ItemID, Rare);
		}
		if (PetManager.Instance.IsPetItem(ItemID))
		{
			return PetManager.Instance.GetCurItemQuantity(ItemID, Rare);
		}
		return this.curItemQuantity.Find(ItemID);
	}

	// Token: 0x060003F1 RID: 1009 RVA: 0x000547B8 File Offset: 0x000529B8
	public bool GetStoreData(ref StoreTbl storeData, ushort ItemID)
	{
		Equip recordByKey = this.EquipTable.GetRecordByKey(ItemID);
		if ((this.SortItemDataType & 4) == 0)
		{
			this.SortStoreData();
		}
		int i = (int)this.SortSotreDataStart[(int)recordByKey.EquipKind];
		int num = i + (int)this.SortSotreDataCount[(int)recordByKey.EquipKind];
		while (i <= num)
		{
			ushort num2 = (ushort)Math.Floor((double)((i + num) / 2));
			storeData = this.StoreData.GetRecordByKey(num2);
			if (ItemID == storeData.ItemID)
			{
				return true;
			}
			if (ItemID < storeData.ItemID)
			{
				num = (int)(num2 - 1);
			}
			else
			{
				i = (int)(num2 + 1);
			}
		}
		return false;
	}

	// Token: 0x060003F2 RID: 1010 RVA: 0x0005485C File Offset: 0x00052A5C
	private void InitialQueueBarData()
	{
		byte b = 0;
		QueueBarData queueBarData = this.queueBarData[(int)b];
		queueBarData.eKind = EQueueBarKind.Building;
		this.queueBarData[(int)b] = queueBarData;
		b = 1;
		queueBarData = this.queueBarData[(int)b];
		queueBarData.eKind = EQueueBarKind.Researching;
		this.queueBarData[(int)b] = queueBarData;
		for (b = 2; b <= 9; b += 1)
		{
			queueBarData = this.queueBarData[(int)b];
			queueBarData.eKind = EQueueBarKind.Marching;
			this.queueBarData[(int)b] = queueBarData;
		}
		b = 10;
		queueBarData = this.queueBarData[(int)b];
		queueBarData.eKind = EQueueBarKind.Training;
		this.queueBarData[(int)b] = queueBarData;
		b = 11;
		queueBarData = this.queueBarData[(int)b];
		queueBarData.eKind = EQueueBarKind.HeroEnhance;
		this.queueBarData[(int)b] = queueBarData;
		b = 12;
		queueBarData = this.queueBarData[(int)b];
		queueBarData.eKind = EQueueBarKind.HeroEvolution;
		this.queueBarData[(int)b] = queueBarData;
		b = 13;
		queueBarData = this.queueBarData[(int)b];
		queueBarData.eKind = EQueueBarKind.Treatmenting;
		this.queueBarData[(int)b] = queueBarData;
		b = 14;
		queueBarData = this.queueBarData[(int)b];
		queueBarData.eKind = EQueueBarKind.Manufacturing;
		this.queueBarData[(int)b] = queueBarData;
		b = 17;
		queueBarData = this.queueBarData[(int)b];
		queueBarData.eKind = EQueueBarKind.Idle;
		this.queueBarData[(int)b] = queueBarData;
		b = 19;
		queueBarData = this.queueBarData[(int)b];
		queueBarData.eKind = EQueueBarKind.Mission;
		this.queueBarData[(int)b] = queueBarData;
		b = 20;
		queueBarData = this.queueBarData[(int)b];
		queueBarData.eKind = EQueueBarKind.Mission;
		this.queueBarData[(int)b] = queueBarData;
		b = 21;
		queueBarData = this.queueBarData[(int)b];
		queueBarData.eKind = EQueueBarKind.Mission;
		this.queueBarData[(int)b] = queueBarData;
		b = 18;
		queueBarData = this.queueBarData[(int)b];
		queueBarData.eKind = EQueueBarKind.Forging;
		this.queueBarData[(int)b] = queueBarData;
		b = 30;
		queueBarData = this.queueBarData[(int)b];
		queueBarData.eKind = EQueueBarKind.LordReturn;
		this.queueBarData[(int)b] = queueBarData;
		b = 31;
		queueBarData = this.queueBarData[(int)b];
		queueBarData.eKind = EQueueBarKind.HideArmy;
		this.queueBarData[(int)b] = queueBarData;
		b = 32;
		queueBarData = this.queueBarData[(int)b];
		queueBarData.eKind = EQueueBarKind.Mobilization;
		this.queueBarData[(int)b] = queueBarData;
		b = 33;
		queueBarData = this.queueBarData[(int)b];
		queueBarData.eKind = EQueueBarKind.NpcReward;
		this.queueBarData[(int)b] = queueBarData;
		b = 34;
		queueBarData = this.queueBarData[(int)b];
		queueBarData.eKind = EQueueBarKind.PetFusion;
		this.queueBarData[(int)b] = queueBarData;
		b = 35;
		queueBarData = this.queueBarData[(int)b];
		queueBarData.eKind = EQueueBarKind.PetEvolution;
		this.queueBarData[(int)b] = queueBarData;
		b = 36;
		queueBarData = this.queueBarData[(int)b];
		queueBarData.eKind = EQueueBarKind.PetMarch;
		this.queueBarData[(int)b] = queueBarData;
		for (b = 22; b <= 29; b += 1)
		{
			queueBarData = this.queueBarData[(int)b];
			queueBarData.eKind = EQueueBarKind.JoinedRally;
			this.queueBarData[(int)b] = queueBarData;
		}
		b = 0;
		while ((int)b < this.sortedQueueBarData.Length)
		{
			this.sortedQueueBarData[(int)b] = b;
			b += 1;
		}
	}

	// Token: 0x060003F3 RID: 1011 RVA: 0x00054C98 File Offset: 0x00052E98
	public void ResetQueueBarData()
	{
		for (int i = 0; i < 37; i++)
		{
			if ((this.bRecvQueueBarData & 1L << i) == 0L)
			{
				this.SetQueueBarData((EQueueBarIndex)i, false, 0L, 0u);
			}
		}
		this.bRecvQueueBarData = 0L;
	}

	// Token: 0x060003F4 RID: 1012 RVA: 0x00054CE0 File Offset: 0x00052EE0
	public bool SortQueueBarData()
	{
		if (!this.bNeedSortQueueBarData)
		{
			return false;
		}
		this.bNeedSortQueueBarData = false;
		this.SetIdleData();
		byte b = 0;
		while ((int)b < this.sortedQueueBarData.Length)
		{
			this.sortedQueueBarData[(int)b] = b;
			b += 1;
		}
		Array.Sort<byte>(this.sortedQueueBarData, this.queueBarDataComparer);
		this.curQueueBarDataCount = 0;
		for (int i = 0; i < this.sortedQueueBarData.Length; i++)
		{
			if (!this.queueBarData[(int)this.sortedQueueBarData[i]].bActive)
			{
				break;
			}
			this.curQueueBarDataCount += 1;
		}
		byte[] array = new byte[this.sortedQueueBarData.Length];
		Array.Copy(this.sortedQueueBarData, array, this.sortedQueueBarData.Length);
		int num = 0;
		byte b2 = 22;
		byte b3 = 29;
		byte b4 = 2;
		byte b5 = 9;
		for (int j = 0; j < this.sortedQueueBarData.Length; j++)
		{
			if (this.sortedQueueBarData[j] >= b4 && this.sortedQueueBarData[j] <= b5)
			{
				array[num] = this.sortedQueueBarData[j];
				num++;
				byte b6 = this.sortedQueueBarData[j] - b4;
				if (this.MarchEventData[(int)b6].Type == EMarchEventType.EMET_RallyMarching)
				{
					for (int k = 0; k < this.JoinedRallyDataType.Length; k++)
					{
						if (this.queueBarData[k + (int)b2].bActive && this.JoinedRallyDataType[k].MarchIndex == b6)
						{
							array[num] = (byte)(k + (int)b2);
							num++;
						}
					}
				}
			}
			else if (this.sortedQueueBarData[j] >= b2 && this.sortedQueueBarData[j] <= b3)
			{
				byte b6 = this.sortedQueueBarData[j] - b2;
				if (this.queueBarData[(int)this.sortedQueueBarData[j]].bActive && (this.MarchEventData[(int)b6].Type == EMarchEventType.EMET_RallyStanby || this.MarchEventData[(int)b6].Type == EMarchEventType.EMET_RallyAttack))
				{
					array[num] = this.sortedQueueBarData[j];
					num++;
				}
			}
			else
			{
				array[num] = this.sortedQueueBarData[j];
				num++;
			}
		}
		Array.Copy(array, this.sortedQueueBarData, this.sortedQueueBarData.Length);
		return true;
	}

	// Token: 0x060003F5 RID: 1013 RVA: 0x00054F54 File Offset: 0x00053154
	public void SetQueueBarData(EQueueBarIndex eIndex, bool bActive, long StartTime, uint TotalTime)
	{
		QueueBarData queueBarData = this.queueBarData[(int)eIndex];
		bool bActive2 = queueBarData.bActive;
		queueBarData.bActive = bActive;
		queueBarData.StartTime = StartTime;
		queueBarData.TotalTime = TotalTime;
		this.queueBarData[(int)eIndex] = queueBarData;
		this.bNeedSortQueueBarData = true;
		this.SetIdleData();
		if (!bActive)
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, -1, (int)eIndex);
		}
		else if (!this.bBeginReLogin && !bActive2)
		{
			this.bNewQueue = true;
		}
		if (eIndex == EQueueBarIndex.Training || eIndex == EQueueBarIndex.Manufacturing || eIndex == EQueueBarIndex.Researching || eIndex == EQueueBarIndex.TrapRepair || eIndex == EQueueBarIndex.Treatmenting || eIndex == EQueueBarIndex.PetFusion)
		{
			GUIManager.Instance.BuildingData.UpdateBuildState(5, 255);
		}
	}

	// Token: 0x060003F6 RID: 1014 RVA: 0x0005502C File Offset: 0x0005322C
	public void SetRecvQueueBarData(int Index)
	{
		this.bRecvQueueBarData |= 1L << Index;
	}

	// Token: 0x060003F7 RID: 1015 RVA: 0x00055048 File Offset: 0x00053248
	public void GetQueueBarTitle(EQueueBarIndex eIndex, StringBuilder sb)
	{
	}

	// Token: 0x060003F8 RID: 1016 RVA: 0x0005504C File Offset: 0x0005324C
	public void GetQueueBarTitle(EQueueBarIndex eIndex, StringBuilder sb, ref string title1, ref string title2)
	{
		sb.Length = 0;
		switch (eIndex)
		{
		case EQueueBarIndex.Building:
		{
			if (GUIManager.Instance.BuildingData.AllBuildsData.Length <= (int)GUIManager.Instance.BuildingData.BuildingManorID)
			{
				return;
			}
			RoleBuildingData roleBuildingData = GUIManager.Instance.BuildingData.AllBuildsData[(int)GUIManager.Instance.BuildingData.BuildingManorID];
			BuildTypeData recordByKey = this.BuildsTypeData.GetRecordByKey(roleBuildingData.BuildID);
			if (GUIManager.Instance.BuildingData.QueueBuildType == 1)
			{
				title1 = this.mStringTable.GetStringByID(258u);
				sb.AppendFormat(this.mStringTable.GetStringByID(268u), (int)(roleBuildingData.Level + 1), this.mStringTable.GetStringByID((uint)recordByKey.NameID));
			}
			else
			{
				title1 = this.mStringTable.GetStringByID(4100u);
				sb.AppendFormat(this.mStringTable.GetStringByID(268u), roleBuildingData.Level, this.mStringTable.GetStringByID((uint)recordByKey.NameID));
			}
			title2 = sb.ToString();
			return;
		}
		case EQueueBarIndex.Researching:
		{
			title1 = this.mStringTable.GetStringByID(259u);
			TechDataTbl recordByKey2 = this.TechData.GetRecordByKey(this.ResearchTech);
			if (recordByKey2.LevelMax == 1)
			{
				sb.AppendFormat("{0}", this.mStringTable.GetStringByID((uint)recordByKey2.TechName));
			}
			else
			{
				sb.AppendFormat("{0}{1} {2}", this.mStringTable.GetStringByID(32u), (int)(this.GetTechLevel(this.ResearchTech) + 1), this.mStringTable.GetStringByID((uint)recordByKey2.TechName));
			}
			title2 = sb.ToString();
			return;
		}
		case EQueueBarIndex.Training:
		{
			title1 = this.mStringTable.GetStringByID(264u);
			int num = (int)(this.SoldierKind * 4 + this.SoldierRank);
			SoldierData recordByKey3 = this.SoldierDataTable.GetRecordByKey((ushort)(num + 1));
			CString cstring = StringManager.Instance.StaticString1024();
			StringManager.IntToStr(cstring, (long)((ulong)this.SoldierTrainingQty), 1, true);
			sb.AppendFormat(this.mStringTable.GetStringByID(269u), this.mStringTable.GetStringByID((uint)recordByKey3.Name), cstring.ToString());
			title2 = sb.ToString();
			return;
		}
		case EQueueBarIndex.HeroEnhance:
		{
			title1 = this.mStringTable.GetStringByID(375u);
			CurHeroData curHeroData = this.curHeroData[(uint)this.RoleAttr.EnhanceEventHeroID];
			sb.AppendFormat(this.mStringTable.GetStringByID(377u), (int)(curHeroData.Enhance + 1));
			title2 = sb.ToString();
			return;
		}
		case EQueueBarIndex.HeroEvolution:
		{
			title1 = this.mStringTable.GetStringByID(376u);
			Hero recordByKey4 = this.HeroTable.GetRecordByKey(this.RoleAttr.StarUpEventHeroID);
			title2 = this.mStringTable.GetStringByID((uint)recordByKey4.HeroTitle);
			return;
		}
		case EQueueBarIndex.Treatmenting:
		{
			title1 = this.mStringTable.GetStringByID(4045u);
			uint num2 = 0u;
			for (int i = 0; i < 16; i++)
			{
				num2 += this.mTreatmentSoldier[i];
			}
			CString cstring2 = StringManager.Instance.StaticString1024();
			StringManager.IntToStr(cstring2, (long)((ulong)num2), 1, true);
			sb.AppendFormat(this.mStringTable.GetStringByID(4046u), cstring2.ToString());
			title2 = sb.ToString();
			return;
		}
		case EQueueBarIndex.Manufacturing:
		{
			title1 = this.mStringTable.GetStringByID(3764u);
			int num3 = (int)(this.TrapKind * 4 + this.TrapRank);
			SoldierData recordByKey5 = this.SoldierDataTable.GetRecordByKey((ushort)(num3 + 17));
			CString cstring3 = StringManager.Instance.StaticString1024();
			StringManager.IntToStr(cstring3, (long)((ulong)this.TrapTrainingQty), 1, true);
			sb.AppendFormat(this.mStringTable.GetStringByID(4048u), this.mStringTable.GetStringByID((uint)recordByKey5.Name), cstring3.ToString());
			title2 = sb.ToString();
			return;
		}
		case EQueueBarIndex.TrapRepair:
		{
			title1 = this.mStringTable.GetStringByID(1046u);
			CString cstring4 = StringManager.Instance.StaticString1024();
			StringManager.IntToStr(cstring4, (long)((ulong)this.Trap_TreatmentQuantity), 1, true);
			sb.AppendFormat(this.mStringTable.GetStringByID(1047u), cstring4.ToString());
			title2 = sb.ToString();
			return;
		}
		case EQueueBarIndex.WallRepair:
			title1 = this.mStringTable.GetStringByID(3788u);
			title2 = this.mStringTable.GetStringByID(3789u);
			return;
		case EQueueBarIndex.Forging:
			title1 = this.mStringTable.GetStringByID(261u);
			if (GameConstants.IsBetween((int)this.RoleAttr.LordEquipEventData.Color, 0, 6))
			{
				Equip recordByKey6 = this.EquipTable.GetRecordByKey(this.RoleAttr.LordEquipEventData.ItemID);
				sb.Append(GameConstants.SItemRareHeader[(int)this.RoleAttr.LordEquipEventData.Color]);
				sb.Append(this.mStringTable.GetStringByID((uint)recordByKey6.EquipName));
				sb.Append("</color>");
			}
			title2 = sb.ToString();
			return;
		case EQueueBarIndex.AffairMission:
			title2 = this.mStringTable.GetStringByID(1524u);
			title1 = this.mStringTable.GetStringByID(260u);
			return;
		case EQueueBarIndex.AllianceMission:
			title2 = this.mStringTable.GetStringByID(1525u);
			title1 = this.mStringTable.GetStringByID(260u);
			return;
		case EQueueBarIndex.VIPMission:
			title2 = this.mStringTable.GetStringByID(1526u);
			title1 = this.mStringTable.GetStringByID(260u);
			return;
		case EQueueBarIndex.LordReturn:
		{
			PointCode pointCode;
			GameConstants.MapIDToPointCode(DataManager.Instance.beCaptured.MapID, out pointCode.zoneID, out pointCode.pointID);
			Vector2 tileMapPosbyPointCode = GameConstants.getTileMapPosbyPointCode(pointCode.zoneID, pointCode.pointID);
			sb.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(273u), tileMapPosbyPointCode.x, tileMapPosbyPointCode.y);
			title2 = sb.ToString();
			title1 = this.mStringTable.GetStringByID(267u);
			return;
		}
		case EQueueBarIndex.HideArmy:
			title1 = this.mStringTable.GetStringByID(8590u);
			title2 = this.mStringTable.GetStringByID(8591u);
			return;
		case EQueueBarIndex.Mobilization:
			title1 = this.mStringTable.GetStringByID(1339u);
			if (MobilizationManager.Instance.mMissionStatus == 0)
			{
				title2 = this.mStringTable.GetStringByID(1358u);
			}
			else if (MobilizationManager.Instance.mMissionStatus == 1)
			{
				title2 = this.mStringTable.GetStringByID(1359u);
			}
			else if (MobilizationManager.Instance.mMissionStatus == 2)
			{
				title2 = this.mStringTable.GetStringByID(1360u);
			}
			return;
		case EQueueBarIndex.NpcReward:
			for (int j = 0; j < 3; j++)
			{
				if (GUIManager.Instance.BoxID[j] > 0 && GUIManager.Instance.BoxTime[j] > 0L)
				{
					if (GUIManager.Instance.BoxTime[j] < this.ServerTime)
					{
						title1 = this.mStringTable.GetStringByID(12046u);
					}
					else
					{
						title1 = this.mStringTable.GetStringByID(12034u);
					}
					title2 = this.mStringTable.GetStringByID((uint)this.NPCPrize.GetRecordByKey(GUIManager.Instance.BoxID[j]).Element);
					break;
				}
			}
			return;
		case EQueueBarIndex.PetFusion:
		{
			title1 = this.mStringTable.GetStringByID(14660u);
			sb.Length = 0;
			FusionData recordByKey7 = this.FusionDataTable.GetRecordByKey(PetManager.Instance.ItemCraftID);
			CString cstring5 = StringManager.Instance.StaticString1024();
			StringManager.IntToStr(cstring5, (long)PetManager.Instance.ItemCraftCount, 1, true);
			if (recordByKey7.Fusion_Kind < 1)
			{
				sb.AppendFormat("{0} {1}", this.mStringTable.GetStringByID((uint)this.EquipTable.GetRecordByKey(recordByKey7.Fusion_ItemID).EquipName), cstring5.ToString());
			}
			else
			{
				sb.AppendFormat("{0}{1} {2}", this.mStringTable.GetStringByID((uint)this.EquipTable.GetRecordByKey(recordByKey7.Fusion_ItemID).EquipName), this.mStringTable.GetStringByID(14669u), cstring5.ToString());
			}
			title2 = sb.ToString();
			return;
		}
		case EQueueBarIndex.PetEvolution:
		{
			title1 = this.mStringTable.GetStringByID(376u);
			PetTbl recordByKey8 = PetManager.Instance.PetTable.GetRecordByKey(PetManager.Instance.PetUI_EvoID);
			title2 = this.mStringTable.GetStringByID((uint)recordByKey8.Name);
			return;
		}
		case EQueueBarIndex.PetMarch:
		{
			title1 = this.mStringTable.GetStringByID(266u);
			PointCode point = PetManager.Instance.m_PetMarchEventData.Point;
			Vector2 tileMapPosbyPointCode2 = GameConstants.getTileMapPosbyPointCode(point.zoneID, point.pointID);
			sb.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(273u), tileMapPosbyPointCode2.x, tileMapPosbyPointCode2.y);
			title2 = sb.ToString();
			return;
		}
		}
		if (eIndex >= EQueueBarIndex.MarchingBegin && eIndex <= EQueueBarIndex.MarchingEnd)
		{
			int num4 = eIndex - EQueueBarIndex.MarchingBegin;
			if (num4 < DataManager.Instance.MarchEventData.Length && num4 >= 0)
			{
				int num5 = GameConstants.PointCodeToMapID(DataManager.Instance.MarchEventData[num4].Point.zoneID, DataManager.Instance.MarchEventData[num4].Point.pointID);
				Vector2 vector;
				if (DataManager.Instance.MarchEventData[num4].PointKind == POINT_KIND.PK_YOLK)
				{
					MapPoint mapPoint = DataManager.MapDataController.LayoutMapInfo[num5];
					vector = DataManager.MapDataController.GetYolkPos(mapPoint.tableID, DataManager.MapDataController.FocusKingdomID);
				}
				else
				{
					vector = GameConstants.getTileMapPosbySpriteID(num5);
				}
				sb.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(273u), vector.x, vector.y);
				title2 = sb.ToString();
				if (GameConstants.IsMarchDeparture(this.MarchEventData[num4].Type))
				{
					title1 = DataManager.Instance.mStringTable.GetStringByID(266u);
				}
				else if (GameConstants.IsMarchReturnOrRetreat(this.MarchEventData[num4].Type))
				{
					sb.Length = 0;
					Vector2 tileMapPosbyMapID = GameConstants.getTileMapPosbyMapID(DataManager.Instance.RoleAttr.CapitalPoint);
					sb.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(273u), (int)tileMapPosbyMapID.x, (int)tileMapPosbyMapID.y);
					title2 = sb.ToString();
					title1 = DataManager.Instance.mStringTable.GetStringByID(267u);
				}
				else if (DataManager.Instance.MarchEventData[num4].Type == EMarchEventType.EMET_RallyStanby)
				{
					long num6 = this.MarchEventTime[num4].BeginTime + (long)((ulong)this.MarchEventTime[num4].RequireTime);
					if (DataManager.Instance.ServerTime >= num6)
					{
						title2 = DataManager.Instance.mStringTable.GetStringByID(4909u);
						title1 = DataManager.Instance.mStringTable.GetStringByID(4906u);
					}
					else
					{
						title2 = DataManager.Instance.mStringTable.GetStringByID(4908u);
						title1 = DataManager.Instance.mStringTable.GetStringByID(4906u);
					}
				}
			}
		}
		else if (eIndex >= EQueueBarIndex.JoinedRallyBegin && eIndex <= EQueueBarIndex.JoinedRallyEnd)
		{
			int num7 = eIndex - EQueueBarIndex.JoinedRallyBegin;
			long num8 = this.JoinedRallyDataType[num7].MarchEventTime.BeginTime + (long)((ulong)this.JoinedRallyDataType[num7].MarchEventTime.RequireTime);
			if (this.JoinedRallyDataType[num7].State == 1)
			{
				if (DataManager.Instance.ServerTime >= num8)
				{
					title2 = DataManager.Instance.mStringTable.GetStringByID(4909u);
					title1 = DataManager.Instance.mStringTable.GetStringByID(4906u);
				}
				else
				{
					title2 = DataManager.Instance.mStringTable.GetStringByID(4908u);
					title1 = DataManager.Instance.mStringTable.GetStringByID(4906u);
				}
			}
			else
			{
				int num9 = GameConstants.PointCodeToMapID(this.MarchEventData[num7].Point.zoneID, this.MarchEventData[num7].Point.pointID);
				Vector2 vector2;
				if (DataManager.Instance.MarchEventData[num7].PointKind == POINT_KIND.PK_YOLK)
				{
					MapPoint mapPoint2 = DataManager.MapDataController.LayoutMapInfo[num9];
					vector2 = DataManager.MapDataController.GetYolkPos(mapPoint2.tableID, DataManager.MapDataController.FocusKingdomID);
				}
				else
				{
					vector2 = GameConstants.getTileMapPosbySpriteID(num9);
				}
				sb.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(273u), vector2.x, vector2.y);
				title2 = sb.ToString();
				title1 = DataManager.Instance.mStringTable.GetStringByID(849u);
			}
		}
	}

	// Token: 0x060003F9 RID: 1017 RVA: 0x00055E8C File Offset: 0x0005408C
	public eTimerSpriteType GetQueueBarSpriteType(EQueueBarIndex eIndex)
	{
		eTimerSpriteType result = eTimerSpriteType.Speed;
		if (eIndex == EQueueBarIndex.Idle)
		{
			return eTimerSpriteType.Idle;
		}
		if (eIndex >= EQueueBarIndex.MarchingBegin && eIndex <= EQueueBarIndex.MarchingEnd)
		{
			int num = Mathf.Clamp(eIndex - EQueueBarIndex.MarchingBegin, 0, 7);
			if (DataManager.Instance.MarchEventData[num].Type == EMarchEventType.EMET_RallyStanby)
			{
				return eTimerSpriteType.RallyStanby;
			}
			if (DataManager.Instance.MarchEventData[num].Type == EMarchEventType.EMET_RallyAttack)
			{
				return eTimerSpriteType.RallyAttack;
			}
			if (DataManager.Instance.MarchEventData[num].Type == EMarchEventType.EMET_RallyMarching)
			{
				return eTimerSpriteType.Speed;
			}
		}
		if (eIndex >= EQueueBarIndex.JoinedRallyBegin && eIndex <= EQueueBarIndex.JoinedRallyEnd)
		{
			return eTimerSpriteType.RallyCountDown;
		}
		if (eIndex == EQueueBarIndex.HideArmy)
		{
			return eTimerSpriteType.RallyCountDown;
		}
		if (eIndex == EQueueBarIndex.Mobilization)
		{
			result = eTimerSpriteType.Mobilization;
			if (MobilizationManager.Instance.mMissionStatus == 1)
			{
				result = eTimerSpriteType.Mobilization_Report;
			}
			else if (MobilizationManager.Instance.mMissionStatus == 2)
			{
				result = eTimerSpriteType.Mobilization_fail;
			}
			return result;
		}
		if (eIndex == EQueueBarIndex.NpcReward)
		{
			for (int i = 0; i < 3; i++)
			{
				if (GUIManager.Instance.BoxID[i] > 0 && GUIManager.Instance.BoxTime[i] > 0L)
				{
					if (GUIManager.Instance.BoxTime[i] > this.ServerTime)
					{
						result = eTimerSpriteType.NPCRewardTransIng;
					}
					else
					{
						result = eTimerSpriteType.NPCRewardEnd;
					}
					return result;
				}
			}
			return eTimerSpriteType.NPCRewardTransIng;
		}
		if (eIndex == EQueueBarIndex.PetMarch)
		{
			return eTimerSpriteType.PetMarch;
		}
		if (this.RoleAlliance.Id != 0u && ((eIndex == EQueueBarIndex.Building && GUIManager.Instance.BuildingData.QueueBuildType == 1 && this.mPlayHelpDataType[1].Kind == 0) || (eIndex == EQueueBarIndex.Researching && this.mPlayHelpDataType[0].Kind == 0)))
		{
			result = eTimerSpriteType.Help;
		}
		if (eIndex == EQueueBarIndex.Building || eIndex == EQueueBarIndex.Researching || eIndex == EQueueBarIndex.HeroEnhance || eIndex == EQueueBarIndex.HeroEvolution || eIndex == EQueueBarIndex.PetEvolution)
		{
			if (eIndex == EQueueBarIndex.Building && GUIManager.Instance.BuildingData.QueueBuildType == 2)
			{
				return result;
			}
			long num2 = (long)Mathf.Clamp((float)(this.queueBarData[(int)((byte)eIndex)].StartTime + (long)((ulong)this.queueBarData[(int)((byte)eIndex)].TotalTime) - this.ServerTime), 0f, this.queueBarData[(int)((byte)eIndex)].TotalTime);
			if (num2 <= (long)this.FreeCompletePeriod)
			{
				result = eTimerSpriteType.Free;
			}
		}
		return result;
	}

	// Token: 0x060003FA RID: 1018 RVA: 0x000560EC File Offset: 0x000542EC
	private byte GetIdleType()
	{
		bool flag = this.queueBarData[0].bActive || !DataManager.Instance.MySysSetting.bShowBuildingIdle;
		bool flag2 = this.queueBarData[1].bActive || !DataManager.Instance.MySysSetting.bShowResearchingIdle;
		bool flag3 = GUIManager.Instance.BuildingData.GetBuildNumByID(10) > 0;
		if (!flag && !flag2 && flag3)
		{
			return 3;
		}
		if (!flag)
		{
			return 1;
		}
		if (!flag2 && flag3)
		{
			return 2;
		}
		return 0;
	}

	// Token: 0x060003FB RID: 1019 RVA: 0x00056194 File Offset: 0x00054394
	private void SetIdleData()
	{
		int num = 17;
		QueueBarData queueBarData = this.queueBarData[num];
		byte idleType = this.GetIdleType();
		if (idleType != 0)
		{
			queueBarData.bActive = true;
			queueBarData.StartTime = (long)idleType;
		}
		else
		{
			queueBarData.bActive = false;
			queueBarData.StartTime = 0L;
		}
		this.queueBarData[num] = queueBarData;
	}

	// Token: 0x060003FC RID: 1020 RVA: 0x000561FC File Offset: 0x000543FC
	public bool IsNewbie()
	{
		return GUIManager.Instance.BuildingData.GetBuildData(8, 0).Level < 6;
	}

	// Token: 0x060003FD RID: 1021 RVA: 0x00056228 File Offset: 0x00054428
	public void updateBattleData()
	{
		ushort currentPointID = DataManager.StageDataController.currentPointID;
		byte b = (byte)DataManager.StageDataController.GetcurrentPointLevelID(out currentPointID, 0);
		DataManager.Instance.battleInfo.StageID = currentPointID;
		DataManager.Instance.battleInfo.StageKind = b + 1;
	}

	// Token: 0x060003FE RID: 1022 RVA: 0x00056274 File Offset: 0x00054474
	public bool FindItemComposite(ushort _equipID, int _needQuantity = 1)
	{
		ushort num = this.GetCurItemQuantity(_equipID, 0);
		Equip recordByKey = DataManager.Instance.EquipTable.GetRecordByKey(_equipID);
		if ((int)num >= _needQuantity)
		{
			return true;
		}
		if (recordByKey.SyntheticParts == null || recordByKey.SyntheticParts[0].SyntheticItem == 0 || recordByKey.EquipKind == 4)
		{
			return false;
		}
		bool flag = true;
		for (int i = 0; i < recordByKey.SyntheticParts.Length; i++)
		{
			int num2 = 0;
			if (recordByKey.SyntheticParts[i].SyntheticItem == 0)
			{
				break;
			}
			num = this.GetCurItemQuantity(recordByKey.SyntheticParts[i].SyntheticItem, 0);
			for (int j = 0; j < recordByKey.SyntheticParts.Length; j++)
			{
				if (recordByKey.SyntheticParts[i].SyntheticItem == recordByKey.SyntheticParts[j].SyntheticItem)
				{
					num2 += (int)recordByKey.SyntheticParts[i].SyntheticItemNum * _needQuantity;
				}
			}
			if ((int)num < num2)
			{
				flag = this.FindItemComposite(recordByKey.SyntheticParts[i].SyntheticItem, num2 * (int)recordByKey.SyntheticParts[i].SyntheticItemNum);
				if (!flag)
				{
					break;
				}
			}
		}
		return flag;
	}

	// Token: 0x060003FF RID: 1023 RVA: 0x000563D8 File Offset: 0x000545D8
	public void RecvArmygroupInfo(MessagePacket MP)
	{
		this.SoldierTotal = 0L;
		for (int i = 0; i < 16; i++)
		{
			this.RoleAttr.m_Soldier[i] = MP.ReadUInt(-1);
			this.SoldierTotal += (long)((ulong)this.RoleAttr.m_Soldier[i]);
		}
		GameManager.OnRefresh(NetworkNews.Refresh_Soldier, null);
		this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
	}

	// Token: 0x06000400 RID: 1024 RVA: 0x00056448 File Offset: 0x00054648
	public void RecvTrainingInfo(MessagePacket MP)
	{
		this.SoldierKind = MP.ReadByte(-1);
		this.SoldierRank = MP.ReadByte(-1);
		this.SoldierTrainingQty = MP.ReadUInt(-1);
		this.SoldierBeginTime = MP.ReadLong(-1);
		this.SoldierNeedTime = MP.ReadUInt(-1);
		if (this.SoldierBeginTime != 0L)
		{
			DataManager.Instance.SetQueueBarData(EQueueBarIndex.Training, true, this.SoldierBeginTime, this.SoldierNeedTime);
			DataManager.Instance.SetRecvQueueBarData(10);
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Barrack, 1, 0);
		GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
	}

	// Token: 0x06000401 RID: 1025 RVA: 0x000564E0 File Offset: 0x000546E0
	public void SendFinishtraining()
	{
		if (GUIManager.Instance.ShowUILock(EUILock.SoldierTrain))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_FINISHTRAINING;
			messagePacket.AddSeqId();
			messagePacket.Send(false);
		}
	}

	// Token: 0x06000402 RID: 1026 RVA: 0x00056524 File Offset: 0x00054724
	public void RecvTraining(MessagePacket MP)
	{
		switch (MP.ReadByte(-1))
		{
		case 0:
			this.SoldierKind = MP.ReadByte(-1);
			this.SoldierRank = MP.ReadByte(-1);
			this.SoldierQuantity = MP.ReadUInt(-1);
			for (int i = 0; i < 5; i++)
			{
				this.Resource[i].Stock = MP.ReadUInt(-1);
			}
			this.SoldierBeginTime = MP.ReadLong(-1);
			this.SoldierNeedTime = MP.ReadUInt(-1);
			DataManager.Instance.SetQueueBarData(EQueueBarIndex.Training, true, this.SoldierBeginTime, this.SoldierNeedTime);
			DataManager.Instance.SetRecvQueueBarData(10);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Barrack, 1, 0);
			GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
			GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
			if (this.SoldierTrainingQty != this.SoldierQuantity)
			{
				if (this.SoldierQuantity == 0u)
				{
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4829u), this.mStringTable.GetStringByID(3870u), this.mStringTable.GetStringByID(4831u), null, 0, 0, false, false, false, false, false);
				}
				else
				{
					GUIManager.Instance.MsgStr.ClearString();
					GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)this.SoldierTrainingQty), 1, false);
					GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)this.SoldierQuantity), 1, false);
					GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3854u));
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3971u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4026u), null, 0, 0, false, false, false, false, false);
				}
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 15, 0);
			AudioManager.Instance.PlayUISFX(UIKind.Soldiers);
			break;
		case 1:
			GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
			break;
		case 2:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4829u), this.mStringTable.GetStringByID(3870u), this.mStringTable.GetStringByID(4831u), null, 0, 0, false, false, false, false, false);
			GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
			break;
		}
	}

	// Token: 0x06000403 RID: 1027 RVA: 0x0005678C File Offset: 0x0005498C
	public void RecvAddSoldier(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = MP.ReadByte(-1);
		int num = (int)(b * 4 + b2);
		this.SoldierQuantity = MP.ReadUInt(-1);
		this.RoleAttr.m_Soldier[num] += this.SoldierQuantity;
		this.SoldierTotal += (long)((ulong)this.SoldierQuantity);
		this.Resource[0].SetResource(MP.ReadUInt(-1), MP.ReadLong(-1));
		DataManager.Instance.SetQueueBarData(EQueueBarIndex.Training, false, 0L, 0u);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Barrack, 1, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Barrack, 2, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_DevelopmentDetails, 0, 0);
		GameManager.OnRefresh(NetworkNews.Refresh_Soldier, null);
		GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
		GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
		SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort)(num + 1));
		GUIManager.Instance.MsgStr.ClearString();
		GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint)recordByKey.Name));
		GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3856u));
		GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 2, true);
		this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, (byte)num);
		DataManager.FBMissionDataManager.CheckHUDMsg(11);
	}

	// Token: 0x06000404 RID: 1028 RVA: 0x000568F0 File Offset: 0x00054AF0
	public void RecvCanceltraining(MessagePacket MP)
	{
		for (int i = 0; i < 5; i++)
		{
			this.Resource[i].Stock = MP.ReadUInt(-1);
		}
		DataManager.Instance.SetQueueBarData(EQueueBarIndex.Training, false, 0L, 0u);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Barrack, 1, 0);
		GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
		GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
	}

	// Token: 0x06000405 RID: 1029 RVA: 0x00056954 File Offset: 0x00054B54
	public void RecvTroopdismiss(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = MP.ReadByte(-1);
		int num = (int)(b * 4 + b2);
		this.SoldierQuantity = MP.ReadUInt(-1);
		this.RoleAttr.m_Soldier[num] -= this.SoldierQuantity;
		this.SoldierTotal -= (long)((ulong)this.SoldierQuantity);
		this.Resource[0].SetResource(MP.ReadUInt(-1), MP.ReadLong(-1));
		SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort)(num + 1));
		GUIManager.Instance.MsgStr.ClearString();
		GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint)recordByKey.Name));
		GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)this.SoldierQuantity), 1, true);
		GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(5789u));
		GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 255, true);
		GameManager.OnRefresh(NetworkNews.Refresh_Soldier, null);
		GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
		GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
		this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, (byte)num);
	}

	// Token: 0x06000406 RID: 1030 RVA: 0x00056A90 File Offset: 0x00054C90
	public void RecvImmediately(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 == 0)
		{
			GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eImmediately);
			byte b3 = MP.ReadByte(-1);
			byte b4 = MP.ReadByte(-1);
			int num = (int)(b3 * 4 + b4);
			this.SoldierQuantity = MP.ReadUInt(-1);
			this.RoleAttr.m_Soldier[num] += this.SoldierQuantity;
			this.SoldierTotal += (long)((ulong)this.SoldierQuantity);
			for (int i = 0; i < 5; i++)
			{
				this.Resource[i].Stock = MP.ReadUInt(-1);
			}
			this.Resource[0].SetResource(this.Resource[0].Stock, MP.ReadLong(-1));
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Barrack, 2, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Barrack_Soldier, 1, 0);
			GameManager.OnRefresh(NetworkNews.Refresh_Soldier, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
			SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort)(num + 1));
			GUIManager.Instance.MsgStr.ClearString();
			GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint)recordByKey.Name));
			GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3856u));
			GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 2, true);
			this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, (byte)num);
			DataManager.FBMissionDataManager.CheckHUDMsg(11);
		}
	}

	// Token: 0x06000407 RID: 1031 RVA: 0x00056C40 File Offset: 0x00054E40
	public void RecvFinishtraining(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 == 0)
		{
			GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eImmediately);
			byte b3 = MP.ReadByte(-1);
			byte b4 = MP.ReadByte(-1);
			int num = (int)(b3 * 4 + b4);
			this.SoldierQuantity = MP.ReadUInt(-1);
			this.RoleAttr.m_Soldier[num] += this.SoldierQuantity;
			this.SoldierTotal += (long)((ulong)this.SoldierQuantity);
			this.Resource[0].SetResource(MP.ReadUInt(-1), MP.ReadLong(-1));
			DataManager.Instance.SetQueueBarData(EQueueBarIndex.Training, false, 0L, 0u);
			GameManager.OnRefresh(NetworkNews.Refresh_Soldier, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
			SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort)(num + 1));
			GUIManager.Instance.MsgStr.ClearString();
			GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint)recordByKey.Name));
			GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3856u));
			GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 2, true);
			this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, (byte)num);
		}
	}

	// Token: 0x06000408 RID: 1032 RVA: 0x00056DA8 File Offset: 0x00054FA8
	public void InitMarchData()
	{
		for (int i = 0; i < 8; i++)
		{
			this.MarchEventData[i].Type = EMarchEventType.EMET_Standby;
			for (int j = 0; j < 5; j++)
			{
				this.MarchEventData[i].HeroID[j] = 0;
			}
			for (int k = 0; k < 4; k++)
			{
				for (int l = 0; l < 4; l++)
				{
					this.MarchEventData[i].TroopData[k][l] = 0u;
				}
			}
			this.MarchEventData[i].Point.zoneID = 0;
			this.MarchEventData[i].Point.pointID = 0;
			for (int m = 0; m < 5; m++)
			{
				this.MarchEventData[i].ResourceGetCount[m] = 0u;
			}
			this.MarchEventData[i].Crystal = 0u;
			this.MarchEventData[i].MaxOverLoad = 0u;
			this.MarchEventData[i].PointKind = POINT_KIND.PK_NONE;
			this.MarchEventData[i].DesPointLevel = 1;
			this.MarchEventData[i].DesPlayerName = string.Empty;
			this.MarchEventData[i].bRallyHost = 0;
		}
		for (int n = 0; n < 8; n++)
		{
			this.MarchEventTime[n].BeginTime = 0L;
			this.MarchEventTime[n].RequireTime = 0u;
			this.RallyCountDown[n].BeginTime = 0L;
			this.RallyCountDown[n].RequireTime = 0u;
			this.JoinedRallyDataType[n].MarchIndex = 0;
			this.JoinedRallyDataType[n].State = 0;
			this.JoinedRallyDataType[n].MarchEventTime.BeginTime = 0L;
			this.JoinedRallyDataType[n].MarchEventTime.RequireTime = 0u;
			this.JoinedRallyDataType[n].RallyPoint.zoneID = 0;
			this.JoinedRallyDataType[n].RallyPoint.pointID = 0;
			if (this.MarchEventData[n].Type > EMarchEventType.EMET_RallyStanby)
			{
				this.SetQueueBarData(EQueueBarIndex.MarchingBegin + n, false, this.MarchEventTime[n].BeginTime, this.MarchEventTime[n].RequireTime);
			}
		}
		this.CheckTroolCount();
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
	}

	// Token: 0x06000409 RID: 1033 RVA: 0x00057048 File Offset: 0x00055248
	public void RecvMarchData(MessagePacket MP)
	{
		this.MaxMarchEventNum = MP.ReadByte(-1);
		byte b = MP.ReadByte(-1);
		this.InitMarchData();
		for (int i = 0; i < (int)b; i++)
		{
			byte b2 = MP.ReadByte(-1);
			if ((int)b2 >= this.MarchEventData.Length)
			{
				return;
			}
			this.MarchEventData[(int)b2].Type = (EMarchEventType)MP.ReadByte(-1);
			for (int j = 0; j < 5; j++)
			{
				ushort num = MP.ReadUShort(-1);
				this.MarchEventData[(int)b2].HeroID[j] = num;
				if (num != 0)
				{
					this.TempFightHeroID[(int)num] = 1;
				}
			}
			for (int k = 0; k < 4; k++)
			{
				for (int l = 0; l < 4; l++)
				{
					this.MarchEventData[(int)b2].TroopData[k][l] = MP.ReadUInt(-1);
				}
			}
			this.MarchEventData[(int)b2].Point.zoneID = MP.ReadUShort(-1);
			this.MarchEventData[(int)b2].Point.pointID = MP.ReadByte(-1);
			for (int m = 0; m < 5; m++)
			{
				this.MarchEventData[(int)b2].ResourceGetCount[m] = MP.ReadUInt(-1);
			}
			this.MarchEventData[(int)b2].Crystal = MP.ReadUInt(-1);
			this.MarchEventData[(int)b2].MaxOverLoad = MP.ReadUInt(-1);
			this.MarchEventData[(int)b2].PointKind = (POINT_KIND)MP.ReadByte(-1);
			this.MarchEventData[(int)b2].DesPointLevel = MP.ReadByte(-1);
			this.MarchEventData[(int)b2].DesPlayerName = MP.ReadString(13, -1);
			this.MarchEventTime[(int)b2].BeginTime = MP.ReadLong(-1);
			this.MarchEventTime[(int)b2].RequireTime = MP.ReadUInt(-1);
			if (this.MarchEventData[(int)b2].Type >= EMarchEventType.EMET_RallyStanby && this.MarchEventData[(int)b2].Type != EMarchEventType.EMET_RallyStanby && this.MarchEventData[(int)b2].Type != EMarchEventType.EMET_RallyAttack)
			{
				this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b2, true, this.MarchEventTime[(int)b2].BeginTime, this.MarchEventTime[(int)b2].RequireTime);
				DataManager.Instance.SetRecvQueueBarData((int)(2 + b2));
			}
			this.MarchEventData[(int)b2].bRallyHost = MP.ReadByte(-1);
		}
		this.SetFightHeroData();
		this.CheckTroolCount();
		GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_DevelopmentDetails, 2, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
		Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
		if (door)
		{
			door.m_GroundInfo.UpdateUI(0, 0);
		}
		this.SetFightHeroData();
		GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
		this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, byte.MaxValue);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Expedition, 4, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_FootBall, 1, 255);
	}

	// Token: 0x0600040A RID: 1034 RVA: 0x0005738C File Offset: 0x0005558C
	public void RecvTroopMarch(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = 0;
		switch (b)
		{
		case 0:
			b2 = MP.ReadByte(-1);
			if (b2 >= 8)
			{
				return;
			}
			this.MarchEventData[(int)b2].Type = (EMarchEventType)MP.ReadByte(-1);
			if (this.MarchEventData[(int)b2].Type >= EMarchEventType.EMET_AttackMarching && this.MarchEventData[(int)b2].Type <= EMarchEventType.EMET_RallyAttack && this.MarchEventData[(int)b2].Type != EMarchEventType.EMET_GatherMarching && this.MarchEventData[(int)b2].Type != EMarchEventType.EMET_CampMarching)
			{
				this.CancelShieldItemBuff();
				if (this.MarchEventData[(int)b2].Type == EMarchEventType.EMET_RallyMarching)
				{
					FBAdvanceManager.Instance.TriggerFbUniqueEvent(EFBEvent.FIRST_RALLY);
				}
			}
			for (int i = 0; i < 5; i++)
			{
				ushort num = MP.ReadUShort(-1);
				this.MarchEventData[(int)b2].HeroID[i] = num;
				if (num != 0)
				{
					this.TempFightHeroID[(int)num] = 1;
				}
			}
			for (int j = 0; j < 4; j++)
			{
				for (int k = 0; k < 4; k++)
				{
					this.MarchEventData[(int)b2].TroopData[j][k] = MP.ReadUInt(-1);
					this.RoleAttr.m_Soldier[j * 4 + k] -= this.MarchEventData[(int)b2].TroopData[j][k];
					this.SoldierTotal -= (long)((ulong)this.MarchEventData[(int)b2].TroopData[j][k]);
				}
			}
			this.MarchEventData[(int)b2].Point.zoneID = MP.ReadUShort(-1);
			this.MarchEventData[(int)b2].Point.pointID = MP.ReadByte(-1);
			this.MarchEventTime[(int)b2].BeginTime = MP.ReadLong(-1);
			this.MarchEventTime[(int)b2].RequireTime = MP.ReadUInt(-1);
			this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b2, true, this.MarchEventTime[(int)b2].BeginTime, this.MarchEventTime[(int)b2].RequireTime);
			this.MarchEventData[(int)b2].PointKind = (POINT_KIND)MP.ReadByte(-1);
			this.MarchEventData[(int)b2].DesPointLevel = MP.ReadByte(-1);
			this.MarchEventData[(int)b2].DesPlayerName = MP.ReadString(13, -1);
			DataManager.msgBuffer[0] = 81;
			GameConstants.GetBytes((ushort)b2, DataManager.msgBuffer, 1);
			GameManager.notifyObservers(1, 0, DataManager.msgBuffer);
			if (this.MarchEventData[(int)b2].Type == EMarchEventType.EMET_GatherMarching)
			{
				AFAdvanceManager.Instance.TriggerAfAdvEvent(EAppsFlayerEvent.GATHER_ONCE);
				if (this.MarchEventData[(int)b2].PointKind == POINT_KIND.PK_WOOD)
				{
					AFAdvanceManager.Instance.CheckGatherTimberUnbroken();
				}
			}
			if (this.MarchEventData[(int)b2].Type == EMarchEventType.EMET_AttackMarching && this.MarchEventData[(int)b2].PointKind == POINT_KIND.PK_CITY)
			{
				AFAdvanceManager.Instance.TriggerAfAdvEvent(EAppsFlayerEvent.ATTACK_OTHERTURF);
			}
			break;
		case 1:
			GUIManager.Instance.MsgStr.ClearString();
			GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)DataManager.Instance.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_MARCH_NUM)), 1, false);
			GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3959u));
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
			break;
		case 2:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(9769u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
			break;
		case 3:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(9771u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
			break;
		case 4:
		case 5:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(645u), null, null, 0, 0, false, false, false, false, false);
			break;
		case 6:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826u), this.mStringTable.GetStringByID(119u), this.mStringTable.GetStringByID(4828u), null, 0, 0, false, false, false, false, false);
			break;
		case 7:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(9772u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
			break;
		case 8:
		{
			ushort yolkIDbyMapID = DataManager.mapDataController.getYolkIDbyMapID(this.mMapId, DataManager.MapDataController.FocusKingdomID);
			GUIManager.Instance.MsgStr.ClearString();
			GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName(yolkIDbyMapID, 0));
			GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8599u));
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565u), null, 0, 0, false, false, false, false, false);
			break;
		}
		}
		this.SetFightHeroData();
		GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
		this.CheckTroolCount();
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
		GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_Expedition);
		this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, b2);
		this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
		GUIManager.Instance.HideUILock(EUILock.Expedition);
	}

	// Token: 0x0600040B RID: 1035 RVA: 0x000579DC File Offset: 0x00055BDC
	public void RecvTroopReturn(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b >= 8)
		{
			return;
		}
		this.MarchEventData[(int)b].Type = (EMarchEventType)MP.ReadByte(-1);
		if (this.MarchEventData[(int)b].Type == EMarchEventType.EMET_RallyReturn)
		{
			GameConstants.MapIDToPointCode(this.RoleAttr.CapitalPoint, out this.MarchEventData[(int)b].Point.zoneID, out this.MarchEventData[(int)b].Point.pointID);
		}
		this.MarchEventTime[(int)b].BeginTime = MP.ReadLong(-1);
		this.MarchEventTime[(int)b].RequireTime = MP.ReadUInt(-1);
		this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, true, this.MarchEventTime[(int)b].BeginTime, this.MarchEventTime[(int)b].RequireTime);
		this.SetQueueBarData(EQueueBarIndex.JoinedRallyBegin + (int)b, false, 0L, 0u);
		GUIManager.Instance.HideUILock(EUILock.Expedition);
		this.CheckTroolCount();
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, -1, (int)(2 + b));
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0, 0);
	}

	// Token: 0x0600040C RID: 1036 RVA: 0x00057B10 File Offset: 0x00055D10
	public void RecvTroopHome(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b >= 8)
		{
			return;
		}
		if (this.MarchEventData[(int)b].Type == EMarchEventType.EMET_AttackReturn || this.MarchEventData[(int)b].Type == EMarchEventType.EMET_AttackRetreat)
		{
			GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(7730u), 14, true);
		}
		if (this.MarchEventData[(int)b].Type == EMarchEventType.EMET_CampReturn)
		{
			if (this.MarchEventData[(int)b].PointKind == POINT_KIND.PK_YOLK)
			{
				GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(9318u), 14, true);
			}
			else if (this.MarchEventData[(int)b].bRallyHost == 1)
			{
				GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(9731u), 14, true);
			}
			else
			{
				GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(7731u), 14, true);
			}
		}
		if (this.MarchEventData[(int)b].Type == EMarchEventType.EMET_GatherReturn)
		{
			GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(7732u), 14, true);
		}
		if (this.MarchEventData[(int)b].Type == EMarchEventType.EMET_RallyReturn || this.MarchEventData[(int)b].Type == EMarchEventType.EMET_RallyRetreat)
		{
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(494u), 14, true);
		}
		if (this.MarchEventData[(int)b].Type == EMarchEventType.EMET_InfroceReturn)
		{
			GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(4849u), 14, true);
		}
		this.MarchEventData[(int)b].bRallyHost = 0;
		this.MarchEventData[(int)b].Type = EMarchEventType.EMET_Standby;
		this.MarchEventData[(int)b].Point.zoneID = 2048;
		this.SoldierTotal = 0L;
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				this.MarchEventData[(int)b].TroopData[i][j] = MP.ReadUInt(-1);
				this.RoleAttr.m_Soldier[i * 4 + j] = this.MarchEventData[(int)b].TroopData[i][j];
				this.SoldierTotal += (long)((ulong)this.RoleAttr.m_Soldier[i * 4 + j]);
			}
			Array.Clear(this.MarchEventData[(int)b].TroopData[i], 0, this.MarchEventData[(int)b].TroopData[i].Length);
		}
		for (int k = 0; k < 5; k++)
		{
			this.MarchEventData[(int)b].ResourceGetCount[k] = MP.ReadUInt(-1);
			DataManager.instance.Resource[k].Stock = this.MarchEventData[(int)b].ResourceGetCount[k];
		}
		this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, false, this.MarchEventTime[(int)b].BeginTime, this.MarchEventTime[(int)b].RequireTime);
		this.SetQueueBarData(EQueueBarIndex.JoinedRallyBegin + (int)b, false, 0L, 0u);
		for (int l = 0; l < 5; l++)
		{
			uint num = (uint)this.MarchEventData[(int)b].HeroID[l];
			if ((ulong)num < (ulong)((long)this.TempFightHeroID.Length))
			{
				this.TempFightHeroID[(int)((UIntPtr)num)] = 0;
				this.MarchEventData[(int)b].HeroID[l] = 0;
			}
		}
		this.CheckTroolCount();
		this.SetFightHeroData();
		DataManager.missionDataManager.CheckResourceCollect();
		GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
		this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, b);
		this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_DevelopmentDetails, 2, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_HeroList_Soldier2, 0, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_BattleHeroSelect, 2, 0);
		GameManager.OnRefresh(NetworkNews.Refresh_Soldier, null);
		GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
		GameManager.OnRefresh(NetworkNews.Refresh_TroopHome, null);
		if (this.MarchEventData[(int)b].PointKind == POINT_KIND.PK_YOLK)
		{
			GUIManager.Instance.HideUILock(EUILock.Expedition);
		}
	}

	// Token: 0x0600040D RID: 1037 RVA: 0x00057F84 File Offset: 0x00056184
	public void RecvTroopCamping(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b >= 8)
		{
			return;
		}
		this.MarchEventData[(int)b].Type = EMarchEventType.EMET_Camp;
		this.MarchEventData[(int)b].PointKind = POINT_KIND.PK_CAMP;
		this.MarchEventData[(int)b].Point.zoneID = MP.ReadUShort(-1);
		this.MarchEventData[(int)b].Point.pointID = MP.ReadByte(-1);
		this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, false, this.MarchEventTime[(int)b].BeginTime, this.MarchEventTime[(int)b].RequireTime);
		GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(7728u), 13, true);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
	}

	// Token: 0x0600040E RID: 1038 RVA: 0x0005805C File Offset: 0x0005625C
	public void RecvGatheringEvent(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b >= 8)
		{
			return;
		}
		this.MarchEventData[(int)b].Type = EMarchEventType.EMET_Gathering;
		this.MarchEventTime[(int)b].BeginTime = MP.ReadLong(-1);
		this.MarchEventTime[(int)b].RequireTime = MP.ReadUInt(-1);
		this.MarchEventData[(int)b].MaxOverLoad = MP.ReadUInt(-1);
		this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, false, this.MarchEventTime[(int)b].BeginTime, this.MarchEventTime[(int)b].RequireTime);
		GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(7729u), 13, true);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
		Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
		if (door)
		{
			door.m_GroundInfo.UpdateUI(0, 0);
		}
	}

	// Token: 0x0600040F RID: 1039 RVA: 0x00058158 File Offset: 0x00056358
	public void RecvTroopeliminate(MessagePacket MP)
	{
		ushort leaderID = DataManager.instance.GetLeaderID();
		byte b = MP.ReadByte(-1);
		if (b >= 8)
		{
			return;
		}
		this.MarchEventData[(int)b].bRallyHost = 0;
		this.MarchEventData[(int)b].Type = EMarchEventType.EMET_Standby;
		for (int i = 0; i < 5; i++)
		{
			ushort num = this.MarchEventData[(int)b].HeroID[i];
			if (num != 0)
			{
				if (num == leaderID)
				{
					if (DataManager.Instance.beCaptured.nowCaptureStat == LoadCaptureState.None)
					{
						this.TempFightHeroID[(int)num] = 0;
					}
				}
				else
				{
					this.TempFightHeroID[(int)num] = 0;
				}
			}
			this.MarchEventData[(int)b].HeroID[i] = 0;
		}
		for (int j = 0; j < 4; j++)
		{
			Array.Clear(this.MarchEventData[(int)b].TroopData[j], 0, this.MarchEventData[(int)b].TroopData[j].Length);
		}
		Vector2 in_mapPos = GameConstants.getTileMapPosbySpriteID(this.RoleAttr.CapitalPoint);
		in_mapPos = GameConstants.MapPosToPointCode(in_mapPos);
		this.MarchEventData[(int)b].Point.zoneID = (ushort)in_mapPos.x;
		this.MarchEventData[(int)b].Point.pointID = (byte)in_mapPos.y;
		for (int k = 0; k < 5; k++)
		{
			this.MarchEventData[(int)b].ResourceGetCount[k] = 0u;
		}
		this.MarchEventData[(int)b].Crystal = 0u;
		this.MarchEventTime[(int)b].BeginTime = 0L;
		this.MarchEventTime[(int)b].RequireTime = 0u;
		this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, false, 0L, 0u);
		this.SetQueueBarData(EQueueBarIndex.JoinedRallyBegin + (int)b, false, 0L, 0u);
		this.CheckTroolCount();
		this.SetFightHeroData();
		GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_DevelopmentDetails, 2, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_HeroList_Soldier2, 0, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0, 0);
		this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, b);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Expedition, 4, 0);
	}

	// Token: 0x06000410 RID: 1040 RVA: 0x00058398 File Offset: 0x00056598
	public void TroopeTakeBack(int mapPointID, EMarchEventType marchType)
	{
		if (marchType < EMarchEventType.EMET_AttackMarching && GUIManager.Instance.ShowUILock(EUILock.Expedition))
		{
			for (int i = 0; i < (int)this.MaxMarchEventNum; i++)
			{
				if (this.MarchEventData[i].Type == marchType && GameConstants.PointCodeToMapID(this.MarchEventData[i].Point.zoneID, this.MarchEventData[i].Point.pointID) == mapPointID)
				{
					MessagePacket messagePacket = new MessagePacket(1024);
					messagePacket.Protocol = Protocol._MSG_REQUEST_TROOPRETURN;
					messagePacket.AddSeqId();
					messagePacket.Add(i);
					messagePacket.Send(false);
					break;
				}
			}
		}
	}

	// Token: 0x06000411 RID: 1041 RVA: 0x00058454 File Offset: 0x00056654
	public void TroopeTakeBack(uint lineTableID)
	{
		MapLine mapLine = DataManager.MapDataController.MapLineTable[(int)lineTableID];
		for (byte b = 0; b < this.MaxMarchEventNum; b += 1)
		{
			if (GameConstants.IsMarchDeparture(this.MarchEventData[(int)b].Type) && this.MarchEventData[(int)b].Type == (EMarchEventType)mapLine.lineFlag && (ulong)this.MarchEventTime[(int)b].RequireTime == (ulong)mapLine.during && (this.MarchEventData[(int)b].Type == EMarchEventType.EMET_RallyAttack || DataManager.CompareStr(mapLine.playerName, this.RoleAttr.Name) == 0))
			{
				this.TroopeTakeBack(b);
				break;
			}
		}
	}

	// Token: 0x06000412 RID: 1042 RVA: 0x00058520 File Offset: 0x00056720
	public byte GetMarchInxByLineTableID(uint lineTableID)
	{
		byte result = byte.MaxValue;
		MapLine mapLine = DataManager.MapDataController.MapLineTable[(int)lineTableID];
		for (byte b = 0; b < this.MaxMarchEventNum; b += 1)
		{
			if (this.MarchEventData[(int)b].Type > EMarchEventType.EMET_RallyStanby && this.MarchEventData[(int)b].Type <= EMarchEventType.EMET_FooballRetreat && this.MarchEventData[(int)b].Type == (EMarchEventType)mapLine.lineFlag && this.MarchEventTime[(int)b].BeginTime == (long)mapLine.begin && (ulong)this.MarchEventTime[(int)b].RequireTime == (ulong)mapLine.during && (this.MarchEventData[(int)b].Type == EMarchEventType.EMET_RallyAttack || DataManager.CompareStr(mapLine.playerName, this.RoleAttr.Name) == 0))
			{
				result = b;
				break;
			}
		}
		return result;
	}

	// Token: 0x06000413 RID: 1043 RVA: 0x0005861C File Offset: 0x0005681C
	public void TroopeTakeBack(byte MarchEventID)
	{
		GUIManager.Instance.UseOrSpend(1001, this.mStringTable.GetStringByID(1505u), (ushort)MarchEventID, 0, 0, UseOrSpendType.UST_DIAMOND_NORMAL, null, null, null, 0);
	}

	// Token: 0x06000414 RID: 1044 RVA: 0x00058654 File Offset: 0x00056854
	public void UpdateMarchEventTime(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b >= 8)
		{
			return;
		}
		this.MarchEventTime[(int)b].BeginTime = MP.ReadLong(-1);
		this.MarchEventTime[(int)b].RequireTime = MP.ReadUInt(-1);
		this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, true, this.MarchEventTime[(int)b].BeginTime, this.MarchEventTime[(int)b].RequireTime);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
	}

	// Token: 0x06000415 RID: 1045 RVA: 0x000586DC File Offset: 0x000568DC
	public void UpdateJoinedMarchEventTime(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b >= 8)
		{
			return;
		}
		this.JoinedRallyDataType[(int)b].MarchEventTime.BeginTime = MP.ReadLong(-1);
		this.JoinedRallyDataType[(int)b].MarchEventTime.RequireTime = MP.ReadUInt(-1);
		this.MarchEventTime[(int)b].BeginTime = this.JoinedRallyDataType[(int)b].MarchEventTime.BeginTime;
		this.MarchEventTime[(int)b].RequireTime = this.JoinedRallyDataType[(int)b].MarchEventTime.RequireTime;
		this.MarchEventData[(int)b].PointKind = POINT_KIND.PK_CITY;
		this.JoinedRallyDataType[(int)b].State = 2;
		this.SetQueueBarData(EQueueBarIndex.JoinedRallyBegin + (int)b, true, this.MarchEventTime[(int)b].BeginTime, this.MarchEventTime[(int)b].RequireTime);
		this.CheckTroolCount();
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
		GameManager.OnRefresh(NetworkNews.Refresh_QBarTime, null);
	}

	// Token: 0x06000416 RID: 1046 RVA: 0x000587F0 File Offset: 0x000569F0
	public void RecvUpdateMarctEventData(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b >= 8)
		{
			return;
		}
		EUpdateTroopType eupdateTroopType = (EUpdateTroopType)MP.ReadByte(-1);
		if (eupdateTroopType == EUpdateTroopType.EUTT_Hero)
		{
			for (int i = 0; i < 5; i++)
			{
				this.MarchEventData[(int)b].HeroID[i] = MP.ReadUShort(-1);
			}
		}
		if (eupdateTroopType == EUpdateTroopType.EUTT_TroopNum)
		{
			for (int j = 0; j < 4; j++)
			{
				for (int k = 0; k < 4; k++)
				{
					this.MarchEventData[(int)b].TroopData[j][k] = MP.ReadUInt(-1);
				}
			}
		}
		if (eupdateTroopType == EUpdateTroopType.EUTT_HeroAndTroop)
		{
			for (int l = 0; l < 5; l++)
			{
				this.MarchEventData[(int)b].HeroID[l] = MP.ReadUShort(-1);
			}
			for (int m = 0; m < 4; m++)
			{
				for (int n = 0; n < 4; n++)
				{
					this.MarchEventData[(int)b].TroopData[m][n] = MP.ReadUInt(-1);
				}
			}
		}
		if (eupdateTroopType == EUpdateTroopType.EUTT_Point)
		{
			this.MarchEventData[(int)b].Point.zoneID = MP.ReadUShort(-1);
			this.MarchEventData[(int)b].Point.pointID = MP.ReadByte(-1);
		}
		this.CheckTroolCount();
		this.SetFightHeroData();
		GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_DevelopmentDetails, 1, (int)b);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_DevelopmentDetails, 2, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
		this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, b);
		GameManager.OnRefresh(NetworkNews.Refresh_Soldier, null);
	}

	// Token: 0x06000417 RID: 1047 RVA: 0x000589A8 File Offset: 0x00056BA8
	public int getMapIDbyGroupID(byte groupID)
	{
		Vector2 vector = Vector2.zero;
		Vector2 a = Vector2.zero;
		float num;
		if (groupID == 9)
		{
			int mapID = GameConstants.PointCodeToMapID(PetManager.Instance.m_PetMarchEventData.Point.zoneID, PetManager.Instance.m_PetMarchEventData.Point.pointID);
			vector = GameConstants.getTileMapPosbyMapID(this.RoleAttr.CapitalPoint);
			a = GameConstants.getTileMapPosbyMapID(mapID);
			vector.x *= 2f;
			a.x *= 2f;
			num = Mathf.Max(0f, (float)(this.ServerTime - PetManager.Instance.m_PetMarchEventData.MarchEventTime.BeginTime));
			num = ((PetManager.Instance.m_PetMarchEventData.MarchEventTime.RequireTime != 0u) ? (num / PetManager.Instance.m_PetMarchEventData.MarchEventTime.RequireTime) : 1f);
			vector += (a - vector) * num;
			vector.x *= 0.5f;
			return GameConstants.TileMapPosToMapID((int)Mathf.Round(vector.x), (int)Mathf.Round(vector.y));
		}
		if (groupID == 8)
		{
			vector = GameConstants.getTileMapPosbyMapID(this.beCaptured.MapID);
			a = GameConstants.getTileMapPosbyMapID(this.RoleAttr.CapitalPoint);
			vector.x *= 2f;
			a.x *= 2f;
			num = Mathf.Max(0f, (float)(this.ServerTime - DataManager.Instance.beCaptured.StartActionTime));
			num = ((DataManager.Instance.beCaptured.TotalTime != 0u) ? (num / DataManager.Instance.beCaptured.TotalTime) : 1f);
			vector += (a - vector) * num;
			vector.x *= 0.5f;
			return GameConstants.TileMapPosToMapID((int)Mathf.Round(vector.x), (int)Mathf.Round(vector.y));
		}
		if (this.MarchEventData[(int)groupID].Type == EMarchEventType.EMET_RallyAttack)
		{
			vector = GameConstants.getTileMapPosbyPointCode(this.JoinedRallyDataType[(int)groupID].RallyPoint.zoneID, this.JoinedRallyDataType[(int)groupID].RallyPoint.pointID);
			a = GameConstants.getTileMapPosbyPointCode(this.MarchEventData[(int)groupID].Point.zoneID, this.MarchEventData[(int)groupID].Point.pointID);
		}
		else if (this.MarchEventData[(int)groupID].Type < EMarchEventType.EMET_AttackReturn)
		{
			vector = GameConstants.getTileMapPosbyMapID(this.RoleAttr.CapitalPoint);
			a = GameConstants.getTileMapPosbyPointCode(this.MarchEventData[(int)groupID].Point.zoneID, this.MarchEventData[(int)groupID].Point.pointID);
		}
		else
		{
			if (this.MarchEventData[(int)groupID].Type == EMarchEventType.EMET_RallyReturn)
			{
				return this.RoleAttr.CapitalPoint;
			}
			vector = GameConstants.getTileMapPosbyPointCode(this.MarchEventData[(int)groupID].Point.zoneID, this.MarchEventData[(int)groupID].Point.pointID);
			a = GameConstants.getTileMapPosbyMapID(this.RoleAttr.CapitalPoint);
		}
		vector.x *= 2f;
		a.x *= 2f;
		num = Mathf.Max(0f, (float)(this.ServerTime - this.MarchEventTime[(int)groupID].BeginTime));
		num = ((this.MarchEventTime[(int)groupID].RequireTime != 0u) ? (num / this.MarchEventTime[(int)groupID].RequireTime) : 1f);
		vector += (a - vector) * num;
		vector.x *= 0.5f;
		return GameConstants.TileMapPosToMapID((int)Mathf.Round(vector.x), (int)Mathf.Round(vector.y));
	}

	// Token: 0x06000418 RID: 1048 RVA: 0x00058DE0 File Offset: 0x00056FE0
	public void MoveTo(ushort kingdomID, int mapPointID = -1)
	{
		ushort num = 0;
		if (kingdomID != DataManager.mapDataController.OtherKingdomData.kingdomID)
		{
			bool flag = ActivityManager.Instance.IsInKvK(kingdomID, false);
			bool flag2 = ActivityManager.Instance.KOWData.EventState == EActivityState.EAS_Run && kingdomID == DataManager.mapDataController.FocusKingdomID && DataManager.mapDataController.FocusKingdomPeriod == KINGDOM_PERIOD.KP_WORLD_WAR;
			bool flag3 = ActivityManager.Instance.NobilityActivityData.EventState == EActivityState.EAS_Run && kingdomID == DataManager.mapDataController.FocusKingdomID && kingdomID == ActivityManager.Instance.KOWKingdomID;
			if (kingdomID == DataManager.mapDataController.kingdomData.kingdomID || flag || flag2 || flag3)
			{
				if (kingdomID != DataManager.mapDataController.kingdomData.kingdomID)
				{
					if (flag)
					{
						if (DataManager.mapDataController.OtherKingdomData.kingdomPeriod != KINGDOM_PERIOD.KP_KVK)
						{
							GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(952u), 255, true);
							return;
						}
						EActivityState kvKState = ActivityManager.Instance.GetKvKState();
						if (kvKState > EActivityState.EAS_Run && kvKState < EActivityState.EAS_ReplayRanking && kvKState != EActivityState.EAS_Prepare)
						{
							GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(985u), 255, true);
							return;
						}
					}
					if (flag2)
					{
						if (mapPointID < 0)
						{
							GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(952u), 255, true);
							return;
						}
						if (GUIManager.Instance.BuildingData.GetBuildData(8, 0).Level < 25)
						{
							CString cstring = StringManager.Instance.StaticString1024();
							cstring.ClearString();
							cstring.IntToFormat(25L, 1, false);
							cstring.AppendFormat(this.mStringTable.GetStringByID(9167u));
							GUIManager.Instance.AddHUDMessage(cstring.ToString(), 255, true);
							return;
						}
						num = GameConstants.WorldWarTeleportItemID;
					}
				}
				else if (DataManager.mapDataController.OtherKingdomData.kingdomPeriod != KINGDOM_PERIOD.KP_KVK && DataManager.mapDataController.OtherKingdomData.kingdomPeriod != KINGDOM_PERIOD.KP_WORLD_WAR)
				{
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(952u), 255, true);
					return;
				}
				if (mapPointID < 0)
				{
					num = GameConstants.RandomTeleportItemID;
				}
				else if (num != GameConstants.WorldWarTeleportItemID)
				{
					num = GameConstants.AdvanceTeleportItemID;
				}
			}
			else
			{
				if (flag || (DataManager.mapDataController.OtherKingdomData.kingdomID != DataManager.mapDataController.kingdomData.kingdomID && DataManager.mapDataController.OtherKingdomData.kingdomPeriod != KINGDOM_PERIOD.KP_WORLD_WAR) || DataManager.mapDataController.OtherKingdomData.kingdomPeriod == KINGDOM_PERIOD.KP_KVK || kingdomID == ActivityManager.Instance.KOWKingdomID)
				{
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(953u), 255, true);
					return;
				}
				if (!this.IsNewbie())
				{
					UIImmigration.kingdomID = (int)kingdomID;
					UIImmigration.mapPointID = mapPointID;
					this.RequsetWorldTeleportItemCount();
					return;
				}
				num = GameConstants.NewbieTeleportItemID;
				if (this.GetCurItemQuantity(num, 0) <= 0)
				{
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(615u), 0, null, 0, 0, false, false, false, false, false);
					return;
				}
			}
			for (int i = 0; i < (int)this.MaxMarchEventNum; i++)
			{
				if (this.MarchEventData[i].Type != EMarchEventType.EMET_Standby)
				{
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(687u), 0, null, 0, 0, false, false, false, false, false);
					return;
				}
			}
			if ((num == GameConstants.WorldTeleportItemID || num == GameConstants.NewbieTeleportItemID) && this.CheckResources((int)kingdomID | (int)num << 16, mapPointID))
			{
				return;
			}
			if (num == GameConstants.WorldTeleportItemID)
			{
				this.RequsetWorldTeleportItemCount();
				return;
			}
		}
		else
		{
			for (int j = 0; j < (int)this.MaxMarchEventNum; j++)
			{
				if (this.MarchEventData[j].Type > EMarchEventType.EMET_RallyStanby)
				{
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(616u), 0, null, 0, 0, false, false, false, false, false);
					return;
				}
			}
			num = ((!this.IsNewbie() || this.GetCurItemQuantity(GameConstants.NewbieTeleportItemID, 0) <= 0) ? GameConstants.AdvanceTeleportItemID : GameConstants.NewbieTeleportItemID);
		}
		ushort parameter = 0;
		byte parameter2 = 0;
		GameConstants.MapIDToPointCode(mapPointID, out parameter, out parameter2);
		Vector2 tileMapPosbyMapID = GameConstants.getTileMapPosbyMapID(mapPointID);
		CString cstring2 = StringManager.Instance.StaticString1024();
		cstring2.ClearString();
		if (GUIManager.Instance.IsArabic)
		{
			cstring2.StringToFormat(this.mStringTable.GetStringByID(4504u));
			cstring2.IntToFormat((long)kingdomID, 1, false);
			if (num != GameConstants.RandomTeleportItemID)
			{
				cstring2.StringToFormat(this.mStringTable.GetStringByID(4505u));
				cstring2.IntToFormat((long)tileMapPosbyMapID.x, 1, false);
				cstring2.StringToFormat(this.mStringTable.GetStringByID(4506u));
				cstring2.IntToFormat((long)tileMapPosbyMapID.y, 1, false);
				cstring2.AppendFormat("{1}{0} {3}{2} {5}{4}");
			}
			else
			{
				cstring2.AppendFormat("{1}{0}");
			}
		}
		else
		{
			cstring2.StringToFormat(this.mStringTable.GetStringByID(4504u));
			cstring2.IntToFormat((long)kingdomID, 1, false);
			if (num != GameConstants.RandomTeleportItemID)
			{
				cstring2.StringToFormat(this.mStringTable.GetStringByID(4505u));
				cstring2.IntToFormat((long)tileMapPosbyMapID.x, 1, false);
				cstring2.StringToFormat(this.mStringTable.GetStringByID(4506u));
				cstring2.IntToFormat((long)tileMapPosbyMapID.y, 1, false);
				cstring2.AppendFormat("{0}{1} {2}{3} {4}{5}");
			}
			else
			{
				cstring2.AppendFormat("{0}{1}");
			}
		}
		GUIManager.Instance.UseOrSpend(num, this.mStringTable.GetStringByID(4512u), kingdomID, parameter, (ushort)parameter2, UseOrSpendType.UST_DIAMOND_DOUBLE_CHECK, null, null, cstring2.ToString(), 0);
	}

	// Token: 0x06000419 RID: 1049 RVA: 0x00059430 File Offset: 0x00057630
	public bool CheckResources(int kingdomID, int mapPointID)
	{
		uint effectBaseVal = this.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_RESOURCE_PROTCTION);
		RoleBuildingData buildData = GUIManager.Instance.BuildingData.GetBuildData(9, 0);
		BuildLevelRequest buildLevelRequestData = GUIManager.Instance.BuildingData.GetBuildLevelRequestData(9, buildData.Level);
		float num = (10000u + effectBaseVal) / 10000f;
		uint num2 = GameConstants.appCeil(buildLevelRequestData.Value1 * num);
		bool flag = false;
		for (int i = 0; i < this.Resource.Length; i++)
		{
			if (this.Resource[i].Stock > num2)
			{
				flag = true;
				break;
			}
		}
		ushort num3 = (ushort)(kingdomID >> 16);
		if (flag)
		{
			CString cstring = StringManager.Instance.StaticString1024();
			cstring.uLongToFormat((ulong)num2, 1, false);
			if (num3 == GameConstants.WorldTeleportItemID)
			{
				cstring.AppendFormat(this.mStringTable.GetStringByID(959u));
			}
			else
			{
				cstring.AppendFormat(this.mStringTable.GetStringByID(945u));
			}
			GUIManager.Instance.OpenOKCancelBox(11, this.mStringTable.GetStringByID(5893u), cstring.ToString(), kingdomID, mapPointID, this.mStringTable.GetStringByID(3u), this.mStringTable.GetStringByID(4u));
			return true;
		}
		if (num3 == GameConstants.WorldTeleportItemID)
		{
			CString cstring2 = StringManager.Instance.StaticString1024();
			cstring2.ClearString();
			cstring2.Append(this.mStringTable.GetStringByID(958u));
			GUIManager.Instance.OpenOKCancelBox(11, this.mStringTable.GetStringByID(5893u), cstring2.ToString(), kingdomID, mapPointID, this.mStringTable.GetStringByID(3u), this.mStringTable.GetStringByID(4u));
			return true;
		}
		return false;
	}

	// Token: 0x0600041A RID: 1050 RVA: 0x000595F0 File Offset: 0x000577F0
	public void RequsetWorldTeleportItemCount()
	{
		GUIManager.Instance.ShowUILock(EUILock.WorldTeleport);
		this.WorldTeleportItemCount = 0;
		this.WorldTeleportRank = 0;
		MessagePacket messagePacket;
		if (DataManager.MapDataController.FocusKingdomID != DataManager.MapDataController.OtherKingdomData.kingdomID)
		{
			messagePacket = MessagePacket.GetGuestMessagePack();
		}
		else
		{
			messagePacket = new MessagePacket(1024);
		}
		messagePacket.Protocol = Protocol._MSG_REQUEST_WORLD_TELEPORT_ITEM;
		messagePacket.AddSeqId();
		messagePacket.Add(this.RoleAttr.Power);
		messagePacket.Send(false);
	}

	// Token: 0x0600041B RID: 1051 RVA: 0x00059678 File Offset: 0x00057878
	public void RecvWorldTeleportItemCount(int rank, ushort count)
	{
		this.WorldTeleportRank = rank;
		if (this.WorldTeleportRank < 0)
		{
			this.WorldTeleportRank = 0;
			this.WorldTeleportItemCount = 0;
			GUIManager.Instance.HideUILock(EUILock.WorldTeleport);
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(954u), 255, true);
			return;
		}
		count += 1;
		this.WorldTeleportItemCount = count;
		GUIManager.Instance.OpenMenu(EGUIWindow.UI_Immigration, 0, 0, false, true, false);
		GUIManager.Instance.HideUILock(EUILock.WorldTeleport);
	}

	// Token: 0x0600041C RID: 1052 RVA: 0x00059704 File Offset: 0x00057904
	public void SetSBTime(long time, CString tmpS)
	{
		tmpS.ClearString();
		if (GUIManager.Instance.IsArabic)
		{
			if (time >= 0L && time < 60L)
			{
				tmpS.IntToFormat(time, 1, false);
				if (time > 1L)
				{
					tmpS.StringToFormat(this.mStringTable.GetStringByID(446u));
				}
				else
				{
					tmpS.StringToFormat(this.mStringTable.GetStringByID(442u));
				}
			}
			else if (time >= 60L && time < 3600L)
			{
				long num = time / 60L;
				tmpS.IntToFormat(num, 1, false);
				if (num > 1L)
				{
					tmpS.StringToFormat(this.mStringTable.GetStringByID(447u));
				}
				else
				{
					tmpS.StringToFormat(this.mStringTable.GetStringByID(443u));
				}
			}
			else if (time >= 3600L && time < 86400L)
			{
				long num2 = time / 3600L;
				tmpS.IntToFormat(num2, 1, false);
				if (num2 > 1L)
				{
					tmpS.StringToFormat(this.mStringTable.GetStringByID(448u));
				}
				else
				{
					tmpS.StringToFormat(this.mStringTable.GetStringByID(444u));
				}
			}
			else if (time >= 86400L)
			{
				long num3 = time / 86400L;
				tmpS.IntToFormat(num3, 1, false);
				if (num3 > 1L)
				{
					tmpS.StringToFormat(this.mStringTable.GetStringByID(449u));
				}
				else
				{
					tmpS.StringToFormat(this.mStringTable.GetStringByID(445u));
				}
			}
			else
			{
				tmpS.IntToFormat(0L, 1, false);
				tmpS.StringToFormat(this.mStringTable.GetStringByID(442u));
			}
			tmpS.AppendFormat("{0} {1}");
		}
		else if (time >= 0L && time < 60L)
		{
			tmpS.IntToFormat(time, 1, false);
			if (time > 1L)
			{
				tmpS.AppendFormat(this.mStringTable.GetStringByID(446u));
			}
			else
			{
				tmpS.AppendFormat(this.mStringTable.GetStringByID(442u));
			}
		}
		else if (time >= 60L && time < 3600L)
		{
			long num4 = time / 60L;
			tmpS.IntToFormat(num4, 1, false);
			if (num4 > 1L)
			{
				tmpS.AppendFormat(this.mStringTable.GetStringByID(447u));
			}
			else
			{
				tmpS.AppendFormat(this.mStringTable.GetStringByID(443u));
			}
		}
		else if (time >= 3600L && time < 86400L)
		{
			long num5 = time / 3600L;
			tmpS.IntToFormat(num5, 1, false);
			if (num5 > 1L)
			{
				tmpS.AppendFormat(this.mStringTable.GetStringByID(448u));
			}
			else
			{
				tmpS.AppendFormat(this.mStringTable.GetStringByID(444u));
			}
		}
		else if (time >= 86400L)
		{
			long num6 = time / 86400L;
			tmpS.IntToFormat(num6, 1, false);
			if (num6 > 1L)
			{
				tmpS.AppendFormat(this.mStringTable.GetStringByID(449u));
			}
			else
			{
				tmpS.AppendFormat(this.mStringTable.GetStringByID(445u));
			}
		}
		else
		{
			tmpS.IntToFormat(0L, 1, false);
			tmpS.AppendFormat(this.mStringTable.GetStringByID(442u));
		}
	}

	// Token: 0x0600041D RID: 1053 RVA: 0x00059A8C File Offset: 0x00057C8C
	public static bool Save(string fileName, byte[] bytes)
	{
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.AppendFormat("{0}/{1}", Application.persistentDataPath, fileName);
		string path = stringBuilder.ToString();
		if (bytes == null)
		{
			if (File.Exists(path))
			{
				File.Delete(path);
			}
			return true;
		}
		FileStream fileStream = null;
		try
		{
			fileStream = File.Create(path);
		}
		catch (Exception ex)
		{
			Debug.LogError(ex.Message);
			return false;
		}
		fileStream.Write(bytes, 0, bytes.Length);
		fileStream.Close();
		return true;
	}

	// Token: 0x0600041E RID: 1054 RVA: 0x00059B2C File Offset: 0x00057D2C
	public static byte[] Load(string fileName)
	{
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.AppendFormat("{0}/{1}", Application.persistentDataPath, fileName);
		string path = stringBuilder.ToString();
		if (File.Exists(path))
		{
			return File.ReadAllBytes(path);
		}
		return null;
	}

	// Token: 0x0600041F RID: 1055 RVA: 0x00059B6C File Offset: 0x00057D6C
	private static byte[] ToByteArray<T>(T[] source) where T : struct
	{
		GCHandle gchandle = GCHandle.Alloc(source, GCHandleType.Pinned);
		byte[] result;
		try
		{
			IntPtr source2 = gchandle.AddrOfPinnedObject();
			int num = Marshal.SizeOf(typeof(T));
			byte[] array = new byte[source.Length * num];
			Marshal.Copy(source2, array, 0, array.Length);
			result = array;
		}
		finally
		{
			if (gchandle.IsAllocated)
			{
				gchandle.Free();
			}
		}
		return result;
	}

	// Token: 0x06000420 RID: 1056 RVA: 0x00059BF0 File Offset: 0x00057DF0
	private static T[] FromByteArray<T>(byte[] source) where T : struct
	{
		T[] array = new T[source.Length / Marshal.SizeOf(typeof(T))];
		GCHandle gchandle = GCHandle.Alloc(array, GCHandleType.Pinned);
		T[] result;
		try
		{
			IntPtr destination = gchandle.AddrOfPinnedObject();
			Marshal.Copy(source, 0, destination, source.Length);
			result = array;
		}
		finally
		{
			if (gchandle.IsAllocated)
			{
				gchandle.Free();
			}
		}
		return result;
	}

	// Token: 0x06000421 RID: 1057 RVA: 0x00059C70 File Offset: 0x00057E70
	public static int CompareStr(CString StrA, CString StrB)
	{
		if (StrA == StrB)
		{
			return 0;
		}
		if (StrA == null)
		{
			return -1;
		}
		if (StrB == null)
		{
			return 1;
		}
		if (StrA.Length > StrB.Length)
		{
			return 1;
		}
		if (StrB.Length > StrA.Length)
		{
			return -1;
		}
		for (int i = 0; i < StrA.Length; i++)
		{
			if (StrA[i] > StrB[i])
			{
				return 1;
			}
			if (StrA[i] < StrB[i])
			{
				return -1;
			}
		}
		return 0;
	}

	// Token: 0x06000422 RID: 1058 RVA: 0x00059D00 File Offset: 0x00057F00
	public static int CompareStr(string StrA, CString StrB)
	{
		if (StrA == null)
		{
			return -1;
		}
		if (StrB == null)
		{
			return 1;
		}
		if (StrA.Length > StrB.Length)
		{
			return 1;
		}
		if (StrB.Length > StrA.Length)
		{
			return -1;
		}
		for (int i = 0; i < StrA.Length; i++)
		{
			if (StrA[i] > StrB[i])
			{
				return 1;
			}
			if (StrA[i] < StrB[i])
			{
				return -1;
			}
		}
		return 0;
	}

	// Token: 0x06000423 RID: 1059 RVA: 0x00059D88 File Offset: 0x00057F88
	public static int CompareStr(CString StrA, string StrB)
	{
		if (StrA == null)
		{
			return -1;
		}
		if (StrB == null)
		{
			return 1;
		}
		if (StrA.Length > StrB.Length)
		{
			return 1;
		}
		if (StrB.Length > StrA.Length)
		{
			return -1;
		}
		for (int i = 0; i < StrA.Length; i++)
		{
			if (StrA[i] > StrB[i])
			{
				return 1;
			}
			if (StrA[i] < StrB[i])
			{
				return -1;
			}
		}
		return 0;
	}

	// Token: 0x06000424 RID: 1060 RVA: 0x00059E10 File Offset: 0x00058010
	public void AddBlackList(CString PlayerName, ushort PlayerPicID)
	{
		int hashCode = PlayerName.GetHashCode(false);
		if (this.TalkData_BlackList.ContainsKey(PlayerName.GetHashCode(false)))
		{
			return;
		}
		BlackListDataType blackListDataType = this.TalkData_BPool.spawn();
		if (blackListDataType != null)
		{
			blackListDataType.PlayerName.Length = 0;
			blackListDataType.PlayerName.Append(PlayerName);
			blackListDataType.PlayerPicID = PlayerPicID;
			this.TalkData_BlackList.Add(hashCode, blackListDataType);
			this.SaveBlackList();
			CString cstring = StringManager.Instance.StaticString1024();
			cstring.StringToFormat(PlayerName);
			cstring.AppendFormat(this.mStringTable.GetStringByID(8210u));
			GUIManager.Instance.AddHUDMessage(cstring.ToString(), 255, true);
		}
		else
		{
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(8239u), 255, true);
		}
	}

	// Token: 0x06000425 RID: 1061 RVA: 0x00059EE8 File Offset: 0x000580E8
	public void RemoveBlackList(CString RemoveName)
	{
		int hashCode = RemoveName.GetHashCode(false);
		BlackListDataType blackListDataType = this.TalkData_BlackList.Find(hashCode);
		if (blackListDataType != null)
		{
			CString cstring = StringManager.Instance.StaticString1024();
			cstring.StringToFormat(blackListDataType.PlayerName);
			cstring.AppendFormat(this.mStringTable.GetStringByID(8211u));
			GUIManager.Instance.AddHUDMessage(cstring.ToString(), 255, true);
			this.TalkData_BPool.despawn(blackListDataType);
			this.TalkData_BlackList.Remove(hashCode);
			this.SaveBlackList();
		}
	}

	// Token: 0x06000426 RID: 1062 RVA: 0x00059F74 File Offset: 0x00058174
	public void RemoveBlackList(int Key, int Index)
	{
		if (Index < this.TalkData_BlackList.Length)
		{
			CString cstring = StringManager.Instance.StaticString1024();
			cstring.StringToFormat(this.TalkData_BlackList.Values[Index].PlayerName);
			cstring.AppendFormat(this.mStringTable.GetStringByID(8211u));
			GUIManager.Instance.AddHUDMessage(cstring.ToString(), 255, true);
			this.TalkData_BPool.despawn(this.TalkData_BlackList.Values[Index]);
			this.TalkData_BlackList.Remove(Key);
			this.SaveBlackList();
		}
	}

	// Token: 0x06000427 RID: 1063 RVA: 0x0005A00C File Offset: 0x0005820C
	public bool FindBlackList(CString PlayerName)
	{
		return this.TalkData_BlackList.ContainsKey(PlayerName.GetHashCode(false));
	}

	// Token: 0x06000428 RID: 1064 RVA: 0x0005A020 File Offset: 0x00058220
	public void LoadBlackList()
	{
		this.ReSetBlackListData();
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.AppendFormat("{0}/Data/{1}{2}", AssetManager.persistentDataPath, this.BlackListName, this.RoleAttr.UserId);
		string path = stringBuilder.ToString();
		this.bNeedInitialEmojiSave = !File.Exists(path);
		using (FileStream fileStream = new FileStream(path, FileMode.OpenOrCreate, FileAccess.Read))
		{
			if (fileStream.Length > 0L)
			{
				using (BinaryReader binaryReader = new BinaryReader(fileStream))
				{
					int num = binaryReader.ReadInt32();
					int num2 = 0;
					while (num2 < num && num2 < 100)
					{
						BlackListDataType blackListDataType = this.TalkData_BPool.spawn();
						blackListDataType.PlayerPicID = binaryReader.ReadUInt16();
						blackListDataType.PlayerName.Length = 0;
						blackListDataType.PlayerName.Append(binaryReader.ReadString());
						this.TalkData_BlackList.Add(blackListDataType.PlayerName.GetHashCode(false), blackListDataType);
						num2++;
					}
				}
			}
		}
	}

	// Token: 0x06000429 RID: 1065 RVA: 0x0005A170 File Offset: 0x00058370
	public void SaveBlackList()
	{
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.AppendFormat("{0}/Data/{1}{2}", AssetManager.persistentDataPath, this.BlackListName, this.RoleAttr.UserId);
		string path = stringBuilder.ToString();
		using (FileStream fileStream = new FileStream(path, FileMode.OpenOrCreate))
		{
			using (BinaryWriter binaryWriter = new BinaryWriter(fileStream))
			{
				binaryWriter.Write(this.TalkData_BlackList.Count);
				for (int i = 0; i < 100; i++)
				{
					if (this.TalkData_BlackList.Values[i] != null)
					{
						binaryWriter.Write(this.TalkData_BlackList.Values[i].PlayerPicID);
						binaryWriter.Write(this.TalkData_BlackList.Values[i].PlayerName.ToString());
					}
				}
			}
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_BlackList, 0, 0);
	}

	// Token: 0x0600042A RID: 1066 RVA: 0x0005A298 File Offset: 0x00058498
	public void ReSetBlackListData()
	{
		for (int i = 0; i < 100; i++)
		{
			if (this.TalkData_BlackList.Values[i] != null)
			{
				this.TalkData_BPool.despawn(this.TalkData_BlackList.Values[i]);
			}
		}
		this.TalkData_BlackList.Clear();
	}

	// Token: 0x0600042B RID: 1067 RVA: 0x0005A2F0 File Offset: 0x000584F0
	private void InitialTalkData()
	{
		this.TalkData_KPool = new ObjectPool<TalkDataType>(new TalkDataType(), 30, false);
		this.TalkData_APool = new ObjectPool<TalkDataType>(new TalkDataType(), 2000, false);
		this.TalkData_BPool = new ObjectPool<BlackListDataType>(new BlackListDataType(), 100, false);
		this.MessageBoard_Pool = new ObjectPool<MessageBoard>(new MessageBoard(), 20, false);
		this.ChatStr[0] = new CString(435);
		this.ChatStr[1] = new CString(435);
		this.ChatStrA[0] = new CString(435);
		this.ChatStrA[1] = new CString(435);
	}

	// Token: 0x0600042C RID: 1068 RVA: 0x0005A394 File Offset: 0x00058594
	private TalkDataType SplitTalkData()
	{
		int num = 1000;
		if (num == this.unReadIndex)
		{
			num++;
		}
		if (this.unReadIndex > num)
		{
			this.unReadIndex--;
		}
		this.TopID = this.TalkData_Alliance[0].TalkID;
		this.MiddleTopIndex = num - 1;
		this.MiddleTopID = this.TalkData_Alliance[this.MiddleTopIndex].TalkID;
		TalkDataType result = this.TalkData_Alliance[num];
		this.TalkData_Alliance.RemoveAt(num);
		this.MiddleBottomIndex = this.MiddleTopIndex + 1;
		this.MiddleBottomID = this.TalkData_Alliance[this.MiddleBottomIndex].TalkID;
		this.SendAskKind = 0;
		this.AskOldData = 2;
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 4, 1);
		return result;
	}

	// Token: 0x0600042D RID: 1069 RVA: 0x0005A470 File Offset: 0x00058670
	public TalkDataType SpawnTalkData(byte AlliOrKing)
	{
		if (AlliOrKing == 0)
		{
			TalkDataType talkDataType = this.TalkData_KPool.spawn();
			if (talkDataType == null)
			{
				talkDataType = this.TalkData_Kingdom[0];
				this.TalkData_Kingdom.RemoveAt(0);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 14, 0);
			}
			talkDataType.Initial();
			return talkDataType;
		}
		if (AlliOrKing == 1)
		{
			bool flag = false;
			TalkDataType talkDataType2 = this.TalkData_APool.spawn();
			if (talkDataType2 == null)
			{
				if (this.SendAskKind == 0)
				{
					if (this.MiddleTopIndex != -1 && this.MiddleBottomIndex == this.MiddleTopIndex)
					{
						talkDataType2 = this.SplitTalkData();
					}
					else
					{
						talkDataType2 = this.TalkData_Alliance[this.MiddleTopIndex];
						this.TalkData_Alliance.RemoveAt(this.MiddleTopIndex);
						if (this.MiddleTopIndex == 0)
						{
							int num = 1000;
							if (num == this.unReadIndex)
							{
								num++;
							}
							if (this.unReadIndex > num)
							{
								this.unReadIndex--;
							}
							this.TopID = this.TalkData_Alliance[0].TalkID;
							this.MiddleTopIndex = num;
							this.MiddleTopID = this.TalkData_Alliance[this.MiddleTopIndex].TalkID;
							this.MiddleBottomIndex = this.MiddleTopIndex + 1;
							this.MiddleBottomID = this.TalkData_Alliance[this.MiddleBottomIndex].TalkID;
							this.SendAskKind = 0;
							this.AskOldData = 2;
							GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 4, 1);
							return talkDataType2;
						}
						this.MiddleTopIndex--;
						this.MiddleTopID = this.TalkData_Alliance[this.MiddleTopIndex].TalkID;
						this.MiddleBottomIndex--;
						if (this.unReadIndex != -1)
						{
							this.unReadIndex--;
						}
						flag = true;
					}
				}
				else if (this.SendAskKind == 1)
				{
					talkDataType2 = this.TalkData_Alliance[0];
					this.TalkData_Alliance.RemoveAt(0);
					this.TopID = this.TalkData_Alliance[0].TalkID;
					this.MiddleTopIndex--;
					this.MiddleBottomIndex--;
					if (this.unReadIndex != -1)
					{
						this.unReadIndex--;
					}
					flag = true;
				}
				else if (this.SendAskKind == 2)
				{
					if (this.MiddleBottomIndex == 0)
					{
						talkDataType2 = this.SplitTalkData();
					}
					else
					{
						talkDataType2 = this.TalkData_Alliance[0];
						this.TalkData_Alliance.RemoveAt(0);
						this.TopID = this.TalkData_Alliance[0].TalkID;
						this.MiddleTopIndex--;
						this.MiddleBottomIndex--;
						if (this.unReadIndex != -1)
						{
							this.unReadIndex--;
						}
						flag = true;
					}
				}
				else
				{
					talkDataType2 = this.TalkData_Alliance[0];
					this.TalkData_Alliance.RemoveAt(0);
					this.TopID = this.TalkData_Alliance[0].TalkID;
					this.MiddleTopIndex--;
					this.MiddleBottomIndex--;
					if (this.unReadIndex != -1)
					{
						this.unReadIndex--;
					}
					flag = true;
				}
			}
			if (flag)
			{
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 14, 1);
			}
			talkDataType2.Initial();
			return talkDataType2;
		}
		return null;
	}

	// Token: 0x0600042E RID: 1070 RVA: 0x0005A7DC File Offset: 0x000589DC
	public void DeSpawnTalkData(byte AlliOrKing, TalkDataType tmpTalk)
	{
		if (AlliOrKing == 0)
		{
			this.TalkData_KPool.despawn(tmpTalk);
		}
		else if (AlliOrKing == 1)
		{
			this.TalkData_APool.despawn(tmpTalk);
		}
	}

	// Token: 0x0600042F RID: 1071 RVA: 0x0005A814 File Offset: 0x00058A14
	public void SendAskData(byte channel, byte prev, int kind = -1, long DataID = 0L, long DataTime = 0L)
	{
		if (NewbieManager.HasFlag)
		{
			return;
		}
		if (channel == 0)
		{
			if (this.bRecvKingdom == 0)
			{
				this.bRecvKingdom = 1;
				this.bSendKingdom = 1;
				MessagePacket messagePacket = new MessagePacket(1024);
				messagePacket.Protocol = Protocol._MSG_REQUEST_VIEWCHAT;
				messagePacket.AddSeqId();
				messagePacket.Add(channel);
				messagePacket.Add(prev);
				if (this.ServerVersionMajor != 0)
				{
					if (kind == -1)
					{
						messagePacket.Add(byte.MaxValue);
					}
					else
					{
						messagePacket.Add((byte)kind);
					}
				}
				messagePacket.Send(false);
			}
		}
		else
		{
			MessagePacket messagePacket2 = new MessagePacket(1024);
			messagePacket2.Protocol = Protocol._MSG_REQUEST_VIEWCHAT;
			messagePacket2.AddSeqId();
			messagePacket2.Add(channel);
			messagePacket2.Add(prev);
			if (this.ServerVersionMajor != 0)
			{
				if (kind == -1)
				{
					messagePacket2.Add(byte.MaxValue);
				}
				else
				{
					messagePacket2.Add((byte)kind);
				}
			}
			messagePacket2.Add(DataID);
			messagePacket2.Add(DataTime);
			messagePacket2.Send(false);
		}
	}

	// Token: 0x06000430 RID: 1072 RVA: 0x0005A918 File Offset: 0x00058B18
	public void AddSystemMessage(CString tmp, byte TalkKind = 4, long DataIndex = -1L)
	{
		this.SystemMessageCString.Length = 0;
		this.SystemMessageCString.Append(tmp);
		if (TalkKind != 6 && TalkKind != 7)
		{
			TalkDataType talkDataType = this.SpawnTalkData(0);
			talkDataType.TalkKind = TalkKind;
			talkDataType.FuncKind = 200;
			talkDataType.MainText.Append(this.SystemMessageCString);
			talkDataType.TalkTime = this.ServerTime;
			if (TalkKind == 5)
			{
				talkDataType.PlayerPicID = DataManager.MapDataController.kingdomData.kingdomID;
			}
			this.TalkData_Kingdom.Add(talkDataType);
		}
		if (TalkKind != 8)
		{
			if (this.RoleAlliance.Id != 0u)
			{
				bool flag = GUIManager.Instance.FindMenu(EGUIWindow.UI_Chat) != null;
				if ((flag && this.NowChannel == 0) || !flag)
				{
					if (this.bClearUnread)
					{
						this.bClearUnread = false;
						this.RemoveUnRead();
					}
					if (this.unReadCount == 0)
					{
						TalkDataType talkDataType2 = this.SpawnTalkData(1);
						talkDataType2.TalkKind = 1;
						if (this.TalkData_Alliance.Count > 0)
						{
							talkDataType2.TalkID = this.TalkData_Alliance[this.TalkData_Alliance.Count - 1].TalkID;
							talkDataType2.TalkTime = this.TalkData_Alliance[this.TalkData_Alliance.Count - 1].TalkTime;
						}
						this.unReadIndex = this.TalkData_Alliance.Count;
						this.TalkData_Alliance.Add(talkDataType2);
					}
					this.bShowUnreadCount = true;
					this.unReadCount++;
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 7, 0);
					GUIManager.Instance.UpdateChatBox(8, 1);
				}
				TalkDataType talkDataType3 = this.SpawnTalkData(1);
				talkDataType3.TalkKind = TalkKind;
				talkDataType3.FuncKind = 200;
				talkDataType3.MainText.Append(this.SystemMessageCString);
				if (this.TalkData_Alliance.Count > 0)
				{
					talkDataType3.TalkID = this.TalkData_Alliance[this.TalkData_Alliance.Count - 1].TalkID;
					talkDataType3.TalkTime = this.TalkData_Alliance[this.TalkData_Alliance.Count - 1].TalkTime;
				}
				else
				{
					this.MiddleBottomID = 0L;
					this.MiddleBottomIndex = 0;
				}
				talkDataType3.TalkTime = this.ServerTime;
				if (TalkKind == 5)
				{
					talkDataType3.PlayerPicID = DataManager.MapDataController.kingdomData.kingdomID;
				}
				else if (TalkKind == 6)
				{
					talkDataType3.NPCID = DataIndex;
				}
				this.TalkData_Alliance.Add(talkDataType3);
			}
			else if (GUIManager.Instance.ChannelIndex == 1)
			{
				GUIManager.Instance.UpdateChatBox(6, 0);
			}
		}
		GUIManager.Instance.UpdateChatBox(0, 0);
		if (TalkKind == 6 || TalkKind == 7)
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 1, 1);
		}
		else if (TalkKind == 8)
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 1, 0);
		}
		else
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 1, 2);
		}
	}

	// Token: 0x06000431 RID: 1073 RVA: 0x0005AC14 File Offset: 0x00058E14
	private void CleartmpChatNickName()
	{
		for (int i = 0; i < 10; i++)
		{
			this.tmpChatAllyRank[i] = 0;
			this.tmpChatNickName[i].Length = 0;
			this.tmpChatKingdom[i] = 0;
			this.tmpChatWTitleID[i] = 0;
			this.tmpChatNTitleID[i] = 0;
			this.tmpbCheckDirtyWord[i] = 0;
		}
	}

	// Token: 0x06000432 RID: 1074 RVA: 0x0005AC70 File Offset: 0x00058E70
	public unsafe void RecvChatNickName(MessagePacket MP)
	{
		this.CleartmpChatNickName();
		MP.ReadByte(-1);
		ushort num = MP.ReadUShort(-1);
		for (int i = 0; i < (int)num; i++)
		{
			if (i >= 10)
			{
				return;
			}
			this.tmpChatAllyRank[i] = MP.ReadByte(-1);
			byte vsize = MP.ReadByte(-1);
			MP.ReadStringPlus((int)vsize, this.tmpChatNickName[i], -1);
			if (this.tmpChatNickName[i].Length > 0)
			{
				fixed (string text = this.tmpChatNickName[i].ToString(), ptr = text + RuntimeHelpers.OffsetToStringData / 2)
				{
					for (int j = 0; j < this.tmpChatNickName[i].Length; j++)
					{
						if (!this.isNotEmojiCharacter(this.tmpChatNickName[i][j]))
						{
							ptr[j] = ' ';
						}
					}
				}
			}
		}
		for (int k = 0; k < (int)num; k++)
		{
			if (k >= 10)
			{
				return;
			}
			this.tmpChatKingdom[k] = MP.ReadUShort(-1);
		}
		for (int l = 0; l < (int)num; l++)
		{
			if (l >= 10)
			{
				return;
			}
			this.tmpChatWTitleID[l] = MP.ReadUShort(-1);
		}
		for (int m = 0; m < (int)num; m++)
		{
			if (m >= 10)
			{
				return;
			}
			this.tmpbCheckDirtyWord[m] = MP.ReadByte(-1);
		}
		for (int n = 0; n < (int)num; n++)
		{
			if (n >= 10)
			{
				return;
			}
			this.tmpChatNTitleID[n] = MP.ReadUShort(-1);
		}
	}

	// Token: 0x06000433 RID: 1075 RVA: 0x0005AE0C File Offset: 0x0005900C
	public unsafe void RecvChatMessage(MessagePacket MP)
	{
		byte b = 0;
		byte b2 = MP.ReadByte(-1);
		if (this.ServerVersionMajor != 0)
		{
			MP.ReadByte(-1);
		}
		if (b2 == 0 || b2 == 1)
		{
			ushort num = MP.ReadUShort(-1);
			int i = 0;
			while (i < (int)num)
			{
				long talkTime = MP.ReadLong(-1);
				long playID = MP.ReadLong(-1);
				long talkID = MP.ReadLong(-1);
				b = MP.ReadByte(-1);
				bool flag = GUIManager.Instance.FindMenu(EGUIWindow.UI_Chat) != null;
				TalkDataType talkDataType;
				if (b == 1 && b2 == 0 && ((flag && this.NowChannel == 0) || !flag))
				{
					if (this.bClearUnread)
					{
						this.bClearUnread = false;
						this.RemoveUnRead();
					}
					if (this.unReadCount == 0)
					{
						talkDataType = this.SpawnTalkData(b);
						talkDataType.TalkKind = 1;
						if (this.TalkData_Alliance.Count > 0)
						{
							talkDataType.TalkID = this.TalkData_Alliance[this.TalkData_Alliance.Count - 1].TalkID;
							talkDataType.TalkTime = this.TalkData_Alliance[this.TalkData_Alliance.Count - 1].TalkTime;
						}
						this.unReadIndex = this.TalkData_Alliance.Count;
						this.TalkData_Alliance.Add(talkDataType);
					}
					this.bShowUnreadCount = true;
					this.unReadCount++;
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 7, 0);
					GUIManager.Instance.UpdateChatBox(8, 1);
				}
				talkDataType = this.SpawnTalkData(b);
				talkDataType.TalkTime = talkTime;
				talkDataType.PlayID = playID;
				talkDataType.TalkID = talkID;
				byte b3 = MP.ReadByte(-1);
				talkDataType.FuncKind = b3;
				talkDataType.PlayerPicID = MP.ReadUShort(-1);
				MP.ReadStringPlus(13, talkDataType.PlayerName, -1);
				talkDataType.VIPRank = MP.ReadByte(-1);
				MP.ReadStringPlus(3, talkDataType.TitleName, -1);
				talkDataType.SpecialBlockID = MP.ReadByte(-1);
				talkDataType.TitleID = MP.ReadByte(-1);
				if (this.ServerVersionMajor != 0)
				{
					talkDataType.bHaveArabic = MP.ReadByte(-1);
				}
				ushort vsize = MP.ReadUShort(-1);
				if (b3 == 108)
				{
					talkDataType.TalkKind = 3;
					if (DataManager.MapDataController.kingdomData.kingdomID != talkDataType.PlayerPicID)
					{
						GameConstants.FormatRoleName(talkDataType.ShowName, talkDataType.PlayerName, talkDataType.TitleName, null, 0, talkDataType.PlayerPicID, null, null, null, null);
					}
					else
					{
						GameConstants.FormatRoleName(talkDataType.ShowName, talkDataType.PlayerName, talkDataType.TitleName, null, 0, 0, null, null, null, null);
					}
					ushort num2 = MP.ReadUShort(-1);
					CString cstring = StringManager.Instance.StaticString1024();
					CString cstring2 = StringManager.Instance.StaticString1024();
					MP.ReadStringPlus(3, cstring, -1);
					MP.ReadStringPlus(13, cstring2, -1);
					CString cstring3 = StringManager.Instance.StaticString1024();
					if (DataManager.MapDataController.kingdomData.kingdomID != num2)
					{
						GameConstants.FormatRoleName(cstring3, cstring2, cstring, null, 0, num2, null, null, null, null);
					}
					else
					{
						GameConstants.FormatRoleName(cstring3, cstring2, cstring, null, 0, 0, null, null, null, null);
					}
					talkDataType.MainText.StringToFormat(talkDataType.ShowName);
					talkDataType.MainText.StringToFormat(cstring3);
					talkDataType.MainText.AppendFormat(this.mStringTable.GetStringByID(7798u));
					goto IL_A64;
				}
				if (i < 10)
				{
					talkDataType.AllyRank = this.tmpChatAllyRank[i];
					talkDataType.NickNameText.Append(this.tmpChatNickName[i]);
					talkDataType.KingdomID = this.tmpChatKingdom[i];
					talkDataType.WTitleID = this.tmpChatWTitleID[i];
					talkDataType.bCheckDirtyWord = this.tmpbCheckDirtyWord[i];
					talkDataType.NTitleID = this.tmpChatNTitleID[i];
				}
				if (b3 == 109)
				{
					talkDataType.TalkKind = 0;
					talkDataType.EmojiKey = MP.ReadUShort(-1);
					MP.ReadUShort(-1);
					int length = talkDataType.PlayerName.Length;
					if (length > 0)
					{
						if (b == 0 && talkDataType.KingdomID != 0 && DataManager.MapDataController.kingdomData.kingdomID != talkDataType.KingdomID)
						{
							GameConstants.FormatRoleName(talkDataType.ShowName, talkDataType.PlayerName, talkDataType.TitleName, null, 0, talkDataType.KingdomID, null, null, null, null);
						}
						else
						{
							GameConstants.FormatRoleName(talkDataType.ShowName, talkDataType.PlayerName, talkDataType.TitleName, null, 0, 0, null, null, null, null);
						}
					}
					else
					{
						talkDataType.ShowName.Append("NoName");
					}
					if (!this.FindBlackList(talkDataType.PlayerName))
					{
						this.CheckText(talkDataType);
						goto IL_A64;
					}
					if (b == 0)
					{
						this.TalkData_KPool.despawn(talkDataType);
					}
					else if (b == 1)
					{
						this.TalkData_APool.despawn(talkDataType);
					}
				}
				else
				{
					MP.ReadStringPlus((int)vsize, talkDataType.OriginalText, -1);
					fixed (string text = talkDataType.OriginalText.ToString())
					{
						fixed (char* ptr = text + RuntimeHelpers.OffsetToStringData / 2)
						{
							for (int j = 0; j < talkDataType.OriginalText.Length; j++)
							{
								if (!this.isNotEmojiCharacter(talkDataType.OriginalText[j]))
								{
									ptr[j] = ' ';
								}
							}
							text = null;
							if (b3 > 100)
							{
								talkDataType.TalkKind = 3;
								if (b3 == 101)
								{
									talkDataType.MainText.StringToFormat(talkDataType.PlayerName);
									talkDataType.MainText.AppendFormat(this.mStringTable.GetStringByID(841u));
								}
								else if (b3 == 102)
								{
									talkDataType.MainText.StringToFormat(talkDataType.PlayerName);
									talkDataType.MainText.AppendFormat(this.mStringTable.GetStringByID(842u));
								}
								else if (b3 == 103)
								{
									talkDataType.MainText.IntToFormat((long)talkDataType.PlayerPicID, 1, false);
									talkDataType.MainText.AppendFormat(this.mStringTable.GetStringByID(843u));
								}
								else if (b3 == 104)
								{
									talkDataType.MainText.StringToFormat(talkDataType.PlayerName);
									talkDataType.MainText.StringToFormat(talkDataType.OriginalText);
									talkDataType.MainText.IntToFormat((long)talkDataType.PlayerPicID, 1, false);
									talkDataType.MainText.AppendFormat(this.mStringTable.GetStringByID(844u));
								}
								else if (b3 == 105)
								{
									talkDataType.MainText.StringToFormat(talkDataType.PlayerName);
									talkDataType.MainText.AppendFormat(this.mStringTable.GetStringByID(845u));
								}
								else if (b3 == 106)
								{
									talkDataType.MainText.StringToFormat(talkDataType.PlayerName);
									talkDataType.MainText.AppendFormat(this.mStringTable.GetStringByID(846u));
								}
								else if (b3 == 107)
								{
									talkDataType.MainText.StringToFormat(talkDataType.PlayerName);
									talkDataType.MainText.AppendFormat(this.mStringTable.GetStringByID(9534u));
								}
								else if (b3 == 111)
								{
									talkDataType.MainText.StringToFormat(talkDataType.PlayerName);
									talkDataType.MainText.AppendFormat(this.mStringTable.GetStringByID(16094u));
								}
								else if (b3 == 112)
								{
									talkDataType.TalkKind = 9;
									talkDataType.MainText.StringToFormat(talkDataType.PlayerName);
									talkDataType.MainText.StringToFormat(this.mStringTable.GetStringByID((uint)talkDataType.PlayerPicID));
									talkDataType.MainText.AppendFormat(this.mStringTable.GetStringByID((uint)talkDataType.WTitleID));
								}
								else if (b3 == 113)
								{
									talkDataType.TalkKind = 10;
									CString cstring4 = StringManager.Instance.StaticString1024();
									ushort kingdomID = talkDataType.KingdomID;
									ushort ntitleID = talkDataType.NTitleID;
									Equip recordByKey = this.EquipTable.GetRecordByKey(kingdomID);
									cstring4.StringToFormat(this.mStringTable.GetStringByID((uint)recordByKey.EquipName));
									if (ntitleID > 1)
									{
										cstring4.IntToFormat((long)ntitleID, 1, false);
										cstring4.AppendFormat("{0}x{1}");
									}
									else
									{
										cstring4.AppendFormat("{0}");
									}
									talkDataType.MainText.StringToFormat(talkDataType.OriginalText);
									talkDataType.MainText.StringToFormat(talkDataType.PlayerName);
									talkDataType.MainText.StringToFormat(this.mStringTable.GetStringByID((uint)talkDataType.PlayerPicID));
									talkDataType.MainText.StringToFormat(cstring4);
									talkDataType.MainText.AppendFormat(this.mStringTable.GetStringByID((uint)talkDataType.WTitleID));
								}
								else if (b3 == 114)
								{
									talkDataType.TalkKind = 11;
									talkDataType.MainText.StringToFormat(talkDataType.PlayerName);
									talkDataType.MainText.StringToFormat(this.mStringTable.GetStringByID((uint)talkDataType.PlayerPicID));
									talkDataType.MainText.AppendFormat(this.mStringTable.GetStringByID(16100u));
								}
								goto IL_A64;
							}
							int length2 = talkDataType.PlayerName.Length;
							if (length2 > 0)
							{
								if (b == 0 && talkDataType.KingdomID != 0 && DataManager.MapDataController.kingdomData.kingdomID != talkDataType.KingdomID)
								{
									GameConstants.FormatRoleName(talkDataType.ShowName, talkDataType.PlayerName, talkDataType.TitleName, null, 0, talkDataType.KingdomID, null, null, null, null);
								}
								else
								{
									GameConstants.FormatRoleName(talkDataType.ShowName, talkDataType.PlayerName, talkDataType.TitleName, null, 0, 0, null, null, null, null);
								}
							}
							else
							{
								talkDataType.ShowName.Append("NoName");
							}
							if (!this.FindBlackList(talkDataType.PlayerName))
							{
								if (talkDataType.bCheckDirtyWord != 0)
								{
									talkDataType.MainText.CheckBannedWord();
								}
								this.CheckText(talkDataType);
								goto IL_A64;
							}
							if (b == 0)
							{
								this.TalkData_KPool.despawn(talkDataType);
							}
							else if (b == 1)
							{
								this.TalkData_APool.despawn(talkDataType);
							}
						}
					}
				}
				IL_C97:
				i++;
				continue;
				IL_A64:
				bool flag2 = false;
				if (b == 0)
				{
					this.KindomRecvType = b2;
					if (b2 == 0 || this.TalkData_Kingdom.Count == 0)
					{
						this.TalkData_Kingdom.Add(talkDataType);
						GUIManager.Instance.SetbNeedTranslate(talkDataType);
						flag2 = true;
					}
					else if (b2 == 1)
					{
						KingdomTalkDataComparer comparer = new KingdomTalkDataComparer();
						int num3 = this.TalkData_Kingdom.BinarySearch(talkDataType, comparer);
						if (num3 < 0)
						{
							this.TalkData_Kingdom.Insert(~num3, talkDataType);
							GUIManager.Instance.SetbNeedTranslate(talkDataType);
							flag2 = true;
						}
					}
					if (flag2)
					{
						GUIManager.Instance.UpdateChatBox(0, 0);
					}
					else
					{
						this.TalkData_KPool.despawn(talkDataType);
					}
				}
				else if (b == 1)
				{
					if (b2 == 0)
					{
						if (talkDataType.TalkID == 0L)
						{
							if (this.TalkData_Alliance.Count > 0)
							{
								talkDataType.TalkID = this.TalkData_Alliance[this.TalkData_Alliance.Count - 1].TalkID;
							}
							else
							{
								talkDataType.TalkID = 1L;
							}
						}
						this.TalkData_Alliance.Add(talkDataType);
						GUIManager.Instance.SetbNeedTranslate(talkDataType);
						flag2 = true;
						if (this.MiddleBottomIndex == -1)
						{
							this.MiddleBottomIndex = this.TalkData_Alliance.Count - 1;
							this.MiddleBottomID = talkDataType.TalkID;
						}
						else if (this.MiddleBottomID == 0L)
						{
							this.MiddleBottomID = talkDataType.TalkID;
						}
						GUIManager.Instance.UpdateChatBox(0, 0);
					}
					else if (b2 == 1)
					{
						bool flag3 = false;
						if (this.SendAskKind != -1)
						{
							TalkDataComparer comparer2 = new TalkDataComparer();
							int num4 = this.tmpAllianc.BinarySearch(talkDataType, comparer2);
							if (num4 < 0)
							{
								this.tmpAllianc.Insert(~num4, talkDataType);
								flag3 = true;
							}
							if (this.tmpAllianc.Count == 10)
							{
								this.OldMessageComplete();
								this.SendAskKind = -1;
							}
						}
						if (!flag3)
						{
							this.TalkData_APool.despawn(talkDataType);
						}
					}
					else
					{
						this.TalkData_APool.despawn(talkDataType);
					}
				}
				if (flag2)
				{
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 1, (int)b);
				}
				this.KindomRecvType = 0;
				goto IL_C97;
			}
			this.CleartmpChatNickName();
		}
		else if (b2 == 2)
		{
			this.OldMessageComplete();
			this.SendAskKind = -1;
		}
		else if (b2 == 3)
		{
			this.SendAskKind = -1;
			if (this.AskOldData == 1)
			{
				this.AskOldData = 3;
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 8, (int)b);
			}
			else
			{
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 2, (int)b);
			}
		}
		else if (b2 == 4)
		{
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(904u), 255, true);
		}
	}

	// Token: 0x06000434 RID: 1076 RVA: 0x0005BB50 File Offset: 0x00059D50
	private void OldMessageComplete()
	{
		if (this.tmpAllianc.Count <= 0)
		{
			return;
		}
		this.ThisTimeCounts = 0;
		bool flag = false;
		GUIManager guimanager = GUIManager.Instance;
		if (this.SendAskKind == 0)
		{
			for (int i = this.tmpAllianc.Count - 1; i >= 0; i--)
			{
				if (this.tmpAllianc[i].TalkID < this.TopID)
				{
					this.TalkData_Alliance.Insert(0, this.tmpAllianc[i]);
					guimanager.SetbNeedTranslate(this.tmpAllianc[i]);
					this.TopID = this.tmpAllianc[i].TalkID;
					this.LastTimeIndex++;
					this.MiddleTopIndex++;
					if (this.MiddleBottomIndex != -1)
					{
						this.MiddleBottomIndex++;
					}
					if (this.unReadIndex != -1)
					{
						this.unReadIndex++;
					}
					if (!this.CheckHideTalk(this.tmpAllianc[i]))
					{
						this.ThisTimeCounts++;
					}
				}
				else
				{
					this.TalkData_APool.despawn(this.tmpAllianc[i]);
				}
			}
			flag = true;
		}
		else if (this.SendAskKind == 1)
		{
			bool flag2 = false;
			for (int j = 0; j < this.tmpAllianc.Count; j++)
			{
				if (this.MiddleBottomIndex != -1 && this.tmpAllianc[j].TalkID >= this.MiddleBottomID)
				{
					if (!flag2)
					{
						this.MiddleTopID = this.MiddleBottomID;
						this.MiddleTopIndex = this.MiddleBottomIndex;
						flag2 = true;
					}
					this.TalkData_APool.despawn(this.tmpAllianc[j]);
				}
				else
				{
					this.TalkData_Alliance.Insert(this.MiddleTopIndex + 1, this.tmpAllianc[j]);
					guimanager.SetbNeedTranslate(this.tmpAllianc[j]);
					this.MiddleTopID = this.tmpAllianc[j].TalkID;
					this.MiddleTopIndex++;
					if (this.MiddleBottomIndex != -1)
					{
						this.MiddleBottomIndex++;
					}
					if (this.unReadIndex != -1)
					{
						this.unReadIndex++;
					}
					if (!this.CheckHideTalk(this.tmpAllianc[j]))
					{
						this.ThisTimeCounts++;
					}
				}
			}
			flag = true;
		}
		else if (this.SendAskKind == 2)
		{
			bool flag3 = false;
			for (int k = this.tmpAllianc.Count - 1; k >= 0; k--)
			{
				if (this.tmpAllianc[k].TalkID <= this.MiddleTopID)
				{
					if (!flag3)
					{
						this.MiddleBottomID = this.MiddleTopID;
						this.MiddleBottomIndex = this.MiddleTopIndex;
						flag3 = true;
					}
					this.TalkData_APool.despawn(this.tmpAllianc[k]);
				}
				else
				{
					this.TalkData_Alliance.Insert(this.MiddleBottomIndex, this.tmpAllianc[k]);
					guimanager.SetbNeedTranslate(this.tmpAllianc[k]);
					this.MiddleBottomID = this.tmpAllianc[k].TalkID;
					if (this.unReadIndex != -1)
					{
						this.unReadIndex++;
					}
					if (!this.CheckHideTalk(this.tmpAllianc[k]))
					{
						this.ThisTimeCounts++;
					}
				}
			}
			flag = true;
		}
		else if (this.SendAskKind == 3)
		{
			this.RemoveUnRead();
			for (int l = this.TalkData_Alliance.Count - 1; l >= 0; l--)
			{
				this.TalkData_APool.despawn(this.TalkData_Alliance[l]);
				this.TalkData_Alliance.RemoveAt(l);
			}
			this.TopIndex = 0;
			this.LastTimeIndex = (this.MiddleTopIndex = -1);
			this.TopID = (this.MiddleTopID = 0L);
			for (int m = 0; m < this.tmpAllianc.Count; m++)
			{
				this.TalkData_Alliance.Add(this.tmpAllianc[m]);
				guimanager.SetbNeedTranslate(this.tmpAllianc[m]);
			}
			this.MiddleBottomID = this.tmpAllianc[0].TalkID;
			this.MiddleBottomIndex = 0;
			flag = true;
		}
		else if (this.SendAskKind == 4)
		{
			this.AskOldData = 2;
			bool flag4 = false;
			for (int n = this.tmpAllianc.Count - 1; n >= 0; n--)
			{
				if (this.MiddleBottomIndex != -1 && this.tmpAllianc[n].TalkID >= this.MiddleBottomID)
				{
					if (!flag4)
					{
						this.MiddleTopID = this.MiddleBottomID;
						this.MiddleTopIndex = this.MiddleBottomIndex;
						flag4 = true;
					}
					this.TalkData_APool.despawn(this.tmpAllianc[n]);
				}
				else
				{
					if (!this.CheckHideTalk(this.tmpAllianc[n]))
					{
						this.ThisTimeCounts++;
					}
					this.TalkData_Alliance.Insert(0, this.tmpAllianc[n]);
					guimanager.SetbNeedTranslate(this.tmpAllianc[n]);
					if (this.MiddleTopIndex != -1)
					{
						this.MiddleTopIndex++;
					}
					if (this.MiddleBottomIndex != -1)
					{
						this.MiddleBottomIndex++;
					}
					if (this.unReadIndex != -1)
					{
						this.unReadIndex++;
					}
				}
			}
			if (this.ThisTimeCounts > 0)
			{
				TalkDataType talkDataType = this.SpawnTalkData(1);
				talkDataType.TalkKind = 2;
				talkDataType.TalkID = this.TalkData_Alliance[0].TalkID;
				talkDataType.TalkTime = this.TalkData_Alliance[0].TalkTime;
				this.TalkData_Alliance.Insert(0, talkDataType);
				this.LastTimeIndex = 0;
				this.TopID = this.TalkData_Alliance[0].TalkID;
				this.ThisTimeCounts++;
				if (this.MiddleTopIndex != -1)
				{
					this.MiddleTopIndex++;
				}
				if (this.MiddleBottomIndex != -1)
				{
					this.MiddleBottomIndex++;
				}
				if (this.unReadIndex != -1)
				{
					this.unReadIndex++;
				}
				if (!flag4)
				{
					this.MiddleTopID = this.TalkData_Alliance[this.tmpAllianc.Count].TalkID;
					this.MiddleTopIndex = this.tmpAllianc.Count;
				}
				flag = true;
			}
			else
			{
				this.MiddleTopID = 0L;
				this.MiddleTopIndex = -1;
				this.AskOldData = 3;
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 8, 0);
			}
		}
		else if (this.SendAskKind == 5)
		{
			if (this.tmpAllianc.Count == 0)
			{
				return;
			}
			int num = -1;
			for (int num2 = 0; num2 < this.tmpAllianc.Count; num2++)
			{
				if (this.TalkData_Alliance.Count > 0 && this.tmpAllianc[num2].TalkID == this.TalkData_Alliance[this.TalkData_Alliance.Count - 1].TalkID)
				{
					num = num2;
					break;
				}
			}
			if (num != -1)
			{
				for (int num3 = 0; num3 < this.tmpAllianc.Count; num3++)
				{
					if (num3 <= num)
					{
						this.TalkData_APool.despawn(this.tmpAllianc[num3]);
					}
					else
					{
						this.TalkData_Alliance.Add(this.tmpAllianc[num3]);
						guimanager.SetbNeedTranslate(this.tmpAllianc[num3]);
					}
				}
			}
			else
			{
				this.RemoveUnRead();
				if (this.MiddleBottomIndex != -1 && this.MiddleBottomIndex == this.MiddleTopIndex)
				{
					this.MiddleTopIndex = this.TalkData_Alliance.Count - 1;
					this.MiddleTopID = this.TalkData_Alliance[this.TalkData_Alliance.Count - 1].TalkID;
					for (int num4 = 0; num4 < this.tmpAllianc.Count; num4++)
					{
						this.TalkData_Alliance.Add(this.tmpAllianc[num4]);
						guimanager.SetbNeedTranslate(this.tmpAllianc[num4]);
					}
					this.MiddleBottomIndex = this.MiddleTopIndex + 1;
					this.MiddleBottomID = this.TalkData_Alliance[this.MiddleBottomIndex].TalkID;
				}
				else if (this.TopIndex != -1)
				{
					int num5 = this.TalkData_Alliance.Count - 1;
					while (num5 >= this.MiddleBottomIndex && num5 >= 0)
					{
						this.TalkData_APool.despawn(this.TalkData_Alliance[num5]);
						this.TalkData_Alliance.RemoveAt(num5);
						num5--;
					}
					for (int num6 = 0; num6 < this.tmpAllianc.Count; num6++)
					{
						this.TalkData_Alliance.Add(this.tmpAllianc[num6]);
						guimanager.SetbNeedTranslate(this.tmpAllianc[num6]);
					}
					this.MiddleBottomIndex = this.MiddleTopIndex + 1;
					this.MiddleBottomID = this.TalkData_Alliance[this.MiddleBottomIndex].TalkID;
				}
				else
				{
					for (int num7 = this.TalkData_Alliance.Count - 1; num7 >= 0; num7--)
					{
						this.TalkData_APool.despawn(this.TalkData_Alliance[num7]);
						this.TalkData_Alliance.RemoveAt(num7);
					}
					this.TopIndex = 0;
					this.LastTimeIndex = (this.MiddleTopIndex = -1);
					this.TopID = (this.MiddleTopID = 0L);
					for (int num8 = 0; num8 < this.tmpAllianc.Count; num8++)
					{
						this.TalkData_Alliance.Add(this.tmpAllianc[num8]);
						guimanager.SetbNeedTranslate(this.tmpAllianc[num8]);
					}
					this.MiddleBottomID = this.tmpAllianc[0].TalkID;
					this.MiddleBottomIndex = 0;
				}
			}
			flag = true;
		}
		if (flag)
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 3, this.SendAskKind);
		}
		else
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 14, 1);
		}
		if (this.SendAskKind >= 3 && this.SendAskKind <= 5)
		{
			GUIManager.Instance.UpdateChatBox(0, 0);
		}
		this.tmpAllianc.Clear();
	}

	// Token: 0x06000435 RID: 1077 RVA: 0x0005C66C File Offset: 0x0005A86C
	public void RemoveUnRead()
	{
		if (this.unReadIndex != -1 && this.unReadIndex < this.TalkData_Alliance.Count)
		{
			this.TalkData_APool.despawn(this.TalkData_Alliance[this.unReadIndex]);
			this.TalkData_Alliance.RemoveAt(this.unReadIndex);
		}
		this.unReadCount = 0;
		this.unReadIndex = -1;
		GUIManager.Instance.UpdateChatBox(8, 0);
	}

	// Token: 0x06000436 RID: 1078 RVA: 0x0005C6E4 File Offset: 0x0005A8E4
	public void InitialChat()
	{
		this.bRecvKingdom = 0;
		this.bSendKingdom = 0;
		this.unReadIndex = -1;
		this.unReadCount = 0;
		this.NowChannel = 0;
		this.SendAskKind = -1;
		this.NowKingdomIndex = -1;
		this.NowKingdomPos = -1f;
		this.NowAlliancePage = -1;
		this.NowAllianceIndex1 = -1;
		this.NowAllianceIndex2 = -1;
		this.NowAlliancePos1 = -1f;
		this.NowAlliancePos2 = -1f;
		this.bShowUnreadCount = true;
		this.bClearUnread = false;
		this.AskAllianceTime = 0L;
		this.LastTime = 0L;
		this.AskOldData = 0;
		this.TopID = 0L;
		this.MiddleTopID = 0L;
		this.MiddleBottomID = 0L;
		this.TopIndex = 0;
		this.MiddleTopIndex = -1;
		this.MiddleBottomIndex = -1;
		this.LastTimeIndex = -1;
		for (int i = this.TalkData_Kingdom.Count - 1; i >= 0; i--)
		{
			this.TalkData_KPool.despawn(this.TalkData_Kingdom[i]);
		}
		this.TalkData_Kingdom.Clear();
		for (int j = this.TalkData_Alliance.Count - 1; j >= 0; j--)
		{
			this.TalkData_APool.despawn(this.TalkData_Alliance[j]);
		}
		this.TalkData_Alliance.Clear();
		this.Height_Alliance.Clear();
		GUIManager.Instance.UpdateChatBox(8, 0);
	}

	// Token: 0x06000437 RID: 1079 RVA: 0x0005C848 File Offset: 0x0005AA48
	public void ClearTalkAlliance()
	{
		this.unReadIndex = -1;
		this.unReadCount = 0;
		this.SendAskKind = -1;
		this.AskAllianceTime = 0L;
		this.LastTime = 0L;
		this.AskOldData = 0;
		this.TopID = 0L;
		this.MiddleTopID = 0L;
		this.MiddleBottomID = 0L;
		this.TopIndex = 0;
		this.MiddleTopIndex = -1;
		this.MiddleBottomIndex = -1;
		this.LastTimeIndex = -1;
		this.NowAlliancePage = -1;
		this.NowAllianceIndex1 = -1;
		this.NowAllianceIndex2 = -1;
		this.NowAlliancePos1 = -1f;
		this.NowAlliancePos2 = -1f;
		this.bShowUnreadCount = true;
		this.bClearUnread = false;
		for (int i = this.TalkData_Alliance.Count - 1; i >= 0; i--)
		{
			this.TalkData_APool.despawn(this.TalkData_Alliance[i]);
		}
		this.TalkData_Alliance.Clear();
		this.Height_Alliance.Clear();
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 6, 0);
		if (this.ChatStrA[0] != null)
		{
			this.ChatStrA[0].Length = 0;
		}
		if (this.ChatStrA[1] != null)
		{
			this.ChatStrA[1].Length = 0;
		}
		GUIManager.Instance.UpdateChatBox(0, 0);
		GUIManager.Instance.UpdateChatBox(8, 0);
		GUIManager.Instance.UpdateChatBox(9, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.Door, 9, 0);
	}

	// Token: 0x06000438 RID: 1080 RVA: 0x0005C9B0 File Offset: 0x0005ABB0
	public void ClearAllHeight()
	{
		for (int i = 0; i < this.TalkData_Alliance.Count; i++)
		{
			this.TalkData_Alliance[i].TotalHeight = 0f;
			this.TalkData_Alliance[i].TotalHeightT = 0f;
		}
		for (int j = 0; j < this.TalkData_Kingdom.Count; j++)
		{
			this.TalkData_Kingdom[j].TotalHeight = 0f;
			this.TalkData_Kingdom[j].TotalHeightT = 0f;
		}
	}

	// Token: 0x06000439 RID: 1081 RVA: 0x0005CA50 File Offset: 0x0005AC50
	public bool CheckHideTalk(TalkDataType tmpTalk)
	{
		return tmpTalk.TalkTime < this.RoleAlliance.JoinTime && (tmpTalk.FuncKind == 101 || tmpTalk.FuncKind == 102 || tmpTalk.FuncKind == 105 || tmpTalk.FuncKind == 111);
	}

	// Token: 0x0600043A RID: 1082 RVA: 0x0005CAAC File Offset: 0x0005ACAC
	private void CheckText(TalkDataType tmpTalk)
	{
		tmpTalk.MainText.Append(tmpTalk.OriginalText);
		CString mainText = tmpTalk.MainText;
		int num = -1;
		int num2 = -1;
		bool flag = true;
		byte b = 0;
		int num3 = 0;
		int num4 = 0;
		int num5 = 0;
		int length = mainText.Length;
		int num6 = mainText.Length - 1;
		while (num6 >= 0 && (num == -1 || num2 == -1))
		{
			char c = mainText[num6];
			num6--;
			if (num6 < 0)
			{
				break;
			}
			if (mainText[num6] == ':' && c == 'Y')
			{
				flag = true;
				num2 = num6 + 2;
				num6--;
				if (num6 < 0)
				{
					break;
				}
				c = mainText[num6];
				if (c >= '0' && c <= '9')
				{
					num3 = 0;
					byte b2 = 0;
					do
					{
						num3 += (int)(c - '0') * (int)Math.Pow(10.0, (double)b2);
						b2 += 1;
						num6--;
						if (num6 < 0)
						{
							break;
						}
						c = mainText[num6];
					}
					while (c >= '0' && c <= '9' && num3 < 65535);
					IL_11C:
					num6--;
					if (num6 < 0)
					{
						break;
					}
					if (c != ' ')
					{
						continue;
					}
					c = mainText[num6];
					num6--;
					if (num6 < 0)
					{
						break;
					}
					if (c != 'X' || mainText[num6] != ':')
					{
						continue;
					}
					num6--;
					if (num6 < 0)
					{
						break;
					}
					c = mainText[num6];
					if (c < '0' || c > '9')
					{
						continue;
					}
					num4 = 0;
					b2 = 0;
					do
					{
						num4 += (int)(c - '0') * (int)Math.Pow(10.0, (double)b2);
						b2 += 1;
						num6--;
						if (num6 < 0)
						{
							break;
						}
						c = mainText[num6];
					}
					while (c >= '0' && c <= '9' && num4 < 65535);
					IL_206:
					num6--;
					if (num6 < 0)
					{
						break;
					}
					if (c != ' ')
					{
						continue;
					}
					c = mainText[num6];
					num6--;
					if (num6 < 0)
					{
						break;
					}
					if (c != 'K' || mainText[num6] != ':')
					{
						continue;
					}
					num6--;
					if (num6 < 0)
					{
						break;
					}
					c = mainText[num6];
					if (c < '0' || c > '9')
					{
						continue;
					}
					num5 = 0;
					b2 = 0;
					do
					{
						num5 += (int)(c - '0') * (int)Math.Pow(10.0, (double)b2);
						b2 += 1;
						num6--;
						if (num6 < 0)
						{
							break;
						}
						c = mainText[num6];
					}
					while (c >= '0' && c <= '9' && num5 < 65535);
					IL_2F0:
					num = num6 + 1;
					continue;
					goto IL_2F0;
					goto IL_206;
					goto IL_11C;
				}
			}
		}
		if (num == -1 || num2 == -1)
		{
			num = -1;
			num2 = -1;
		}
		num6 = mainText.Length - 1;
		while (num6 >= 0 && (num == -1 || num2 == -1))
		{
			char c = mainText[num6];
			num6--;
			if (num6 < 0)
			{
				break;
			}
			if (mainText[num6] == ':' && c == 'K')
			{
				flag = true;
				num2 = num6 + 2;
				num6--;
				if (num6 < 0)
				{
					break;
				}
				c = mainText[num6];
				if (c >= '0' && c <= '9')
				{
					num5 = 0;
					byte b2 = 0;
					do
					{
						num5 += (int)(c - '0') * (int)Math.Pow(10.0, (double)b2);
						b2 += 1;
						num6--;
						if (num6 < 0)
						{
							break;
						}
						c = mainText[num6];
					}
					while (c >= '0' && c <= '9' && num5 < 65535);
					IL_401:
					num6--;
					if (num6 < 0)
					{
						break;
					}
					if (c != ' ')
					{
						continue;
					}
					c = mainText[num6];
					num6--;
					if (num6 < 0)
					{
						break;
					}
					if (c != 'X' || mainText[num6] != ':')
					{
						continue;
					}
					num6--;
					if (num6 < 0)
					{
						break;
					}
					c = mainText[num6];
					if (c < '0' || c > '9')
					{
						continue;
					}
					num4 = 0;
					b2 = 0;
					do
					{
						num4 += (int)(c - '0') * (int)Math.Pow(10.0, (double)b2);
						b2 += 1;
						num6--;
						if (num6 < 0)
						{
							break;
						}
						c = mainText[num6];
					}
					while (c >= '0' && c <= '9' && num4 < 65535);
					IL_4EB:
					num6--;
					if (num6 < 0)
					{
						break;
					}
					if (c != ' ')
					{
						continue;
					}
					c = mainText[num6];
					num6--;
					if (num6 < 0)
					{
						break;
					}
					if (c != 'Y' || mainText[num6] != ':')
					{
						continue;
					}
					num6--;
					if (num6 < 0)
					{
						break;
					}
					c = mainText[num6];
					if (c < '0' || c > '9')
					{
						continue;
					}
					num3 = 0;
					b2 = 0;
					do
					{
						num3 += (int)(c - '0') * (int)Math.Pow(10.0, (double)b2);
						b2 += 1;
						num6--;
						if (num6 < 0)
						{
							break;
						}
						c = mainText[num6];
					}
					while (c >= '0' && c <= '9' && num3 < 65535);
					IL_5D5:
					num = num6 + 1;
					continue;
					goto IL_5D5;
					goto IL_4EB;
					goto IL_401;
				}
			}
		}
		if (num == -1 || num2 == -1)
		{
			num = -1;
			num2 = -1;
		}
		num6 = 0;
		while (num6 < length && (num == -1 || num2 == -1))
		{
			char c = mainText[num6];
			num6++;
			if (num6 == length)
			{
				break;
			}
			if (mainText[num6] == ':')
			{
				int num7 = num6;
				if (c == 'K')
				{
					flag = true;
					num = num6 - 1;
					num6++;
					if (num6 >= length)
					{
						break;
					}
					c = mainText[num6];
					if (c >= '0' && c <= '9')
					{
						num5 = 0;
						do
						{
							num5 = num5 * 10 + (int)c - 48;
							num6++;
							if (num6 == length)
							{
								break;
							}
							c = mainText[num6];
						}
						while (c >= '0' && c <= '9' && num5 < 65535);
						IL_6CC:
						num6++;
						if (num6 >= length)
						{
							break;
						}
						if (c == ' ')
						{
							c = mainText[num6];
							num6++;
							if (num6 >= length)
							{
								break;
							}
							if (c == 'X' && mainText[num6] == ':')
							{
								num6++;
								if (num6 >= length)
								{
									break;
								}
								c = mainText[num6];
								if (c >= '0' && c <= '9')
								{
									num4 = 0;
									do
									{
										num4 = num4 * 10 + (int)c - 48;
										num6++;
										if (num6 == length)
										{
											break;
										}
										c = mainText[num6];
									}
									while (c >= '0' && c <= '9' && num4 < 65535);
									IL_7A0:
									num6++;
									if (num6 >= length)
									{
										break;
									}
									if (c != ' ')
									{
										continue;
									}
									c = mainText[num6];
									num6++;
									if (num6 >= length)
									{
										break;
									}
									if (c != 'Y' || mainText[num6] != ':')
									{
										continue;
									}
									num6++;
									if (num6 >= length)
									{
										break;
									}
									c = mainText[num6];
									if (c < '0' || c > '9')
									{
										continue;
									}
									num3 = 0;
									do
									{
										num3 = num3 * 10 + (int)c - 48;
										num6++;
										if (num6 == length)
										{
											break;
										}
										c = mainText[num6];
									}
									while (c >= '0' && c <= '9' && num3 < 65535);
									IL_874:
									num2 = num6;
									continue;
									goto IL_874;
									goto IL_7A0;
								}
							}
						}
						continue;
						goto IL_6CC;
					}
				}
				else if (c >= '0' && c <= '9')
				{
					flag = false;
					num6--;
					do
					{
						num6--;
						if (num6 < 0)
						{
							break;
						}
						c = mainText[num6];
					}
					while (c >= '0' && c <= '9');
					IL_8CF:
					num6++;
					c = mainText[num6];
					num = num6;
					num5 = 0;
					b = 1;
					do
					{
						num5 = num5 * 10 + (int)c - 48;
						num6++;
						if (num6 == length)
						{
							break;
						}
						c = mainText[num6];
					}
					while (c >= '0' && c <= '9' && num5 < 65535);
					IL_931:
					if (c != ':')
					{
						num = -1;
						num6 = num7;
						continue;
					}
					num6++;
					if (num6 >= length)
					{
						break;
					}
					c = mainText[num6];
					if (c >= '0' && c <= '9')
					{
						num4 = 0;
						b += 1;
						do
						{
							num4 = num4 * 10 + (int)c - 48;
							num6++;
							if (num6 == length)
							{
								break;
							}
							c = mainText[num6];
						}
						while (c >= '0' && c <= '9' && num4 < 65535);
						IL_9BD:
						if (c == ':')
						{
							num6++;
							if (num6 >= length)
							{
								break;
							}
							c = mainText[num6];
							if (c >= '0' && c <= '9')
							{
								num3 = 0;
								b += 1;
								do
								{
									num3 = num3 * 10 + (int)c - 48;
									num6++;
									if (num6 == length)
									{
										break;
									}
									c = mainText[num6];
								}
								while (c >= '0' && c <= '9' && num3 < 65535);
							}
						}
						if (b > 1)
						{
							num2 = num6;
							continue;
						}
						continue;
						goto IL_9BD;
					}
					continue;
					goto IL_931;
					goto IL_8CF;
				}
			}
		}
		if (num != -1 && num2 != -1)
		{
			if (flag)
			{
				tmpTalk.King = num5;
				tmpTalk.LocX = num4;
				tmpTalk.LocY = num3;
			}
			else if (b == 2)
			{
				tmpTalk.LocX = num5;
				tmpTalk.LocY = num4;
			}
			else if (b == 3)
			{
				tmpTalk.King = num5;
				tmpTalk.LocX = num4;
				tmpTalk.LocY = num3;
			}
			if ((tmpTalk.King == -1 || (tmpTalk.King != -1 && DataManager.MapDataController.CheckKingdomID((ushort)tmpTalk.King))) && tmpTalk.LocX < 512 && tmpTalk.LocY < 1024)
			{
				tmpTalk.bHasLoc = true;
				tmpTalk.BeginIndex = num;
				tmpTalk.EndIndex = num2;
				mainText.Insert(num, this.ColorL, -1);
				mainText.Insert(num2 + this.ColorL.Length, this.ColorR, -1);
			}
			else
			{
				tmpTalk.King = -1;
				tmpTalk.LocX = -1;
				tmpTalk.LocY = -1;
			}
		}
	}

	// Token: 0x0600043B RID: 1083 RVA: 0x0005D644 File Offset: 0x0005B844
	private int FindCharInString(char cChar, CString tmpStr, int StartIndex = 0)
	{
		for (int i = StartIndex; i < tmpStr.Length; i++)
		{
			if (tmpStr[i] == cChar)
			{
				return i;
			}
		}
		return -1;
	}

	// Token: 0x0600043C RID: 1084 RVA: 0x0005D678 File Offset: 0x0005B878
	public MessageBoard SpawnMessageBoardData()
	{
		MessageBoard messageBoard = this.MessageBoard_Pool.spawn();
		if (messageBoard == null)
		{
			messageBoard = this.MessageBoardList[0];
			this.MessageBoardList.RemoveAt(0);
		}
		messageBoard.Initial();
		return messageBoard;
	}

	// Token: 0x0600043D RID: 1085 RVA: 0x0005D6B8 File Offset: 0x0005B8B8
	public void DeSpawnMessageBoardData(MessageBoard tmpBM)
	{
		this.MessageBoard_Pool.despawn(tmpBM);
	}

	// Token: 0x0600043E RID: 1086 RVA: 0x0005D6C8 File Offset: 0x0005B8C8
	public void ClearMessageBoard()
	{
		for (int i = this.MessageBoardList.Count - 1; i >= 0; i--)
		{
			this.MessageBoard_Pool.despawn(this.MessageBoardList[i]);
			this.MessageBoardList.RemoveAt(i);
		}
	}

	// Token: 0x0600043F RID: 1087 RVA: 0x0005D718 File Offset: 0x0005B918
	public void AskMessageBoard(uint AllianceID)
	{
		if (this.SendAllianceID != AllianceID)
		{
			this.SendAllianceID = AllianceID;
			this.SendMessageID = 0L;
			this.ClearMessageBoard();
		}
		this.FindBlack = 0;
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_VIEWALLY;
		messagePacket.AddSeqId();
		messagePacket.Add(this.SendAllianceID);
		messagePacket.Add(this.SendMessageID);
		messagePacket.Send(false);
		Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
		if (door)
		{
			door.OpenMenu(EGUIWindow.UI_MessageBoard, 1, 0, false);
		}
		GUIManager.Instance.ShowUILock(EUILock.MessageBoard);
	}

	// Token: 0x06000440 RID: 1088 RVA: 0x0005D7C0 File Offset: 0x0005B9C0
	public unsafe void Recv_MessageBoard(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b == 0 || b == 1 || b == 2)
		{
			if (b != 2)
			{
				ushort num = MP.ReadUShort(-1);
				int i = 0;
				while (i < (int)num)
				{
					MessageBoard messageBoard = this.SpawnMessageBoardData();
					messageBoard.MessageID = MP.ReadLong(-1);
					if (this.RoleAlliance.Id == this.SendAllianceID && this.RoleAlliance.ChatId < messageBoard.MessageID)
					{
						this.RoleAlliance.ChatId = messageBoard.MessageID;
					}
					bool flag;
					if (this.SendMessageID < messageBoard.MessageID)
					{
						this.SendMessageID = messageBoard.MessageID;
						flag = true;
					}
					else
					{
						flag = false;
					}
					messageBoard.MessageTime = MP.ReadLong(-1);
					messageBoard.AllianceOrRole = MP.ReadByte(-1);
					messageBoard.PicID = MP.ReadUShort(-1);
					MP.ReadStringPlus(13, messageBoard.NameStr, -1);
					MP.ReadStringPlus(20, messageBoard.AllianceNameStr, -1);
					MP.ReadStringPlus(3, messageBoard.AllianceTagStr, -1);
					if (this.ServerVersionMajor != 0)
					{
						messageBoard.bHaveArabic = MP.ReadByte(-1);
					}
					ushort vsize = MP.ReadUShort(-1);
					MP.ReadStringPlus((int)vsize, messageBoard.MessageStr, -1);
					fixed (string text = messageBoard.MessageStr.ToString())
					{
						fixed (char* ptr = text + RuntimeHelpers.OffsetToStringData / 2)
						{
							for (int j = 0; j < messageBoard.MessageStr.Length; j++)
							{
								if (!this.isNotEmojiCharacter(messageBoard.MessageStr[j]))
								{
									ptr[j] = ' ';
								}
							}
							text = null;
							if (this.FindBlackList(messageBoard.NameStr))
							{
								this.DeSpawnMessageBoardData(messageBoard);
								if (flag)
								{
									this.FindBlack += 1;
								}
							}
							else
							{
								this.MessageBoardList.Add(messageBoard);
								if (b == 1)
								{
									if (DataManager.CompareStr(messageBoard.NameStr, this.RoleAttr.Name) == 0)
									{
										messageBoard.bSelfMessage = true;
									}
									else
									{
										GUIManager.Instance.MB_SetbNeedTranslate(messageBoard);
									}
								}
								else if (b == 0)
								{
									if (DataManager.CompareStr(messageBoard.NameStr, this.RoleAttr.Name) == 0)
									{
										messageBoard.bSelfMessage = true;
									}
									else
									{
										GUIManager.Instance.MB_SetbNeedTranslate(messageBoard);
									}
								}
							}
							i++;
						}
					}
				}
			}
			if (b == 2 && this.FindBlack > 0)
			{
				CString cstring = StringManager.Instance.StaticString1024();
				cstring.IntToFormat((long)this.FindBlack, 1, false);
				cstring.AppendFormat(this.mStringTable.GetStringByID(9721u));
				GUIManager.Instance.AddHUDMessage(cstring.ToString(), 255, true);
			}
			if (b == 0)
			{
				GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_MessageBoard, 1, 0);
			}
			else if (b == 2)
			{
				if (this.RoleAlliance.Id == this.SendAllianceID && this.RoleAlliance.ChatId < this.RoleAlliance.ChatMax)
				{
					this.RoleAlliance.ChatId = this.RoleAlliance.ChatMax;
				}
				GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_MessageBoard, 2, 0);
			}
		}
		else if (b == 3)
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_MessageBoard, 3, 0);
		}
		else if (b == 4)
		{
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(904u), 255, true);
		}
		else if (b == 5)
		{
			Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
			if (door && GUIManager.Instance.FindMenu(EGUIWindow.UI_MessageBoard))
			{
				door.CloseMenu(false);
			}
		}
		if (b != 1)
		{
			GUIManager.Instance.HideUILock(EUILock.MessageBoard);
		}
	}

	// Token: 0x06000441 RID: 1089 RVA: 0x0005DBC4 File Offset: 0x0005BDC4
	public void Recv_DeleteMsg(MessagePacket MP)
	{
		GUIManager.Instance.HideUILock(EUILock.MessageBoard);
		byte b = MP.ReadByte(-1);
		if (b == 0 || b == 2)
		{
			uint num = MP.ReadUInt(-1);
			long num2 = MP.ReadLong(-1);
			if (num == this.SendAllianceID && num2 != 0L)
			{
				for (int i = 0; i < this.MessageBoardList.Count; i++)
				{
					if (this.MessageBoardList[i].MessageID == num2)
					{
						this.MessageBoardList[i].TotalHeight = 0f;
						if (this.MessageBoardList[i].AllianceOrRole == 0)
						{
							this.MessageBoardList[i].AllianceOrRole = 2;
						}
						else if (this.MessageBoardList[i].AllianceOrRole == 1)
						{
							this.MessageBoardList[i].AllianceOrRole = 3;
						}
					}
				}
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_MessageBoard, 7, 0);
			}
			if (b == 0)
			{
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(10073u), 255, true);
			}
		}
		else if (b == 1)
		{
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(10074u), 255, true);
		}
	}

	// Token: 0x06000442 RID: 1090 RVA: 0x0005DD14 File Offset: 0x0005BF14
	public void LoadEmojiSave()
	{
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.AppendFormat("{0}/Data/{1}{2}", AssetManager.persistentDataPath, this.EmojiSaveName, this.RoleAttr.UserId);
		string path = stringBuilder.ToString();
		bool flag = false;
		using (FileStream fileStream = new FileStream(path, FileMode.OpenOrCreate, FileAccess.Read))
		{
			if (fileStream.Length > 0L)
			{
				using (BinaryReader binaryReader = new BinaryReader(fileStream))
				{
					this.EmojiSave = binaryReader.ReadBytes(64);
				}
			}
			else
			{
				this.EmojiSave = new byte[64];
				if (this.EmojiSave == null)
				{
					return;
				}
				if (this.bNeedInitialEmojiSave)
				{
					flag = true;
					int tableCount = DataManager.MapDataController.EmoteTable.TableCount;
					for (int i = 0; i < tableCount; i++)
					{
						Emote recordByIndex = DataManager.MapDataController.EmoteTable.GetRecordByIndex(i);
						if (recordByIndex.EmojiIndex > 1 && recordByIndex.EmojiIndex <= 512 && recordByIndex.FirstShow <= 0)
						{
							int num = (int)(recordByIndex.EmojiIndex - 1);
							byte b = (byte)(1 << num % 8);
							int num2 = num / 8;
							byte[] emojiSave = this.EmojiSave;
							int num3 = num2;
							emojiSave[num3] |= b;
						}
					}
				}
			}
		}
		if (flag)
		{
			this.SaveEmojiSave();
		}
	}

	// Token: 0x06000443 RID: 1091 RVA: 0x0005DEB8 File Offset: 0x0005C0B8
	public void SaveEmojiSave()
	{
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.AppendFormat("{0}/Data/{1}{2}", AssetManager.persistentDataPath, this.EmojiSaveName, this.RoleAttr.UserId);
		string path = stringBuilder.ToString();
		using (FileStream fileStream = new FileStream(path, FileMode.OpenOrCreate))
		{
			using (BinaryWriter binaryWriter = new BinaryWriter(fileStream))
			{
				binaryWriter.Write(this.EmojiSave, 0, 64);
			}
		}
	}

	// Token: 0x06000444 RID: 1092 RVA: 0x0005DF70 File Offset: 0x0005C170
	public bool CheckEmojiSave(ushort Index)
	{
		if (this.EmojiSave == null || Index == 0 || Index > 512)
		{
			return false;
		}
		if (Index == 1)
		{
			return true;
		}
		int num = (int)(Index - 1);
		byte b = (byte)(1 << num % 8);
		int num2 = num / 8;
		return (this.EmojiSave[num2] & b) != 0;
	}

	// Token: 0x06000445 RID: 1093 RVA: 0x0005DFC8 File Offset: 0x0005C1C8
	public void SetEmojiSave(ushort Index)
	{
		if (this.EmojiSave == null || Index <= 1 || Index > 512)
		{
			return;
		}
		int num = (int)(Index - 1);
		byte b = (byte)(1 << num % 8);
		int num2 = num / 8;
		if ((this.EmojiSave[num2] & b) != 0)
		{
			return;
		}
		byte[] emojiSave = this.EmojiSave;
		int num3 = num2;
		emojiSave[num3] |= b;
		this.SaveEmojiSave();
		if (this.EmojiOnGICount > 0)
		{
			this.EmojiOnGICount--;
			Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
			if (door)
			{
				door.m_GroundInfo.SetExclamationmark(this.CheckShowOnGroundInfo());
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Chat, 16, 0);
		}
	}

	// Token: 0x06000446 RID: 1094 RVA: 0x0005E084 File Offset: 0x0005C284
	public bool CheckShowOnGroundInfo()
	{
		if (this.EmojiOnGICount == -1)
		{
			this.EmojiOnGICount = 0;
			int tableCount = DataManager.MapDataController.EmoteTable.TableCount;
			for (int i = 0; i < tableCount; i++)
			{
				Emote recordByIndex = DataManager.MapDataController.EmoteTable.GetRecordByIndex(i);
				if (!this.CheckEmojiSave(recordByIndex.EmojiIndex) && !GUIManager.Instance.HasEmotionPck(recordByIndex.EmojiIndex))
				{
					this.EmojiOnGICount++;
				}
			}
		}
		return this.EmojiOnGICount > 0;
	}

	// Token: 0x06000447 RID: 1095 RVA: 0x0005E11C File Offset: 0x0005C31C
	public void RecvSynthesis(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		uint stock = MP.ReadUInt(-1);
		DataManager.Instance.Resource[4].Stock = stock;
		for (int i = 0; i < 6; i++)
		{
			ushort itemID = MP.ReadUShort(-1);
			this.SetCurItemQuantity(itemID, MP.ReadUShort(-1), 0, 0L);
		}
		GUIManager.Instance.HideUILock(EUILock.Synthesis);
		GameManager.OnRefresh(NetworkNews.Refresh_Item, null);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Synthesis, 0, 0);
		AudioManager.Instance.PlayUISFX(UIKind.EquipFoundry);
	}

	// Token: 0x06000448 RID: 1096 RVA: 0x0005E1A8 File Offset: 0x0005C3A8
	public void SendSynthesis(ushort ItemID)
	{
		if (GUIManager.Instance.ShowUILock(EUILock.Synthesis))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_SYNITEM;
			messagePacket.AddSeqId();
			messagePacket.Add(ItemID);
			messagePacket.Send(false);
		}
	}

	// Token: 0x06000449 RID: 1097 RVA: 0x0005E1F4 File Offset: 0x0005C3F4
	private void UpdateFreeCompleteTime()
	{
		VIP_DataTbl recordByIndex = this.VIPLevelTable.GetRecordByIndex(0);
		for (int i = 0; i < this.VIPLevelTable.TableCount; i++)
		{
			recordByIndex = this.VIPLevelTable.GetRecordByIndex(i);
			if (this.RoleAttr.VipPoint < recordByIndex.VIPPoint)
			{
				this.FreeCompletePeriod = (ushort)(recordByIndex.QuickCompleteMin * 60);
				return;
			}
		}
		this.FreeCompletePeriod = (ushort)(recordByIndex.QuickCompleteMin * 60);
	}

	// Token: 0x0600044A RID: 1098 RVA: 0x0005E274 File Offset: 0x0005C474
	public ushort GetFreeCompleteTime()
	{
		return this.FreeCompletePeriod;
	}

	// Token: 0x0600044B RID: 1099 RVA: 0x0005E27C File Offset: 0x0005C47C
	public string GetLanguageStr(byte LanguageStr)
	{
		if (LanguageStr > 0)
		{
			return this.mStringTable.GetStringByID(4650u + (uint)LanguageStr);
		}
		return this.mStringTable.GetStringByID(4651u);
	}

	// Token: 0x0600044C RID: 1100 RVA: 0x0005E2B4 File Offset: 0x0005C4B4
	public string GetLanguageStr(ushort LanguageStr)
	{
		if (LanguageStr > 0)
		{
			return this.mStringTable.GetStringByID((uint)(4650 + LanguageStr));
		}
		return this.mStringTable.GetStringByID(4651u);
	}

	// Token: 0x0600044D RID: 1101 RVA: 0x0005E2EC File Offset: 0x0005C4EC
	public bool CheckUseItem(ushort ItemID, ushort TargetID = 0, ushort Parameter1 = 0, ushort Parameter2 = 0)
	{
		Equip recordByKey = this.EquipTable.GetRecordByKey(ItemID);
		if (recordByKey.EquipKey != ItemID)
		{
			return false;
		}
		switch (recordByKey.EquipKind - 1)
		{
		case 5:
			if (recordByKey.PropertiesInfo[0].Propertieskey == 4)
			{
				if (this.RoleAttr.Morale + recordByKey.PropertiesInfo[0].PropertiesValue > 999)
				{
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(809u), 255, true);
					return false;
				}
				byte todayUseMoraleItemTimes = this.RoleAttr.TodayUseMoraleItemTimes;
				byte moraleBanner = this.VIPLevelTable.GetRecordByKey((ushort)this.RoleAttr.VIPLevel).moraleBanner;
				GUIManager guimanager = GUIManager.Instance;
				if (todayUseMoraleItemTimes >= moraleBanner)
				{
					guimanager.MsgStr.Length = 0;
					guimanager.MsgStr.IntToFormat((long)moraleBanner, 1, false);
					guimanager.MsgStr.IntToFormat((long)moraleBanner, 1, false);
					guimanager.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8584u));
					guimanager.OpenOKCancelBox(8, this.mStringTable.GetStringByID(5811u), guimanager.MsgStr.ToString(), 73072640, 0, this.mStringTable.GetStringByID(4507u), this.mStringTable.GetStringByID(617u));
					return false;
				}
				return true;
			}
			else
			{
				if (TargetID > 0)
				{
					return true;
				}
				GUIManager.Instance.m_ItemInfo.m_ItemBtn.HIID = ItemID;
				Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
				if (door != null)
				{
					if (recordByKey.PropertiesInfo[0].Propertieskey == 5 || recordByKey.PropertiesInfo[0].Propertieskey == 6)
					{
						if (PetManager.Instance.PetDataCount <= 0)
						{
							GUIManager.Instance.UpdateUI(EGUIWindow.UI_PetBag, 0, 0);
						}
						else
						{
							door.OpenMenu(EGUIWindow.UI_HeroUse, 1, (int)Parameter1, false);
						}
					}
					else
					{
						door.OpenMenu(EGUIWindow.UI_HeroUse, 0, 0, false);
					}
				}
			}
			break;
		case 9:
			switch ((byte)recordByKey.PropertiesInfo[0].Propertieskey)
			{
			case 1:
				return GameConstants.IsMarchDeparture(this.MarchEventData[(int)TargetID].Type);
			case 2:
				if (TargetID == DataManager.mapDataController.OtherKingdomData.kingdomID || TargetID == DataManager.mapDataController.kingdomData.kingdomID)
				{
					return false;
				}
				if (DataManager.mapDataController.FocusKingdomPeriod != KINGDOM_PERIOD.KP_WORLD_WAR && TargetID != DataManager.mapDataController.FocusKingdomID && ActivityManager.Instance.KOWData.EventState != EActivityState.EAS_Run)
				{
					return false;
				}
				for (int i = 0; i < (int)this.MaxMarchEventNum; i++)
				{
					if (this.MarchEventData[i].Type != EMarchEventType.EMET_Standby)
					{
						GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(687u), 0, null, 0, 0, false, false, false, false, false);
						return false;
					}
				}
				return true;
			case 3:
				if (TargetID != DataManager.mapDataController.OtherKingdomData.kingdomID)
				{
					if (DataManager.mapDataController.kingdomData.kingdomPeriod != KINGDOM_PERIOD.KP_KVK && TargetID != DataManager.mapDataController.kingdomData.kingdomID)
					{
						return false;
					}
					for (int j = 0; j < (int)this.MaxMarchEventNum; j++)
					{
						if (this.MarchEventData[j].Type != EMarchEventType.EMET_Standby)
						{
							GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(687u), 0, null, 0, 0, false, false, false, false, false);
							return false;
						}
					}
				}
				else
				{
					for (int k = 0; k < (int)this.MaxMarchEventNum; k++)
					{
						if (this.MarchEventData[k].Type > EMarchEventType.EMET_InforceStanby)
						{
							GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(616u), null, null, 0, 0, false, false, false, false, false);
							return false;
						}
					}
				}
				return true;
			case 4:
				if (TargetID != DataManager.mapDataController.OtherKingdomData.kingdomID)
				{
					if (DataManager.mapDataController.kingdomData.kingdomPeriod != KINGDOM_PERIOD.KP_KVK && (!ActivityManager.Instance.IsNobilityWarRunning(true) || ActivityManager.Instance.FederalActKingdomWonderID == 0 || ActivityManager.Instance.FederalActKingdomWonderID != ActivityManager.Instance.FederalHomeKingdomWonderID || ActivityManager.Instance.FederalActKingdomWonderID != ActivityManager.Instance.FederalFightingWonderID) && TargetID != DataManager.mapDataController.kingdomData.kingdomID)
					{
						return false;
					}
					for (int l = 0; l < (int)this.MaxMarchEventNum; l++)
					{
						if (this.MarchEventData[l].Type != EMarchEventType.EMET_Standby)
						{
							GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(687u), 0, null, 0, 0, false, false, false, false, false);
							return false;
						}
					}
				}
				else
				{
					for (int m = 0; m < (int)this.MaxMarchEventNum; m++)
					{
						if (this.MarchEventData[m].Type > EMarchEventType.EMET_InforceStanby)
						{
							GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(616u), null, null, 0, 0, false, false, false, false, false);
							return false;
						}
					}
				}
				return true;
			case 5:
				if (TargetID != DataManager.mapDataController.OtherKingdomData.kingdomID)
				{
					for (int n = 0; n < (int)this.MaxMarchEventNum; n++)
					{
						if (this.MarchEventData[n].Type != EMarchEventType.EMET_Standby)
						{
							GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(687u), 0, null, 0, 0, false, false, false, false, false);
							return false;
						}
					}
				}
				else
				{
					for (int num = 0; num < (int)this.MaxMarchEventNum; num++)
					{
						if (this.MarchEventData[num].Type > EMarchEventType.EMET_InforceStanby)
						{
							GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(616u), null, null, 0, 0, false, false, false, false, false);
							return false;
						}
					}
				}
				return true;
			case 6:
				this.OpenAllianceBox(recordByKey.PropertiesInfo[0].Propertieskey, 12, false, (long)ItemID);
				break;
			case 7:
				if (this.RoleAlliance.Id != 0u && this.RoleAlliance.Rank == AllianceRank.RANK5)
				{
					this.OpenAllianceBox(recordByKey.PropertiesInfo[0].Propertieskey, 20, false, (long)ItemID);
				}
				else
				{
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4753u), 255, true);
				}
				break;
			case 8:
				if (this.NoUseTalent == 1 && Parameter1 == 0)
				{
					GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(1511u), 255, true);
					return false;
				}
				return true;
			case 20:
			case 21:
			case 24:
			case 25:
			case 29:
			case 36:
			case 37:
			case 41:
			case 42:
			case 43:
			case 44:
			case 50:
				return true;
			case 26:
				if (this.RoleAttr.BookmarkLimit >= 100)
				{
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(642u), 255, true);
					return false;
				}
				return true;
			case 27:
				if (this.RoleAttr.LordEquipBagSize >= 200)
				{
					GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(7528u), 255, true);
					return false;
				}
				return true;
			case 28:
				if (this.RoleAlliance.Id != 0u && this.RoleAlliance.Rank == AllianceRank.RANK5)
				{
					this.OpenAllianceBox(recordByKey.PropertiesInfo[0].Propertieskey, 3, false, (long)ItemID);
				}
				else
				{
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4753u), 255, true);
				}
				break;
			case 30:
				if (this.RoleAttr.MonsterPoint == this.GetMaxMonsterPoint())
				{
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(888u), 255, true);
					return false;
				}
				return true;
			case 31:
			case 32:
				return true;
			case 33:
				if (this.RoleAttr.Level == 60)
				{
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(897u), 255, true);
					return false;
				}
				return true;
			case 34:
				if (!LandWalkerManager.IsBattleFire())
				{
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1579u), 255, true);
					return false;
				}
				return true;
			case 35:
			{
				string text = this.RoleAttr.Name.ToString();
				if (text.Substring(0, 3) == "ID.")
				{
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(8055u), 255, true);
				}
				else
				{
					this.OpenAllianceBox(recordByKey.PropertiesInfo[0].Propertieskey, 10, false, (long)ItemID);
				}
				break;
			}
			case 38:
				for (int num2 = 0; num2 < (int)this.MaxMarchEventNum; num2++)
				{
					if (this.MarchEventData[num2].Type != EMarchEventType.EMET_Standby)
					{
						GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(687u), 0, null, 0, 0, false, false, false, false, false);
						return false;
					}
				}
				return true;
			case 40:
				if (this.RoleAttr.ScardStar >= 100000000u)
				{
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9641u), 255, true);
					return false;
				}
				return true;
			case 49:
			{
				ulong num3 = (ulong)this.PetResource.Stock + (ulong)recordByKey.PropertiesInfo[1].Propertieskey * (ulong)recordByKey.PropertiesInfo[1].PropertiesValue;
				if (num3 > (ulong)-1)
				{
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(14683u), 255, true);
					return false;
				}
				return true;
			}
			}
			break;
		case 10:
		{
			if ((int)recordByKey.PropertiesInfo[0].Propertieskey > this.Resource.Length || recordByKey.PropertiesInfo[0].Propertieskey == 7)
			{
				return true;
			}
			ulong num4 = 0UL;
			if ((int)recordByKey.PropertiesInfo[0].Propertieskey <= this.Resource.Length)
			{
				num4 = (ulong)this.Resource[(int)(recordByKey.PropertiesInfo[0].Propertieskey - 1)].Stock + (ulong)recordByKey.PropertiesInfo[1].Propertieskey * (ulong)recordByKey.PropertiesInfo[1].PropertiesValue;
			}
			if (num4 > (ulong)-1)
			{
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(820u), 255, true);
				return false;
			}
			return true;
		}
		case 11:
		{
			ESpeedUpPercent espeedUpPercent = (ESpeedUpPercent)recordByKey.PropertiesInfo[0].Propertieskey;
			if (espeedUpPercent != ESpeedUpPercent.EUP_TIME_UNIT)
			{
				return true;
			}
			if ((int)TargetID < this.QueueIndexbyUesItemTarget.Length && this.QueueIndexbyUesItemTarget[(int)TargetID] < EQueueBarIndex.MAX && this.queueBarData[(int)((byte)this.QueueIndexbyUesItemTarget[(int)TargetID])].bActive)
			{
				return true;
			}
			if ((int)TargetID == this.MarchEventData.Length)
			{
				return true;
			}
			break;
		}
		case 12:
			if (recordByKey.PropertiesInfo[0].Propertieskey == 1)
			{
				if (this.RoleAttr.VIPLevel == this.RoleAttr.VIPLevelMax)
				{
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(7726u), 24, true);
					return false;
				}
				return true;
			}
			break;
		case 13:
			if (recordByKey.PropertiesInfo[0].Propertieskey == 1)
			{
				Door door2 = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
				if (door2 == null)
				{
					return false;
				}
				MAP_TERRAIN_KIND terrain = door2.GetTerrain(DataManager.mapDataController.OtherKingdomData.kingdomID, (uint)this.RoleAttr.CapitalPoint);
				if (terrain == MAP_TERRAIN_KIND.MTK_FOREST)
				{
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(853u), null, null, 0, 0, false, false, false, false, false);
					return false;
				}
				return true;
			}
			else if (recordByKey.PropertiesInfo[0].Propertieskey == 2)
			{
				return true;
			}
			break;
		case 14:
		case 15:
		case 16:
		case 17:
		case 18:
		case 28:
			return true;
		}
		return false;
	}

	// Token: 0x0600044E RID: 1102 RVA: 0x0005F0D4 File Offset: 0x0005D2D4
	public bool UseItemNote(ushort itemID, ushort targetID = 0, ushort Parameter1 = 0, ushort Parameter2 = 0)
	{
		if ((itemID < 1006 && itemID > 1001) || itemID == GameConstants.WorldTeleportItemID)
		{
			Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
			MAP_TERRAIN_KIND map_TERRAIN_KIND = MAP_TERRAIN_KIND.MTK_PRAIRIE;
			if (door != null)
			{
				map_TERRAIN_KIND = door.GetTerrain(targetID, (uint)GameConstants.PointCodeToMapID(Parameter1, (byte)Parameter2));
			}
			if ((itemID == GameConstants.NewbieTeleportItemID || itemID == GameConstants.WorldTeleportItemID) && targetID != DataManager.mapDataController.OtherKingdomData.kingdomID)
			{
				if (map_TERRAIN_KIND == MAP_TERRAIN_KIND.MTK_FOREST && ShieldLogManager.Instance.HasShieldState())
				{
					GUIManager.Instance.OpenOKCancelBox(3, this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(715u), (int)itemID << 16 | (int)targetID, (int)Parameter1 << 16 | (int)Parameter2, this.mStringTable.GetStringByID(3u), this.mStringTable.GetStringByID(617u));
				}
				else if (itemID == GameConstants.NewbieTeleportItemID)
				{
					GUIManager.Instance.OpenOKCancelBox(3, this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(686u), (int)itemID << 16 | (int)targetID, (int)Parameter1 << 16 | (int)Parameter2, this.mStringTable.GetStringByID(3u), this.mStringTable.GetStringByID(617u));
				}
				else
				{
					GUIManager.Instance.OK((int)itemID << 16 | (int)targetID, (int)Parameter1 << 16 | (int)Parameter2);
				}
			}
			else
			{
				if (itemID == GameConstants.RandomTeleportItemID && targetID == 0)
				{
					targetID = DataManager.mapDataController.OtherKingdomData.kingdomID;
				}
				if (map_TERRAIN_KIND == MAP_TERRAIN_KIND.MTK_FOREST && ShieldLogManager.Instance.HasShieldState())
				{
					GUIManager.Instance.OpenOKCancelBox(3, this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(715u), (int)itemID << 16 | (int)targetID, (int)Parameter1 << 16 | (int)Parameter2, this.mStringTable.GetStringByID(3u), this.mStringTable.GetStringByID(617u));
				}
				else
				{
					GUIManager.Instance.OpenOKCancelBox(3, this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(618u), (int)itemID << 16 | (int)targetID, (int)Parameter1 << 16 | (int)Parameter2, this.mStringTable.GetStringByID(3u), this.mStringTable.GetStringByID(617u));
				}
			}
			return true;
		}
		return false;
	}

	// Token: 0x0600044F RID: 1103 RVA: 0x0005F334 File Offset: 0x0005D534
	public void UseItem(ushort ItemID, ushort Quantity = 1, ushort TargetID = 0, ushort Parameter1 = 0, ushort Parameter2 = 0, uint Parameter3 = 0u, string Name = "", bool check = true)
	{
		if (!check || this.CheckUseItem(ItemID, TargetID, Parameter1, Parameter2))
		{
			this.SendUseItem(ItemID, Quantity, TargetID, Parameter1, Parameter2, Parameter3, Name);
		}
		else
		{
			GUIManager.Instance.bContinuousUse = false;
		}
	}

	// Token: 0x06000450 RID: 1104 RVA: 0x0005F37C File Offset: 0x0005D57C
	public void SetBuyAndUse(byte value)
	{
		this.BuyAndUse = value;
	}

	// Token: 0x06000451 RID: 1105 RVA: 0x0005F388 File Offset: 0x0005D588
	public bool sendBuyItem(byte Type, ushort Key, ushort ItemID, bool BuyAndUse = false, GUIWindow win = null, int arg1 = 0, int arg2 = 0, uint Parameter3 = 0u, string name = "", bool check = true, ushort Qty = 1)
	{
		if (BuyAndUse)
		{
			this.BuyAndUse = 1;
		}
		else
		{
			this.BuyAndUse = 0;
		}
		StoreTbl recordByKey = this.StoreData.GetRecordByKey(Key);
		if (Type == 1)
		{
			if (recordByKey.Price > this.RoleAttr.Diamond)
			{
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3966u), this.mStringTable.GetStringByID(646u), 4, this.mStringTable.GetStringByID(4507u), arg1, arg2, true, false, false, false, false);
				return false;
			}
		}
		else if (Type == 2 && recordByKey.AlliancePoint > this.RoleAlliance.Money)
		{
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(648u), this.mStringTable.GetStringByID(649u), this.mStringTable.GetStringByID(650u), null, 0, 0, false, false, false, false, false);
			return false;
		}
		ushort num = (ushort)(arg1 & 65535);
		ushort num2 = (ushort)(arg2 >> 16);
		ushort num3 = (ushort)(arg2 & 65535);
		MessagePacket messagePacket = new MessagePacket(1024);
		if (BuyAndUse)
		{
			if ((!check || this.CheckUseItem(ItemID, num, num2, num3)) && GUIManager.Instance.ShowUILock(EUILock.BuyItem))
			{
				messagePacket.Protocol = Protocol._MSG_REQUEST_BUYANDUSEITEM;
				messagePacket.AddSeqId();
				messagePacket.Add(Type);
				messagePacket.Add(Key);
				messagePacket.Add(ItemID);
				messagePacket.Add(num);
				messagePacket.Add(num2);
				messagePacket.Add(num3);
				if (ItemID == GameConstants.TalentSaveItemID)
				{
					messagePacket.Add((uint)this.TalentSaveZero);
					messagePacket.Add(Encoding.UTF8.GetBytes(this.SaveTalentData[0].TagName.ToString()), 0, (int)GameConstants.MAX_TALENT_CACHE_NAME_BYTE);
					byte b = 0;
					while ((ushort)b < num3)
					{
						messagePacket.Add(this.TalentSaveQueue[(int)b].TalentID);
						messagePacket.Add(this.TalentSaveQueue[(int)b].AddLevel);
						b += 1;
					}
				}
				else if (ItemID == 1253)
				{
					messagePacket.Add(Parameter3);
					messagePacket.Add(name, Encoding.UTF8.GetByteCount(name));
				}
				else if (ItemID == GameConstants.LESaveItemID)
				{
					messagePacket.Add(Parameter3);
					messagePacket.Add(Encoding.UTF8.GetBytes(UILordEquipSetEdit.showingSet.Name.ToString()), 0, (int)GameConstants.MAX_TALENT_CACHE_NAME_BYTE);
					byte b2 = 0;
					while ((int)b2 < UILordEquipSetEdit.showingSet.SerialNO.Length)
					{
						messagePacket.Add(UILordEquipSetEdit.showingSet.SerialNO[(int)b2]);
						b2 += 1;
					}
				}
				else
				{
					messagePacket.Add(Parameter3);
				}
				messagePacket.Send(false);
			}
		}
		else if (GUIManager.Instance.ShowUILock(EUILock.BuyItem))
		{
			messagePacket.Protocol = Protocol._MSG_REQUEST_BUYITEM;
			messagePacket.AddSeqId();
			messagePacket.Add(Type);
			messagePacket.Add(Key);
			messagePacket.Add(ItemID);
			messagePacket.Add(Qty);
			messagePacket.Send(false);
		}
		return true;
	}

	// Token: 0x06000452 RID: 1106 RVA: 0x0005F6BC File Offset: 0x0005D8BC
	public void sendBuySendItem(byte Type, ushort Key, ushort ItemID, CString Name, ushort Qty = 1)
	{
		StoreTbl recordByKey = this.StoreData.GetRecordByKey(Key);
		if (Type == 1)
		{
			if (recordByKey.Price * (uint)Qty > this.RoleAttr.Diamond)
			{
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3966u), this.mStringTable.GetStringByID(646u), 4, this.mStringTable.GetStringByID(4507u), 0, 0, true, false, false, false, false);
				return;
			}
		}
		else if (Type == 2 && recordByKey.AlliancePoint * (uint)Qty > this.RoleAlliance.Money)
		{
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(648u), this.mStringTable.GetStringByID(649u), this.mStringTable.GetStringByID(650u), null, 0, 0, false, false, false, false, false);
			return;
		}
		if (!GUIManager.Instance.ShowUILock(EUILock.BuyItem))
		{
			return;
		}
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_GIFT;
		messagePacket.AddSeqId();
		messagePacket.Add(Type);
		messagePacket.Add(Key);
		messagePacket.Add(ItemID);
		messagePacket.Add(Name.ToString(), 13);
		messagePacket.Add(Qty);
		messagePacket.Send(false);
	}

	// Token: 0x06000453 RID: 1107 RVA: 0x0005F808 File Offset: 0x0005DA08
	public void RecvBuyItem(MessagePacket MP)
	{
		if (MP.ReadByte(-1) == 0)
		{
			byte b = MP.ReadByte(-1);
			MP.ReadUShort(-1);
			ushort num = MP.ReadUShort(-1);
			ushort quantity = MP.ReadUShort(-1);
			bool flag = false;
			if (this.GetCurItemQuantity(num, 0) == 0)
			{
				flag = true;
			}
			this.SetCurItemQuantity(num, quantity, 0, 0L);
			if (b == 1)
			{
				GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), num, eSpentCredits.eItem);
			}
			else
			{
				this.RoleAlliance.Money = MP.ReadUInt(-1);
			}
			if (flag && (this.bagitemDataComparer.SortType & 2) > 0)
			{
				this.bagitemDataComparer.SortType = 1;
			}
			GUIManager.Instance.HideUILock(EUILock.BuyItem);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Item, null);
			int arg = 65536;
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, arg, (int)num);
			if (this.BuyAndUse == 0)
			{
				AudioManager.Instance.PlayUISFX(UIKind.ItemUse);
			}
		}
	}

	// Token: 0x06000454 RID: 1108 RVA: 0x0005F90C File Offset: 0x0005DB0C
	public void RecvBuySendItem(MessagePacket MP)
	{
		GUIManager.Instance.HideUILock(EUILock.BuyItem);
		byte b = MP.ReadByte(-1);
		if (b > 0)
		{
			switch (b)
			{
			case 6:
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(154u), 255, true);
				return;
			case 7:
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(8459u), 255, true);
				return;
			case 9:
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(12801u), 255, true);
				return;
			case 10:
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(12802u), 255, true);
				return;
			case 11:
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(16027u), 255, true);
				return;
			case 12:
			{
				int arg = 65540;
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, arg, 0);
				return;
			}
			}
			CString cstring = StringManager.Instance.StaticString1024();
			cstring.IntToFormat((long)b, 1, false);
			cstring.AppendFormat(this.mStringTable.GetStringByID(9698u));
			GUIManager.Instance.AddHUDMessage(cstring.ToString(), 255, true);
			return;
		}
		byte b2 = MP.ReadByte(-1);
		if (b2 == 1)
		{
			this.RoleAttr.Diamond = MP.ReadUInt(-1);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
		}
		else
		{
			this.RoleAlliance.Money = MP.ReadUInt(-1);
			GameManager.OnRefresh(NetworkNews.Refresh_Alliance, null);
		}
		GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9091u), 255, true);
	}

	// Token: 0x06000455 RID: 1109 RVA: 0x0005FAE4 File Offset: 0x0005DCE4
	public void RecvBuySendItemReserved(MessagePacket MP)
	{
		GUIManager guimanager = GUIManager.Instance;
		ushort num = MP.ReadUShort(-1);
		this.SetCurItemQuantity(num, MP.ReadUShort(-1), 0, 0L);
		guimanager.MsgStr.ClearString();
		guimanager.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint)this.EquipTable.GetRecordByKey(num).EquipName));
		guimanager.MsgStr.AppendFormat(this.mStringTable.GetStringByID(7014u));
		guimanager.AddHUDMessage(guimanager.MsgStr.ToString(), 28, true);
		GameManager.OnRefresh(NetworkNews.Refresh_Item, null);
	}

	// Token: 0x06000456 RID: 1110 RVA: 0x0005FB7C File Offset: 0x0005DD7C
	public void RecvUpdateItem(MessagePacket MP)
	{
		ushort num = MP.ReadUShort(-1);
		ushort num2 = MP.ReadUShort(-1);
		byte b = MP.ReadByte(-1);
		int num3 = (int)(num2 - this.GetCurItemQuantity(num, b));
		this.SetCurItemQuantity(num, num2, b, MP.ReadLong(-1));
		byte b2 = MP.ReadByte(-1);
		if (b > 0)
		{
			this.ReflashMaterialItem = 1;
			this.UpdateLoadItemNotify();
		}
		if (b2 > 0)
		{
			Equip recordByKey = this.EquipTable.GetRecordByKey(num);
			CString cstring = StringManager.Instance.StaticString1024();
			cstring.Append(this.mStringTable.GetStringByID(840u));
			if (b != 0)
			{
				cstring.StringToFormat(MallManager.Instance.GetItemRankName(b));
				cstring.AppendFormat(this.mStringTable.GetStringByID(7739u));
			}
			CString cstring2 = StringManager.Instance.StaticString1024();
			UIItemInfo.SetNameProperties(null, null, cstring2, null, ref recordByKey, null);
			cstring.Append(cstring2);
			if (num3 > 1)
			{
				cstring.IntToFormat((long)num3, 1, false);
				cstring.AppendFormat("x{0}");
			}
			GUIManager guimanager = GUIManager.Instance;
			if (b2 == 1)
			{
				guimanager.AddHUDMessage(cstring.ToString(), 35, false);
			}
			if (b2 == 2)
			{
				guimanager.mStartV2 = new Vector2(guimanager.m_SpeciallyEffect.mCanvasRT.sizeDelta.x / 2f + 310f, guimanager.m_SpeciallyEffect.mCanvasRT.sizeDelta.y / 2f + 184.5f);
			}
			else if (b2 == 3)
			{
				guimanager.mStartV2 = new Vector2(guimanager.m_SpeciallyEffect.mCanvasRT.sizeDelta.x / 2f, guimanager.m_SpeciallyEffect.mCanvasRT.sizeDelta.y / 2f - 70f);
			}
			else
			{
				guimanager.mStartV2 = new Vector2(guimanager.m_SpeciallyEffect.mCanvasRT.sizeDelta.x / 2f, guimanager.m_SpeciallyEffect.mCanvasRT.sizeDelta.y / 2f);
			}
			PlayerProfileEquip item = default(PlayerProfileEquip);
			item.ItemID = num;
			item.color = b;
			guimanager.m_SpeciallyEffect.mItemlist.Add(item);
			if (guimanager.m_SpeciallyEffect.mItemlist.Count >= 3)
			{
				Array.Clear(guimanager.SE_Kind, 0, guimanager.SE_Kind.Length);
				Array.Clear(guimanager.SE_ItemID, 0, guimanager.SE_ItemID.Length);
				Array.Clear(guimanager.SE_Item_L_Color, 0, guimanager.SE_Item_L_Color.Length);
				for (int i = 0; i < 3; i++)
				{
					if (guimanager.m_SpeciallyEffect.mItemlist[i].ItemID != 0)
					{
						guimanager.SE_ItemID[i] = guimanager.m_SpeciallyEffect.mItemlist[i].ItemID;
						guimanager.SE_Item_L_Color[i] = guimanager.m_SpeciallyEffect.mItemlist[i].color;
					}
				}
				guimanager.m_SpeciallyEffect.AddIconShow(guimanager.mStartV2, guimanager.SE_Kind, guimanager.SE_ItemID, true);
				for (int j = 0; j < 3; j++)
				{
					guimanager.m_SpeciallyEffect.mItemlist.RemoveAt(0);
				}
			}
			guimanager.m_SpeciallyEffect.m_ItemNextTime = 0.75f;
		}
		GameManager.OnRefresh(NetworkNews.Refresh_Item, null);
		PetManager.Instance.CheckNewPetBook(num, 0);
	}

	// Token: 0x06000457 RID: 1111 RVA: 0x0005FF2C File Offset: 0x0005E12C
	public void ResetAllianceMemberData()
	{
		this.m_RecvDataIdx = 0;
		this.m_IsAllianceMemberDataFinish = 0;
		this.m_RemoveIndex = -1;
		Array.Clear(this.AllianceMember, 0, this.AllianceMember.Length);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_List, 0, 0);
	}

	// Token: 0x06000458 RID: 1112 RVA: 0x0005FF68 File Offset: 0x0005E168
	public void RecvAllianceMember(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = MP.ReadByte(-1);
		byte b3 = MP.ReadByte(-1);
		if (b == 0 || b == 2)
		{
			if (b == 0)
			{
				if (this.m_IsAllianceMemberDataFinish == 1)
				{
					this.m_RecvDataIdx = 0;
				}
				int num = 0;
				while (num < (int)b3 && this.m_RecvDataIdx < this.AllianceMember.Length)
				{
					this.AllianceMember[this.m_RecvDataIdx].UserId = MP.ReadLong(-1);
					this.AllianceMember[this.m_RecvDataIdx].Head = MP.ReadUShort(-1);
					this.AllianceMember[this.m_RecvDataIdx].Name = MP.ReadString(13, -1);
					this.AllianceMember[this.m_RecvDataIdx].Rank = (AllianceRank)MP.ReadByte(-1);
					this.AllianceMember[this.m_RecvDataIdx].Power = MP.ReadULong(-1);
					this.AllianceMember[this.m_RecvDataIdx].TroopKillNum = MP.ReadULong(-1);
					this.AllianceMember[this.m_RecvDataIdx].LogoutTime = MP.ReadLong(-1);
					this.m_RecvDataIdx++;
					num++;
				}
			}
			else if (b == 2)
			{
				for (int i = 0; i < (int)b3; i++)
				{
					AllianceMemberClientDataType allianceMemberClientDataType = default(AllianceMemberClientDataType);
					allianceMemberClientDataType.UserId = MP.ReadLong(-1);
					allianceMemberClientDataType.Head = MP.ReadUShort(-1);
					allianceMemberClientDataType.Name = MP.ReadString(13, -1);
					allianceMemberClientDataType.Rank = (AllianceRank)MP.ReadByte(-1);
					allianceMemberClientDataType.Power = MP.ReadULong(-1);
					allianceMemberClientDataType.TroopKillNum = MP.ReadULong(-1);
					allianceMemberClientDataType.LogoutTime = MP.ReadLong(-1);
					for (int j = 0; j < this.AllianceMember.Length; j++)
					{
						if (this.AllianceMember[j].UserId == allianceMemberClientDataType.UserId)
						{
							this.AllianceMember[j] = allianceMemberClientDataType;
							break;
						}
					}
				}
			}
			this.m_IsAllianceMemberDataFinish = b2;
			if (b2 == 1)
			{
				this.m_RecvDataIdx = 0;
			}
		}
	}

	// Token: 0x06000459 RID: 1113 RVA: 0x000601AC File Offset: 0x0005E3AC
	public unsafe void RecvAllianceMemberNickName(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = MP.ReadByte(-1);
		byte b3 = MP.ReadByte(-1);
		if (b == 0 || b == 2)
		{
			if (b == 0)
			{
				if (this.m_IsAllianceMemberDataFinish == 1)
				{
					this.m_RecvDataIdx = 0;
				}
				int num = 0;
				while (num < (int)b3 && this.m_RecvDataIdx < this.AllianceMember.Length)
				{
					this.AllianceMember[this.m_RecvDataIdx].UserId = MP.ReadLong(-1);
					this.AllianceMember[this.m_RecvDataIdx].NickName = MP.ReadString(41, -1);
					fixed (string text = this.AllianceMember[this.m_RecvDataIdx].NickName)
					{
						fixed (char* ptr = text + RuntimeHelpers.OffsetToStringData / 2)
						{
							for (int i = 0; i < this.AllianceMember[this.m_RecvDataIdx].NickName.Length; i++)
							{
								if (!this.isNotEmojiCharacter(this.AllianceMember[this.m_RecvDataIdx].NickName[i]))
								{
									ptr[i] = ' ';
								}
							}
							text = null;
							this.m_RecvDataIdx++;
							num++;
						}
					}
				}
			}
			else if (b == 2)
			{
				string text2 = string.Empty;
				int j = 0;
				while (j < (int)b3)
				{
					long num2 = MP.ReadLong(-1);
					text2 = MP.ReadString(41, -1);
					fixed (string text3 = text2)
					{
						fixed (char* ptr2 = text3 + RuntimeHelpers.OffsetToStringData / 2)
						{
							for (int k = 0; k < text2.Length; k++)
							{
								if (!this.isNotEmojiCharacter(text2[k]))
								{
									ptr2[k] = ' ';
								}
							}
							text3 = null;
							for (int l = 0; l < this.AllianceMember.Length; l++)
							{
								if (this.AllianceMember[l].UserId == num2)
								{
									AllianceMemberClientDataType allianceMemberClientDataType = this.AllianceMember[l];
									allianceMemberClientDataType.NickName = text2;
									break;
								}
							}
							j++;
						}
					}
				}
			}
			this.m_IsAllianceMemberDataFinish = b2;
			if (b2 == 1)
			{
				Array.Sort<AllianceMemberClientDataType>(this.AllianceMember, 0, this.m_RecvDataIdx, this.allianceMemberComparer);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_List, 0, 0);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_LeaderBoard, 0, 0);
			}
		}
	}

	// Token: 0x0600045A RID: 1114 RVA: 0x00060418 File Offset: 0x0005E618
	public void RecvAllianceApplyMember(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte isAllianceMemberDataFinish = MP.ReadByte(-1);
		byte b2 = MP.ReadByte(-1);
		if (b == 0)
		{
			if (this.m_IsAllianceMemberDataFinish == 1)
			{
				this.m_RecvDataIdx = 0;
			}
			int num = 0;
			while (num < (int)b2 && this.m_RecvDataIdx < this.AllianceMember.Length)
			{
				this.AllianceMember[this.m_RecvDataIdx].UserId = MP.ReadLong(-1);
				this.AllianceMember[this.m_RecvDataIdx].Head = MP.ReadUShort(-1);
				this.AllianceMember[this.m_RecvDataIdx].Name = MP.ReadString(13, -1);
				this.AllianceMember[this.m_RecvDataIdx].Rank = (AllianceRank)MP.ReadByte(-1);
				this.AllianceMember[this.m_RecvDataIdx].Power = MP.ReadULong(-1);
				this.AllianceMember[this.m_RecvDataIdx].TroopKillNum = MP.ReadULong(-1);
				this.m_RecvDataIdx++;
				num++;
			}
			this.m_IsAllianceMemberDataFinish = isAllianceMemberDataFinish;
			if (this.m_IsAllianceMemberDataFinish == 1)
			{
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_List, 0, 0);
			}
		}
	}

	// Token: 0x0600045B RID: 1115 RVA: 0x0006055C File Offset: 0x0005E75C
	public void RecvAllianceApplyResult(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		uint num = MP.ReadUInt(-1);
		byte b2 = MP.ReadByte(-1);
		long num2 = MP.ReadLong(-1);
		if (b == 0)
		{
			string text = null;
			int num3 = 0;
			while (num3 < this.AllianceMember.Length && num3 < this.m_RecvDataIdx)
			{
				if (this.AllianceMember[num3].UserId == num2)
				{
					text = this.AllianceMember[num3].Name;
					break;
				}
				num3++;
			}
			if (text != null)
			{
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_List, 1, 0);
				CString cstring = StringManager.Instance.StaticString1024();
				cstring.ClearString();
				if (b2 == 1)
				{
					cstring.StringToFormat(text);
					cstring.AppendFormat(DataManager.instance.mStringTable.GetStringByID(601u));
					GUIManager.Instance.AddHUDMessage(cstring.ToString(), 255, true);
				}
				else
				{
					cstring.StringToFormat(text);
					cstring.AppendFormat(DataManager.instance.mStringTable.GetStringByID(600u));
					GUIManager.Instance.AddHUDMessage(cstring.ToString(), 255, true);
				}
			}
		}
		else if (b == 4)
		{
			GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(4719u), 255, true);
		}
		else if (b == 5)
		{
			GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(8459u), 255, true);
		}
		else if (b == 7)
		{
			GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(8459u), 255, true);
		}
		GUIManager.Instance.HideUILock(EUILock.Alliance_List);
		this.m_RemoveIndex = -1;
	}

	// Token: 0x0600045C RID: 1116 RVA: 0x00060740 File Offset: 0x0005E940
	public void SendAllianceMember()
	{
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_MEMBERINFO;
		messagePacket.AddSeqId();
		messagePacket.Send(false);
	}

	// Token: 0x0600045D RID: 1117 RVA: 0x00060774 File Offset: 0x0005E974
	public void SendAllianceApplyMember()
	{
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_APPLYLIST;
		messagePacket.AddSeqId();
		messagePacket.Send(false);
	}

	// Token: 0x0600045E RID: 1118 RVA: 0x000607A8 File Offset: 0x0005E9A8
	public void SendAllianceApplyResult(byte DealType, long userID)
	{
		if (GUIManager.Instance.ShowUILock(EUILock.Alliance_List))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_DEALAPPLY;
			messagePacket.AddSeqId();
			messagePacket.Add(DealType);
			messagePacket.Add(userID);
			messagePacket.Send(false);
		}
	}

	// Token: 0x0600045F RID: 1119 RVA: 0x000607F8 File Offset: 0x0005E9F8
	public void SendAlliancePublicInfo(uint A_ID, string Tag, byte mType = 0)
	{
		if ((A_ID > 0u || Tag != string.Empty) && GUIManager.Instance.ShowUILock(EUILock.Alliance_Manage))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_PUBLICINFO;
			messagePacket.AddSeqId();
			messagePacket.Add(A_ID);
			messagePacket.Add(mType);
			messagePacket.Add(Tag, 3);
			messagePacket.Send(false);
		}
	}

	// Token: 0x06000460 RID: 1120 RVA: 0x00060868 File Offset: 0x0005EA68
	public void SendAllinceInvite(string mSendName)
	{
		if (GUIManager.Instance.ShowUILock(EUILock.Alliance_Manage))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_INVITE;
			messagePacket.AddSeqId();
			messagePacket.Add(mSendName, 13);
			messagePacket.Send(false);
		}
	}

	// Token: 0x06000461 RID: 1121 RVA: 0x000608B4 File Offset: 0x0005EAB4
	public void RecvAllianceQuit(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 == 0)
		{
			byte b3 = MP.ReadByte(-1);
			if (b3 == 1)
			{
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(604u), this.mStringTable.GetStringByID(519u), null, 0, 0, false, false, false, false, false);
			}
			else if (b3 == 2)
			{
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(612u), this.mStringTable.GetStringByID(519u), null, 0, 0, false, false, false, false, false);
			}
			else if (b3 == 3)
			{
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_List, 2, 0);
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(740u), this.mStringTable.GetStringByID(512u), GUIManager.Instance.FindMenu(EGUIWindow.UI_SummonMonster), 0, 0, false, false, false, false, false);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, -1, 100);
			}
			this.RoleAlliance.Id = 0u;
			this.RoleAlliance.Applicant = 0;
			this.RoleAlliance.GiftNum = 0;
			this.RoleAlliance.ChatMax = 0L;
			this.RoleAlliance.ChatId = 0L;
			this.RoleAlliance.GiftLv = 1;
			this.RoleAlliance.PackPoint = 0u;
			this.RoleAlliance.PackItemID = 0;
			this.RoleAlliance.KingdomID = 0;
			this.RoleAlliance.GiftExp = 0u;
			this.RoleAlliance.AMRank = 0;
			this.mListGift.Clear();
			this.mShowListIdx.Clear();
			this.mShowListUnOpenIdx = 0;
			this.RoleAlliance.Tag.ClearString();
			this.bSendtoGetGift = true;
			this.SendAllianceID = 0u;
			this.SendMessageID = 0L;
			ActivityManager activityManager = ActivityManager.Instance;
			GUIManager guimanager = GUIManager.Instance;
			MobilizationManager.Instance.bFirstOpen = true;
			if (MobilizationManager.Instance.mMissionID != 0)
			{
				DataManager.Instance.SetQueueBarData(EQueueBarIndex.Mobilization, false, 0L, 0u);
			}
			MobilizationManager.Instance.mMissionID = 0;
			MobilizationManager.Instance.CompleteScore = 0u;
			MobilizationManager.Instance.AMScore = 0u;
			MobilizationManager.Instance.AMCompleteDegree = 0;
			activityManager.CheckAMShowHint();
			activityManager.SetAllianceSummon_Score(0u);
			activityManager.ClearAllianceSummonData();
			activityManager.AW_NowAllianceEnterWar = 0;
			activityManager.AW_Rank = 0;
			activityManager.AW_MemberCount = 0;
			activityManager.AllianceWarMgr.Clear();
			activityManager.AllianceWarData.bAskRankPrize = false;
			activityManager.UpDateAllianceWarTop();
			activityManager.CheckAWShowHint();
			UIAllianceWar_Rank.isDataReady = false;
			guimanager.UpdateUI(EGUIWindow.UI_AllianceWar_Rank, 2, 0);
			guimanager.UpdateUI(EGUIWindow.UI_AlliWarSchedule, 2, 0);
			guimanager.HideUILock(EUILock.Alliance_Manage);
			GameManager.OnRefresh(NetworkNews.Refresh_Alliance, null);
			DataManager.missionDataManager.CheckChanged(eMissionKind.Record, 7, (ushort)this.RoleAlliance.Id);
			this.ClearTalkAlliance();
			this.mHelpDataList.Clear();
			DataManager.Instance.bNeedSortQueueBarData = true;
			guimanager.UpdateUI(EGUIWindow.Door, 11, 0);
			guimanager.UpdateUI(EGUIWindow.Door, 17, 0);
			guimanager.UpdateUI(EGUIWindow.Door, 15, 0);
			guimanager.UpdateUI(EGUIWindow.Door, 19, 0);
			guimanager.UpdateUI(EGUIWindow.UI_Alliance_Info, 3, 0);
			guimanager.UpdateUI(EGUIWindow.UI_Mission, 8, 0);
			activityManager.KvKActivityData[1].EventScore = 0UL;
			activityManager.KvKActivityData[3].EventScore = 0UL;
			activityManager.FIFAData[2].bAskDetailData = false;
			activityManager.FIFAData[1].EventScore = 0UL;
			guimanager.UpdateUI(EGUIWindow.UI_Activity1, 5, 0);
			guimanager.UpdateUI(EGUIWindow.UI_Activity2, 2, 208);
			guimanager.UpdateUI(EGUIWindow.UI_Activity2, 2, 212);
			guimanager.UpdateUI(EGUIWindow.UI_Activity2, 2, 213);
			this.EmptyWarHall(true);
			this.EmptyRallyDetail();
			this.WarhallProtocol = 0;
			this.DelRallyUIStack();
			this.m_Wonders.Clear();
			this.AttribVal.UpdateAttrVal(UpdateAttrKind.Wonder);
			guimanager.UpdateUI(EGUIWindow.UI_Rally, 1, 0);
			DataManager.msgBuffer[0] = 53;
			GameManager.notifyObservers(1, 0, DataManager.msgBuffer);
			guimanager.UpdateUI(EGUIWindow.UI_Alliance_Gift, 10, 0);
			guimanager.UpdateUI(EGUIWindow.UI_Alliance_Mobilization, 11, 0);
			guimanager.UpdateUI(EGUIWindow.UI_Activity1, 12, 206);
			activityManager.AllianceSummon_SummonData.SummonPoint = 0;
			activityManager.AllianceSummon_SummonData.MonsterID = 0;
			activityManager.AllianceSummon_SummonData.MonsterEndTime = 0L;
			guimanager.UpdateUI(EGUIWindow.UI_SummonMonster, 3, 0);
			guimanager.UpdateUI(EGUIWindow.UIDonation, 5, 0);
			guimanager.UpdateUI(EGUIWindow.UI_AllianceWarBattle, 0, 0);
			guimanager.UpdateUI(EGUIWindow.UI_Alliance_ActivityGift, 10, 0);
			ActivityGiftManager.Instance.cleanQuitAlliance();
			this.RoleAlliance.AMRankMainInfoUIShow = 0;
			this.RoleAlliance.AWRankMainInfoUIShow = 0;
			this.RoleAlliance.AMPlaceMainInfoUIShow = 0;
		}
	}

	// Token: 0x06000462 RID: 1122 RVA: 0x00060D80 File Offset: 0x0005EF80
	public void RecvAllianceSlogan(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 == 0)
		{
			this.RoleAlliance.Header = MP.ReadString(20, -1);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Management, 4, 0);
			GUIManager.Instance.HideUILock(EUILock.Alliance_Manage);
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(605u), 255, true);
		}
	}

	// Token: 0x06000463 RID: 1123 RVA: 0x00060DF8 File Offset: 0x0005EFF8
	public void RecvAllianceNeedApply(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 == 0)
		{
			this.RoleAlliance.Approval = MP.ReadByte(-1);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Management, 2, 0);
			GUIManager.Instance.HideUILock(EUILock.Alliance_Manage);
		}
	}

	// Token: 0x06000464 RID: 1124 RVA: 0x00060E50 File Offset: 0x0005F050
	public void RecvAllianceModifyEmblem(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 == 0)
		{
			this.RoleAlliance.Emblem = MP.ReadUShort(-1);
			GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eAllianceModifyEmblem);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			GUIManager.Instance.UpdateUI(EGUIWindow.UIAlliance_Badge, 1, 0);
			GUIManager.Instance.HideUILock(EUILock.Alliance_Manage);
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(611u), 255, true);
		}
	}

	// Token: 0x06000465 RID: 1125 RVA: 0x00060EE0 File Offset: 0x0005F0E0
	public void RecvAllianceModifyLanguage(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 == 0)
		{
			this.RoleAlliance.Language = MP.ReadByte(-1);
			GUIManager.Instance.HideUILock(EUILock.Alliance_Manage);
			GUIManager.Instance.UpdateUI(EGUIWindow.UIAlliance_publicinfo, 4, 0);
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(608u), 255, true);
		}
	}

	// Token: 0x06000466 RID: 1126 RVA: 0x00060F58 File Offset: 0x0005F158
	public unsafe void RecvAllianceModifyBulletin(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 == 0)
		{
			this.RoleAlliance.Bullet = MP.ReadString(900, -1);
			fixed (string text = this.RoleAlliance.Bullet)
			{
				fixed (char* ptr = text + RuntimeHelpers.OffsetToStringData / 2)
				{
					for (int i = 0; i < this.RoleAlliance.Bullet.Length; i++)
					{
						if (!this.isNotEmojiCharacter(this.RoleAlliance.Bullet[i]))
						{
							ptr[i] = ' ';
						}
					}
					text = null;
					this.RoleAlliance.BulletinFlag = MP.ReadByte(-1);
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 1, 0);
					GUIManager.Instance.HideUILock(EUILock.Alliance_Manage);
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(606u), 255, true);
				}
			}
		}
	}

	// Token: 0x06000467 RID: 1127 RVA: 0x00061044 File Offset: 0x0005F244
	public unsafe void RecvAllianceModifyBrief(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 == 0)
		{
			this.RoleAlliance.Notice = MP.ReadString(1300, -1);
			fixed (string text = this.RoleAlliance.Notice)
			{
				fixed (char* ptr = text + RuntimeHelpers.OffsetToStringData / 2)
				{
					for (int i = 0; i < this.RoleAlliance.Notice.Length; i++)
					{
						if (!this.isNotEmojiCharacter(this.RoleAlliance.Notice[i]))
						{
							ptr[i] = ' ';
						}
					}
					text = null;
					this.RoleAlliance.NoticeinFlag = MP.ReadByte(-1);
					GUIManager.Instance.UpdateUI(EGUIWindow.UIAlliance_publicinfo, 3, 0);
					GUIManager.Instance.HideUILock(EUILock.Alliance_Manage);
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(607u), 255, true);
				}
			}
		}
	}

	// Token: 0x06000468 RID: 1128 RVA: 0x00061130 File Offset: 0x0005F330
	public unsafe void RecvAlliancePublicInfo(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 != 0)
		{
			if (b2 == 1)
			{
				GUIManager.Instance.UpdateUI(EGUIWindow.UIAlliance_publicinfo, 6, 0);
				GUIManager.Instance.HideUILock(EUILock.Alliance_Manage);
				GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(7084u), 255, true);
			}
		}
		else
		{
			this.AllianceView.Id = MP.ReadUInt(-1);
			MP.ReadByte(-1);
			this.AllianceView.Leader = MP.ReadString(13, -1);
			this.AllianceView.Tag = MP.ReadString(3, -1);
			this.AllianceView.Name = MP.ReadString(20, -1);
			this.AllianceView.Notice = MP.ReadString(1300, -1);
			fixed (string text = this.AllianceView.Notice)
			{
				fixed (char* ptr = text + RuntimeHelpers.OffsetToStringData / 2)
				{
					for (int i = 0; i < this.AllianceView.Notice.Length; i++)
					{
						if (!this.isNotEmojiCharacter(this.AllianceView.Notice[i]))
						{
							ptr[i] = ' ';
						}
					}
					text = null;
					this.AllianceView.Header = MP.ReadString(20, -1);
					this.AllianceView.Emblem = MP.ReadUShort(-1);
					this.AllianceView.Language = MP.ReadByte(-1);
					this.AllianceView.Approval = MP.ReadByte(-1);
					this.AllianceView.Member = MP.ReadByte(-1);
					this.AllianceView.Power = MP.ReadULong(-1);
					this.AllianceView.GiftLv = MP.ReadByte(-1);
					this.AllianceView.KingdomID = MP.ReadUShort(-1);
					this.AllianceView.NoticeFlag = MP.ReadByte(-1);
					this.AllianceView.AMRankMainInfoUIShow = MP.ReadByte(-1);
					this.AllianceView.AWRankMainInfoUIShow = MP.ReadByte(-1);
					this.AllianceView.AMPlaceMainInfoUIShow = MP.ReadByte(-1);
					GUIManager.Instance.UpdateUI(EGUIWindow.UIAlliance_publicinfo, 1, 0);
					GUIManager.Instance.HideUILock(EUILock.Alliance_Manage);
				}
			}
		}
	}

	// Token: 0x06000469 RID: 1129 RVA: 0x00061364 File Offset: 0x0005F564
	public void SendAllianceModifyRank(long UserId, AllianceRank Rank)
	{
		if (Rank == AllianceRank.NULL || UserId == 0L)
		{
			return;
		}
		if (GUIManager.Instance.ShowUILock(EUILock.Alliance_List))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_MODIFY_RANK;
			messagePacket.AddSeqId();
			messagePacket.Add(UserId);
			messagePacket.Add((byte)Rank);
			messagePacket.Send(false);
		}
	}

	// Token: 0x0600046A RID: 1130 RVA: 0x000613C4 File Offset: 0x0005F5C4
	public void SendAllianceQuitMember(long UserId)
	{
		if (UserId == 0L)
		{
			return;
		}
		if (GUIManager.Instance.ShowUILock(EUILock.Alliance_List))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_QUITMEMBER;
			messagePacket.AddSeqId();
			messagePacket.Add(UserId);
			messagePacket.Send(false);
		}
	}

	// Token: 0x0600046B RID: 1131 RVA: 0x00061414 File Offset: 0x0005F614
	public void RecvAllianceModifyRank(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		long num = MP.ReadLong(-1);
		AllianceRank rank = (AllianceRank)MP.ReadByte(-1);
		if (b == 0)
		{
			for (int i = 0; i < this.AllianceMember.Length; i++)
			{
				if (this.AllianceMember[i].UserId == num)
				{
					this.AllianceMember[i].Rank = rank;
					break;
				}
			}
			Array.Sort<AllianceMemberClientDataType>(this.AllianceMember, 0, this.m_RecvDataIdx, this.allianceMemberComparer);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_List, 0, 0);
			GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(741u), 255, true);
		}
		else if (b == 5)
		{
			GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(8459u), 255, true);
		}
		GUIManager.Instance.HideUILock(EUILock.Alliance_List);
	}

	// Token: 0x0600046C RID: 1132 RVA: 0x00061510 File Offset: 0x0005F710
	public void RecvAllianceQuitMember(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		long num = MP.ReadLong(-1);
		if (b == 0)
		{
			for (int i = 0; i < this.AllianceMember.Length; i++)
			{
				if (this.AllianceMember[i].UserId == num)
				{
					this.AllianceMember[i].UserId = 0L;
					this.AllianceMember[i].LogoutTime = 0L;
					this.AllianceMember[i].TroopKillNum = 0UL;
					this.AllianceMember[i].Power = 0UL;
					this.AllianceMember[i].Head = 0;
					this.AllianceMember[i].Rank = AllianceRank.NULL;
					this.AllianceMember[i].Name = null;
					break;
				}
			}
			this.m_RemoveIndex = -1;
		}
		else if (b == 5)
		{
			GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(8459u), 255, true);
		}
		GUIManager.Instance.HideUILock(EUILock.Alliance_List);
	}

	// Token: 0x0600046D RID: 1133 RVA: 0x00061630 File Offset: 0x0005F830
	public void RecvAllianceNeedHelp(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = MP.ReadByte(-1);
		for (int i = 0; i < (int)b2; i++)
		{
			AllianceHelpRecordCMsgDataType item;
			item.AllianceHelpRecordSN = MP.ReadUInt(-1);
			item.Head = MP.ReadUShort(-1);
			item.Rank = (AllianceRank)MP.ReadByte(-1);
			item.PlayerName = MP.ReadString(13, -1);
			item.HelpKind = (EAllianceHelpKind)MP.ReadByte(-1);
			item.EventID = MP.ReadUShort(-1);
			item.EventDataLv = MP.ReadByte(-1);
			item.AlreadyHelperNum = MP.ReadByte(-1);
			item.HelpMax = MP.ReadByte(-1);
			this.mHelpDataList.Add(item);
		}
		if (b == 1)
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 11, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 3, 0);
		}
	}

	// Token: 0x0600046E RID: 1134 RVA: 0x0006171C File Offset: 0x0005F91C
	public void SendAllianceHelp(byte mType)
	{
		if (!GUIManager.Instance.ShowUILock(EUILock.Alliance_Help))
		{
			return;
		}
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_HELP;
		messagePacket.AddSeqId();
		messagePacket.Add(mType);
		messagePacket.Send(false);
	}

	// Token: 0x0600046F RID: 1135 RVA: 0x00061768 File Offset: 0x0005F968
	public void RecvAllianceHelp(MessagePacket MP)
	{
		if (MP.ReadByte(-1) == 0)
		{
			int num = (int)MP.ReadByte(-1);
			num = Mathf.Clamp(num, 0, this.mPlayHelpDataType.Length - 1);
			this.mPlayHelpDataType[num].Kind = 2;
			this.mPlayHelpDataType[num].EventID = MP.ReadUShort(-1);
			this.mPlayHelpDataType[num].EventDataLv = MP.ReadByte(-1);
			this.mPlayHelpDataType[num].HelpMax = MP.ReadByte(-1);
			if (DataManager.Instance.OpenBuildingWindowUpdateNoClose == 1)
			{
				GameConstants.GetBytes(0, DataManager.msgBuffer, 0);
			}
			else
			{
				GameConstants.GetBytes(1, DataManager.msgBuffer, 0);
			}
			if (num == 0)
			{
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_TechInstitute, 1, 0);
				GameManager.OnRefresh(NetworkNews.Refresh_Technology, DataManager.msgBuffer);
			}
			else
			{
				GameManager.OnRefresh(NetworkNews.Refresh_BuildBase, DataManager.msgBuffer);
			}
			GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(762u), 9, true);
			DataManager.Instance.bNeedSortQueueBarData = true;
			GUIManager.Instance.HideUILock(EUILock.Alliance_Help);
			DataManager.Instance.OpenBuildingWindowUpdateNoClose = 0;
		}
	}

	// Token: 0x06000470 RID: 1136 RVA: 0x0006189C File Offset: 0x0005FA9C
	public void RecvAllianceSomebodyNeedHelp(MessagePacket MP)
	{
		AllianceHelpRecordCMsgDataType item;
		item.AllianceHelpRecordSN = MP.ReadUInt(-1);
		item.Head = MP.ReadUShort(-1);
		item.Rank = (AllianceRank)MP.ReadByte(-1);
		item.PlayerName = MP.ReadString(13, -1);
		item.HelpKind = (EAllianceHelpKind)MP.ReadByte(-1);
		item.EventID = MP.ReadUShort(-1);
		item.EventDataLv = MP.ReadByte(-1);
		item.AlreadyHelperNum = MP.ReadByte(-1);
		item.HelpMax = MP.ReadByte(-1);
		this.mHelpDataList.Add(item);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_HelpSpeedup, 3, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.Door, 11, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 3, 0);
	}

	// Token: 0x06000471 RID: 1137 RVA: 0x00061970 File Offset: 0x0005FB70
	public void SendAllianceHelpSomebody()
	{
	}

	// Token: 0x06000472 RID: 1138 RVA: 0x00061974 File Offset: 0x0005FB74
	public void RecvAllianceHelpSomebody(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b == 0)
		{
			uint dailyHelpGetAllianceMoney = this.DailyHelpGetAllianceMoney;
			this.DailyHelpGetAllianceMoney = MP.ReadUInt(-1);
			this.RoleAlliance.Money = MP.ReadUInt(-1);
			ushort num = MP.ReadUShort(-1);
			GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(763u), 9, true);
			GUIManager.Instance.HideUILock(EUILock.Alliance_Help);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_HelpSpeedup, 3, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_HelpSpeedup, 6, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 11, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 3, 0);
			AFAdvanceManager.Instance.CheckGuildHelpUnbroken();
			if (dailyHelpGetAllianceMoney < this.DailyHelpGetAllianceMoney)
			{
				AudioManager.Instance.PlayUISFX(UIKind.HUDTreasure);
				if (num > 1)
				{
					int num2 = 0;
					Array.Clear(GUIManager.Instance.SE_Kind, 0, GUIManager.Instance.SE_Kind.Length);
					Array.Clear(GUIManager.Instance.SE_ItemID, 0, GUIManager.Instance.SE_ItemID.Length);
					if (num > 5)
					{
						num = 5;
					}
					for (int i = 0; i < (int)num; i++)
					{
						if (this.AllianceMoneyBonusRate > 100)
						{
							GUIManager.Instance.SE_Kind[num2] = SpeciallyEffect_Kind.Alliance_Speed_Money2;
						}
						else
						{
							GUIManager.Instance.SE_Kind[num2] = SpeciallyEffect_Kind.Alliance_Speed_Money;
						}
						num2++;
					}
					GUIManager.Instance.m_SpeciallyEffect.AddIconShow(GUIManager.Instance.mStartV2, GUIManager.Instance.SE_Kind, GUIManager.Instance.SE_ItemID, true);
				}
				else if (this.AllianceMoneyBonusRate > 100)
				{
					GUIManager.Instance.m_SpeciallyEffect.AddIconShow(false, GUIManager.Instance.mStartV2, SpeciallyEffect_Kind.Alliance_Speed_Money2, 0, 0, true, 2f);
				}
				else
				{
					GUIManager.Instance.m_SpeciallyEffect.AddIconShow(false, GUIManager.Instance.mStartV2, SpeciallyEffect_Kind.Alliance_Speed_Money, 0, 0, true, 2f);
				}
			}
		}
		else if (b == 2)
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_HelpSpeedup, 3, 0);
			GUIManager.Instance.HideUILock(EUILock.Alliance_Help);
		}
	}

	// Token: 0x06000473 RID: 1139 RVA: 0x00061BA0 File Offset: 0x0005FDA0
	public void SendAllianceStepDown(long UserId)
	{
		if (UserId == 0L)
		{
			return;
		}
		if (GUIManager.Instance.ShowUILock(EUILock.Alliance_List))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_STEPDOWN;
			messagePacket.AddSeqId();
			messagePacket.Add(UserId);
			messagePacket.Send(false);
		}
	}

	// Token: 0x06000474 RID: 1140 RVA: 0x00061BF0 File Offset: 0x0005FDF0
	public void RecvAllianceStepDown(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b == 0)
		{
			this.m_TempDemiseStr.ClearString();
			StringManager.Instance.StringToFormat(this.m_DemiseName);
			this.m_TempDemiseStr.AppendFormat(DataManager.Instance.mStringTable.GetStringByID(603u));
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_List, 2, 0);
			GUIManager.Instance.OpenMessageBox(DataManager.Instance.mStringTable.GetStringByID(602u), this.m_TempDemiseStr.ToString(), DataManager.Instance.mStringTable.GetStringByID(4797u), null, 0, 0, false, false, false, false, false);
		}
		else if (b == 3)
		{
			GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(4792u), 255, true);
		}
		else if (b == 4)
		{
			GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(8459u), 255, true);
		}
		else if (b == 5)
		{
			GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(9366u), 255, true);
		}
		GUIManager.Instance.HideUILock(EUILock.Alliance_List);
	}

	// Token: 0x06000475 RID: 1141 RVA: 0x00061D38 File Offset: 0x0005FF38
	public void SendAllianceOthorMemberInfo(uint allianceID)
	{
		if (allianceID == 0u)
		{
			return;
		}
		if (GUIManager.Instance.ShowUILock(EUILock.Alliance_List))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_OTHER_MEMBERINFO;
			messagePacket.AddSeqId();
			messagePacket.Add(allianceID);
			messagePacket.Send(false);
		}
	}

	// Token: 0x06000476 RID: 1142 RVA: 0x00061D88 File Offset: 0x0005FF88
	public void RecvAllianceOthorMemberInfo(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		uint num = MP.ReadUInt(-1);
		byte b2 = MP.ReadByte(-1);
		byte b3 = MP.ReadByte(-1);
		if (b == 0)
		{
			if (this.m_IsAllianceMemberDataFinish == 1)
			{
				this.m_RecvDataIdx = 0;
			}
			int num2 = 0;
			while (num2 < (int)b3 && this.m_RecvDataIdx < this.AllianceMember.Length)
			{
				this.AllianceMember[this.m_RecvDataIdx].UserId = 0L;
				this.AllianceMember[this.m_RecvDataIdx].Head = MP.ReadUShort(-1);
				this.AllianceMember[this.m_RecvDataIdx].Name = MP.ReadString(13, -1);
				this.AllianceMember[this.m_RecvDataIdx].Rank = (AllianceRank)MP.ReadByte(-1);
				this.AllianceMember[this.m_RecvDataIdx].Power = MP.ReadULong(-1);
				this.AllianceMember[this.m_RecvDataIdx].TroopKillNum = MP.ReadULong(-1);
				this.m_RecvDataIdx++;
				num2++;
			}
			this.m_IsAllianceMemberDataFinish = b2;
			if (b2 == 1)
			{
				Array.Sort<AllianceMemberClientDataType>(this.AllianceMember, 0, this.m_RecvDataIdx, this.allianceMemberComparer);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_List, 0, 0);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_LeaderBoard, 1, 0);
				GUIManager.Instance.HideUILock(EUILock.Alliance_List);
			}
		}
		else if (b == 1)
		{
			GUIManager.Instance.HideUILock(EUILock.Alliance_List);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_List, 2, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_LeaderBoard, 5, 0);
		}
	}

	// Token: 0x06000477 RID: 1143 RVA: 0x00061F34 File Offset: 0x00060134
	public void RecvHospitalInfo(MessagePacket MP)
	{
		this.HospitalTotal = 0u;
		for (int i = 0; i < 16; i++)
		{
			this.mSoldier_Hospital[i] = MP.ReadUInt(-1);
			this.HospitalTotal += this.mSoldier_Hospital[i];
		}
		this.TreatmentQty = 0u;
		for (int j = 0; j < 16; j++)
		{
			this.mTreatmentSoldier[j] = MP.ReadUInt(-1);
			this.TreatmentQty += this.mTreatmentSoldier[j];
		}
		long num = MP.ReadLong(-1);
		uint totalTime = MP.ReadUInt(-1);
		if (num != 0L)
		{
			DataManager.Instance.SetQueueBarData(EQueueBarIndex.Treatmenting, true, num, totalTime);
			DataManager.Instance.SetRecvQueueBarData(13);
		}
	}

	// Token: 0x06000478 RID: 1144 RVA: 0x00061FF0 File Offset: 0x000601F0
	public void RecvHealingtroop(MessagePacket MP)
	{
		switch (MP.ReadByte(-1))
		{
		case 0:
		{
			for (int i = 0; i < 5; i++)
			{
				this.Resource[i].Stock = MP.ReadUInt(-1);
			}
			this.TreatmentQty = 0u;
			for (int j = 0; j < 16; j++)
			{
				this.mTreatmentSoldier[j] = MP.ReadUInt(-1);
				this.TreatmentQty += this.mTreatmentSoldier[j];
			}
			long startTime = MP.ReadLong(-1);
			uint totalTime = MP.ReadUInt(-1);
			DataManager.Instance.SetQueueBarData(EQueueBarIndex.Treatmenting, true, startTime, totalTime);
			DataManager.Instance.SetRecvQueueBarData(13);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 2, 0);
			GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
			GUIManager.Instance.HideUILock(EUILock.Hospital);
			if (this.TreatmentQuantity != this.TreatmentQty)
			{
				if (this.TreatmentQty == 0u)
				{
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4829u), this.mStringTable.GetStringByID(3870u), this.mStringTable.GetStringByID(4831u), null, 0, 0, false, false, false, false, false);
				}
				else
				{
					GUIManager.Instance.MsgStr.ClearString();
					GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)this.TreatmentQuantity), 1, false);
					GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)this.TreatmentQty), 1, false);
					GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3881u));
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4030u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4031u), null, 0, 0, false, false, false, false, false);
				}
			}
			break;
		}
		case 1:
			GUIManager.Instance.HideUILock(EUILock.Hospital);
			break;
		case 2:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4829u), this.mStringTable.GetStringByID(3870u), this.mStringTable.GetStringByID(4831u), null, 0, 0, false, false, false, false, false);
			GUIManager.Instance.HideUILock(EUILock.Hospital);
			break;
		}
	}

	// Token: 0x06000479 RID: 1145 RVA: 0x00062244 File Offset: 0x00060444
	public void RecvHealingcomplete(MessagePacket MP)
	{
		this.SoldierTotal = 0L;
		for (int i = 0; i < 16; i++)
		{
			this.RoleAttr.m_Soldier[i] = MP.ReadUInt(-1);
			this.SoldierTotal += (long)((ulong)this.RoleAttr.m_Soldier[i]);
			this.mSoldier_Hospital[i] -= this.mTreatmentSoldier[i];
			this.HospitalTotal -= this.mTreatmentSoldier[i];
		}
		this.Resource[0].SetResource(MP.ReadUInt(-1), MP.ReadLong(-1));
		DataManager.Instance.SetQueueBarData(EQueueBarIndex.Treatmenting, false, 0L, 0u);
		GameManager.OnRefresh(NetworkNews.Refresh_Soldier, null);
		GameManager.OnRefresh(NetworkNews.Refresh_Hospital, null);
		GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 1, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 3, 0);
		GUIManager.Instance.MsgStr.ClearString();
		GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)this.TreatmentQty), 1, false);
		GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3883u));
		GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 3, true);
		this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
	}

	// Token: 0x0600047A RID: 1146 RVA: 0x0006239C File Offset: 0x0006059C
	public void RecvCancelealing(MessagePacket MP)
	{
		for (int i = 0; i < 5; i++)
		{
			this.Resource[i].Stock = MP.ReadUInt(-1);
		}
		DataManager.Instance.SetQueueBarData(EQueueBarIndex.Treatmenting, false, 0L, 0u);
		GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 3, 0);
		GUIManager.Instance.HideUILock(EUILock.Hospital);
	}

	// Token: 0x0600047B RID: 1147 RVA: 0x00062404 File Offset: 0x00060604
	public void RecvInstanthealing(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 == 0)
		{
			GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eInstanthealing);
			long soldierTotal = this.SoldierTotal;
			this.SoldierTotal = 0L;
			for (int i = 0; i < 16; i++)
			{
				uint num = MP.ReadUInt(-1);
				this.mSoldier_Hospital[i] = this.mSoldier_Hospital[i] - (num - this.RoleAttr.m_Soldier[i]);
				this.HospitalTotal -= num - this.RoleAttr.m_Soldier[i];
				this.RoleAttr.m_Soldier[i] = num;
				this.SoldierTotal += (long)((ulong)num);
			}
			for (int j = 0; j < 5; j++)
			{
				this.Resource[j].Stock = MP.ReadUInt(-1);
			}
			this.Resource[0].SetResource(this.Resource[0].Stock, MP.ReadLong(-1));
			GameManager.OnRefresh(NetworkNews.Refresh_Soldier, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Hospital, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 1, 0);
			GUIManager.Instance.HideUILock(EUILock.Hospital);
			GUIManager.Instance.MsgStr.ClearString();
			GUIManager.Instance.MsgStr.IntToFormat(this.SoldierTotal - soldierTotal, 1, false);
			GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3883u));
			GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 3, true);
			this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
		}
	}

	// Token: 0x0600047C RID: 1148 RVA: 0x000625C0 File Offset: 0x000607C0
	public void SendFinishhealing()
	{
		if (GUIManager.Instance.ShowUILock(EUILock.Hospital))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_FINISHHEALING;
			messagePacket.AddSeqId();
			messagePacket.Send(false);
		}
	}

	// Token: 0x0600047D RID: 1149 RVA: 0x00062604 File Offset: 0x00060804
	public void RecvFinishhealing(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 == 0)
		{
			GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eImmediately);
			long soldierTotal = this.SoldierTotal;
			this.SoldierTotal = 0L;
			for (int i = 0; i < 16; i++)
			{
				uint num = MP.ReadUInt(-1);
				this.mSoldier_Hospital[i] = this.mSoldier_Hospital[i] - (num - this.RoleAttr.m_Soldier[i]);
				this.HospitalTotal -= num - this.RoleAttr.m_Soldier[i];
				this.RoleAttr.m_Soldier[i] = num;
				this.SoldierTotal += (long)((ulong)num);
			}
			this.Resource[0].SetResource(MP.ReadUInt(-1), MP.ReadLong(-1));
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 1, 0);
			DataManager.Instance.SetQueueBarData(EQueueBarIndex.Treatmenting, false, 0L, 0u);
			GameManager.OnRefresh(NetworkNews.Refresh_Soldier, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Hospital, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			GUIManager.Instance.HideUILock(EUILock.Hospital);
			GUIManager.Instance.MsgStr.ClearString();
			GUIManager.Instance.MsgStr.IntToFormat(this.SoldierTotal - soldierTotal, 1, false);
			GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3883u));
			GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 3, true);
			this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
		}
	}

	// Token: 0x0600047E RID: 1150 RVA: 0x000627A0 File Offset: 0x000609A0
	public void RecvBeingattack(MessagePacket MP)
	{
		this.SoldierTotal = 0L;
		this.HospitalTotal = 0u;
		for (int i = 0; i < 16; i++)
		{
			this.RoleAttr.m_Soldier[i] = MP.ReadUInt(-1);
			this.SoldierTotal += (long)((ulong)this.RoleAttr.m_Soldier[i]);
		}
		for (int j = 0; j < 16; j++)
		{
			this.mSoldier_Hospital[j] = MP.ReadUInt(-1);
			this.HospitalTotal += this.mSoldier_Hospital[j];
		}
		for (int k = 0; k < 5; k++)
		{
			this.Resource[k].Stock = MP.ReadUInt(-1);
		}
		this.Resource[0].SetResource(this.Resource[0].Stock, MP.ReadLong(-1));
		GameManager.OnRefresh(NetworkNews.Refresh_Soldier, null);
		GameManager.OnRefresh(NetworkNews.Refresh_Hospital, null);
		GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
		this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
	}

	// Token: 0x0600047F RID: 1151 RVA: 0x000628A4 File Offset: 0x00060AA4
	public void RecvGiveUpHealing(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = MP.ReadByte(-1);
		int num = (int)(b * 4 + b2);
		uint num2 = MP.ReadUInt(-1);
		this.mSoldier_Hospital[num] -= num2;
		this.HospitalTotal -= num2;
		GameManager.OnRefresh(NetworkNews.Refresh_Hospital, null);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 1, 0);
		GUIManager.Instance.HideUILock(EUILock.Hospital);
		SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort)(num + 1));
		GUIManager.Instance.MsgStr.ClearString();
		GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint)recordByKey.Name));
		GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)num2), 1, true);
		GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(5789u));
		GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 255, true);
		GUIManager.Instance.BuildingData.UpdateBuildState(5, 255);
	}

	// Token: 0x06000480 RID: 1152 RVA: 0x000629BC File Offset: 0x00060BBC
	public void RecvUpdate_Injure(MessagePacket MP)
	{
		this.HospitalTotal = 0u;
		for (int i = 0; i < 16; i++)
		{
			this.mSoldier_Hospital[i] = MP.ReadUInt(-1);
			this.HospitalTotal += this.mSoldier_Hospital[i];
		}
		GameManager.OnRefresh(NetworkNews.Refresh_Hospital, null);
		GUIManager.Instance.BuildingData.UpdateBuildState(5, 255);
	}

	// Token: 0x06000481 RID: 1153 RVA: 0x00062A24 File Offset: 0x00060C24
	public void SendExitBattle()
	{
		if (GUIManager.Instance.ShowUILock(EUILock.ExitHeroBattle))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_LEAVEBATTLE;
			messagePacket.AddSeqId();
			messagePacket.Add(this.BattleSeqID);
			messagePacket.Send(false);
		}
	}

	// Token: 0x06000482 RID: 1154 RVA: 0x00062A74 File Offset: 0x00060C74
	public bool IsSameAlliance(CString tag)
	{
		return this.RoleAlliance.Id != 0u && tag.Length > 2 && this.RoleAlliance.Tag[0] == tag[0] && this.RoleAlliance.Tag[1] == tag[1] && this.RoleAlliance.Tag[2] == tag[2];
	}

	// Token: 0x06000483 RID: 1155 RVA: 0x00062AF4 File Offset: 0x00060CF4
	public bool IsMapIdMine(ushort in_zoneID, byte in_point)
	{
		int num = GameConstants.PointCodeToMapID(in_zoneID, in_point);
		bool result = false;
		bool flag = true;
		if (this.RoleAttr.CapitalPoint == num)
		{
			result = true;
			flag = false;
		}
		else if (DataManager.MapDataController.ZoneUpdateInfo[(int)(in_zoneID & 1023)].zoneState < 8)
		{
			int tableID = (int)DataManager.MapDataController.LayoutMapInfo[num].tableID;
			if (DataManager.MapDataController.IsResources((uint)num))
			{
				result = (DataManager.CompareStr(DataManager.MapDataController.ResourcesPointTable[tableID].playerName, DataManager.Instance.RoleAttr.Name) == 0);
				flag = false;
			}
			else if (DataManager.MapDataController.IsCityOrCamp((uint)num))
			{
				result = (DataManager.CompareStr(DataManager.MapDataController.PlayerPointTable[tableID].playerName, DataManager.Instance.RoleAttr.Name) == 0);
				flag = false;
			}
		}
		if (flag)
		{
			for (int i = 0; i < (int)this.MaxMarchEventNum; i++)
			{
				if ((this.MarchEventData[i].Type == EMarchEventType.EMET_Camp || this.MarchEventData[i].Type == EMarchEventType.EMET_Gathering) && GameConstants.PointCodeToMapID(this.MarchEventData[i].Point.zoneID, this.MarchEventData[i].Point.pointID) == num)
				{
					result = true;
					break;
				}
			}
		}
		return result;
	}

	// Token: 0x06000484 RID: 1156 RVA: 0x00062C74 File Offset: 0x00060E74
	public ulong GetPowerByType(EPowerbyKind kind)
	{
		ulong num = 0UL;
		switch (kind)
		{
		case EPowerbyKind.TroopPower:
		{
			long num2 = this.SoldierTotal;
			uint[] array = new uint[16];
			for (int i = 0; i < this.RoleAttr.m_Soldier.Length; i++)
			{
				array[i] = this.RoleAttr.m_Soldier[i];
			}
			for (int j = 0; j < this.MarchEventData.Length; j++)
			{
				if (this.MarchEventData[j].Type != EMarchEventType.EMET_Standby)
				{
					int num3 = 0;
					for (int k = 0; k < this.MarchEventData[j].TroopData.Length; k++)
					{
						for (int l = 0; l < this.MarchEventData[j].TroopData[k].Length; l++)
						{
							array[num3++] += this.MarchEventData[j].TroopData[k][l];
							num2 += (long)((ulong)this.MarchEventData[j].TroopData[k][l]);
						}
					}
				}
			}
			uint[] hideTroopData = HideArmyManager.Instance.GetHideTroopData();
			for (int m = 0; m < hideTroopData.Length; m++)
			{
				array[m] += hideTroopData[m];
				num2 += (long)((ulong)hideTroopData[m]);
			}
			for (int n = 0; n < this.RoleAttr.m_Soldier.Length; n++)
			{
				SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort)(n + 1));
				num += (ulong)array[n] * (ulong)recordByKey.Strength;
			}
			break;
		}
		case EPowerbyKind.TrapPower:
			for (int num4 = 0; num4 < this.mTrapQty.Length; num4++)
			{
				if (this.mTrapQty[num4] != 0u)
				{
					SoldierData recordByKey2 = this.SoldierDataTable.GetRecordByKey((ushort)(num4 + 17));
					num += (ulong)(this.mTrapQty[num4] * (uint)recordByKey2.Strength);
				}
			}
			break;
		case EPowerbyKind.BuildingPower:
		{
			RoleBuildingData[] allBuildsData = GUIManager.Instance.BuildingData.AllBuildsData;
			for (int num5 = 0; num5 < allBuildsData.Length; num5++)
			{
				if (allBuildsData[num5].BuildID != 0)
				{
					num += (ulong)GUIManager.Instance.BuildingData.GetBuildLevelRequestData(allBuildsData[num5].BuildID, allBuildsData[num5].Level).Strength;
				}
			}
			break;
		}
		case EPowerbyKind.TechPower:
		{
			ushort num6 = 0;
			while ((int)num6 < this.AllTechData.Length)
			{
				byte level = this.AllTechData[(int)num6] & 15;
				TechLevelTbl techLevelTbl;
				if (this.GetTechLevelupData(out techLevelTbl, num6 * 2 + 1, level))
				{
					num += (ulong)techLevelTbl.Strength;
				}
				level = (byte)(this.AllTechData[(int)num6] >> 4);
				if (this.GetTechLevelupData(out techLevelTbl, num6 * 2 + 2, level))
				{
					num += (ulong)techLevelTbl.Strength;
				}
				num6 += 1;
			}
			break;
		}
		case EPowerbyKind.LordPower:
			num += (ulong)this.LevelUpTable.GetRecordByKey((ushort)this.RoleAttr.Level).AddForce;
			break;
		case EPowerbyKind.MissionPower:
		{
			ushort num7 = 0;
			while ((int)num7 < DataManager.MissionDataManager.ManorAimTable.TableCount)
			{
				ManorAimTbl recordByIndex = DataManager.MissionDataManager.ManorAimTable.GetRecordByIndex((int)num7);
				if (DataManager.MissionDataManager.CheckBoolMark(recordByIndex.ID))
				{
					num += (ulong)recordByIndex.Force;
				}
				num7 += 1;
			}
			break;
		}
		case EPowerbyKind.HeroPower:
			for (int num8 = 0; num8 < this.curHeroData.Keys.Length; num8++)
			{
				if (this.curHeroData.Keys[num8] != 0u)
				{
					CurHeroData heroData = this.curHeroData[this.curHeroData.Keys[num8]];
					num += GameConstants.GetHeroPower(heroData);
				}
			}
			break;
		case EPowerbyKind.PetPower:
			num += PetManager.Instance.CalTotalPetPower();
			break;
		}
		return num;
	}

	// Token: 0x06000485 RID: 1157 RVA: 0x000630A0 File Offset: 0x000612A0
	public void InitTechTreeData()
	{
		int mapCount = (int)this.TechKindData.MapCount;
		this.TechnologyLayoutTypeStart = new ushort[mapCount];
		this.TechnologyLayoutTypeCount = new byte[mapCount];
		this.sortTechKindIndex = new byte[mapCount];
		byte b = 0;
		while ((int)b < this.TechKindData.TableCount)
		{
			this.sortTechKindIndex[(int)b] = b;
			b += 1;
		}
		Array.Sort<byte>(this.sortTechKindIndex, 0, this.TechKindData.TableCount, this.TechKindComparer);
		Array.Clear(this.TechnologyLayoutTypeStart, 0, this.TechnologyLayoutTypeStart.Length);
		Array.Clear(this.TechnologyLayoutTypeCount, 0, this.TechnologyLayoutTypeCount.Length);
		ushort num = 0;
		byte b2 = 0;
		ushort num2 = 0;
		ushort num3;
		while ((int)num2 < this.TechTreeLayout.TableCount)
		{
			num3 = (ushort)(this.TechTreeLayout.GetRecordByIndex((int)num2).Kind - 1);
			if (this.TechnologyLayoutTypeStart.Length > (int)num3)
			{
				if (num != num3)
				{
					this.TechnologyLayoutTypeCount[(int)num] = b2;
					b2 = 1;
					this.TechnologyLayoutTypeStart[(int)num3] = num2;
					num = num3;
				}
				else
				{
					b2 += 1;
				}
			}
			num2 += 1;
		}
		if ((int)num < this.TechnologyLayoutTypeCount.Length)
		{
			this.TechnologyLayoutTypeCount[(int)num] = b2;
		}
		this.TechKindLevelMax = new ushort[this.TechData.TableCount + 1];
		this.TechLevelupExSearchTable = new uint[this.TechData.TableCount + 1];
		this.AllTechData = new byte[150];
		Array.Clear(this.TechKindLevelMax, 0, this.TechKindLevelMax.Length);
		ushort num4 = 0;
		ushort num5 = 0;
		while ((int)num5 < this.TechData.TableCount)
		{
			TechDataTbl recordByIndex = this.TechData.GetRecordByIndex((int)num5);
			num4 += (ushort)recordByIndex.LevelMax;
			this.TechKindLevelMax[(int)recordByIndex.TechID] = num4;
			num5 += 1;
		}
		b2 = 0;
		num3 = 0;
		for (int i = 0; i < this.TechLevelEx.TableCount; i++)
		{
			num = this.TechLevelEx.GetRecordByIndex(i).TechID;
			if (num != num3)
			{
				this.TechLevelupExSearchTable[(int)num3] = (uint)(i - (int)b2 << 16 | (int)b2);
				num3 = num;
				b2 = 1;
			}
			else
			{
				b2 += 1;
			}
		}
		this.TechLevelupExSearchTable[(int)num3] = (uint)(this.TechLevelEx.TableCount - (int)b2 << 16 | (int)b2);
	}

	// Token: 0x06000486 RID: 1158 RVA: 0x00063314 File Offset: 0x00061514
	public byte GetTechLevel(ushort TechID)
	{
		if (TechID == 0 || TechID > 1000)
		{
			return 0;
		}
		int num = TechID - 1 >> 1;
		if ((TechID - 1 & 1) == 0)
		{
			return this.AllTechData[num] & 15;
		}
		return (byte)(this.AllTechData[num] >> 4);
	}

	// Token: 0x06000487 RID: 1159 RVA: 0x0006335C File Offset: 0x0006155C
	public void SetTechLevel(ushort TechID, byte newLv)
	{
		if (TechID == 0)
		{
			return;
		}
		int num = TechID - 1 >> 1;
		if (this.AllTechData.Length <= num)
		{
			return;
		}
		if ((TechID - 1 & 1) == 0)
		{
			this.AllTechData[num] = (this.AllTechData[num] & 240) + newLv;
		}
		else
		{
			this.AllTechData[num] = (byte)((int)(this.AllTechData[num] & 15) + ((int)newLv << 4));
		}
	}

	// Token: 0x06000488 RID: 1160 RVA: 0x000633C8 File Offset: 0x000615C8
	public bool GetTechLevelupData(out TechLevelTbl Data, ushort TechID, byte Level)
	{
		if (TechID > 1000 || TechID == 0)
		{
			Data = this.TechLevel.GetRecordByIndex(0);
			return false;
		}
		if ((int)(TechID - 1) >= this.TechKindLevelMax.Length)
		{
			Data = this.TechLevel.GetRecordByIndex(0);
			return false;
		}
		ushort num = this.TechKindLevelMax[(int)(TechID - 1)];
		Data = this.TechLevel.GetRecordByIndex((int)(num + (ushort)Level - 1));
		return Data.TechID == TechID && Data.Level == Level;
	}

	// Token: 0x06000489 RID: 1161 RVA: 0x0006345C File Offset: 0x0006165C
	public bool GetTechLevelupDataEx(out TechLevelExTbl Data, ushort TechID, byte Level)
	{
		if (TechID > 1000 || TechID == 0 || Level == 0 || (int)TechID >= this.TechLevelupExSearchTable.Length || this.TechLevelupExSearchTable[(int)TechID] == 0u)
		{
			Data = default(TechLevelExTbl);
		}
		else
		{
			uint num = this.TechLevelupExSearchTable[(int)TechID] >> 16;
			uint num2 = this.TechLevelupExSearchTable[(int)TechID] & 65535u;
			if ((uint)Level <= num2)
			{
				Data = this.TechLevelEx.GetRecordByIndex((int)(num + (uint)Level - 1u));
				return true;
			}
			Data = default(TechLevelExTbl);
		}
		return false;
	}

	// Token: 0x0600048A RID: 1162 RVA: 0x00063500 File Offset: 0x00061700
	public unsafe byte CheckTechState(ushort TechID)
	{
		byte b = 0;
		if (TechID == 0 || TechID > 1000)
		{
			return b;
		}
		if (this.GetTechLevel(TechID) > 0)
		{
			b |= 2;
		}
		TechDataTbl recordByKey = this.TechData.GetRecordByKey(TechID);
		if (recordByKey.TechID == TechID && recordByKey.LevelMax == this.GetTechLevel(TechID))
		{
			return b | 64;
		}
		TechLevelTbl techLevelTbl;
		if (!this.GetTechLevelupData(out techLevelTbl, TechID, this.GetTechLevel(TechID) + 1))
		{
			return 1;
		}
		if (recordByKey.Locked == 1)
		{
			b |= 1;
			return b | 32;
		}
		if (GUIManager.Instance.BuildingData.GetBuildData(10, 0).Level < techLevelTbl.ResearchLevel)
		{
			b |= 1;
			return b | 4;
		}
		if (!this.CheckTechKind((ushort)recordByKey.Kind, null))
		{
			return b | 1;
		}
		ushort* ptr;
		byte* ptr2;
		checked
		{
			ptr = stackalloc ushort[4 * 2];
			ptr2 = stackalloc byte[4 * 1];
			*ptr = techLevelTbl.RequireTechID1;
		}
		ptr[1] = techLevelTbl.RequireTechID2;
		ptr[2] = techLevelTbl.RequireTechID3;
		ptr[3] = techLevelTbl.RequireTechID4;
		*ptr2 = techLevelTbl.RequireTechLv1;
		ptr2[1] = techLevelTbl.RequireTechLv2;
		ptr2[2] = techLevelTbl.RequireTechLv3;
		ptr2[3] = techLevelTbl.RequireTechLv4;
		for (byte b2 = 0; b2 < 4; b2 += 1)
		{
			if (ptr[b2] != 0)
			{
				if (this.GetTechLevel(ptr[b2]) < ptr2[b2])
				{
					b |= 1;
					return b | 8;
				}
			}
		}
		return b;
	}

	// Token: 0x0600048B RID: 1163 RVA: 0x000636A0 File Offset: 0x000618A0
	public bool CheckTechKind(ref TechKindTbl techkindData, CString msg = null)
	{
		if (techkindData.ConditionalType == 1 && DataManager.StageDataController.StageRecord[2] < techkindData.Parm)
		{
			if (msg != null)
			{
				msg.ClearString();
				msg.StringToFormat(this.mStringTable.GetStringByID((uint)(7200 + techkindData.Parm)));
				msg.AppendFormat(this.mStringTable.GetStringByID(5044u));
			}
			return false;
		}
		return true;
	}

	// Token: 0x0600048C RID: 1164 RVA: 0x00063714 File Offset: 0x00061914
	public bool CheckTechKind(ushort KindId, CString msg = null)
	{
		TechKindTbl recordByKey = DataManager.Instance.TechKindData.GetRecordByKey(KindId);
		return this.CheckTechKind(ref recordByKey, msg);
	}

	// Token: 0x0600048D RID: 1165 RVA: 0x0006373C File Offset: 0x0006193C
	public void GetTechTreeDataRange(byte Kind, out ushort Start, out ushort Count)
	{
		if (Kind == 0)
		{
			Start = (Count = 0);
			return;
		}
		Start = this.TechnologyLayoutTypeStart[(int)(Kind - 1)];
		Count = (ushort)this.TechnologyLayoutTypeCount[(int)(Kind - 1)];
	}

	// Token: 0x0600048E RID: 1166 RVA: 0x00063770 File Offset: 0x00061970
	public void RecvTechnologyInfo(MessagePacket MP)
	{
		ushort researchTech = MP.ReadUShort(-1);
		this.ResearchTech = researchTech;
		MP.ReadByte(-1);
		long num = MP.ReadLong(-1);
		uint totalTime = MP.ReadUInt(-1);
		if (num > 0L)
		{
			DataManager.Instance.SetQueueBarData(EQueueBarIndex.Researching, true, num, totalTime);
			DataManager.Instance.SetRecvQueueBarData(1);
		}
		else
		{
			this.SetQueueBarData(EQueueBarIndex.Researching, false, 0L, 0u);
		}
		MP.ReadBlock(this.AllTechData, 0, 150, -1);
		this.TechnologySendFinish = 0;
		this.AttribVal.UpdateAttrVal(UpdateAttrKind.Technoolgy);
		DataManager.missionDataManager.SetCompleteWhileLogin(eMissionKind.Tech);
	}

	// Token: 0x0600048F RID: 1167 RVA: 0x00063808 File Offset: 0x00061A08
	public void RecvTechnologyResearch(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b == 0)
		{
			this.ResearchTech = MP.ReadUShort(-1);
			MP.ReadByte(-1);
			long startTime = MP.ReadLong(-1);
			uint totalTime = MP.ReadUInt(-1);
			byte b2 = 0;
			while ((int)b2 < this.Resource.Length)
			{
				this.Resource[(int)b2].Stock = MP.ReadUInt(-1);
				b2 += 1;
			}
			this.PetResource.Stock = MP.ReadUInt(-1);
			DataManager.Instance.SetQueueBarData(EQueueBarIndex.Researching, true, startTime, totalTime);
			DataManager.Instance.SetRecvQueueBarData(1);
			GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
			GameManager.OnRefresh(NetworkNews.Refresh_PetResource, null);
			GameConstants.GetBytes(1, DataManager.msgBuffer, 0);
			GameManager.OnRefresh(NetworkNews.Refresh_Technology, DataManager.msgBuffer);
			AudioManager.Instance.PlayUISFX(UIKind.Research);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 15, 0);
		}
		else
		{
			uint num = 0u;
			switch (b)
			{
			case 1:
				num = 5017u;
				goto IL_17D;
			case 2:
				num = 7343u;
				goto IL_17D;
			case 5:
				num = 3942u;
				goto IL_17D;
			case 6:
				num = 7520u;
				goto IL_17D;
			}
			CString cstring = StringManager.Instance.StaticString1024();
			cstring.IntToFormat((long)b, 1, false);
			cstring.AppendFormat(this.mStringTable.GetStringByID(5045u));
			GUIManager.Instance.AddHUDMessage(cstring.ToString(), 255, true);
			IL_17D:
			if (num > 0u)
			{
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(num), 255, true);
			}
		}
		GUIManager.Instance.HideUILock(EUILock.Research);
	}

	// Token: 0x06000490 RID: 1168 RVA: 0x000639C4 File Offset: 0x00061BC4
	public void RecvTechnologyCompleteFree(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b == 0)
		{
			ushort num = MP.ReadUShort(-1);
			byte b2 = MP.ReadByte(-1);
			this.SetTechLevel(num, b2);
			this.ResearchTech = 0;
			byte b3 = 0;
			while ((int)b3 < this.Resource.Length)
			{
				this.Resource[(int)b3].Stock = MP.ReadUInt(-1);
				b3 += 1;
			}
			this.ShowTechnologyHUD(num);
			DataManager.missionDataManager.CheckChanged(eMissionKind.Tech, num, (ushort)b2);
			this.SetQueueBarData(EQueueBarIndex.Researching, false, 0L, 0u);
			GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
			if (DataManager.Instance.OpenBuildingWindowUpdateNoClose == 1)
			{
				GameConstants.GetBytes(0, DataManager.msgBuffer, 0);
			}
			else
			{
				GameConstants.GetBytes(1, DataManager.msgBuffer, 0);
			}
			GameConstants.GetBytes(1, DataManager.msgBuffer, 0);
			GameManager.OnRefresh(NetworkNews.Refresh_Technology, DataManager.msgBuffer);
			GameManager.OnRefresh(NetworkNews.Refresh_BuildBase, DataManager.msgBuffer);
			this.AttribVal.UpdateAttrVal(UpdateAttrKind.Technoolgy);
			DataManager.Instance.OpenBuildingWindowUpdateNoClose = 0;
			this.UpdateSaveTalent_Point(false);
			if (num == 120)
			{
				NewbieManager.CheckTroopMemory(false);
			}
		}
		else
		{
			CString cstring = StringManager.Instance.StaticString1024();
			cstring.IntToFormat((long)b, 1, false);
			cstring.AppendFormat(this.mStringTable.GetStringByID(5045u));
			GUIManager.Instance.AddHUDMessage(cstring.ToString(), 255, true);
		}
		GUIManager.Instance.HideUILock(EUILock.Research);
	}

	// Token: 0x06000491 RID: 1169 RVA: 0x00063B2C File Offset: 0x00061D2C
	public void RecvTechnologyResearchCancel(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b == 0)
		{
			MP.ReadUShort(-1);
			MP.ReadByte(-1);
			GameConstants.GetBytes(1, DataManager.msgBuffer, 0);
			this.CheckResearchTech = this.ResearchTech;
			this.ResearchTech = 0;
			byte b2 = 0;
			while ((int)b2 < this.Resource.Length)
			{
				this.Resource[(int)b2].Stock = MP.ReadUInt(-1);
				b2 += 1;
			}
			this.PetResource.Stock = MP.ReadUInt(-1);
			DataManager.Instance.SetQueueBarData(EQueueBarIndex.Researching, false, 0L, 0u);
			GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
			GameManager.OnRefresh(NetworkNews.Refresh_PetResource, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Technology, DataManager.msgBuffer);
			GameManager.OnRefresh(NetworkNews.Refresh_BuildBase, DataManager.msgBuffer);
			this.CheckResearchTech = 0;
		}
		else
		{
			CString cstring = StringManager.Instance.StaticString1024();
			cstring.IntToFormat((long)b, 1, false);
			cstring.AppendFormat(this.mStringTable.GetStringByID(5045u));
			GUIManager.Instance.AddHUDMessage(cstring.ToString(), 255, true);
		}
		GUIManager.Instance.HideUILock(EUILock.Research);
	}

	// Token: 0x06000492 RID: 1170 RVA: 0x00063C48 File Offset: 0x00061E48
	public void RecvTechnologyComplete(MessagePacket MP)
	{
		ushort num = MP.ReadUShort(-1);
		byte b = MP.ReadByte(-1);
		byte b2 = 1;
		if (this.GetTechLevel(num) == b)
		{
			b2 = 0;
		}
		this.SetTechLevel(num, b);
		this.CheckResearchTech = this.ResearchTech;
		this.ResearchTech = 0;
		byte value = 0;
		if (b2 == 1)
		{
			this.ShowTechnologyHUD(num);
			DataManager.missionDataManager.CheckChanged(eMissionKind.Tech, num, (ushort)b);
		}
		this.TechnologySendFinish = 0;
		this.SetQueueBarData(EQueueBarIndex.Researching, false, 0L, 0u);
		GameConstants.GetBytes((ushort)value, DataManager.msgBuffer, 0);
		GameManager.OnRefresh(NetworkNews.Refresh_Technology, DataManager.msgBuffer);
		GUIManager.Instance.HideUILock(EUILock.Research);
		GameManager.OnRefresh(NetworkNews.Refresh_BuildBase, DataManager.msgBuffer);
		this.AttribVal.UpdateAttrVal(UpdateAttrKind.Technoolgy);
		this.CheckResearchTech = 0;
		this.UpdateSaveTalent_Point(false);
		if (num == 120)
		{
			NewbieManager.CheckTroopMemory(false);
		}
	}

	// Token: 0x06000493 RID: 1171 RVA: 0x00063D1C File Offset: 0x00061F1C
	public void RecvTechnologyCompleteImmediate(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b <= 1)
		{
			byte value = 2;
			if (this.TechnologySendFinish == 1)
			{
				value = 0;
			}
			ushort num = MP.ReadUShort(-1);
			byte b2 = MP.ReadByte(-1);
			this.SetTechLevel(num, b2);
			GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eTechnology);
			if (b == 0)
			{
				byte b3 = 0;
				while ((int)b3 < this.Resource.Length)
				{
					this.Resource[(int)b3].Stock = MP.ReadUInt(-1);
					b3 += 1;
				}
				this.PetResource.Stock = MP.ReadUInt(-1);
			}
			this.ShowTechnologyHUD(num);
			DataManager.missionDataManager.CheckChanged(eMissionKind.Tech, num, (ushort)b2);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
			GameManager.OnRefresh(NetworkNews.Refresh_PetResource, null);
			GameConstants.GetBytes((ushort)value, DataManager.msgBuffer, 0);
			GameManager.OnRefresh(NetworkNews.Refresh_Technology, DataManager.msgBuffer);
			GameManager.OnRefresh(NetworkNews.Refresh_BuildBase, DataManager.msgBuffer);
			this.AttribVal.UpdateAttrVal(UpdateAttrKind.Technoolgy);
			this.UpdateSaveTalent_Point(false);
			if (num == 120)
			{
				NewbieManager.CheckTroopMemory(false);
			}
		}
		else if (b == 3)
		{
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(7343u), 255, true);
		}
		else
		{
			CString cstring = StringManager.Instance.StaticString1024();
			cstring.IntToFormat((long)b, 1, false);
			cstring.AppendFormat(this.mStringTable.GetStringByID(5045u));
			GUIManager.Instance.AddHUDMessage(cstring.ToString(), 255, true);
		}
		GUIManager.Instance.HideUILock(EUILock.Research);
	}

	// Token: 0x06000494 RID: 1172 RVA: 0x00063EB4 File Offset: 0x000620B4
	public void ShowTechnologyHUD(ushort TechID)
	{
		TechDataTbl recordByKey = this.TechData.GetRecordByKey(TechID);
		CString cstring = StringManager.Instance.StaticString1024();
		cstring.IntToFormat((long)this.GetTechLevel(TechID), 1, false);
		cstring.StringToFormat(this.mStringTable.GetStringByID((uint)recordByKey.TechName));
		cstring.AppendFormat(this.mStringTable.GetStringByID(5031u));
		GUIManager.Instance.AddHUDMessage(cstring.ToString(), 12, true);
		int num = (int)(this.GetTechLevel(11) | this.GetTechLevel(12) | this.GetTechLevel(13));
		if (num > 0)
		{
			GUIManager.Instance.BuildingData.UpdateBuildState(5, 255);
		}
	}

	// Token: 0x06000495 RID: 1173 RVA: 0x00063F64 File Offset: 0x00062164
	public void sendTechnologyResearchStart(ushort TechID)
	{
		if (!GUIManager.Instance.ShowUILock(EUILock.Research))
		{
			return;
		}
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_RESEARCH_EVENT_START;
		messagePacket.AddSeqId();
		messagePacket.Add(TechID);
		messagePacket.Add((int)(this.GetTechLevel(TechID) + 1));
		messagePacket.Send(false);
	}

	// Token: 0x06000496 RID: 1174 RVA: 0x00063FC0 File Offset: 0x000621C0
	public void sendTechnologyCompleteFree()
	{
		if (!GUIManager.Instance.ShowUILock(EUILock.Research))
		{
			return;
		}
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_RESEARCH_EVENT_FREE;
		messagePacket.AddSeqId();
		messagePacket.Add(this.ResearchTech);
		messagePacket.Add((int)(this.GetTechLevel(this.ResearchTech) + 1));
		messagePacket.Send(false);
	}

	// Token: 0x06000497 RID: 1175 RVA: 0x00064024 File Offset: 0x00062224
	public void sendTechnologyResearchCancel()
	{
		if (!GUIManager.Instance.ShowUILock(EUILock.Research))
		{
			return;
		}
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_RESEARCH_EVENT_CANCEL;
		messagePacket.AddSeqId();
		messagePacket.Add(this.ResearchTech);
		messagePacket.Add((int)(this.GetTechLevel(this.ResearchTech) + 1));
		messagePacket.Send(false);
	}

	// Token: 0x06000498 RID: 1176 RVA: 0x00064088 File Offset: 0x00062288
	public void sendTechnologyResearchCompleteImmediate(ushort TechID = 0)
	{
		if (!GUIManager.Instance.ShowUILock(EUILock.Research))
		{
			return;
		}
		if (TechID == 0)
		{
			TechID = this.ResearchTech;
			this.TechnologySendFinish = 1;
		}
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_RESEARCH_EVENT_INSTANT;
		messagePacket.AddSeqId();
		messagePacket.Add(TechID);
		messagePacket.Add((int)(this.GetTechLevel(TechID) + 1));
		messagePacket.Send(false);
	}

	// Token: 0x06000499 RID: 1177 RVA: 0x000640F8 File Offset: 0x000622F8
	public void InitTalentData()
	{
		this.TalentLevelMax = new ushort[this.TalentData.TableCount + 1];
		this.AllTalentData = new byte[100];
		this.ConsumeTalentPoint = new byte[(int)this.TalentData.MapCount][];
		this.PreTalentTable = new DataManager._PreTalentData[(int)this.TalentData.MapCount];
		Array.Clear(this.TalentLevelMax, 0, this.TalentLevelMax.Length);
		ushort num = 0;
		ushort num2 = 0;
		while ((int)num2 < this.TalentData.TableCount)
		{
			TalentTbl recordByIndex = this.TalentData.GetRecordByIndex((int)num2);
			num += (ushort)recordByIndex.LevelMax;
			this.TalentLevelMax[(int)recordByIndex.TalentID] = num;
			this.ConsumeTalentPoint[(int)recordByIndex.TalentID] = new byte[(int)(recordByIndex.LevelMax + 1)];
			if (recordByIndex.NeedTalentID > 0)
			{
				if (this.PreTalentTable[(int)recordByIndex.NeedTalentID] == null)
				{
					this.PreTalentTable[(int)recordByIndex.NeedTalentID] = new DataManager._PreTalentData();
				}
				if (this.PreTalentTable[(int)recordByIndex.NeedTalentID].TalentID == 0)
				{
					this.PreTalentTable[(int)recordByIndex.NeedTalentID].TalentID = (byte)recordByIndex.TalentID;
					this.PreTalentTable[(int)recordByIndex.NeedTalentID].Level = recordByIndex.NeedTalentLv;
				}
				else
				{
					DataManager._PreTalentData preTalentData = this.PreTalentTable[(int)recordByIndex.NeedTalentID];
					while (this.PreTalentTable[(int)recordByIndex.NeedTalentID].Next != null)
					{
						this.PreTalentTable[(int)recordByIndex.NeedTalentID] = this.PreTalentTable[(int)recordByIndex.NeedTalentID].Next;
					}
					this.PreTalentTable[(int)recordByIndex.NeedTalentID].Next = new DataManager._PreTalentData();
					this.PreTalentTable[(int)recordByIndex.NeedTalentID].Next.TalentID = (byte)recordByIndex.TalentID;
					this.PreTalentTable[(int)recordByIndex.NeedTalentID].Next.Level = recordByIndex.NeedTalentLv;
					this.PreTalentTable[(int)recordByIndex.NeedTalentID] = preTalentData;
				}
			}
			num2 += 1;
		}
		for (int i = 0; i < this.TalentLevel.TableCount; i++)
		{
			TalentLevelTbl recordByIndex2 = this.TalentLevel.GetRecordByIndex(i);
			this.ConsumeTalentPoint[(int)recordByIndex2.TalentID][(int)recordByIndex2.Level] = recordByIndex2.NeedPoint;
		}
		this.SaveTalentData = new DataManager._SaveTalentData[41];
		byte b = 0;
		while ((int)b < this.SaveTalentData.Length)
		{
			this.SaveTalentData[(int)b].Initial(b);
			b += 1;
		}
		for (int j = 0; j < this.TalentAddQueue.Length; j++)
		{
			this.TalentAddQueue[j] = new DataManager._TalentUpdateQueue[3];
		}
	}

	// Token: 0x0600049A RID: 1178 RVA: 0x000643BC File Offset: 0x000625BC
	public bool GetTalentLevelupData(out TalentLevelTbl Data, ushort TalentID, byte Level)
	{
		if (TalentID == 0)
		{
			Data = this.TalentLevel.GetRecordByIndex(0);
			return false;
		}
		ushort num = this.TalentLevelMax[(int)(TalentID - 1)];
		Data = this.TalentLevel.GetRecordByIndex((int)(num + (ushort)Level - 1));
		return Data.TalentID == TalentID && Data.Level == Level;
	}

	// Token: 0x0600049B RID: 1179 RVA: 0x00064420 File Offset: 0x00062620
	public byte GetNeedTalentPoint(ushort TalentID, ref byte MaxLevel, byte SaveIndex = 0)
	{
		int num = 0;
		byte b = this.GetTalentLevel(TalentID, SaveIndex) + 1;
		ushort roleTalentPoint;
		if (SaveIndex == 0)
		{
			roleTalentPoint = this.RoleTalentPoint;
		}
		else
		{
			roleTalentPoint = this.SaveTalentData[0].RoleTalentPoint;
		}
		while (b <= MaxLevel)
		{
			if ((int)roleTalentPoint < num + (int)this.ConsumeTalentPoint[(int)TalentID][(int)b])
			{
				MaxLevel = b - 1;
				break;
			}
			num += (int)this.ConsumeTalentPoint[(int)TalentID][(int)b];
			b += 1;
		}
		return (byte)num;
	}

	// Token: 0x0600049C RID: 1180 RVA: 0x000644A4 File Offset: 0x000626A4
	public byte GetTalentLevel(ushort TalentID, byte SaveIndex = 0)
	{
		if (TalentID == 0 || TalentID > 100)
		{
			return 0;
		}
		if (SaveIndex == 0)
		{
			return this.AllTalentData[(int)(TalentID - 1)];
		}
		return this.SaveTalentData[0].SaveTalentData[(int)(TalentID - 1)];
	}

	// Token: 0x0600049D RID: 1181 RVA: 0x000644E8 File Offset: 0x000626E8
	public void SetTalentLevel(ushort TalentID, byte newLv, byte SaveIndex = 0)
	{
		if (TalentID == 0 || TalentID > 100)
		{
			return;
		}
		if (SaveIndex == 0)
		{
			this.AllTalentData[(int)(TalentID - 1)] = newLv;
		}
		else
		{
			this.SaveTalentData[0].SaveTalentData[(int)(TalentID - 1)] = newLv;
		}
	}

	// Token: 0x0600049E RID: 1182 RVA: 0x00064528 File Offset: 0x00062728
	public byte CheckTalentState(ushort TalentID, byte SaveIndex = 0, byte addLevel = 1)
	{
		if (TalentID == 0)
		{
			return 1;
		}
		byte b = 0;
		if (addLevel < 1)
		{
			addLevel = 1;
		}
		byte b2 = this.GetTalentLevel(TalentID, SaveIndex);
		if (b2 > 0)
		{
			b |= 2;
		}
		ushort roleTalentPoint;
		if (SaveIndex == 0)
		{
			roleTalentPoint = this.RoleTalentPoint;
		}
		else
		{
			roleTalentPoint = this.SaveTalentData[0].RoleTalentPoint;
		}
		TalentTbl recordByKey = this.TalentData.GetRecordByKey(TalentID);
		int num = 0;
		for (int i = 1; i <= (int)addLevel; i++)
		{
			if ((int)recordByKey.LevelMax < (int)b2 + i)
			{
				break;
			}
			num += (int)this.ConsumeTalentPoint[(int)TalentID][(int)b2 + i];
		}
		b2 += addLevel;
		if (recordByKey.LevelMax < b2)
		{
			b |= 16;
		}
		else if (num > (int)roleTalentPoint)
		{
			b |= 8;
		}
		if (this.GetTalentLevel(recordByKey.NeedTalentID, SaveIndex) < recordByKey.NeedTalentLv)
		{
			b |= 5;
		}
		return b;
	}

	// Token: 0x0600049F RID: 1183 RVA: 0x00064620 File Offset: 0x00062820
	public void sendAddTalentLevelQueue(ushort TalentID, byte Addlv = 1, byte Type = 0)
	{
		if (this.RoleTalentPoint == 0 || (int)this.TalentQueueCount >= this.TalentAddQueue[(int)this.CehckSendIdx].Length)
		{
			return;
		}
		byte talentLevel = this.GetTalentLevel(TalentID, 0);
		for (byte b = 1; b <= Addlv; b += 1)
		{
			if ((int)(talentLevel + b) >= this.ConsumeTalentPoint[(int)TalentID].Length || this.RoleTalentPoint < (ushort)this.ConsumeTalentPoint[(int)TalentID][(int)(talentLevel + b)])
			{
				Addlv = b - 1;
				break;
			}
			this.RoleTalentPoint -= (ushort)this.ConsumeTalentPoint[(int)TalentID][(int)(talentLevel + b)];
		}
		bool flag = false;
		for (byte b2 = 0; b2 < this.TalentQueueCount; b2 += 1)
		{
			if (this.TalentAddQueue[(int)this.CehckSendIdx][(int)b2].TalentID == TalentID)
			{
				DataManager._TalentUpdateQueue[] array = this.TalentAddQueue[(int)this.CehckSendIdx];
				byte b3 = b2;
				array[(int)b3].AddLevel = array[(int)b3].AddLevel + Addlv;
				this.TalentAddQueue[(int)this.CehckSendIdx][(int)b2].Type = Type;
				flag = true;
				break;
			}
		}
		if (!flag && Addlv > 0)
		{
			this.TalentAddQueue[(int)this.CehckSendIdx][(int)this.TalentQueueCount].TalentID = TalentID;
			this.TalentAddQueue[(int)this.CehckSendIdx][(int)this.TalentQueueCount].Type = Type;
			DataManager._TalentUpdateQueue[] array2 = this.TalentAddQueue[(int)this.CehckSendIdx];
			byte talentQueueCount;
			this.TalentQueueCount = (talentQueueCount = this.TalentQueueCount) + 1;
			array2[(int)talentQueueCount].AddLevel = Addlv;
		}
		this.SetTalentLevel(TalentID, this.GetTalentLevel(TalentID, 0) + Addlv, 0);
		if (this.TalentQueueCount == 3)
		{
			this.CheckTalentSend();
		}
		GameManager.OnRefresh(NetworkNews.Refresh_Technology, null);
	}

	// Token: 0x060004A0 RID: 1184 RVA: 0x000647E0 File Offset: 0x000629E0
	public void sendTalentSaveQueue(ushort TalentID, byte SaveIndex, byte Addlv = 1, byte Type = 0)
	{
		bool flag = false;
		for (byte b = 0; b < this.TalentSaveQueueCount; b += 1)
		{
			if (this.TalentSaveQueue[(int)b].TalentID == TalentID)
			{
				DataManager._TalentUpdateQueue[] talentSaveQueue = this.TalentSaveQueue;
				byte b2 = b;
				talentSaveQueue[(int)b2].AddLevel = talentSaveQueue[(int)b2].AddLevel + Addlv;
				flag = true;
				break;
			}
		}
		if (!flag)
		{
			this.TalentSaveQueue[(int)this.TalentSaveQueueCount].TalentID = TalentID;
			DataManager._TalentUpdateQueue[] talentSaveQueue2 = this.TalentSaveQueue;
			byte talentSaveQueueCount;
			this.TalentSaveQueueCount = (talentSaveQueueCount = this.TalentSaveQueueCount) + 1;
			talentSaveQueue2[(int)talentSaveQueueCount].AddLevel = Addlv;
		}
		byte talentLevel = this.GetTalentLevel(TalentID, SaveIndex);
		this.SetTalentLevel(TalentID, this.GetTalentLevel(TalentID, SaveIndex) + Addlv, SaveIndex);
		for (byte b3 = 1; b3 <= Addlv; b3 += 1)
		{
			DataManager._SaveTalentData[] saveTalentData = this.SaveTalentData;
			int num = 0;
			saveTalentData[num].RoleTalentPoint = saveTalentData[num].RoleTalentPoint - (ushort)this.ConsumeTalentPoint[(int)TalentID][(int)(talentLevel + b3)];
		}
		if (Type == 4)
		{
			CString cstring = StringManager.Instance.StaticString1024();
			cstring.StringToFormat(this.mStringTable.GetStringByID((uint)this.TalentData.GetRecordByKey(TalentID).NameID));
			cstring.IntToFormat((long)this.GetTalentLevel(TalentID, SaveIndex), 1, false);
			cstring.AppendFormat(this.mStringTable.GetStringByID(10027u));
			GUIManager.Instance.AddHUDMessage(cstring.ToString(), 255, true);
		}
		GameManager.OnRefresh(NetworkNews.Refresh_Technology, null);
	}

	// Token: 0x060004A1 RID: 1185 RVA: 0x0006495C File Offset: 0x00062B5C
	public void ResetTalent(ushort TalentID, byte SaveIndex)
	{
		if (SaveIndex == 0)
		{
			return;
		}
		byte talentLevel = this.GetTalentLevel(TalentID, SaveIndex);
		byte minTalentLv = this.GetMinTalentLv(TalentID, SaveIndex);
		byte b = 0;
		if (talentLevel >= minTalentLv)
		{
			b = talentLevel - minTalentLv;
		}
		bool flag = false;
		for (byte b2 = 0; b2 < this.TalentSaveQueueCount; b2 += 1)
		{
			if (this.TalentSaveQueue[(int)b2].TalentID == TalentID)
			{
				if (this.TalentSaveQueue[(int)b2].AddLevel >= b)
				{
					this.TalentSaveQueue[(int)b2].AddLevel = this.TalentSaveQueue[(int)b2].AddLevel - b;
					flag = true;
				}
				else
				{
					this.TalentSaveQueue[(int)b2].AddLevel = 0;
				}
				break;
			}
		}
		for (byte b3 = 0; b3 < b; b3 += 1)
		{
			DataManager._SaveTalentData[] saveTalentData = this.SaveTalentData;
			int num = 0;
			saveTalentData[num].RoleTalentPoint = saveTalentData[num].RoleTalentPoint + (ushort)this.ConsumeTalentPoint[(int)TalentID][(int)(talentLevel - b3)];
		}
		this.SetTalentLevel(TalentID, minTalentLv, SaveIndex);
		if (!flag)
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Talent, -5, 0);
		}
		GameManager.OnRefresh(NetworkNews.Refresh_Technology, null);
		if (minTalentLv > 0)
		{
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(10181u), 255, true);
		}
		else
		{
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(10179u), 255, true);
		}
	}

	// Token: 0x060004A2 RID: 1186 RVA: 0x00064AD4 File Offset: 0x00062CD4
	public byte GetMinTalentLv(ushort TalentID, byte SaveIndex)
	{
		byte b = 0;
		if (this.PreTalentTable[(int)TalentID] == null)
		{
			return b;
		}
		byte talentLevel = this.GetTalentLevel((ushort)this.PreTalentTable[(int)TalentID].TalentID, SaveIndex);
		if (talentLevel > 0)
		{
			b = this.PreTalentTable[(int)TalentID].Level;
		}
		DataManager._PreTalentData preTalentData = this.PreTalentTable[(int)TalentID];
		while (preTalentData.Next != null)
		{
			preTalentData = preTalentData.Next;
			talentLevel = this.GetTalentLevel((ushort)preTalentData.TalentID, SaveIndex);
			if (talentLevel > 0 && preTalentData.Level > b)
			{
				b = preTalentData.Level;
			}
		}
		return b;
	}

	// Token: 0x060004A3 RID: 1187 RVA: 0x00064B68 File Offset: 0x00062D68
	public void CheckTalentSend()
	{
		if (this.TalentQueueCount > 0)
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_TALENT_LEVEL_ADD;
			messagePacket.AddSeqId();
			messagePacket.Add(this.TalentQueueCount);
			for (byte b = 0; b < this.TalentQueueCount; b += 1)
			{
				messagePacket.Add(this.TalentAddQueue[(int)this.CehckSendIdx][(int)b].TalentID);
				messagePacket.Add(this.TalentAddQueue[(int)this.CehckSendIdx][(int)b].AddLevel);
			}
			messagePacket.Send(false);
			this.CheckSendCount[(int)this.CehckSendIdx] = this.TalentQueueCount;
			this.CehckSendIdx = ((this.CehckSendIdx += 1) & 3);
			if (this.CehckSendIdx == this.CheckRecvIdx)
			{
				GUIManager.Instance.ShowUILock(EUILock.Research);
			}
			this.TalentQueueCount = 0;
		}
	}

	// Token: 0x060004A4 RID: 1188 RVA: 0x00064C58 File Offset: 0x00062E58
	public void CloneTalentSave(byte SourceIdx, byte TargetIdx)
	{
		if (this.SaveTalentData[(int)TargetIdx].SaveIndex == this.SaveTalentData[(int)SourceIdx].SaveIndex)
		{
			return;
		}
		this.SaveTalentData[(int)TargetIdx].RoleTalentPoint = this.SaveTalentData[(int)SourceIdx].RoleTalentPoint;
		this.SaveTalentData[(int)TargetIdx].NoUseTalent = this.SaveTalentData[(int)SourceIdx].NoUseTalent;
		this.SaveTalentData[(int)TargetIdx].TagName.ClearString();
		this.SaveTalentData[(int)TargetIdx].TagName.Append(this.SaveTalentData[(int)SourceIdx].TagName);
		this.SaveTalentData[(int)TargetIdx].DefaultTagName.ClearString();
		this.SaveTalentData[(int)TargetIdx].DefaultTagName.Append(this.SaveTalentData[(int)SourceIdx].DefaultTagName);
		Buffer.BlockCopy(this.SaveTalentData[(int)SourceIdx].SaveTalentData, 0, this.SaveTalentData[(int)TargetIdx].SaveTalentData, 0, 100);
		this.TalentSaveQueueCount = 0;
		this.TalentSaveZero = 1;
	}

	// Token: 0x060004A5 RID: 1189 RVA: 0x00064D84 File Offset: 0x00062F84
	public int CompareTalentSave(byte SaveSlot)
	{
		if (this.TalentSaveZero == 0)
		{
			int num = (int)this.SaveTalentData[0].RoleTalentPoint;
			int num2 = (int)this.SaveTalentData[(int)SaveSlot].RoleTalentPoint;
			for (int i = 0; i < this.SaveTalentData[0].SaveTalentData.Length; i++)
			{
				for (int j = 1; j <= (int)this.SaveTalentData[0].SaveTalentData[i]; j++)
				{
					num += (int)this.ConsumeTalentPoint[i + 1][j];
				}
			}
			for (int k = 0; k < this.SaveTalentData[(int)SaveSlot].SaveTalentData.Length; k++)
			{
				for (int l = 1; l <= (int)this.SaveTalentData[(int)SaveSlot].SaveTalentData[k]; l++)
				{
					num2 += (int)this.ConsumeTalentPoint[k + 1][l];
				}
			}
			if (num < num2)
			{
				DataManager._SaveTalentData[] saveTalentData = this.SaveTalentData;
				int num3 = 0;
				saveTalentData[num3].RoleTalentPoint = saveTalentData[num3].RoleTalentPoint + (ushort)(num2 - num);
				return 2;
			}
		}
		else
		{
			for (int m = 0; m < this.SaveTalentData[0].SaveTalentData.Length; m++)
			{
				if (this.SaveTalentData[0].SaveTalentData[m] != this.SaveTalentData[(int)SaveSlot].SaveTalentData[m])
				{
					byte b = 0;
					while (b < this.TalentSaveQueueCount)
					{
						int num4 = (int)(this.TalentSaveQueue[(int)b].TalentID - 1);
						if (num4 == m)
						{
							if (this.SaveTalentData[0].SaveTalentData[m] - this.TalentSaveQueue[(int)b].AddLevel != this.SaveTalentData[(int)SaveSlot].SaveTalentData[m])
							{
								return 1;
							}
							break;
						}
						else
						{
							b += 1;
						}
					}
				}
			}
		}
		return 0;
	}

	// Token: 0x060004A6 RID: 1190 RVA: 0x00064F84 File Offset: 0x00063184
	public void ClearCurTalentSave()
	{
		this.TalentSaveZero = 0;
		this.TalentSaveQueueCount = 0;
		for (int i = 0; i < this.SaveTalentData[0].SaveTalentData.Length; i++)
		{
			if (this.SaveTalentData[0].SaveTalentData[i] != 0)
			{
				for (int j = 1; j <= (int)this.SaveTalentData[0].SaveTalentData[i]; j++)
				{
					DataManager._SaveTalentData[] saveTalentData = this.SaveTalentData;
					int num = 0;
					saveTalentData[num].RoleTalentPoint = saveTalentData[num].RoleTalentPoint + (ushort)this.ConsumeTalentPoint[i + 1][j];
				}
			}
		}
		Array.Clear(this.SaveTalentData[0].SaveTalentData, 0, this.SaveTalentData[0].SaveTalentData.Length);
		this.SaveTalentData[0].NoUseTalent = 1;
	}

	// Token: 0x060004A7 RID: 1191 RVA: 0x00065068 File Offset: 0x00063268
	public void RecvTalentInfo(MessagePacket MP)
	{
		this.RoleTalentPoint = MP.ReadUShort(-1);
		MP.ReadBlock(this.AllTalentData, 0, 100, -1);
		this.NoUseTalent = 1;
		for (int i = 0; i < 100; i++)
		{
			if (this.AllTalentData[i] > 0)
			{
				this.NoUseTalent = 0;
				break;
			}
		}
		if (this.TalentQueueCount > 0)
		{
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1503u), 255, true);
			this.TalentQueueCount = 0;
		}
		Array.Clear(this.CheckSendCount, 0, this.CheckSendCount.Length);
		this.CehckSendIdx = (this.CheckRecvIdx = 0);
		GameConstants.GetBytes(0, DataManager.msgBuffer, 0);
		this.AttribVal.UpdateTalentData();
		GameManager.OnRefresh(NetworkNews.Refresh_Technology, DataManager.msgBuffer);
		GUIManager.Instance.UpdateUI(EGUIWindow.Door, 13, 0);
	}

	// Token: 0x060004A8 RID: 1192 RVA: 0x00065150 File Offset: 0x00063350
	public void RecvTalentSave(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = MP.ReadByte(-1);
		for (byte b3 = 0; b3 < b2; b3 += 1)
		{
			int num = (int)(b3 + this.RecvSaveIndexStart + 1);
			if (num >= this.SaveTalentData.Length)
			{
				break;
			}
			this.SaveTalentData[num].InitSaveTalentData(MP);
		}
		if (b == 0)
		{
			this.RecvSaveIndexStart = 0;
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Talent, -4, 0);
		}
		else
		{
			this.RecvSaveIndexStart += b2;
		}
	}

	// Token: 0x060004A9 RID: 1193 RVA: 0x000651E0 File Offset: 0x000633E0
	public void RecvTalentSavePointIncreased(MessagePacket MP)
	{
		MP.ReadByte(-1);
		this.tmpRoleTotalTalent = MP.ReadUShort(-1);
	}

	// Token: 0x060004AA RID: 1194 RVA: 0x000651F8 File Offset: 0x000633F8
	public void RecvTalentAdd(MessagePacket MP)
	{
		if (MP.ReadByte(-1) > 0)
		{
			for (byte b = 0; b < this.CheckSendCount[(int)this.CheckRecvIdx]; b += 1)
			{
				byte b2 = this.GetTalentLevel(this.TalentAddQueue[(int)this.CheckRecvIdx][(int)b].TalentID, 0);
				for (int i = 0; i < (int)this.TalentAddQueue[(int)this.CheckRecvIdx][(int)b].AddLevel; i++)
				{
					if ((int)b2 >= i)
					{
						this.RoleTalentPoint += (ushort)this.ConsumeTalentPoint[(int)this.TalentAddQueue[(int)this.CheckRecvIdx][(int)b].TalentID][(int)b2 - i];
					}
				}
				b2 -= this.TalentAddQueue[(int)this.CheckRecvIdx][(int)b].AddLevel;
				this.SetTalentLevel(this.TalentAddQueue[(int)this.CheckRecvIdx][(int)b].TalentID, b2, 0);
			}
			this.CheckSendCount[(int)this.CheckRecvIdx] = 0;
			this.CheckRecvIdx = ((this.CheckRecvIdx += 1) & 3);
			GameManager.OnRefresh(NetworkNews.Refresh_Technology, null);
			return;
		}
		ushort num = MP.ReadUShort(-1);
		ushort num2 = 0;
		ushort num3 = 0;
		byte b3 = MP.ReadByte(-1);
		for (byte b4 = 0; b4 < b3; b4 += 1)
		{
			ushort num4 = MP.ReadUShort(-1);
			byte b5 = MP.ReadByte(-1);
			byte b6 = 0;
			for (int j = 0; j < (int)this.TalentQueueCount; j++)
			{
				if (b4 == 0)
				{
					byte b2 = this.GetTalentLevel(this.TalentAddQueue[(int)this.CehckSendIdx][j].TalentID, 0);
					for (int k = 0; k < (int)this.TalentAddQueue[(int)this.CehckSendIdx][j].AddLevel; k++)
					{
						if ((int)b2 >= k)
						{
							num2 += (ushort)this.ConsumeTalentPoint[(int)this.TalentAddQueue[(int)this.CehckSendIdx][j].TalentID][(int)b2 - k];
						}
					}
					num3 = num2;
				}
				if (this.TalentAddQueue[(int)this.CehckSendIdx][j].TalentID == num4)
				{
					b6 += this.TalentAddQueue[(int)this.CehckSendIdx][j].AddLevel;
				}
			}
			for (int l = 0; l < this.CheckSendCount.Length; l++)
			{
				if (l != (int)this.CehckSendIdx && l != (int)this.CheckRecvIdx && this.CheckSendCount[l] != 0)
				{
					for (int m = 0; m < (int)this.CheckSendCount[l]; m++)
					{
						if (b4 == 0)
						{
							byte b2 = this.GetTalentLevel(this.TalentAddQueue[l][m].TalentID, 0);
							for (int n = 0; n < (int)this.TalentAddQueue[l][m].AddLevel; n++)
							{
								if ((int)b2 >= n)
								{
									num2 += (ushort)this.ConsumeTalentPoint[(int)this.TalentAddQueue[l][m].TalentID][(int)b2 - n];
								}
							}
						}
						if (this.TalentAddQueue[l][m].TalentID == num4)
						{
							b6 += this.TalentAddQueue[l][m].AddLevel;
						}
					}
				}
			}
			if (b5 + b6 != this.GetTalentLevel(num4, 0))
			{
				this.SetTalentLevel(num4, b5, 0);
			}
			for (byte b7 = 0; b7 < this.CheckSendCount[(int)this.CheckRecvIdx]; b7 += 1)
			{
				if (this.TalentAddQueue[(int)this.CheckRecvIdx][(int)b7].TalentID == num4)
				{
					if (this.TalentAddQueue[(int)this.CheckRecvIdx][(int)b7].Type == 4)
					{
						CString cstring = StringManager.Instance.StaticString1024();
						cstring.StringToFormat(this.mStringTable.GetStringByID((uint)this.TalentData.GetRecordByKey(num4).NameID));
						cstring.IntToFormat((long)b5, 1, false);
						cstring.AppendFormat(this.mStringTable.GetStringByID(10027u));
						GUIManager.Instance.AddHUDMessage(cstring.ToString(), 255, true);
					}
					break;
				}
			}
		}
		if (num != this.RoleTalentPoint + num2)
		{
			this.RoleTalentPoint = num - num3;
		}
		this.NoUseTalent = 0;
		this.CheckSendCount[(int)this.CheckRecvIdx] = 0;
		this.CheckRecvIdx = ((this.CheckRecvIdx += 1) & 3);
		this.AttribVal.UpdateTalentData();
		GameManager.OnRefresh(NetworkNews.Refresh_Technology, null);
		GUIManager.Instance.UpdateUI(EGUIWindow.Door, 13, 0);
	}

	// Token: 0x060004AB RID: 1195 RVA: 0x000656D0 File Offset: 0x000638D0
	public void UpdateSaveTalent_Point(bool bAdd = false)
	{
		if (this.tmpRoleTotalTalent == 0)
		{
			return;
		}
		uint effectBaseVal = this.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_QUICK_TALENT_SET);
		for (uint num = 0u; num <= effectBaseVal; num += 1u)
		{
			if (!bAdd)
			{
				if (this.SaveTalentData[(int)((UIntPtr)num)].NoUseTalent == 1)
				{
					this.SaveTalentData[(int)((UIntPtr)num)].RoleTalentPoint = this.tmpRoleTotalTalent;
				}
			}
			else
			{
				DataManager._SaveTalentData[] saveTalentData = this.SaveTalentData;
				UIntPtr uintPtr = (UIntPtr)num;
				saveTalentData[(int)uintPtr].RoleTalentPoint = saveTalentData[(int)uintPtr].RoleTalentPoint + this.tmpRoleTotalTalent;
			}
		}
		this.tmpRoleTotalTalent = 0;
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_TalentSave, 1, 0);
	}

	// Token: 0x060004AC RID: 1196 RVA: 0x0006577C File Offset: 0x0006397C
	public void SpeedupRally(ushort itemID, ushort targetID, CString name = null)
	{
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.AddSeqId();
		messagePacket.Add(itemID);
		messagePacket.Add(targetID);
		if (name != null)
		{
			messagePacket.Add(name.ToString(), 13);
		}
		messagePacket.Protocol = Protocol._MSG_REQUEST_RALLYATKSPEEDUP;
		messagePacket.Send(false);
	}

	// Token: 0x060004AD RID: 1197 RVA: 0x000657D0 File Offset: 0x000639D0
	public void RecvInitWatchTowerInfo(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (!this.bReSetWTD)
		{
			this.m_WatchTowerData.Clear();
			this.tmp_WatchTowerData.Clear();
			this.WatchTowerDataCount = 0u;
			this.bReSetWTD = true;
		}
		WatchTowerData item = default(WatchTowerData);
		for (int i = 0; i < (int)b; i++)
		{
			item.tmpIdx = (uint)i;
			item.LineID = MP.ReadUInt(-1);
			item.LineType = MP.ReadByte(-1);
			item.Index = MP.ReadByte(-1);
			item.MarchTimeData.BeginTime = MP.ReadLong(-1);
			item.MarchTimeData.RequireTime = MP.ReadUInt(-1);
			this.tmp_WatchTowerData.Add(item);
		}
	}

	// Token: 0x060004AE RID: 1198 RVA: 0x00065894 File Offset: 0x00063A94
	public void RecvInitWatchTowerInfoEnd(MessagePacket MP)
	{
		this.tmp_WatchTowerData.Sort(this.mWatchTowerComparer_LindID);
		WatchTowerData watchTowerData = default(WatchTowerData);
		this.m_WatchTowerData.Clear();
		WatchTowerSortData watchTowerSortData = default(WatchTowerSortData);
		for (int i = 0; i < this.tmp_WatchTowerData.Count; i++)
		{
			watchTowerSortData.ListIdx = (uint)i;
			watchTowerSortData.LineType = this.tmp_WatchTowerData[i].LineType;
			this.m_WatchTowerData.Add(watchTowerSortData);
		}
		byte b = MP.ReadByte(-1);
		int num = 0;
		while (num < (int)b && num < this.MarchEventTime.Length)
		{
			watchTowerData.tmpIdx = (uint)num;
			watchTowerData.LineID = (uint)MP.ReadByte(-1);
			watchTowerData.LineID += 1u;
			watchTowerData.Index = (byte)watchTowerData.LineID;
			watchTowerData.LineType = 0;
			watchTowerData.MarchTimeData.BeginTime = this.MarchEventTime[num].BeginTime;
			watchTowerData.MarchTimeData.RequireTime = this.MarchEventTime[num].RequireTime;
			this.mtmpIdx[num] = watchTowerData;
			watchTowerSortData.ListIdx = (uint)watchTowerData.Index;
			watchTowerSortData.LineType = 0;
			this.m_WatchTowerData.Add(watchTowerSortData);
			num++;
		}
		if (b < 8)
		{
			for (int j = (int)b; j < 8; j++)
			{
				watchTowerData.Index = 0;
				this.mtmpIdx[j] = watchTowerData;
			}
		}
		GUIManager.Instance.RemoveAllAttackState();
		this.m_WatchTowerData.Sort(this.mWatchTowerComparer);
		for (int k = 0; k < this.m_WatchTowerData.Count; k++)
		{
			watchTowerSortData = this.m_WatchTowerData[k];
			watchTowerSortData.tmpIdx = (uint)k;
			this.m_WatchTowerData[k] = watchTowerSortData;
			if (this.m_WatchTowerData[k].LineType != 0)
			{
				int listIdx = (int)this.m_WatchTowerData[k].ListIdx;
				watchTowerData = this.tmp_WatchTowerData[listIdx];
				watchTowerData.tmpIdx = (uint)k;
				this.tmp_WatchTowerData[listIdx] = watchTowerData;
				bool flag = false;
				if (this.tmp_WatchTowerData[listIdx].Index >= 0 && this.tmp_WatchTowerData[listIdx].Index <= 7 && this.MarchEventData[(int)this.tmp_WatchTowerData[listIdx].Index].PointKind == POINT_KIND.PK_YOLK)
				{
					flag = true;
				}
				switch (this.m_WatchTowerData[k].LineType)
				{
				case 5:
				case 7:
					if (!flag)
					{
						if (this.tmp_WatchTowerData[listIdx].Index == 255)
						{
							GUIManager.Instance.AddAttackState(EAttackKind.Attack);
						}
						else
						{
							GUIManager.Instance.AddAttackState(EAttackKind.None_Attack);
						}
					}
					else
					{
						GUIManager.Instance.AddAttackState(EAttackKind.Wonder_Attack);
					}
					break;
				case 6:
					GUIManager.Instance.AddAttackState(EAttackKind.Cantonment);
					break;
				case 8:
					if (!flag)
					{
						if (this.tmp_WatchTowerData[listIdx].Index == 255)
						{
							GUIManager.Instance.AddAttackState(EAttackKind.Detect);
						}
						else
						{
							GUIManager.Instance.AddAttackState(EAttackKind.None_Detect);
						}
					}
					else
					{
						GUIManager.Instance.AddAttackState(EAttackKind.Wonder_Detect);
					}
					break;
				case 10:
					if (!flag)
					{
						GUIManager.Instance.AddAttackState(EAttackKind.Reinforce);
					}
					else
					{
						GUIManager.Instance.AddAttackState(EAttackKind.Wonder_Reinforce);
					}
					break;
				case 11:
					GUIManager.Instance.AddAttackState(EAttackKind.Gather);
					break;
				case 12:
					if (!flag)
					{
						GUIManager.Instance.AddAttackState(EAttackKind.GatherAttack);
					}
					else
					{
						GUIManager.Instance.AddAttackState(EAttackKind.Wonder_GatherAttack);
					}
					break;
				case 13:
					GUIManager.Instance.AddAttackState(EAttackKind.Supplies);
					break;
				case 22:
					GUIManager.Instance.AddAttackState(EAttackKind.PetAttack);
					break;
				}
			}
			else
			{
				int listIdx = (int)this.m_WatchTowerData[k].ListIdx;
				watchTowerData = this.mtmpIdx[listIdx - 1];
				watchTowerData.tmpIdx = (uint)k;
				this.mtmpIdx[listIdx - 1] = watchTowerData;
				GUIManager.Instance.AddAttackState(EAttackKind.Conflict);
			}
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Watchtower, 1, 0);
	}

	// Token: 0x060004AF RID: 1199 RVA: 0x00065D70 File Offset: 0x00063F70
	public void RecvUpDateWatchTowerAddLine(MessagePacket MP)
	{
		WatchTowerData item = default(WatchTowerData);
		WatchTowerSortData watchTowerSortData = default(WatchTowerSortData);
		item.LineID = MP.ReadUInt(-1);
		item.LineType = MP.ReadByte(-1);
		item.Index = MP.ReadByte(-1);
		item.MarchTimeData.BeginTime = MP.ReadLong(-1);
		item.MarchTimeData.RequireTime = MP.ReadUInt(-1);
		EWATCHTOWER_LINE_TARGET ewatchtower_LINE_TARGET = (EWATCHTOWER_LINE_TARGET)MP.ReadByte(-1);
		ushort wonderID = MP.ReadUShort(-1);
		int num = this.tmp_WatchTowerData.BinarySearch(item, this.mWatchTowerComparer_LindID);
		if (num >= 0)
		{
			return;
		}
		item.tmpIdx = (uint)this.m_WatchTowerData.Count;
		bool flag = false;
		if (this.m_WatchTowerData.Count > ~num && this.tmp_WatchTowerData.Count > 0)
		{
			flag = true;
		}
		this.tmp_WatchTowerData.Insert(~num, item);
		watchTowerSortData.tmpIdx = (uint)this.m_WatchTowerData.Count;
		watchTowerSortData.ListIdx = (uint)(~(uint)num);
		watchTowerSortData.LineType = item.LineType;
		this.m_WatchTowerData.Add(watchTowerSortData);
		if (flag)
		{
			for (int i = this.m_WatchTowerData.Count - 2; i >= 0; i--)
			{
				if (this.m_WatchTowerData[i].LineType != 0)
				{
					watchTowerSortData = this.m_WatchTowerData[i];
					if ((ulong)watchTowerSortData.ListIdx >= (ulong)((long)(~(long)num)))
					{
						watchTowerSortData.ListIdx += 1u;
						this.m_WatchTowerData[i] = watchTowerSortData;
					}
				}
			}
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Watchtower, 1, 0);
		switch (item.LineType)
		{
		case 5:
		case 7:
			switch (ewatchtower_LINE_TARGET)
			{
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_LINE_TARGET_CAPITAL:
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4005u), 19, true);
				GUIManager.Instance.AddAttackState(EAttackKind.Attack);
				break;
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_LINE_TARGET_CAMP:
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4004u), 19, true);
				GUIManager.Instance.AddAttackState(EAttackKind.None_Attack);
				break;
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_LINE_TARGET_AMBUSH:
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9753u), 19, true);
				GUIManager.Instance.AddAttackState(EAttackKind.None_Attack);
				break;
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER1:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER2:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER3:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER4:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER5:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER6:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER7:
				GUIManager.Instance.AddAttackState(EAttackKind.Wonder_Attack);
				GUIManager.Instance.MsgStr.ClearString();
				GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName(wonderID, 0));
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8545u));
				GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 19, true);
				break;
			}
			break;
		case 6:
			switch (ewatchtower_LINE_TARGET)
			{
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_LINE_TARGET_CAPITAL:
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9743u), 40, true);
				break;
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER1:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER2:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER3:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER4:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER5:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER6:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER7:
				GUIManager.Instance.MsgStr.ClearString();
				GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName(wonderID, 0));
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(9917u));
				GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 40, true);
				break;
			}
			GUIManager.Instance.AddAttackState(EAttackKind.Cantonment);
			break;
		case 8:
			switch (ewatchtower_LINE_TARGET)
			{
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_LINE_TARGET_CAPITAL:
				GUIManager.Instance.AddAttackState(EAttackKind.Detect);
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4006u), 19, true);
				break;
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_LINE_TARGET_CAMP:
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4878u), 19, true);
				GUIManager.Instance.AddAttackState(EAttackKind.None_Detect);
				break;
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_LINE_TARGET_AMBUSH:
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9763u), 19, true);
				GUIManager.Instance.AddAttackState(EAttackKind.None_Detect);
				break;
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER1:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER2:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER3:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER4:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER5:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER6:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER7:
				GUIManager.Instance.AddAttackState(EAttackKind.Wonder_Detect);
				GUIManager.Instance.MsgStr.ClearString();
				GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName(wonderID, 0));
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8546u));
				GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 19, true);
				break;
			}
			break;
		case 10:
			switch (ewatchtower_LINE_TARGET)
			{
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_LINE_TARGET_CAPITAL:
				GUIManager.Instance.AddAttackState(EAttackKind.Reinforce);
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4007u), 40, true);
				break;
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER1:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER2:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER3:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER4:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER5:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER6:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER7:
				GUIManager.Instance.AddAttackState(EAttackKind.Wonder_Reinforce);
				GUIManager.Instance.MsgStr.ClearString();
				GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName(wonderID, 0));
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8547u));
				GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 40, true);
				break;
			}
			break;
		case 11:
			GUIManager.Instance.AddAttackState(EAttackKind.Gather);
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4008u), 40, true);
			break;
		case 12:
			switch (ewatchtower_LINE_TARGET)
			{
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_LINE_TARGET_CAPITAL:
				GUIManager.Instance.AddAttackState(EAttackKind.GatherAttack);
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4984u), 19, true);
				break;
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_LINE_TARGET_AMBUSH:
				GUIManager.Instance.AddAttackState(EAttackKind.GatherAttack);
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9762u), 19, true);
				break;
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER1:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER2:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER3:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER4:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER5:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER6:
			case EWATCHTOWER_LINE_TARGET.EWATCHTOWER_ADDLINE_WONDER7:
				GUIManager.Instance.AddAttackState(EAttackKind.Wonder_GatherAttack);
				GUIManager.Instance.MsgStr.ClearString();
				GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName(wonderID, 0));
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8544u));
				GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 19, true);
				break;
			}
			break;
		case 13:
			GUIManager.Instance.AddAttackState(EAttackKind.Supplies);
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4003u), 39, true);
			break;
		case 22:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(12099u), 19, true);
			GUIManager.Instance.AddAttackState(EAttackKind.PetAttack);
			break;
		}
		if (item.LineType != 6 && item.LineType != 13 && item.LineType != 10 && item.LineType != 11)
		{
			AudioManager.Instance.PlayUISFX(UIKind.WarHorn);
		}
	}

	// Token: 0x060004B0 RID: 1200 RVA: 0x00066580 File Offset: 0x00064780
	public void RecvUpDateWatchTowerDelLine(MessagePacket MP)
	{
		uint lineID = MP.ReadUInt(-1);
		WatchTowerData watchTowerData = default(WatchTowerData);
		WatchTowerSortData value = default(WatchTowerSortData);
		watchTowerData.LineID = lineID;
		int num = this.tmp_WatchTowerData.BinarySearch(watchTowerData, this.mWatchTowerComparer_LindID);
		if (num < 0)
		{
			return;
		}
		int num2 = num;
		if (this.tmp_WatchTowerData.Count <= num2)
		{
			return;
		}
		for (int i = this.m_WatchTowerData.Count - 1; i >= 0; i--)
		{
			if (this.m_WatchTowerData[i].LineType != 0)
			{
				int listIdx = (int)this.m_WatchTowerData[i].ListIdx;
				if (this.tmp_WatchTowerData[listIdx].tmpIdx > this.tmp_WatchTowerData[num2].tmpIdx)
				{
					watchTowerData = this.tmp_WatchTowerData[listIdx];
					watchTowerData.tmpIdx -= 1u;
					this.tmp_WatchTowerData[listIdx] = watchTowerData;
				}
				if (listIdx > num2)
				{
					value = this.m_WatchTowerData[i];
					value.ListIdx -= 1u;
					this.m_WatchTowerData[i] = value;
				}
			}
			else
			{
				int listIdx = (int)this.m_WatchTowerData[i].ListIdx;
				if (this.mtmpIdx[listIdx - 1].tmpIdx > this.tmp_WatchTowerData[num2].tmpIdx)
				{
					watchTowerData = this.mtmpIdx[listIdx - 1];
					watchTowerData.tmpIdx -= 1u;
					this.mtmpIdx[listIdx - 1] = watchTowerData;
				}
			}
		}
		bool flag = false;
		if (this.tmp_WatchTowerData[num2].Index >= 0 && this.tmp_WatchTowerData[num2].Index <= 7 && this.MarchEventData[(int)this.tmp_WatchTowerData[num2].Index].PointKind == POINT_KIND.PK_YOLK)
		{
			flag = true;
		}
		switch (this.tmp_WatchTowerData[num2].LineType)
		{
		case 5:
		case 7:
			if (!flag)
			{
				if (this.tmp_WatchTowerData[num2].Index == 255)
				{
					GUIManager.Instance.RemoveAttackState(EAttackKind.Attack);
				}
				else
				{
					GUIManager.Instance.RemoveAttackState(EAttackKind.None_Attack);
				}
			}
			else
			{
				GUIManager.Instance.RemoveAttackState(EAttackKind.Wonder_Attack);
			}
			break;
		case 6:
			GUIManager.Instance.RemoveAttackState(EAttackKind.Cantonment);
			break;
		case 8:
			if (!flag)
			{
				if (this.tmp_WatchTowerData[num2].Index == 255)
				{
					GUIManager.Instance.RemoveAttackState(EAttackKind.Detect);
				}
				else
				{
					GUIManager.Instance.RemoveAttackState(EAttackKind.None_Detect);
				}
			}
			else
			{
				GUIManager.Instance.RemoveAttackState(EAttackKind.Wonder_Detect);
			}
			break;
		case 10:
			if (!flag)
			{
				GUIManager.Instance.RemoveAttackState(EAttackKind.Reinforce);
			}
			else
			{
				GUIManager.Instance.RemoveAttackState(EAttackKind.Wonder_Reinforce);
			}
			break;
		case 11:
			GUIManager.Instance.RemoveAttackState(EAttackKind.Gather);
			break;
		case 12:
			if (!flag)
			{
				GUIManager.Instance.RemoveAttackState(EAttackKind.GatherAttack);
			}
			else
			{
				GUIManager.Instance.RemoveAttackState(EAttackKind.Wonder_GatherAttack);
			}
			break;
		case 13:
			GUIManager.Instance.RemoveAttackState(EAttackKind.Supplies);
			break;
		case 22:
			GUIManager.Instance.RemoveAttackState(EAttackKind.PetAttack);
			break;
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Watchtower_Details, 3, num2);
		if (this.m_WTList_Idx != 0 && (ulong)this.tmp_WatchTowerData[num2].tmpIdx < (ulong)((long)this.m_WTList_Idx))
		{
			this.m_WTList_Idx--;
		}
		else if ((long)this.m_WTList_Idx == (long)((ulong)this.tmp_WatchTowerData[num2].tmpIdx))
		{
			this.m_WTList_Idx = -1;
		}
		if ((ulong)this.tmp_WatchTowerData[num2].tmpIdx < (ulong)((long)this.m_WatchTowerData.Count))
		{
			this.m_WatchTowerData.RemoveAt((int)this.tmp_WatchTowerData[num2].tmpIdx);
		}
		this.tmp_WatchTowerData.RemoveAt(num2);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Watchtower, 1, 0);
	}

	// Token: 0x060004B1 RID: 1201 RVA: 0x00066A44 File Offset: 0x00064C44
	public void RecvUpDateWatchTowerUpDateLine(MessagePacket MP)
	{
		uint lineID = MP.ReadUInt(-1);
		WatchTowerData watchTowerData = default(WatchTowerData);
		watchTowerData.LineID = lineID;
		int num = this.tmp_WatchTowerData.BinarySearch(watchTowerData, this.mWatchTowerComparer_LindID);
		if (num < 0)
		{
			return;
		}
		int num2 = num;
		watchTowerData = this.tmp_WatchTowerData[num2];
		watchTowerData.MarchTimeData.BeginTime = MP.ReadLong(-1);
		watchTowerData.MarchTimeData.RequireTime = MP.ReadUInt(-1);
		this.tmp_WatchTowerData[num2] = watchTowerData;
		bool flag = false;
		GUIManager.Instance.MsgStr.ClearString();
		if (this.tmp_WatchTowerData[num2].Index >= 0 && this.tmp_WatchTowerData[num2].Index <= 7 && this.MarchEventData[(int)this.tmp_WatchTowerData[num2].Index].PointKind == POINT_KIND.PK_YOLK)
		{
			flag = true;
		}
		switch (this.tmp_WatchTowerData[num2].LineType)
		{
		case 5:
			if (this.tmp_WatchTowerData[num2].Index == 255)
			{
				GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(5871u));
			}
			else if (!flag)
			{
				if (this.tmp_WatchTowerData[num2].Index >= 0 && this.tmp_WatchTowerData[num2].Index <= 7 && this.MarchEventData[(int)this.tmp_WatchTowerData[num2].Index].IsAmbushCamp())
				{
					GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(9761u));
				}
				else
				{
					GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(5872u));
				}
			}
			else
			{
				GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort)this.MarchEventData[(int)this.tmp_WatchTowerData[num2].Index].DesPointLevel, 0));
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8552u));
			}
			break;
		case 6:
			if (!flag)
			{
				GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(9745u));
			}
			else
			{
				GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort)this.MarchEventData[(int)this.tmp_WatchTowerData[num2].Index].DesPointLevel, 0));
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(9924u));
			}
			break;
		case 7:
			GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(5872u));
			break;
		case 8:
			if (this.tmp_WatchTowerData[num2].Index == 255)
			{
				GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(5875u));
			}
			else if (!flag)
			{
				if (this.tmp_WatchTowerData[num2].Index >= 0 && this.tmp_WatchTowerData[num2].Index <= 7 && this.MarchEventData[(int)this.tmp_WatchTowerData[num2].Index].IsAmbushCamp())
				{
					GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(9767u));
				}
				else
				{
					GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(5874u));
				}
			}
			else
			{
				GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort)this.MarchEventData[(int)this.tmp_WatchTowerData[num2].Index].DesPointLevel, 0));
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8553u));
			}
			break;
		case 10:
			if (!flag)
			{
				GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(5877u));
			}
			else
			{
				GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort)this.MarchEventData[(int)this.tmp_WatchTowerData[num2].Index].DesPointLevel, 0));
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8554u));
			}
			break;
		case 11:
			GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(5876u));
			break;
		case 12:
			if (this.tmp_WatchTowerData[num2].Index == 255)
			{
				GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(5870u));
			}
			else if (flag)
			{
				GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort)this.MarchEventData[(int)this.tmp_WatchTowerData[num2].Index].DesPointLevel, 0));
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8557u));
			}
			else if (this.tmp_WatchTowerData[num2].Index >= 0 && this.tmp_WatchTowerData[num2].Index <= 7 && this.MarchEventData[(int)this.tmp_WatchTowerData[num2].Index].IsAmbushCamp())
			{
				GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(9766u));
			}
			break;
		case 13:
			GUIManager.Instance.MsgStr.Append(this.mStringTable.GetStringByID(5878u));
			break;
		}
		GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 19, true);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Watchtower, 3, (int)this.tmp_WatchTowerData[num2].tmpIdx);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Watchtower_Details, 2, num2);
	}

	// Token: 0x060004B2 RID: 1202 RVA: 0x0006713C File Offset: 0x0006533C
	public void RecvAddConflictLine(MessagePacket MP)
	{
		WatchTowerData watchTowerData = default(WatchTowerData);
		WatchTowerSortData item = default(WatchTowerSortData);
		byte b = MP.ReadByte(-1);
		if (b < 0 || (int)b >= this.mtmpIdx.Length)
		{
			return;
		}
		watchTowerData.tmpIdx = (uint)this.m_WatchTowerData.Count;
		watchTowerData.LineID = (uint)(b + 1);
		watchTowerData.Index = b + 1;
		watchTowerData.LineType = 0;
		watchTowerData.MarchTimeData.BeginTime = this.MarchEventTime[(int)b].BeginTime;
		watchTowerData.MarchTimeData.RequireTime = this.MarchEventTime[(int)b].RequireTime;
		this.mtmpIdx[(int)b] = watchTowerData;
		item.tmpIdx = (uint)this.m_WatchTowerData.Count;
		item.ListIdx = (uint)watchTowerData.Index;
		item.LineType = 0;
		this.m_WatchTowerData.Add(item);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Watchtower, 1, 0);
		GUIManager.Instance.AddAttackState(EAttackKind.Conflict);
		AudioManager.Instance.PlayUISFX(UIKind.WarHorn);
		GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(3979u), 19, true);
	}

	// Token: 0x060004B3 RID: 1203 RVA: 0x0006726C File Offset: 0x0006546C
	public void RecvDelConflictLine(MessagePacket MP)
	{
		WatchTowerData watchTowerData = default(WatchTowerData);
		byte b = MP.ReadByte(-1);
		if (b < 0 || (int)b >= this.mtmpIdx.Length)
		{
			return;
		}
		int tmpIdx = (int)this.mtmpIdx[(int)b].tmpIdx;
		for (int i = this.m_WatchTowerData.Count - 1; i >= 0; i--)
		{
			if (this.m_WatchTowerData[i].LineType != 0)
			{
				int listIdx = (int)this.m_WatchTowerData[i].ListIdx;
				if ((ulong)this.tmp_WatchTowerData[listIdx].tmpIdx > (ulong)((long)tmpIdx))
				{
					watchTowerData = this.tmp_WatchTowerData[listIdx];
					watchTowerData.tmpIdx -= 1u;
					this.tmp_WatchTowerData[listIdx] = watchTowerData;
				}
			}
			else
			{
				int listIdx = (int)this.m_WatchTowerData[i].ListIdx;
				if ((ulong)this.mtmpIdx[listIdx - 1].tmpIdx > (ulong)((long)tmpIdx))
				{
					watchTowerData = this.mtmpIdx[listIdx - 1];
					watchTowerData.tmpIdx -= 1u;
					this.mtmpIdx[listIdx - 1] = watchTowerData;
				}
			}
		}
		if (this.m_WTList_Idx != 0 && tmpIdx < this.m_WTList_Idx)
		{
			this.m_WTList_Idx--;
		}
		if (tmpIdx < 0 && this.m_WatchTowerData.Count == 0)
		{
			return;
		}
		this.m_WatchTowerData.RemoveAt(tmpIdx);
		GUIManager.Instance.RemoveAttackState(EAttackKind.Conflict);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Watchtower, 1, 0);
	}

	// Token: 0x060004B4 RID: 1204 RVA: 0x00067420 File Offset: 0x00065620
	public void RecvWatchTowerLineDetail(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		MP.ReadByte(-1);
		Array.Clear(this.m_WT_TroopData, 0, this.m_WT_TroopData.Length);
		this.m_WT_WithSupremeLeader = 0;
		switch (b)
		{
		case 5:
		case 6:
		case 7:
		case 12:
			this.m_WTInfo_Status = (int)(b - 4);
			this.m_WTInfo_KID = DataManager.MapDataController.OtherKingdomData.kingdomID;
			this.m_WT_Point.zoneID = MP.ReadUShort(-1);
			this.m_WT_Point.pointID = MP.ReadByte(-1);
			this.m_WT_Name = MP.ReadString(13, -1);
			this.m_WT_AllianceName = MP.ReadString(3, -1);
			this.m_WT_MH = MP.ReadUShort(-1);
			this.m_WT_TroopTotal = 0u;
			this.m_WT_TotalForce = MP.ReadUInt(-1);
			this.m_WT_HeroNum = MP.ReadByte(-1);
			this.m_WT_TrooFlag = MP.ReadUShort(-1);
			this.m_WT_WithSupremeLeader = MP.ReadByte(-1);
			for (int i = 0; i < 16; i++)
			{
				this.m_WT_TroopData[i] = MP.ReadUInt(-1);
				this.m_WT_TroopTotal += this.m_WT_TroopData[i];
			}
			for (int j = 0; j < 5; j++)
			{
				this.m_WT_HeroID[j] = MP.ReadUShort(-1);
			}
			for (int k = 0; k < 5; k++)
			{
				this.m_WT_HeroRank[k].Rank = MP.ReadByte(-1);
				this.m_WT_HeroRank[k].Medal = MP.ReadByte(-1);
			}
			this.m_WT_KingdomID = MP.ReadUShort(-1);
			break;
		case 8:
		case 13:
			this.m_WTInfo_KID = DataManager.MapDataController.OtherKingdomData.kingdomID;
			this.m_WT_Point.zoneID = MP.ReadUShort(-1);
			this.m_WT_Point.pointID = MP.ReadByte(-1);
			this.m_WT_Name = MP.ReadString(13, -1);
			this.m_WT_AllianceName = MP.ReadString(3, -1);
			this.m_WT_MH = MP.ReadUShort(-1);
			this.m_WT_KingdomID = MP.ReadUShort(-1);
			break;
		case 10:
		case 11:
			this.m_WTInfo_KID = DataManager.MapDataController.OtherKingdomData.kingdomID;
			this.m_WT_Point.zoneID = MP.ReadUShort(-1);
			this.m_WT_Point.pointID = MP.ReadByte(-1);
			this.m_WT_Name = MP.ReadString(13, -1);
			this.m_WT_AllianceName = MP.ReadString(3, -1);
			this.m_WT_MH = MP.ReadUShort(-1);
			this.m_WT_TroopTotal = 0u;
			this.m_WT_TotalForce = MP.ReadUInt(-1);
			this.m_WT_TrooFlag = MP.ReadUShort(-1);
			for (int l = 0; l < 16; l++)
			{
				this.m_WT_TroopData[l] = MP.ReadUInt(-1);
				this.m_WT_TroopTotal += this.m_WT_TroopData[l];
			}
			this.m_WT_KingdomID = MP.ReadUShort(-1);
			break;
		case 22:
			this.m_WTInfo_KID = DataManager.MapDataController.OtherKingdomData.kingdomID;
			this.m_WT_Point.zoneID = MP.ReadUShort(-1);
			this.m_WT_Point.pointID = MP.ReadByte(-1);
			this.m_WT_Name = MP.ReadString(13, -1);
			this.m_WT_AllianceName = MP.ReadString(3, -1);
			this.m_WT_MH = MP.ReadUShort(-1);
			this.m_WT_PetID = MP.ReadUShort(-1);
			this.m_WT_PetEnhance = MP.ReadByte(-1);
			this.m_WT_PetSkillID = MP.ReadUShort(-1);
			this.m_WT_PetSkillLv = MP.ReadByte(-1);
			this.m_WT_KingdomID = MP.ReadUShort(-1);
			break;
		}
		GUIManager.Instance.HideUILock(EUILock.WatchTower);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Watchtower, 2, 0);
	}

	// Token: 0x060004B5 RID: 1205 RVA: 0x00067810 File Offset: 0x00065A10
	public void RecvWatchTowerLineDetail_ERROR(MessagePacket MP)
	{
		switch (MP.ReadByte(-1))
		{
		case 0:
			GUIManager.Instance.HideUILock(EUILock.WatchTower);
			break;
		case 1:
			GUIManager.Instance.HideUILock(EUILock.WatchTower);
			break;
		case 2:
			GUIManager.Instance.HideUILock(EUILock.WatchTower);
			break;
		}
	}

	// Token: 0x060004B6 RID: 1206 RVA: 0x00067874 File Offset: 0x00065A74
	public void RecvSendMail(MessagePacket MP)
	{
		switch (MP.ReadByte(-1))
		{
		case 0:
			GUIManager.Instance.HideUILock(EUILock.LetterEditor);
			(GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door).CloseMenu(false);
			this.bMailAddBookMark = false;
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(5378u), 27, true);
			break;
		case 1:
			GUIManager.Instance.HideUILock(EUILock.LetterEditor);
			break;
		case 2:
			GUIManager.Instance.HideUILock(EUILock.LetterEditor);
			break;
		case 3:
			GUIManager.Instance.HideUILock(EUILock.LetterEditor);
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(5379u), 255, true);
			break;
		case 4:
			GUIManager.Instance.HideUILock(EUILock.LetterEditor);
			break;
		case 5:
			GUIManager.Instance.HideUILock(EUILock.LetterEditor);
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(904u), 255, true);
			break;
		case 6:
			GUIManager.Instance.HideUILock(EUILock.LetterEditor);
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4753u), 255, true);
			break;
		}
	}

	// Token: 0x060004B7 RID: 1207 RVA: 0x000679CC File Offset: 0x00065BCC
	public void UpdateWallInfo(float deltaTime)
	{
		if (this.m_WallRepairNowValue < this.m_WallRepairMaxValue)
		{
			if (!LandWalkerManager.IsBattleFire())
			{
				this.m_WallTickTime += deltaTime;
				if (this.m_WallTickTime >= 1f)
				{
					this.m_WallTempRate += this.m_WallRepairRate;
					if (this.m_WallTempRate >= 1f)
					{
						this.m_WallRepairNowValue += 1u;
						this.m_WallTempRate -= 1f;
					}
					this.m_WallTickTime = 0f;
				}
			}
			else if (DataManager.Instance.queueBarData[16].bActive)
			{
				this.SetQueueBarData(EQueueBarIndex.WallRepair, false, 0L, 0u);
			}
			else
			{
				this.bNeedShowWallQueueBar = true;
			}
			if (this.m_WallRepairNowValue == this.m_WallRepairMaxValue && DataManager.Instance.queueBarData[16].bActive)
			{
				this.m_WallBeginTime = 0L;
				this.m_WallTempRate = 0f;
				this.SetQueueBarData(EQueueBarIndex.WallRepair, false, 0L, 0u);
				GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(3787u), 8, true);
			}
			AssetManager.SetCastleLevel(GUIManager.Instance.BuildingData.GetBuildData(12, 0).Level, 0);
			this.SetWallQueueBar();
		}
	}

	// Token: 0x060004B8 RID: 1208 RVA: 0x00067B2C File Offset: 0x00065D2C
	public void InitWallInfo()
	{
		this.m_WallRepairBeginValue = 0u;
		this.m_WallRepairNowValue = 0u;
		this.m_WallRepairMaxValue = 0u;
		this.m_WallRepairRate = 0f;
		this.m_WallTickTime = 0f;
		this.m_WallTempRate = 0f;
		this.m_WallBeginTime = 0L;
		this.m_WallTargetTime = 0L;
		this.bNeedShowWallQueueBar = false;
	}

	// Token: 0x060004B9 RID: 1209 RVA: 0x00067B88 File Offset: 0x00065D88
	public void SetWallQueueBar()
	{
		if (this.bNeedShowWallQueueBar && this.ServerTime > 0L)
		{
			uint num = (uint)((this.m_WallRepairMaxValue - this.m_WallRepairNowValue) / this.m_WallRepairRate);
			this.m_WallBeginTime = this.ServerTime - (long)((this.m_WallRepairNowValue - this.m_WallRepairBeginValue) / this.m_WallRepairRate);
			this.m_WallTargetTime = this.ServerTime + (long)((ulong)num);
			if (num > 0u && !LandWalkerManager.IsBattleFire())
			{
				this.bNeedShowWallQueueBar = false;
				DataManager.Instance.SetQueueBarData(EQueueBarIndex.WallRepair, true, this.m_WallBeginTime, (uint)(this.m_WallTargetTime - this.m_WallBeginTime));
				DataManager.Instance.SetRecvQueueBarData(16);
			}
		}
	}

	// Token: 0x060004BA RID: 1210 RVA: 0x00067C40 File Offset: 0x00065E40
	public void RecvWallInfo(MessagePacket MP)
	{
		this.m_WallRepairMaxValue = MP.ReadUInt(-1);
		this.m_WallRepairRate = MP.ReadFloat(-1);
		this.m_WallRepairBeginValue = MP.ReadUInt(-1);
		this.m_WallRepairNowValue = MP.ReadUInt(-1);
		byte level = GUIManager.Instance.BuildingData.GetBuildData(12, 0).Level;
		AssetManager.SetCastleLevel(level, 0);
		if (this.m_WallRepairMaxValue > this.m_WallRepairNowValue)
		{
			this.bNeedShowWallQueueBar = true;
		}
		else if (this.m_WallRepairMaxValue == this.m_WallRepairNowValue && this.m_WallRepairMaxValue != 0u)
		{
			AssetManager.SetCastleLevel(GUIManager.Instance.BuildingData.GetBuildData(12, 0).Level, 0);
			DataManager.Instance.SetQueueBarData(EQueueBarIndex.WallRepair, false, 0L, 0u);
		}
	}

	// Token: 0x060004BB RID: 1211 RVA: 0x00067D0C File Offset: 0x00065F0C
	public void InitDefendersID()
	{
		Array.Clear(this.m_DefendersID, 0, this.m_DefendersID.Length);
		this.m_DefendersID[0] = this.GetLeaderID();
	}

	// Token: 0x060004BC RID: 1212 RVA: 0x00067D3C File Offset: 0x00065F3C
	public void SetDefendersID()
	{
		this.m_DefendersID[0] = this.GetLeaderID();
	}

	// Token: 0x060004BD RID: 1213 RVA: 0x00067D4C File Offset: 0x00065F4C
	public int GetMaxDefenders()
	{
		RoleBuildingData buildData = GUIManager.Instance.BuildingData.GetBuildData(8, 0);
		return (int)GUIManager.Instance.BuildingData.GetBuildLevelRequestData(8, buildData.Level).Value2;
	}

	// Token: 0x060004BE RID: 1214 RVA: 0x00067D8C File Offset: 0x00065F8C
	public ushort GetLeaderID()
	{
		return this.RoleAttr.Head;
	}

	// Token: 0x060004BF RID: 1215 RVA: 0x00067D9C File Offset: 0x00065F9C
	public eHeroState GetHeroState(ushort heroID)
	{
		eHeroState result = eHeroState.None;
		ushort leaderID = this.GetLeaderID();
		LoadCaptureState nowCaptureStat = DataManager.Instance.beCaptured.nowCaptureStat;
		if (leaderID == heroID && nowCaptureStat != LoadCaptureState.None)
		{
			if (nowCaptureStat == LoadCaptureState.Captured)
			{
				result = eHeroState.Captured;
			}
			else if (nowCaptureStat == LoadCaptureState.Dead)
			{
				result = eHeroState.Dead;
			}
			else
			{
				result = eHeroState.IsFighting;
			}
		}
		else if ((int)heroID < this.TempFightHeroID.Length)
		{
			if (this.TempFightHeroID[(int)heroID] == 0)
			{
				result = eHeroState.None;
			}
			else
			{
				result = eHeroState.IsFighting;
			}
		}
		return result;
	}

	// Token: 0x060004C0 RID: 1216 RVA: 0x00067E18 File Offset: 0x00066018
	public void RecvChangeLord(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b == 0)
		{
			ushort head = MP.ReadUShort(-1);
			this.RoleAttr.Head = head;
			this.m_DefendersID[0] = this.RoleAttr.Head;
			for (int i = 0; i < 4; i++)
			{
				this.m_DefendersID[i + 1] = MP.ReadUShort(-1);
			}
		}
		DataManager.msgBuffer[0] = b;
		GameManager.OnRefresh(NetworkNews.Refresh_ChangeLord, DataManager.msgBuffer);
		GUIManager.Instance.HideUILock(EUILock.ChangeLord);
	}

	// Token: 0x060004C1 RID: 1217 RVA: 0x00067EA0 File Offset: 0x000660A0
	public void SendChangeLord(ushort HeroID)
	{
		if (GUIManager.Instance.ShowUILock(EUILock.ChangeLord))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_CHANGELORD;
			messagePacket.AddSeqId();
			messagePacket.Add(HeroID);
			messagePacket.Send(false);
		}
	}

	// Token: 0x060004C2 RID: 1218 RVA: 0x00067EEC File Offset: 0x000660EC
	public void SendDefenderID()
	{
		if (GUIManager.Instance.ShowUILock(EUILock.Defender))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_SET_DEF_HERO;
			messagePacket.AddSeqId();
			for (int i = 1; i <= 4; i++)
			{
				messagePacket.Add(this.m_DefendersID[i]);
			}
			messagePacket.Send(false);
		}
	}

	// Token: 0x060004C3 RID: 1219 RVA: 0x00067F50 File Offset: 0x00066150
	public void RecvDefendersID(MessagePacket MP)
	{
		GUIManager.Instance.HideUILock(EUILock.Defender);
		this.m_DefendersID[0] = this.GetLeaderID();
		int num = 1;
		for (int i = 0; i < 4; i++)
		{
			ushort num2 = MP.ReadUShort(-1);
			if (num2 != 0 && num < this.m_DefendersID.Length)
			{
				this.m_DefendersID[num] = num2;
				num++;
			}
		}
		DataManager.missionDataManager.CheckChanged(eMissionKind.Record, 19, 0);
	}

	// Token: 0x060004C4 RID: 1220 RVA: 0x00067FC8 File Offset: 0x000661C8
	public uint GetMaxTrapValue()
	{
		RoleBuildingData buildData = GUIManager.Instance.BuildingData.GetBuildData(12, 0);
		return GUIManager.Instance.BuildingData.GetBuildLevelRequestData(12, buildData.Level).Value1;
	}

	// Token: 0x060004C5 RID: 1221 RVA: 0x00068008 File Offset: 0x00066208
	public void RecvTrapInfo(MessagePacket MP)
	{
		this.TrapTotal = 0u;
		for (int i = 0; i < 12; i++)
		{
			this.mTrapQty[i] = MP.ReadUInt(-1);
			this.TrapTotal += this.mTrapQty[i];
		}
	}

	// Token: 0x060004C6 RID: 1222 RVA: 0x00068054 File Offset: 0x00066254
	public void RecvTrapConstevent(MessagePacket MP)
	{
		this.TrapKind = MP.ReadByte(-1);
		this.TrapRank = MP.ReadByte(-1);
		this.TrapTrainingQty = MP.ReadUInt(-1);
		this.TrapBeginTime = MP.ReadLong(-1);
		this.TrapNeedTime = MP.ReadUInt(-1);
		if (this.TrapBeginTime != 0L)
		{
			DataManager.Instance.SetQueueBarData(EQueueBarIndex.Manufacturing, true, this.TrapBeginTime, this.TrapNeedTime);
			DataManager.Instance.SetRecvQueueBarData(14);
		}
	}

	// Token: 0x060004C7 RID: 1223 RVA: 0x000680D4 File Offset: 0x000662D4
	public void RecvTrapRepairInfo(MessagePacket MP)
	{
		this.TrapHospitalTotal = 0u;
		for (int i = 0; i < 12; i++)
		{
			this.mTrap_Hospital[i] = MP.ReadUInt(-1);
			this.TrapHospitalTotal += this.mTrap_Hospital[i];
		}
		this.Trap_TreatmentQuantity = 0u;
		for (int j = 0; j < 12; j++)
		{
			this.mRepairTrap[j] = MP.ReadUInt(-1);
			this.Trap_TreatmentQuantity += this.mRepairTrap[j];
		}
		long num = MP.ReadLong(-1);
		uint totalTime = MP.ReadUInt(-1);
		if (num != 0L)
		{
			DataManager.Instance.SetQueueBarData(EQueueBarIndex.TrapRepair, true, num, totalTime);
			DataManager.Instance.SetRecvQueueBarData(15);
		}
	}

	// Token: 0x060004C8 RID: 1224 RVA: 0x00068190 File Offset: 0x00066390
	public void RecvTrapConstruct(MessagePacket MP)
	{
		this.TrapKind = MP.ReadByte(-1);
		this.TrapRank = MP.ReadByte(-1);
		this.TrapQuantity = MP.ReadUInt(-1);
		for (int i = 0; i < 5; i++)
		{
			this.Resource[i].Stock = MP.ReadUInt(-1);
		}
		this.TrapBeginTime = MP.ReadLong(-1);
		this.TrapNeedTime = MP.ReadUInt(-1);
		if (this.TrapTrainingQty != this.TrapQuantity)
		{
			if (this.TrapQuantity == 0u)
			{
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4829u), this.mStringTable.GetStringByID(3870u), this.mStringTable.GetStringByID(4831u), null, 0, 0, false, false, false, false, false);
			}
			else
			{
				GUIManager.Instance.MsgStr.ClearString();
				GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)this.TrapTrainingQty), 1, false);
				GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)this.TrapQuantity), 1, false);
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3783u));
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3782u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(3784u), null, 0, 0, false, false, false, false, false);
			}
		}
		this.TrapTrainingQty = this.TrapQuantity;
		DataManager.Instance.SetQueueBarData(EQueueBarIndex.Manufacturing, true, this.TrapBeginTime, this.TrapNeedTime);
		DataManager.Instance.SetRecvQueueBarData(14);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Trap, 1, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.Door, 15, 0);
		GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
		AudioManager.Instance.PlayUISFX(UIKind.Trap);
		FBAdvanceManager.Instance.TriggerFbUniqueEvent(EFBEvent.FIRST_BUILD_TRAP);
	}

	// Token: 0x060004C9 RID: 1225 RVA: 0x0006838C File Offset: 0x0006658C
	public void RecvTrapComplete(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = MP.ReadByte(-1);
		int num = (int)(b * 4 + b2);
		this.TrapQuantity = MP.ReadUInt(-1);
		this.mTrapQty[num] += this.TrapQuantity;
		this.TrapTotal += this.TrapQuantity;
		this.TrapTrainingQty = 0u;
		DataManager.Instance.SetQueueBarData(EQueueBarIndex.Manufacturing, false, 0L, 0u);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Trap, 1, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Trap, 2, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4, 0);
		GameManager.OnRefresh(NetworkNews.Refresh_Trap, null);
		GameManager.OnRefresh(NetworkNews.Refresh_Soldier, null);
		GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_CityWall, 1, 0);
		SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort)(num + 17));
		GUIManager.Instance.MsgStr.ClearString();
		GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint)recordByKey.Name));
		GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3741u));
		GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 4, true);
		DataManager.missionDataManager.CheckChanged(eMissionKind.Army, (ushort)(17 + num), (ushort)this.TrapQuantity);
	}

	// Token: 0x060004CA RID: 1226 RVA: 0x000684E4 File Offset: 0x000666E4
	public void RecvCancelTrapConstruct(MessagePacket MP)
	{
		for (int i = 0; i < 5; i++)
		{
			this.Resource[i].Stock = MP.ReadUInt(-1);
		}
		DataManager.Instance.SetQueueBarData(EQueueBarIndex.Manufacturing, false, 0L, 0u);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Trap, 1, 0);
		this.TrapTrainingQty = 0u;
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4, 0);
		GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
		GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
	}

	// Token: 0x060004CB RID: 1227 RVA: 0x00068560 File Offset: 0x00066760
	public void RecvTrapDestroy(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = MP.ReadByte(-1);
		int num = (int)(b * 4 + b2);
		this.TrapQuantity = MP.ReadUInt(-1);
		this.mTrapQty[num] -= this.TrapQuantity;
		this.TrapTotal -= this.TrapQuantity;
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Trap, 2, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4, 0);
		GameManager.OnRefresh(NetworkNews.Refresh_Soldier, null);
		GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
		SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort)(num + 17));
		GUIManager.Instance.MsgStr.ClearString();
		GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint)recordByKey.Name));
		GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)this.TrapQuantity), 1, true);
		GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3743u));
		GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 4, true);
		GUIManager.Instance.BuildingData.UpdateBuildState(5, 255);
	}

	// Token: 0x060004CC RID: 1228 RVA: 0x00068694 File Offset: 0x00066894
	public void RecvInstantTrapConstruct(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 != 0)
		{
			if (b2 == 1)
			{
				GUIManager.Instance.AddHUDMessage("失敗", 255, true);
				GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
			}
		}
		else
		{
			GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eImmediately);
			byte b3 = MP.ReadByte(-1);
			byte b4 = MP.ReadByte(-1);
			int num = (int)(b3 * 4 + b4);
			this.TrapQuantity = MP.ReadUInt(-1);
			this.mTrapQty[num] += this.TrapQuantity;
			this.TrapTotal += this.TrapQuantity;
			for (int i = 0; i < 5; i++)
			{
				this.Resource[i].Stock = MP.ReadUInt(-1);
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Trap, 2, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_CityWall, 1, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4, 0);
			GameManager.OnRefresh(NetworkNews.Refresh_Trap, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Soldier, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
			SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort)(num + 17));
			GUIManager.Instance.MsgStr.ClearString();
			GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint)recordByKey.Name));
			GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3741u));
			GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 4, true);
			DataManager.missionDataManager.CheckChanged(eMissionKind.Army, (ushort)(17 + num), (ushort)this.TrapQuantity);
		}
	}

	// Token: 0x060004CD RID: 1229 RVA: 0x00068860 File Offset: 0x00066A60
	public void SendFinishTrapConstrct()
	{
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_FINISHTRAPCONSTRCT;
		messagePacket.AddSeqId();
		messagePacket.Send(false);
		GUIManager.Instance.ShowUILock(EUILock.SoldierTrain);
	}

	// Token: 0x060004CE RID: 1230 RVA: 0x000688A0 File Offset: 0x00066AA0
	public void RecvFinishTrapConstrct(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 != 0)
		{
			if (b2 == 1)
			{
				GUIManager.Instance.AddHUDMessage("失敗", 255, true);
				GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
			}
		}
		else
		{
			GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eImmediately);
			byte b3 = MP.ReadByte(-1);
			byte b4 = MP.ReadByte(-1);
			int num = (int)(b3 * 4 + b4);
			this.TrapQuantity = MP.ReadUInt(-1);
			this.mTrapQty[num] += this.TrapQuantity;
			this.TrapTotal += this.TrapQuantity;
			DataManager.Instance.SetQueueBarData(EQueueBarIndex.Manufacturing, false, 0L, 0u);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Trap, 2, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_CityWall, 1, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4, 0);
			GameManager.OnRefresh(NetworkNews.Refresh_Trap, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Soldier, null);
			GUIManager.Instance.HideUILock(EUILock.SoldierTrain);
			SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort)(num + 17));
			GUIManager.Instance.MsgStr.ClearString();
			GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint)recordByKey.Name));
			GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3741u));
			GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 4, true);
			DataManager.missionDataManager.CheckChanged(eMissionKind.Army, (ushort)(17 + num), (ushort)this.TrapQuantity);
		}
	}

	// Token: 0x060004CF RID: 1231 RVA: 0x00068A44 File Offset: 0x00066C44
	public void RecvRePairTrap(MessagePacket MP)
	{
		for (int i = 0; i < 5; i++)
		{
			this.Resource[i].Stock = MP.ReadUInt(-1);
		}
		this.Trap_TreatmentQty = 0u;
		for (int j = 0; j < 12; j++)
		{
			this.mRepairTrap[j] = MP.ReadUInt(-1);
			this.Trap_TreatmentQty += this.mRepairTrap[j];
		}
		long startTime = MP.ReadLong(-1);
		uint totalTime = MP.ReadUInt(-1);
		if (this.Trap_TreatmentQuantity != this.Trap_TreatmentQty)
		{
			if (this.Trap_TreatmentQty == 0u)
			{
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4829u), this.mStringTable.GetStringByID(3870u), this.mStringTable.GetStringByID(4831u), null, 0, 0, false, false, false, false, false);
			}
			else
			{
				GUIManager.Instance.MsgStr.ClearString();
				GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)this.Trap_TreatmentQuantity), 1, false);
				GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)this.Trap_TreatmentQty), 1, false);
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(1043u));
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4030u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4031u), null, 0, 0, false, false, false, false, false);
			}
		}
		this.Trap_TreatmentQuantity = this.Trap_TreatmentQty;
		DataManager.Instance.SetQueueBarData(EQueueBarIndex.TrapRepair, true, startTime, totalTime);
		DataManager.Instance.SetRecvQueueBarData(15);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 2, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4, 0);
		GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
		GUIManager.Instance.HideUILock(EUILock.Hospital);
	}

	// Token: 0x060004D0 RID: 1232 RVA: 0x00068C20 File Offset: 0x00066E20
	public void RecvRepairTrapComplete(MessagePacket MP)
	{
		this.TrapTotal = 0u;
		this.TrapHospitalTotal = 0u;
		for (int i = 0; i < 12; i++)
		{
			this.mTrapQty[i] = MP.ReadUInt(-1);
			this.TrapTotal += this.mTrapQty[i];
			this.mTrap_Hospital[i] -= this.mRepairTrap[i];
			this.TrapHospitalTotal += this.mTrap_Hospital[i];
		}
		DataManager.Instance.SetQueueBarData(EQueueBarIndex.TrapRepair, false, 0L, 0u);
		GameManager.OnRefresh(NetworkNews.Refresh_Trap, null);
		GameManager.OnRefresh(NetworkNews.Refresh_Soldier, null);
		GameManager.OnRefresh(NetworkNews.Refresh_Hospital, null);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 1, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_CityWall, 1, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 3, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4, 0);
		GUIManager.Instance.MsgStr.ClearString();
		GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)this.Trap_TreatmentQuantity), 1, false);
		GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(1044u));
		GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 5, true);
	}

	// Token: 0x060004D1 RID: 1233 RVA: 0x00068D64 File Offset: 0x00066F64
	public void RecvCancelRepairTrap(MessagePacket MP)
	{
		this.Trap_TreatmentQuantity = 0u;
		for (int i = 0; i < 5; i++)
		{
			this.Resource[i].Stock = MP.ReadUInt(-1);
		}
		DataManager.Instance.SetQueueBarData(EQueueBarIndex.TrapRepair, false, 0L, 0u);
		GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 3, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4, 0);
		GUIManager.Instance.HideUILock(EUILock.Hospital);
	}

	// Token: 0x060004D2 RID: 1234 RVA: 0x00068DE0 File Offset: 0x00066FE0
	public void RecvInstantRepairTrap(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 == 0)
		{
			GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eImmediately);
			uint trapTotal = this.TrapTotal;
			this.TrapTotal = 0u;
			this.TrapHospitalTotal = 0u;
			for (int i = 0; i < 12; i++)
			{
				uint num = MP.ReadUInt(-1);
				this.mTrap_Hospital[i] = this.mTrap_Hospital[i] - (num - this.mTrapQty[i]);
				this.mTrapQty[i] = num;
				this.TrapTotal += num;
				this.TrapHospitalTotal += this.mTrap_Hospital[i];
			}
			for (int j = 0; j < 5; j++)
			{
				this.Resource[j].Stock = MP.ReadUInt(-1);
			}
			GameManager.OnRefresh(NetworkNews.Refresh_Trap, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Soldier, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Hospital, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 1, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_CityWall, 1, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4, 0);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			GUIManager.Instance.HideUILock(EUILock.Hospital);
			GUIManager.Instance.MsgStr.ClearString();
			GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)(this.TrapTotal - trapTotal)), 1, false);
			GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(1044u));
			GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 5, true);
		}
	}

	// Token: 0x060004D3 RID: 1235 RVA: 0x00068F84 File Offset: 0x00067184
	public void SendFinishPairTrap()
	{
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_FINISHREPAIRTRAP;
		messagePacket.AddSeqId();
		messagePacket.Send(false);
		GUIManager.Instance.ShowUILock(EUILock.SoldierTrain);
	}

	// Token: 0x060004D4 RID: 1236 RVA: 0x00068FC4 File Offset: 0x000671C4
	public void RecvFinishRepairTrap(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = b;
		if (b2 == 0)
		{
			GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eImmediately);
			uint trapTotal = this.TrapTotal;
			this.TrapTotal = 0u;
			this.TrapHospitalTotal = 0u;
			for (int i = 0; i < 12; i++)
			{
				uint num = MP.ReadUInt(-1);
				this.mTrap_Hospital[i] = this.mTrap_Hospital[i] - (num - this.mTrapQty[i]);
				this.mTrapQty[i] = num;
				this.TrapTotal += num;
				this.TrapHospitalTotal += this.mTrap_Hospital[i];
			}
			DataManager.Instance.SetQueueBarData(EQueueBarIndex.TrapRepair, false, 0L, 0u);
			GameManager.OnRefresh(NetworkNews.Refresh_Trap, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Soldier, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Hospital, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 1, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_CityWall, 1, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4, 0);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			GUIManager.Instance.HideUILock(EUILock.Hospital);
			GUIManager.Instance.MsgStr.ClearString();
			GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)(this.TrapTotal - trapTotal)), 1, false);
			GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(1044u));
			GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 5, true);
		}
	}

	// Token: 0x060004D5 RID: 1237 RVA: 0x0006914C File Offset: 0x0006734C
	public void RecvWallBeingAttack(MessagePacket MP)
	{
		this.m_WallRepairNowValue = MP.ReadUInt(-1);
		this.m_WallRepairBeginValue = this.m_WallRepairNowValue;
		this.m_WallBeginTime = 0L;
		this.TrapTotal = 0u;
		for (int i = 0; i < 12; i++)
		{
			this.mTrapQty[i] = MP.ReadUInt(-1);
			this.TrapTotal += this.mTrapQty[i];
		}
		this.TrapHospitalTotal = 0u;
		for (int j = 0; j < 12; j++)
		{
			this.mTrap_Hospital[j] = MP.ReadUInt(-1);
			this.TrapHospitalTotal += this.mTrap_Hospital[j];
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 1, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Trap, 2, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_CityWall, 1, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_WallRepair, 1, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 4, 0);
		GameManager.OnRefresh(NetworkNews.Refresh_Trap, null);
		GameManager.OnRefresh(NetworkNews.Refresh_Soldier, null);
		GameManager.OnRefresh(NetworkNews.Refresh_Hospital, null);
		GUIManager.Instance.BuildingData.UpdateBuildState(5, 255);
		this.bNeedShowWallQueueBar = true;
	}

	// Token: 0x060004D6 RID: 1238 RVA: 0x00069270 File Offset: 0x00067470
	public void RecvGiveUpTrap(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = MP.ReadByte(-1);
		int num = (int)(b * 4 + b2);
		uint num2 = MP.ReadUInt(-1);
		this.mTrap_Hospital[num] -= num2;
		this.TrapHospitalTotal -= num2;
		GameManager.OnRefresh(NetworkNews.Refresh_Hospital, null);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Hospital, 1, 0);
		GUIManager.Instance.HideUILock(EUILock.Hospital);
		SoldierData recordByKey = this.SoldierDataTable.GetRecordByKey((ushort)(num + 17));
		GUIManager.Instance.MsgStr.ClearString();
		GUIManager.Instance.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint)recordByKey.Name));
		GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)num2), 1, true);
		GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3743u));
		GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 255, true);
	}

	// Token: 0x060004D7 RID: 1239 RVA: 0x00069374 File Offset: 0x00067574
	public void CheckTroolCount()
	{
		int num = 0;
		for (int i = 0; i < 8; i++)
		{
			if (this.MarchEventData[i].Type != EMarchEventType.EMET_Standby)
			{
				num++;
			}
		}
		if (this.beCaptured.nowCaptureStat == LoadCaptureState.Returning)
		{
			num++;
		}
		GUIManager.Instance.SetTroopsCount(num);
	}

	// Token: 0x060004D8 RID: 1240 RVA: 0x000693D0 File Offset: 0x000675D0
	public void SetSortNonFightHeroID()
	{
		Array.Sort<uint>(this.SortNonFightHeroID, 0, (int)this.NonFightHeroCount, this.sortNonFightHeroIDComparer);
	}

	// Token: 0x060004D9 RID: 1241 RVA: 0x000693EC File Offset: 0x000675EC
	public void SetSortFightHeroID()
	{
		Array.Sort<uint>(this.SortFightHeroID, 0, (int)this.FightHeroCount, this.sortNonFightHeroIDComparer);
	}

	// Token: 0x060004DA RID: 1242 RVA: 0x00069408 File Offset: 0x00067608
	public void SetHeroBattleDataSave()
	{
		PlayerPrefs.SetString("Battle_UserID", NetworkManager.UserID.ToString());
		PlayerPrefs.SetString("Battle_HeroID[0]", this.heroBattleData[0].HeroID.ToString());
		PlayerPrefs.SetString("Battle_HeroID[1]", this.heroBattleData[1].HeroID.ToString());
		PlayerPrefs.SetString("Battle_HeroID[2]", this.heroBattleData[2].HeroID.ToString());
		PlayerPrefs.SetString("Battle_HeroID[3]", this.heroBattleData[3].HeroID.ToString());
		PlayerPrefs.SetString("Battle_HeroID[4]", this.heroBattleData[4].HeroID.ToString());
	}

	// Token: 0x060004DB RID: 1243 RVA: 0x000694CC File Offset: 0x000676CC
	public void GetHeroBattleDataSave()
	{
		long.TryParse(PlayerPrefs.GetString("Battle_UserID"), out this.Battle_UserID);
		ushort.TryParse(PlayerPrefs.GetString("Battle_HeroID[0]"), out this.heroBattleData[0].HeroID);
		ushort.TryParse(PlayerPrefs.GetString("Battle_HeroID[1]"), out this.heroBattleData[1].HeroID);
		ushort.TryParse(PlayerPrefs.GetString("Battle_HeroID[2]"), out this.heroBattleData[2].HeroID);
		ushort.TryParse(PlayerPrefs.GetString("Battle_HeroID[3]"), out this.heroBattleData[3].HeroID);
		ushort.TryParse(PlayerPrefs.GetString("Battle_HeroID[4]"), out this.heroBattleData[4].HeroID);
	}

	// Token: 0x060004DC RID: 1244 RVA: 0x00069594 File Offset: 0x00067794
	public void SetHero_Condition_BattleDataSave()
	{
		PlayerPrefs.SetString("Battle_Condition_UserID", NetworkManager.UserID.ToString());
		PlayerPrefs.SetString("Battle_Condition_HeroID[0]", this.heroBattleData[0].HeroID.ToString());
		PlayerPrefs.SetString("Battle_Condition_HeroID[1]", this.heroBattleData[1].HeroID.ToString());
		PlayerPrefs.SetString("Battle_Condition_HeroID[2]", this.heroBattleData[2].HeroID.ToString());
		PlayerPrefs.SetString("Battle_Condition_HeroID[3]", this.heroBattleData[3].HeroID.ToString());
		PlayerPrefs.SetString("Battle_Condition_HeroID[4]", this.heroBattleData[4].HeroID.ToString());
	}

	// Token: 0x060004DD RID: 1245 RVA: 0x00069658 File Offset: 0x00067858
	public void GetHero_Condition_BattleDataSave()
	{
		long.TryParse(PlayerPrefs.GetString("Battle_Condition_UserID"), out this.BattleCondition_UserID);
		ushort.TryParse(PlayerPrefs.GetString("Battle_Condition_HeroID[0]"), out this.heroBattleConditionData[0].HeroID);
		ushort.TryParse(PlayerPrefs.GetString("Battle_Condition_HeroID[1]"), out this.heroBattleConditionData[1].HeroID);
		ushort.TryParse(PlayerPrefs.GetString("Battle_Condition_HeroID[2]"), out this.heroBattleConditionData[2].HeroID);
		ushort.TryParse(PlayerPrefs.GetString("Battle_Condition_HeroID[3]"), out this.heroBattleConditionData[3].HeroID);
		ushort.TryParse(PlayerPrefs.GetString("Battle_Condition_HeroID[4]"), out this.heroBattleConditionData[4].HeroID);
	}

	// Token: 0x060004DE RID: 1246 RVA: 0x00069720 File Offset: 0x00067920
	public void SetArenaHeroBattleDataSave()
	{
		PlayerPrefs.SetString("ArenaBattle_UserID", NetworkManager.UserID.ToString());
		PlayerPrefs.SetString("ArenaBattle_HeroID[0]", ArenaManager.Instance.m_ArenaTargetHero[0].ToString());
		PlayerPrefs.SetString("ArenaBattle_HeroID[1]", ArenaManager.Instance.m_ArenaTargetHero[1].ToString());
		PlayerPrefs.SetString("ArenaBattle_HeroID[2]", ArenaManager.Instance.m_ArenaTargetHero[2].ToString());
		PlayerPrefs.SetString("ArenaBattle_HeroID[3]", ArenaManager.Instance.m_ArenaTargetHero[3].ToString());
		PlayerPrefs.SetString("ArenaBattle_HeroID[4]", ArenaManager.Instance.m_ArenaTargetHero[4].ToString());
	}

	// Token: 0x060004DF RID: 1247 RVA: 0x000697DC File Offset: 0x000679DC
	public void GetArenaHeroBattleDataSave()
	{
		long.TryParse(PlayerPrefs.GetString("ArenaBattle_UserID"), out this.ArenaBattle_UserID);
		ushort.TryParse(PlayerPrefs.GetString("ArenaBattle_HeroID[0]"), out ArenaManager.Instance.m_ArenaTargetHero[0]);
		ushort.TryParse(PlayerPrefs.GetString("ArenaBattle_HeroID[1]"), out ArenaManager.Instance.m_ArenaTargetHero[1]);
		ushort.TryParse(PlayerPrefs.GetString("ArenaBattle_HeroID[2]"), out ArenaManager.Instance.m_ArenaTargetHero[2]);
		ushort.TryParse(PlayerPrefs.GetString("ArenaBattle_HeroID[3]"), out ArenaManager.Instance.m_ArenaTargetHero[3]);
		ushort.TryParse(PlayerPrefs.GetString("ArenaBattle_HeroID[4]"), out ArenaManager.Instance.m_ArenaTargetHero[4]);
	}

	// Token: 0x060004E0 RID: 1248 RVA: 0x000698A0 File Offset: 0x00067AA0
	public void SaveNpcBattleHeroID(ushort NpcID, ushort[] heroid)
	{
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.AppendFormat("{0}/Data/{1}", AssetManager.persistentDataPath, this.BattleHeroIDList);
		string path = stringBuilder.ToString();
		this.m_FightNpcDataUserID = NetworkManager.UserID;
		if (!this.m_FightNpcData.ContainsKey(NpcID))
		{
			FightNpcData val = default(FightNpcData);
			val.HeroID = new ushort[5];
			val.NpcID = NpcID;
			int num = 0;
			while (num < heroid.Length && num < 5)
			{
				val.HeroID[num] = heroid[num];
				num++;
			}
			this.m_FightNpcData.Add(NpcID, val);
		}
		else
		{
			FightNpcData val = this.m_FightNpcData[NpcID];
			FightNpcData value = default(FightNpcData);
			value.HeroID = new ushort[5];
			value.NpcID = NpcID;
			int num2 = 0;
			while (num2 < heroid.Length && num2 < 5)
			{
				value.HeroID[num2] = heroid[num2];
				num2++;
			}
			this.m_FightNpcData[NpcID] = value;
		}
		using (FileStream fileStream = new FileStream(path, FileMode.OpenOrCreate))
		{
			if (fileStream != null)
			{
				using (BinaryWriter binaryWriter = new BinaryWriter(fileStream))
				{
					if (binaryWriter != null)
					{
						binaryWriter.Write(this.m_FightNpcDataUserID);
						binaryWriter.Write(this.m_FightNpcData.Count);
						for (int i = 0; i < this.m_FightNpcData.Length; i++)
						{
							if (this.m_FightNpcData.Values[i].NpcID != 0)
							{
								binaryWriter.Write(this.m_FightNpcData.Values[i].NpcID);
								for (int j = 0; j < 5; j++)
								{
									binaryWriter.Write(this.m_FightNpcData.Values[i].HeroID[j]);
								}
							}
						}
					}
				}
			}
		}
	}

	// Token: 0x060004E1 RID: 1249 RVA: 0x00069AD8 File Offset: 0x00067CD8
	public void LoadNpcBattleHeroID()
	{
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.AppendFormat("{0}/Data/{1}", AssetManager.persistentDataPath, this.BattleHeroIDList);
		string path = stringBuilder.ToString();
		this.m_FightNpcData.Clear();
		using (FileStream fileStream = new FileStream(path, FileMode.OpenOrCreate, FileAccess.Read))
		{
			if (fileStream.Length > 0L)
			{
				using (BinaryReader binaryReader = new BinaryReader(fileStream))
				{
					this.m_FightNpcDataUserID = binaryReader.ReadInt64();
					if (this.m_FightNpcDataUserID == NetworkManager.UserID)
					{
						int num = binaryReader.ReadInt32();
						int num2 = 0;
						while (num2 < num && num2 < 200)
						{
							try
							{
								FightNpcData val = default(FightNpcData);
								val.HeroID = new ushort[5];
								val.NpcID = binaryReader.ReadUInt16();
								for (int i = 0; i < 5; i++)
								{
									val.HeroID[i] = binaryReader.ReadUInt16();
								}
								if (!this.m_FightNpcData.ContainsKey(val.NpcID))
								{
									this.m_FightNpcData.Add(val.NpcID, val);
								}
							}
							catch
							{
							}
							num2++;
						}
					}
				}
			}
		}
	}

	// Token: 0x060004E2 RID: 1250 RVA: 0x00069C78 File Offset: 0x00067E78
	public void SaveBindMail(string mail)
	{
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.AppendFormat("{0}/Data/{1}", AssetManager.persistentDataPath, this.BindMail);
		string path = stringBuilder.ToString();
		using (FileStream fileStream = new FileStream(path, FileMode.OpenOrCreate))
		{
			if (fileStream != null)
			{
				using (BinaryWriter binaryWriter = new BinaryWriter(fileStream))
				{
					if (binaryWriter != null)
					{
						binaryWriter.Write(IGGGameSDK.Instance.m_IGGID);
						binaryWriter.Write(mail);
					}
				}
			}
		}
	}

	// Token: 0x060004E3 RID: 1251 RVA: 0x00069D34 File Offset: 0x00067F34
	public string LoadBindMail()
	{
		string result = string.Empty;
		string a = string.Empty;
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.AppendFormat("{0}/Data/{1}", AssetManager.persistentDataPath, this.BindMail);
		string path = stringBuilder.ToString();
		using (FileStream fileStream = new FileStream(path, FileMode.OpenOrCreate, FileAccess.Read))
		{
			if (fileStream.Length > 0L)
			{
				using (BinaryReader binaryReader = new BinaryReader(fileStream))
				{
					a = binaryReader.ReadString();
					if (a == IGGGameSDK.Instance.m_IGGID)
					{
						result = binaryReader.ReadString();
					}
				}
			}
		}
		return result;
	}

	// Token: 0x060004E4 RID: 1252 RVA: 0x00069E14 File Offset: 0x00068014
	public void SetSysSettingSave()
	{
		PlayerPrefs.SetString("Other_bMusic", this.MySysSetting.bMusic.ToString());
		PlayerPrefs.SetString("Other_bSound", this.MySysSetting.bSound.ToString());
		PlayerPrefs.SetString("Other_mUpDateRate", this.MySysSetting.mUpDateRate.ToString());
		PlayerPrefs.SetString("Other_bShowMission", this.MySysSetting.bShowMission.ToString());
		PlayerPrefs.SetString("Other_bShowTrainingIdle", this.MySysSetting.bShowTrainingIdle.ToString());
		PlayerPrefs.SetString("Other_bShowBuildingIdle", this.MySysSetting.bShowBuildingIdle.ToString());
		PlayerPrefs.SetString("Other_bShowResearchingIdle", this.MySysSetting.bShowResearchingIdle.ToString());
		PlayerPrefs.SetString("Other_bShowBuildUp", this.MySysSetting.bShowBuildUp.ToString());
		PlayerPrefs.SetString("Other_bShowEquipUp", this.MySysSetting.bShowEquipUp.ToString());
		PlayerPrefs.SetString("Other_bShowArena", this.MySysSetting.bShowArena.ToString());
		PlayerPrefs.SetString("Other_bShowChatFight", this.MySysSetting.bShowChatFight.ToString());
		PlayerPrefs.SetString("Other_mLanguageTranslation", this.MySysSetting.mLanguageTranslation.ToString());
		PlayerPrefs.SetString("Other_bLanguageOther", this.MySysSetting.bLanguageOther.ToString());
		PlayerPrefs.SetString("Other_bAutoTranslate", this.MySysSetting.bAutoTranslate.ToString());
		PlayerPrefs.SetString("Other_bShowTimeBar", this.MySysSetting.bShowTimeBar.ToString());
		PlayerPrefs.SetString("Other_bShowPrison", this.MySysSetting.bShowPrison.ToString());
		PlayerPrefs.SetString("Other_bShowMainMenu", this.MySysSetting.bShowMainMenu.ToString());
		PlayerPrefs.SetString("Other_bShowMonsterPointMax", this.MySysSetting.bShowMonsterPointMax.ToString());
		PlayerPrefs.SetString("Other_mMusicSelect", this.MySysSetting.mMusicSelect.ToString());
		switch (this.MySysSetting.mUpDateRate)
		{
		case 0:
			Application.targetFrameRate = 15;
			break;
		case 1:
			Application.targetFrameRate = 30;
			break;
		case 2:
			Application.targetFrameRate = -1;
			break;
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.Door, 14, 0);
	}

	// Token: 0x060004E5 RID: 1253 RVA: 0x0006A064 File Offset: 0x00068264
	public void ReSetSysSettingSave()
	{
		this.MySysSetting.bMusic = true;
		this.MySysSetting.bSound = true;
		this.MySysSetting.mUpDateRate = 2;
		this.MySysSetting.bShowMission = true;
		this.MySysSetting.bShowTrainingIdle = true;
		this.MySysSetting.bShowBuildingIdle = true;
		this.MySysSetting.bShowResearchingIdle = true;
		this.MySysSetting.bShowBuildUp = true;
		this.MySysSetting.bShowEquipUp = true;
		this.MySysSetting.bShowArena = true;
		this.MySysSetting.bShowChatFight = true;
		this.MySysSetting.mLanguageTranslation = ulong.MaxValue;
		this.MySysSetting.bLanguageOther = true;
		this.MySysSetting.bAutoTranslate = true;
		this.MySysSetting.bShowTimeBar = true;
		this.mFirstSetSys = 1;
		this.MySysSetting.mPaySetting = 0;
		this.MySysSetting.bMerchantman = false;
		this.MySysSetting.bShowPrison = true;
		this.MySysSetting.bShowMainMenu = true;
		this.MySysSetting.bShowMonsterPointMax = true;
		this.MySysSetting.mMusicSelect = 0;
		switch (this.MySysSetting.mUpDateRate)
		{
		case 0:
			Application.targetFrameRate = 15;
			break;
		case 1:
			Application.targetFrameRate = 30;
			break;
		case 2:
			Application.targetFrameRate = -1;
			break;
		}
		PlayerPrefs.SetString("Other_bMusic", this.MySysSetting.bMusic.ToString());
		PlayerPrefs.SetString("Other_bSound", this.MySysSetting.bSound.ToString());
		PlayerPrefs.SetString("Other_mUpDateRate", this.MySysSetting.mUpDateRate.ToString());
		PlayerPrefs.SetString("Other_bShowMission", this.MySysSetting.bShowMission.ToString());
		PlayerPrefs.SetString("Other_bShowTrainingIdle", this.MySysSetting.bShowTrainingIdle.ToString());
		PlayerPrefs.SetString("Other_bShowBuildingIdle", this.MySysSetting.bShowBuildingIdle.ToString());
		PlayerPrefs.SetString("Other_bShowResearchingIdle", this.MySysSetting.bShowResearchingIdle.ToString());
		PlayerPrefs.SetString("Other_bShowBuildUp", this.MySysSetting.bShowBuildUp.ToString());
		PlayerPrefs.SetString("SysSetting_First", this.mFirstSetSys.ToString());
		PlayerPrefs.SetString("Other_bShowEquipUp", this.MySysSetting.bShowEquipUp.ToString());
		PlayerPrefs.SetString("Other_bShowArena", this.MySysSetting.bShowArena.ToString());
		PlayerPrefs.SetString("Other_bShowChatFight", this.MySysSetting.bShowChatFight.ToString());
		PlayerPrefs.SetString("Other_mLanguageTranslation", this.MySysSetting.mLanguageTranslation.ToString());
		PlayerPrefs.SetString("Other_bLanguageOther", this.MySysSetting.bLanguageOther.ToString());
		PlayerPrefs.SetString("Other_bAutoTranslate", this.MySysSetting.bAutoTranslate.ToString());
		PlayerPrefs.SetString("Other_bShowTimeBar", this.MySysSetting.bShowTimeBar.ToString());
		PlayerPrefs.SetString("Other_mPaySetting", this.MySysSetting.mPaySetting.ToString());
		PlayerPrefs.SetString("Other_bMerchantman", this.MySysSetting.bMerchantman.ToString());
		PlayerPrefs.SetString("Other_bShowPrison", this.MySysSetting.bShowPrison.ToString());
		PlayerPrefs.SetString("Other_bShowMainMenu", this.MySysSetting.bShowMainMenu.ToString());
		PlayerPrefs.SetString("Other_bShowMonsterPointMax", this.MySysSetting.bShowMonsterPointMax.ToString());
		PlayerPrefs.SetString("Other_mMusicSelect", this.MySysSetting.mMusicSelect.ToString());
		GUIManager.Instance.UpdateUI(EGUIWindow.Door, 14, 0);
	}

	// Token: 0x060004E6 RID: 1254 RVA: 0x0006A400 File Offset: 0x00068600
	public void GetSysSettingSave()
	{
		bool.TryParse(PlayerPrefs.GetString("Other_bMusic"), out this.MySysSetting.bMusic);
		bool.TryParse(PlayerPrefs.GetString("Other_bSound"), out this.MySysSetting.bSound);
		byte.TryParse(PlayerPrefs.GetString("Other_mUpDateRate"), out this.MySysSetting.mUpDateRate);
		bool.TryParse(PlayerPrefs.GetString("Other_bShowMission"), out this.MySysSetting.bShowMission);
		bool.TryParse(PlayerPrefs.GetString("Other_bShowTrainingIdle"), out this.MySysSetting.bShowTrainingIdle);
		bool.TryParse(PlayerPrefs.GetString("Other_bShowBuildingIdle"), out this.MySysSetting.bShowBuildingIdle);
		bool.TryParse(PlayerPrefs.GetString("Other_bShowResearchingIdle"), out this.MySysSetting.bShowResearchingIdle);
		if (!bool.TryParse(PlayerPrefs.GetString("Other_bShowBuildUp"), out this.MySysSetting.bShowBuildUp))
		{
			this.MySysSetting.bShowBuildUp = true;
			PlayerPrefs.SetString("Other_bShowBuildUp", this.MySysSetting.bShowBuildUp.ToString());
		}
		else
		{
			bool.TryParse(PlayerPrefs.GetString("Other_bShowBuildUp"), out this.MySysSetting.bShowBuildUp);
		}
		if (!bool.TryParse(PlayerPrefs.GetString("Other_bShowEquipUp"), out this.MySysSetting.bShowEquipUp))
		{
			this.MySysSetting.bShowEquipUp = true;
			PlayerPrefs.SetString("Other_bShowEquipUp", this.MySysSetting.bShowEquipUp.ToString());
		}
		else
		{
			bool.TryParse(PlayerPrefs.GetString("Other_bShowEquipUp"), out this.MySysSetting.bShowEquipUp);
		}
		if (!bool.TryParse(PlayerPrefs.GetString("Other_bShowArena"), out this.MySysSetting.bShowArena))
		{
			this.MySysSetting.bShowArena = true;
			PlayerPrefs.SetString("Other_bShowArena", this.MySysSetting.bShowArena.ToString());
		}
		else
		{
			bool.TryParse(PlayerPrefs.GetString("Other_bShowArena"), out this.MySysSetting.bShowArena);
		}
		if (!bool.TryParse(PlayerPrefs.GetString("Other_bShowChatFight"), out this.MySysSetting.bShowChatFight))
		{
			this.MySysSetting.bShowChatFight = true;
			PlayerPrefs.SetString("Other_bShowChatFight", this.MySysSetting.bShowChatFight.ToString());
		}
		else
		{
			bool.TryParse(PlayerPrefs.GetString("Other_bShowChatFight"), out this.MySysSetting.bShowChatFight);
		}
		if (!ulong.TryParse(PlayerPrefs.GetString("Other_mLanguageTranslation"), out this.MySysSetting.mLanguageTranslation))
		{
			this.MySysSetting.mLanguageTranslation = ulong.MaxValue;
			PlayerPrefs.SetString("Other_mLanguageTranslation", this.MySysSetting.mLanguageTranslation.ToString());
		}
		else
		{
			ulong.TryParse(PlayerPrefs.GetString("Other_mLanguageTranslation"), out this.MySysSetting.mLanguageTranslation);
		}
		if (!bool.TryParse(PlayerPrefs.GetString("Other_bLanguageOther"), out this.MySysSetting.bLanguageOther))
		{
			this.MySysSetting.bLanguageOther = true;
			PlayerPrefs.SetString("Other_bLanguageOther", this.MySysSetting.bLanguageOther.ToString());
		}
		else
		{
			bool.TryParse(PlayerPrefs.GetString("Other_bLanguageOther"), out this.MySysSetting.bLanguageOther);
		}
		if (!bool.TryParse(PlayerPrefs.GetString("Other_bAutoTranslate"), out this.MySysSetting.bAutoTranslate))
		{
			this.MySysSetting.bAutoTranslate = true;
			PlayerPrefs.SetString("Other_bAutoTranslate", this.MySysSetting.bAutoTranslate.ToString());
		}
		else
		{
			bool.TryParse(PlayerPrefs.GetString("Other_bAutoTranslate"), out this.MySysSetting.bAutoTranslate);
		}
		if (!bool.TryParse(PlayerPrefs.GetString("Other_bShowTimeBar"), out this.MySysSetting.bShowTimeBar))
		{
			this.MySysSetting.bShowTimeBar = true;
			PlayerPrefs.SetString("Other_bShowTimeBar", this.MySysSetting.bShowTimeBar.ToString());
		}
		else
		{
			bool.TryParse(PlayerPrefs.GetString("Other_bShowTimeBar"), out this.MySysSetting.bShowTimeBar);
		}
		if (!byte.TryParse(PlayerPrefs.GetString("Other_mPaySetting"), out this.MySysSetting.mPaySetting))
		{
			this.MySysSetting.mPaySetting = 0;
			PlayerPrefs.SetString("Other_mPaySetting", this.MySysSetting.mPaySetting.ToString());
		}
		else
		{
			byte.TryParse(PlayerPrefs.GetString("Other_mPaySetting"), out this.MySysSetting.mPaySetting);
		}
		if (!bool.TryParse(PlayerPrefs.GetString("Other_bMerchantman"), out this.MySysSetting.bMerchantman))
		{
			this.MySysSetting.bMerchantman = false;
			PlayerPrefs.SetString("Other_bMerchantman", this.MySysSetting.bMerchantman.ToString());
		}
		else
		{
			bool.TryParse(PlayerPrefs.GetString("Other_bMerchantman"), out this.MySysSetting.bMerchantman);
		}
		if (!bool.TryParse(PlayerPrefs.GetString("Other_bShowPrison"), out this.MySysSetting.bShowPrison))
		{
			this.MySysSetting.bShowPrison = true;
			PlayerPrefs.SetString("Other_bShowPrison", this.MySysSetting.bShowPrison.ToString());
		}
		else
		{
			bool.TryParse(PlayerPrefs.GetString("Other_bShowPrison"), out this.MySysSetting.bShowPrison);
		}
		if (!bool.TryParse(PlayerPrefs.GetString("Other_bShowMainMenu"), out this.MySysSetting.bShowMainMenu))
		{
			this.MySysSetting.bShowMainMenu = true;
			PlayerPrefs.SetString("Other_bShowMainMenu", this.MySysSetting.bShowMainMenu.ToString());
		}
		else
		{
			bool.TryParse(PlayerPrefs.GetString("Other_bShowMainMenu"), out this.MySysSetting.bShowMainMenu);
		}
		if (!bool.TryParse(PlayerPrefs.GetString("Other_bShowMonsterPointMax"), out this.MySysSetting.bShowMonsterPointMax))
		{
			this.MySysSetting.bShowMonsterPointMax = true;
			PlayerPrefs.SetString("Other_bShowMonsterPointMax", this.MySysSetting.bShowMonsterPointMax.ToString());
		}
		else
		{
			bool.TryParse(PlayerPrefs.GetString("Other_bShowMonsterPointMax"), out this.MySysSetting.bShowMonsterPointMax);
		}
		if (!byte.TryParse(PlayerPrefs.GetString("Other_mMusicSelect"), out this.MySysSetting.mMusicSelect))
		{
			this.MySysSetting.mMusicSelect = 0;
			PlayerPrefs.SetString("Other_mMusicSelect", this.MySysSetting.mMusicSelect.ToString());
		}
		else
		{
			byte.TryParse(PlayerPrefs.GetString("Other_mMusicSelect"), out this.MySysSetting.mMusicSelect);
		}
		switch (this.MySysSetting.mUpDateRate)
		{
		case 0:
			Application.targetFrameRate = 15;
			break;
		case 1:
			Application.targetFrameRate = 30;
			break;
		case 2:
			Application.targetFrameRate = -1;
			break;
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.Door, 14, 0);
	}

	// Token: 0x060004E7 RID: 1255 RVA: 0x0006AAA8 File Offset: 0x00068CA8
	public void RecvInstantWallRepair(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b <= 1)
		{
			this.m_WallRepairNowValue = this.m_WallRepairMaxValue;
			AssetManager.SetCastleLevel(GUIManager.Instance.BuildingData.GetBuildData(12, 0).Level, 0);
			this.SetQueueBarData(EQueueBarIndex.WallRepair, false, 0L, 0u);
			GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eFixWallImmediate);
			GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(3787u), 8, true);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			GUIManager.Instance.BuildingData.UpdateBuildState(5, 255);
		}
	}

	// Token: 0x060004E8 RID: 1256 RVA: 0x0006AB4C File Offset: 0x00068D4C
	public void InitBuffData()
	{
		this.MaxBuffTableCount = this.ItemBuffTable.TableCount;
		this.m_BuffScrollIndex = 0;
		this.m_BuffScrollPos = 0f;
		this.m_BuffListOpenIcon = 0;
		this.m_BuffListUseCount = 0;
		this.m_RecvWarBuffIdx = 0;
		this.m_RecvWorldBattleIdx = 0;
		this.m_KingdomBattleIdx = 0;
		this.m_NobilityBattleIdx = 0;
		this.m_ShieldIdx = 0;
		this.itemBuffComparer = new ItemBuffComparer();
		this.m_SortBuffData = new byte[this.MaxBuffTableCount];
		this.m_RecvItemBuffData = new ItemBuffData[this.MaxBuffTableCount];
		for (int i = 0; i < this.MaxBuffTableCount; i++)
		{
			ItemBuff recordByIndex = this.ItemBuffTable.GetRecordByIndex(i);
			this.m_RecvItemBuffData[i].ID = recordByIndex.BuffID;
			this.m_RecvItemBuffData[i].Kind = recordByIndex.BuffKind;
			this.m_SortBuffData[i] = (byte)i;
			if (this.ItemBuffTable.GetRecordByIndex(i).BuffKind == 7)
			{
				this.m_RecvWarBuffIdx = i;
			}
			else if (this.ItemBuffTable.GetRecordByIndex(i).BuffKind == 8)
			{
				this.m_RecvWorldBattleIdx = i;
			}
			else if (this.ItemBuffTable.GetRecordByIndex(i).BuffKind == 6)
			{
				this.m_KingdomBattleIdx = i;
			}
			else if (this.ItemBuffTable.GetRecordByIndex(i).BuffKind == 9)
			{
				this.m_NobilityBattleIdx = i;
			}
			else if (this.ItemBuffTable.GetRecordByIndex(i).BuffKind == 1)
			{
				this.m_ShieldIdx = i;
			}
		}
		this.SorttBuffData();
	}

	// Token: 0x060004E9 RID: 1257 RVA: 0x0006ACFC File Offset: 0x00068EFC
	public void ResetBuffData()
	{
		this.m_BuffScrollIndex = 0;
		this.m_BuffScrollPos = 0f;
		this.m_BuffListOpenIcon = 0;
		this.m_BuffListUseCount = 0;
		if (this.m_RecvItemBuffData != null)
		{
			Array.Clear(this.m_RecvItemBuffData, 0, this.m_RecvItemBuffData.Length);
			if (this.ItemBuffTable != null)
			{
				for (int i = 0; i < this.MaxBuffTableCount; i++)
				{
					ItemBuff recordByIndex = this.ItemBuffTable.GetRecordByIndex(i);
					this.m_RecvItemBuffData[i].ID = recordByIndex.BuffID;
					this.m_RecvItemBuffData[i].Kind = recordByIndex.BuffKind;
				}
			}
		}
	}

	// Token: 0x060004EA RID: 1258 RVA: 0x0006ADA8 File Offset: 0x00068FA8
	public void SorttBuffData()
	{
		Array.Sort<byte>(this.m_SortBuffData, 0, this.MaxBuffTableCount, this.itemBuffComparer);
	}

	// Token: 0x060004EB RID: 1259 RVA: 0x0006ADC4 File Offset: 0x00068FC4
	public void UpdateItemBuffIcon()
	{
		bool flag = false;
		bool flag2 = false;
		bool flag3 = false;
		bool flag4 = false;
		bool flag5 = false;
		bool flag6 = false;
		bool flag7 = false;
		bool flag8 = false;
		for (int i = 0; i < this.MaxBuffTableCount; i++)
		{
			if (this.m_RecvItemBuffData[i].bEnable)
			{
				ItemBuff recordByKey = this.ItemBuffTable.GetRecordByKey(this.m_RecvItemBuffData[i].ID);
				if (!flag && recordByKey.BuffKind == 1)
				{
					flag = true;
				}
				if (!flag2 && (recordByKey.BuffKind == 3 || recordByKey.BuffKind == 4))
				{
					flag2 = true;
				}
				if (!flag3 && recordByKey.BuffKind == 5)
				{
					flag3 = true;
				}
				if (!flag4 && recordByKey.BuffKind == 2)
				{
					flag4 = true;
				}
				if (!flag5 && recordByKey.BuffKind == 6)
				{
					flag5 = true;
				}
				if (!flag6 && recordByKey.BuffKind == 7)
				{
					flag6 = true;
				}
				if (!flag7 && recordByKey.BuffKind == 8)
				{
					flag7 = true;
				}
				if (!flag8 && recordByKey.BuffKind == 9)
				{
					flag8 = true;
				}
			}
		}
		this.bHaveKvKBuff = flag5;
		this.bHaveWarBuff = flag6;
		this.bHaveWorldBattleBuff = flag7;
		this.bHaveNobilityBattleBuff = flag8;
		if (DataManager.Instance.bHaveWarBuff)
		{
			this.m_BuffListOpenIcon = 6;
		}
		else if (DataManager.Instance.bHaveKvKBuff)
		{
			this.m_BuffListOpenIcon = 5;
		}
		else if (DataManager.Instance.bHaveWorldBattleBuff)
		{
			this.m_BuffListOpenIcon = 5;
		}
		else if (DataManager.Instance.bHaveNobilityBattleBuff)
		{
			this.m_BuffListOpenIcon = 5;
		}
		else if (flag)
		{
			this.m_BuffListOpenIcon = 1;
		}
		else if (flag2)
		{
			this.m_BuffListOpenIcon = 2;
		}
		else if (flag3)
		{
			this.m_BuffListOpenIcon = 4;
		}
		else if (this.RoleAttr.WorldTitle_Country != 0)
		{
			this.m_BuffListOpenIcon = 7;
		}
		else if (flag4)
		{
			this.m_BuffListOpenIcon = 3;
		}
		else
		{
			this.m_BuffListOpenIcon = 0;
		}
		ShieldLogManager.Instance.SetBecomeDueBuffData(this.m_BuffListOpenIcon);
		this.m_BuffListUseCount = this.GetNowItemBuffCount();
		GUIManager.Instance.UpdateUI(EGUIWindow.Door, 12, 0);
	}

	// Token: 0x060004EC RID: 1260 RVA: 0x0006B018 File Offset: 0x00069218
	public int GetNowItemBuffCount()
	{
		int num = 0;
		for (int i = 0; i < this.MaxBuffTableCount; i++)
		{
			if (this.m_RecvItemBuffData[i].bEnable)
			{
				num++;
			}
		}
		if (DataManager.Instance.RoleAttr.WorldTitle_Country > 0)
		{
			num++;
		}
		return num;
	}

	// Token: 0x060004ED RID: 1261 RVA: 0x0006B074 File Offset: 0x00069274
	public int GetRecvBuffDataIdxByID(ushort id)
	{
		int result = -1;
		for (int i = 0; i < this.m_RecvItemBuffData.Length; i++)
		{
			if (this.m_RecvItemBuffData[i].ID == id)
			{
				result = i;
				break;
			}
		}
		return result;
	}

	// Token: 0x060004EE RID: 1262 RVA: 0x0006B0BC File Offset: 0x000692BC
	public void CancelShieldItemBuff()
	{
		if (this.m_ShieldIdx >= 0 && this.m_ShieldIdx < this.m_RecvItemBuffData.Length)
		{
			this.m_RecvItemBuffData[this.m_ShieldIdx].BeginTime = 0L;
			this.m_RecvItemBuffData[this.m_ShieldIdx].TargetTime = 0L;
			this.m_RecvItemBuffData[this.m_ShieldIdx].bEnable = false;
		}
		this.UpdateItemBuffIcon();
		GameManager.OnRefresh(NetworkNews.Refresh_BuffList, null);
	}

	// Token: 0x060004EF RID: 1263 RVA: 0x0006B140 File Offset: 0x00069340
	public int GetWarBuffCD()
	{
		int level = (int)GUIManager.Instance.BuildingData.GetBuildData(8, 0).Level;
		if (level >= 1 && level <= 8)
		{
			return 0;
		}
		if (level >= 9 && level <= 12)
		{
			return 2;
		}
		if (level >= 13 && level <= 16)
		{
			return 3;
		}
		switch (level)
		{
		case 17:
			return 4;
		case 18:
			return 5;
		case 19:
			return 6;
		case 20:
			return 7;
		case 21:
			return 8;
		case 22:
			return 9;
		case 23:
			return 11;
		case 24:
			return 13;
		case 25:
			return 15;
		default:
			return 0;
		}
	}

	// Token: 0x060004F0 RID: 1264 RVA: 0x0006B1E8 File Offset: 0x000693E8
	public void RecvIBuffInfo(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		for (int i = 0; i < (int)b; i++)
		{
			ushort num = MP.ReadUShort(-1);
			ushort itemID = MP.ReadUShort(-1);
			int recvBuffDataIdxByID = this.GetRecvBuffDataIdxByID(num);
			long num2 = MP.ReadLong(-1);
			uint num3 = MP.ReadUInt(-1);
			if (recvBuffDataIdxByID >= 0 && recvBuffDataIdxByID < this.m_RecvItemBuffData.Length)
			{
				ItemBuff recordByKey = this.ItemBuffTable.GetRecordByKey(num);
				if (recordByKey.BuffKind == 6)
				{
					if (!this.m_RecvItemBuffData[recvBuffDataIdxByID].bEnable && Math.Abs(num2 - this.ServerTime) < 3L)
					{
						uint num4 = (this.ServerTime <= num2 + (long)((ulong)num3)) ? ((uint)(num2 + (long)((ulong)num3) - this.ServerTime)) : 0u;
						GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(978u), this.mStringTable.GetStringByID(979u), null, null, 0, 0, false, true, false, false, false);
						GUIManager.Instance.SetMsgBarTimeAndFill(num4, num3);
					}
					else if (this.m_RecvItemBuffData[recvBuffDataIdxByID].bEnable && this.m_RecvItemBuffData[recvBuffDataIdxByID].BeginTime != num2)
					{
						uint num5 = (this.ServerTime <= num2 + (long)((ulong)num3)) ? ((uint)(num2 + (long)((ulong)num3) - this.ServerTime)) : 0u;
						GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(984u), this.mStringTable.GetStringByID(980u), null, null, 0, 0, false, true, false, false, false);
						GUIManager.Instance.SetMsgBarTimeAndFill(num5, num3);
					}
				}
				if (recordByKey.BuffKind == 8)
				{
					if (!this.m_RecvItemBuffData[recvBuffDataIdxByID].bEnable && Math.Abs(num2 - this.ServerTime) < 3L)
					{
						uint num6 = (this.ServerTime <= num2 + (long)((ulong)num3)) ? ((uint)(num2 + (long)((ulong)num3) - this.ServerTime)) : 0u;
						GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(978u), this.mStringTable.GetStringByID(10001u), null, null, 0, 0, false, true, false, false, false);
						GUIManager.Instance.SetMsgBarTimeAndFill(num6, num3);
					}
					else if (this.m_RecvItemBuffData[recvBuffDataIdxByID].bEnable && this.m_RecvItemBuffData[recvBuffDataIdxByID].BeginTime != num2)
					{
						uint num7 = (this.ServerTime <= num2 + (long)((ulong)num3)) ? ((uint)(num2 + (long)((ulong)num3) - this.ServerTime)) : 0u;
						GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(11014u), this.mStringTable.GetStringByID(980u), null, null, 0, 0, false, true, false, false, false);
						GUIManager.Instance.SetMsgBarTimeAndFill(num7, num3);
					}
				}
				if (recordByKey.BuffKind == 9)
				{
					if (!this.m_RecvItemBuffData[recvBuffDataIdxByID].bEnable && Math.Abs(num2 - this.ServerTime) < 3L)
					{
						uint num8 = (this.ServerTime <= num2 + (long)((ulong)num3)) ? ((uint)(num2 + (long)((ulong)num3) - this.ServerTime)) : 0u;
						GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(978u), this.mStringTable.GetStringByID(10068u), null, null, 0, 0, false, true, false, false, false);
						GUIManager.Instance.SetMsgBarTimeAndFill(num8, num3);
					}
					else if (this.m_RecvItemBuffData[recvBuffDataIdxByID].bEnable && this.m_RecvItemBuffData[recvBuffDataIdxByID].BeginTime != num2)
					{
						uint num9 = (this.ServerTime <= num2 + (long)((ulong)num3)) ? ((uint)(num2 + (long)((ulong)num3) - this.ServerTime)) : 0u;
						GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(11095u), this.mStringTable.GetStringByID(980u), null, null, 0, 0, false, true, false, false, false);
						GUIManager.Instance.SetMsgBarTimeAndFill(num9, num3);
					}
				}
				this.m_RecvItemBuffData[recvBuffDataIdxByID].bEnable = true;
				this.m_RecvItemBuffData[recvBuffDataIdxByID].ItemID = itemID;
				this.m_RecvItemBuffData[recvBuffDataIdxByID].BeginTime = num2;
				this.m_RecvItemBuffData[recvBuffDataIdxByID].TargetTime = num2 + (long)((ulong)num3);
			}
		}
		this.UpdateItemBuffIcon();
		GameManager.OnRefresh(NetworkNews.Refresh_BuffList, null);
		this.AttribVal.UpdateAttrVal(UpdateAttrKind.Buff);
	}

	// Token: 0x060004F1 RID: 1265 RVA: 0x0006B690 File Offset: 0x00069890
	public void RecvUpdateBuffInfo(MessagePacket MP)
	{
		ushort num = MP.ReadUShort(-1);
		ushort itemID = MP.ReadUShort(-1);
		int recvBuffDataIdxByID = this.GetRecvBuffDataIdxByID(num);
		long num2 = MP.ReadLong(-1);
		uint num3 = MP.ReadUInt(-1);
		if (recvBuffDataIdxByID >= 0 && recvBuffDataIdxByID < this.m_RecvItemBuffData.Length)
		{
			ItemBuff recordByKey = this.ItemBuffTable.GetRecordByKey(num);
			if (recordByKey.BuffKind == 6)
			{
				if (!this.m_RecvItemBuffData[recvBuffDataIdxByID].bEnable && Math.Abs(num2 - this.ServerTime) < 3L)
				{
					uint num4 = (this.ServerTime <= num2 + (long)((ulong)num3)) ? ((uint)(num2 + (long)((ulong)num3) - this.ServerTime)) : 0u;
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(978u), this.mStringTable.GetStringByID(979u), null, null, 0, 0, false, true, false, false, false);
					GUIManager.Instance.SetMsgBarTimeAndFill(num4, num3);
				}
				else if (this.m_RecvItemBuffData[recvBuffDataIdxByID].bEnable && this.m_RecvItemBuffData[recvBuffDataIdxByID].BeginTime != num2)
				{
					uint num5 = (this.ServerTime <= num2 + (long)((ulong)num3)) ? ((uint)(num2 + (long)((ulong)num3) - this.ServerTime)) : 0u;
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(984u), this.mStringTable.GetStringByID(980u), null, null, 0, 0, false, true, false, false, false);
					GUIManager.Instance.SetMsgBarTimeAndFill(num5, num3);
				}
			}
			if (recordByKey.BuffKind == 8)
			{
				if (!this.m_RecvItemBuffData[recvBuffDataIdxByID].bEnable && Math.Abs(num2 - this.ServerTime) < 3L)
				{
					uint num6 = (this.ServerTime <= num2 + (long)((ulong)num3)) ? ((uint)(num2 + (long)((ulong)num3) - this.ServerTime)) : 0u;
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(978u), this.mStringTable.GetStringByID(10001u), null, null, 0, 0, false, true, false, false, false);
					GUIManager.Instance.SetMsgBarTimeAndFill(num6, num3);
				}
				else if (this.m_RecvItemBuffData[recvBuffDataIdxByID].bEnable && this.m_RecvItemBuffData[recvBuffDataIdxByID].BeginTime != num2)
				{
					uint num7 = (this.ServerTime <= num2 + (long)((ulong)num3)) ? ((uint)(num2 + (long)((ulong)num3) - this.ServerTime)) : 0u;
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(11014u), this.mStringTable.GetStringByID(980u), null, null, 0, 0, false, true, false, false, false);
					GUIManager.Instance.SetMsgBarTimeAndFill(num7, num3);
				}
			}
			if (recordByKey.BuffKind == 9)
			{
				if (!this.m_RecvItemBuffData[recvBuffDataIdxByID].bEnable && Math.Abs(num2 - this.ServerTime) < 3L)
				{
					uint num8 = (this.ServerTime <= num2 + (long)((ulong)num3)) ? ((uint)(num2 + (long)((ulong)num3) - this.ServerTime)) : 0u;
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(978u), this.mStringTable.GetStringByID(10068u), null, null, 0, 0, false, true, false, false, false);
					GUIManager.Instance.SetMsgBarTimeAndFill(num8, num3);
				}
				else if (this.m_RecvItemBuffData[recvBuffDataIdxByID].bEnable && this.m_RecvItemBuffData[recvBuffDataIdxByID].BeginTime != num2)
				{
					uint num9 = (this.ServerTime <= num2 + (long)((ulong)num3)) ? ((uint)(num2 + (long)((ulong)num3) - this.ServerTime)) : 0u;
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(11095u), this.mStringTable.GetStringByID(980u), null, null, 0, 0, false, true, false, false, false);
					GUIManager.Instance.SetMsgBarTimeAndFill(num9, num3);
				}
			}
			this.m_RecvItemBuffData[recvBuffDataIdxByID].bEnable = true;
			this.m_RecvItemBuffData[recvBuffDataIdxByID].ItemID = itemID;
			this.m_RecvItemBuffData[recvBuffDataIdxByID].BeginTime = num2;
			this.m_RecvItemBuffData[recvBuffDataIdxByID].TargetTime = num2 + (long)((ulong)num3);
		}
		this.UpdateItemBuffIcon();
		GameManager.OnRefresh(NetworkNews.Refresh_BuffList, null);
		this.AttribVal.UpdateAttrVal(UpdateAttrKind.Buff);
		ShieldLogManager.Instance.RefreshActiveData();
	}

	// Token: 0x060004F2 RID: 1266 RVA: 0x0006BB10 File Offset: 0x00069D10
	public void RecvBuffComplete(MessagePacket MP)
	{
		ushort id = MP.ReadUShort(-1);
		int recvBuffDataIdxByID = this.GetRecvBuffDataIdxByID(id);
		if (recvBuffDataIdxByID >= 0 && recvBuffDataIdxByID < this.m_RecvItemBuffData.Length)
		{
			this.m_RecvItemBuffData[recvBuffDataIdxByID].bEnable = false;
			this.m_RecvItemBuffData[recvBuffDataIdxByID].ItemID = 0;
			this.m_RecvItemBuffData[recvBuffDataIdxByID].BeginTime = 0L;
			this.m_RecvItemBuffData[recvBuffDataIdxByID].TargetTime = 0L;
		}
		this.UpdateItemBuffIcon();
		GameManager.OnRefresh(NetworkNews.Refresh_BuffList, null);
		this.AttribVal.UpdateAttrVal(UpdateAttrKind.Buff);
	}

	// Token: 0x060004F3 RID: 1267 RVA: 0x0006BBA8 File Offset: 0x00069DA8
	public void InitSearchPlayerData()
	{
		this.m_SearchPlayerData = new SearchPlayerDataType[20];
		for (int i = 0; i < 20; i++)
		{
			this.m_SearchPlayerData[i].Name = StringManager.Instance.SpawnString(30);
			this.m_SearchPlayerData[i].AllianceTag = StringManager.Instance.SpawnString(30);
		}
		this.m_PreSearchName = string.Empty;
		this.m_RecvSearchPlayerCount = 0;
		this.m_SearchListScrollIndex = 0;
		this.m_SearchListScrollPos = 0f;
		this.bClaerSearchData = true;
		this.bSearchError = false;
	}

	// Token: 0x060004F4 RID: 1268 RVA: 0x0006BC44 File Offset: 0x00069E44
	public void ResetSearchPlayerData()
	{
		if (this.m_SearchPlayerData != null)
		{
			Array.Clear(this.m_SearchPlayerData, 0, this.m_SearchPlayerData.Length);
		}
		this.m_RecvSearchPlayerCount = 0;
		this.m_SearchListScrollIndex = 0;
		this.m_SearchListScrollPos = 0f;
		this.m_PreSearchName = string.Empty;
		this.bClaerSearchData = true;
		this.bSearchError = false;
	}

	// Token: 0x060004F5 RID: 1269 RVA: 0x0006BCA4 File Offset: 0x00069EA4
	public void SendSearchPlayer(string name)
	{
		if (GUIManager.Instance.ShowUILock(EUILock.SearchPlayer))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_SEARCHPALYER;
			messagePacket.AddSeqId();
			messagePacket.Add((byte)name.Length);
			messagePacket.Add(name, 13);
			messagePacket.Send(false);
		}
	}

	// Token: 0x060004F6 RID: 1270 RVA: 0x0006BCFC File Offset: 0x00069EFC
	public void RecvSearchPlayer(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b != 255)
		{
			this.m_RecvSearchPlayerCount = b;
			this.bSearchError = false;
		}
		else
		{
			this.bSearchError = true;
		}
		if (this.bSearchError)
		{
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(796u), 255, true);
		}
		else if (this.m_RecvSearchPlayerCount <= 20)
		{
			for (int i = 0; i < (int)this.m_RecvSearchPlayerCount; i++)
			{
				this.m_SearchPlayerData[i].Head = MP.ReadUShort(-1);
				MP.ReadStringPlus(13, this.m_SearchPlayerData[i].Name, -1);
				MP.ReadStringPlus(3, this.m_SearchPlayerData[i].AllianceTag, -1);
				this.m_SearchPlayerData[i].Power = MP.ReadULong(-1);
				this.m_SearchPlayerData[i].TroopKillNum = MP.ReadULong(-1);
			}
		}
		GameManager.OnRefresh(NetworkNews.Refresh_SearchList, null);
		GUIManager.Instance.HideUILock(EUILock.SearchPlayer);
	}

	// Token: 0x060004F7 RID: 1271 RVA: 0x0006BE1C File Offset: 0x0006A01C
	public void SendScout(PointCode DesPoint)
	{
		if (GUIManager.Instance.ShowUILock(EUILock.Scout))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_SENDSCOUT;
			messagePacket.AddSeqId();
			messagePacket.Add(DesPoint.zoneID);
			messagePacket.Add(DesPoint.pointID);
			messagePacket.Send(false);
		}
	}

	// Token: 0x060004F8 RID: 1272 RVA: 0x0006BE78 File Offset: 0x0006A078
	public void RecvScout(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b == 0 || b == 12)
		{
			byte b2 = MP.ReadByte(-1);
			if (b2 >= 8)
			{
				return;
			}
			this.MarchEventData[(int)b2].Type = EMarchEventType.EMET_ScoutMarching;
			this.MarchEventData[(int)b2].Point.zoneID = MP.ReadUShort(-1);
			this.MarchEventData[(int)b2].Point.pointID = MP.ReadByte(-1);
			this.MarchEventTime[(int)b2].BeginTime = MP.ReadLong(-1);
			this.MarchEventTime[(int)b2].RequireTime = MP.ReadUInt(-1);
			DataManager.instance.Resource[4].Stock = MP.ReadUInt(-1);
			this.MarchEventData[(int)b2].PointKind = (POINT_KIND)MP.ReadByte(-1);
			this.MarchEventData[(int)b2].DesPointLevel = MP.ReadByte(-1);
			this.MarchEventData[(int)b2].DesPlayerName = MP.ReadString(13, -1);
			if (b == 12)
			{
				this.MarchEventData[(int)b2].bRallyHost = 3;
			}
			DataManager.msgBuffer[0] = 81;
			GameConstants.GetBytes((ushort)b2, DataManager.msgBuffer, 1);
			GameManager.notifyObservers(1, 0, DataManager.msgBuffer);
			if (b == 0)
			{
				this.CancelShieldItemBuff();
			}
			this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b2, true, this.MarchEventTime[(int)b2].BeginTime, this.MarchEventTime[(int)b2].RequireTime);
			this.CheckTroolCount();
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
			GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
			DataManager.missionDataManager.CheckChanged(eMissionKind.Mark, 107, 1);
			if (this.MarchEventData[(int)b2].PointKind == POINT_KIND.PK_CITY)
			{
				AFAdvanceManager.Instance.TriggerAfAdvEvent(EAppsFlayerEvent.SCOUT_OTHERTURF);
			}
		}
		else
		{
			switch (b)
			{
			case 1:
				GUIManager.Instance.MsgStr.ClearString();
				GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)DataManager.Instance.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_MARCH_NUM)), 1, false);
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3959u));
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
				break;
			case 2:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5715u), this.mStringTable.GetStringByID(5716u), this.mStringTable.GetStringByID(5717u), null, 0, 0, false, false, false, false, false);
				break;
			case 3:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5725u), this.mStringTable.GetStringByID(5726u), this.mStringTable.GetStringByID(5727u), null, 0, 0, false, false, false, false, false);
				break;
			case 4:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5715u), this.mStringTable.GetStringByID(5716u), this.mStringTable.GetStringByID(5717u), null, 0, 0, false, false, false, false, false);
				break;
			case 5:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5718u), this.mStringTable.GetStringByID(5719u), this.mStringTable.GetStringByID(5720u), null, 0, 0, false, false, false, false, false);
				break;
			case 6:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5710u), this.mStringTable.GetStringByID(5711u), this.mStringTable.GetStringByID(5712u), null, 0, 0, false, false, false, false, false);
				break;
			case 7:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5721u), this.mStringTable.GetStringByID(5722u), 6, this.mStringTable.GetStringByID(5723u), 0, 0, true, false, false, false, false);
				break;
			case 10:
			{
				ushort yolkIDbyPointCode = DataManager.mapDataController.getYolkIDbyPointCode(this.ScoutDesPoint.zoneID, this.ScoutDesPoint.pointID, 0);
				GUIManager.Instance.MsgStr.ClearString();
				GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName(yolkIDbyPointCode, 0));
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8598u));
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565u), null, 0, 0, false, false, false, false, false);
				break;
			}
			case 11:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5725u), this.mStringTable.GetStringByID(5726u), this.mStringTable.GetStringByID(5727u), null, 0, 0, false, false, false, false, false);
				break;
			}
		}
		GUIManager.Instance.HideUILock(EUILock.Scout);
	}

	// Token: 0x060004F9 RID: 1273 RVA: 0x0006C3D4 File Offset: 0x0006A5D4
	public void RecvScoutReturn(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b >= 8)
		{
			return;
		}
		this.MarchEventData[(int)b].Type = EMarchEventType.EMET_ScoutReturn;
		this.MarchEventTime[(int)b].BeginTime = MP.ReadLong(-1);
		this.MarchEventTime[(int)b].RequireTime = MP.ReadUInt(-1);
		byte b2 = MP.ReadByte(-1);
		this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, true, this.MarchEventTime[(int)b].BeginTime, this.MarchEventTime[(int)b].RequireTime);
		this.CheckTroolCount();
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
		if (b2 == 0)
		{
			GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(5713u), 20, true);
		}
	}

	// Token: 0x060004FA RID: 1274 RVA: 0x0006C4A4 File Offset: 0x0006A6A4
	public void RecvScoutHome(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b >= 8)
		{
			return;
		}
		this.MarchEventData[(int)b].bRallyHost = 0;
		this.MarchEventData[(int)b].Type = EMarchEventType.EMET_Standby;
		this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, false, this.MarchEventTime[(int)b].BeginTime, this.MarchEventTime[(int)b].RequireTime);
		this.CheckTroolCount();
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
		GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(5714u), 14, true);
	}

	// Token: 0x060004FB RID: 1275 RVA: 0x0006C548 File Offset: 0x0006A748
	public void RecvSHelp(MessagePacket MP)
	{
		GUIManager guimanager = GUIManager.Instance;
		byte b = MP.ReadByte(-1);
		if (b == 0)
		{
			uint[] array = new uint[5];
			byte b2 = MP.ReadByte(-1);
			if (b2 >= 8)
			{
				return;
			}
			this.MarchEventData[(int)b2].Type = EMarchEventType.EMET_DeliverMarching;
			this.MarchEventData[(int)b2].Point.zoneID = MP.ReadUShort(-1);
			this.MarchEventData[(int)b2].Point.pointID = MP.ReadByte(-1);
			this.MarchEventTime[(int)b2].BeginTime = MP.ReadLong(-1);
			this.MarchEventTime[(int)b2].RequireTime = MP.ReadUInt(-1);
			for (int i = 0; i < 5; i++)
			{
				DataManager.instance.Resource[i].Stock = MP.ReadUInt(-1);
			}
			for (int j = 0; j < 5; j++)
			{
				array[j] = MP.ReadUInt(-1);
			}
			this.MarchEventData[(int)b2].PointKind = (POINT_KIND)MP.ReadByte(-1);
			this.MarchEventData[(int)b2].DesPointLevel = MP.ReadByte(-1);
			this.MarchEventData[(int)b2].DesPlayerName = MP.ReadString(13, -1);
			this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b2, true, this.MarchEventTime[(int)b2].BeginTime, this.MarchEventTime[(int)b2].RequireTime);
			DataManager.msgBuffer[0] = 81;
			GameConstants.GetBytes((ushort)b2, DataManager.msgBuffer, 1);
			GameManager.notifyObservers(1, 0, DataManager.msgBuffer);
			this.CheckTroolCount();
			GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
			for (int k = 0; k < 5; k++)
			{
				guimanager.m_SaveResource[k] = 0u;
			}
			guimanager.m_OpenResourceMenu = false;
			GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(3871u), 22, true);
			byte b3 = 0;
			for (int l = 0; l < 5; l++)
			{
				if (array[l] != guimanager.m_SendResource[l])
				{
					b3 += 1;
				}
			}
			if (b3 > 0)
			{
				guimanager.MsgStr.Length = 0;
				for (int m = 0; m < 5; m++)
				{
					if (guimanager.m_SendResource[m] != 0u && array[m] != guimanager.m_SendResource[m])
					{
						guimanager.MsgStr.IntToFormat((long)((ulong)guimanager.m_SendResource[m]), 1, true);
						guimanager.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint)(3952 + m)));
						guimanager.MsgStr.IntToFormat((long)((ulong)array[m]), 1, true);
						guimanager.MsgStr.StringToFormat(this.mStringTable.GetStringByID((uint)(3952 + m)));
						guimanager.MsgStr.AppendFormat(this.mStringTable.GetStringByID(4830u));
						if (m != 4)
						{
							guimanager.MsgStr.Append("\n");
						}
					}
				}
				if (b3 > 1)
				{
					guimanager.OpenMessageBoxEX(this.mStringTable.GetStringByID(4829u), guimanager.MsgStr.ToString(), this.mStringTable.GetStringByID(4831u), null, 0, 0, false, false);
				}
				else
				{
					guimanager.OpenMessageBox(this.mStringTable.GetStringByID(4829u), guimanager.MsgStr.ToString(), this.mStringTable.GetStringByID(4831u), null, 0, 0, false, false, false, false, false);
				}
			}
		}
		else
		{
			byte b4 = b;
			if (b4 == 1)
			{
				GUIManager.Instance.MsgStr.ClearString();
				GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)DataManager.Instance.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_MARCH_NUM)), 1, false);
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3959u));
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
			}
		}
		GUIManager.Instance.HideUILock(EUILock.Scout);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Market_Help, 1, (int)b);
	}

	// Token: 0x060004FC RID: 1276 RVA: 0x0006C998 File Offset: 0x0006AB98
	public void RecvHelp_Return(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = MP.ReadByte(-1);
		if (b2 >= 8)
		{
			return;
		}
		this.MarchEventData[(int)b2].Type = EMarchEventType.EMET_DeliverReturn;
		this.MarchEventTime[(int)b2].BeginTime = MP.ReadLong(-1);
		this.MarchEventTime[(int)b2].RequireTime = MP.ReadUInt(-1);
		this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b2, true, this.MarchEventTime[(int)b2].BeginTime, this.MarchEventTime[(int)b2].RequireTime);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
		if (b == 0)
		{
			GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(3977u), 22, true);
			DataManager.missionDataManager.CheckChanged(eMissionKind.Mark, 119, 1);
		}
	}

	// Token: 0x060004FD RID: 1277 RVA: 0x0006CA70 File Offset: 0x0006AC70
	public void RecvHelp_Home(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b >= 8)
		{
			return;
		}
		this.MarchEventData[(int)b].Type = EMarchEventType.EMET_Standby;
		this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, false, this.MarchEventTime[(int)b].BeginTime, this.MarchEventTime[(int)b].RequireTime);
		for (int i = 0; i < 5; i++)
		{
			this.Resource[i].Stock = MP.ReadUInt(-1);
		}
		this.CheckTroolCount();
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
		GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
		GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(3973u), 14, true);
	}

	// Token: 0x060004FE RID: 1278 RVA: 0x0006CB30 File Offset: 0x0006AD30
	public void RecvInforce_Info(MessagePacket MP)
	{
		ushort num = MP.ReadUShort(-1);
		byte[] array = new byte[64];
		MP.ReadBlock(array, 0, 64, -1);
		int num2 = 0;
		Array.Clear(this.mSoldier_Embassy, 0, this.mSoldier_Embassy.Length);
		this.TotalSoldier_Embassy = 0u;
		for (int i = 0; i < 16; i++)
		{
			if ((num >> i & 1) == 1)
			{
				this.mSoldier_Embassy[i] = GameConstants.ConvertBytesToUInt(array, num2);
				this.TotalSoldier_Embassy += this.mSoldier_Embassy[i];
				num2 += 4;
			}
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Embassy, 0, 0);
		GUIManager.Instance.BuildingData.UpdateBuildState(5, 255);
	}

	// Token: 0x060004FF RID: 1279 RVA: 0x0006CBE4 File Offset: 0x0006ADE4
	public void RecvEmbassy_Msg(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		CString cstring = StringManager.Instance.StaticString1024();
		CString cstring2 = StringManager.Instance.StaticString1024();
		MP.ReadStringPlus(13, cstring, -1);
		cstring2.ClearString();
		cstring2.StringToFormat(cstring);
		if (b == 0)
		{
			cstring2.AppendFormat(this.mStringTable.GetStringByID(4833u));
			GUIManager.Instance.AddHUDMessage(cstring2.ToString(), 21, true);
		}
		else
		{
			cstring2.AppendFormat(this.mStringTable.GetStringByID(4848u));
			GUIManager.Instance.AddHUDMessage(cstring2.ToString(), 21, true);
		}
		ushort num = MP.ReadUShort(-1);
		byte[] array = new byte[64];
		MP.ReadBlock(array, 0, 64, -1);
		int num2 = 0;
		this.TotalSoldier_Embassy = 0u;
		Array.Clear(this.mSoldier_Embassy, 0, this.mSoldier_Embassy.Length);
		for (int i = 0; i < 16; i++)
		{
			if ((num >> i & 1) == 1)
			{
				this.mSoldier_Embassy[i] = GameConstants.ConvertBytesToUInt(array, num2);
				this.TotalSoldier_Embassy += this.mSoldier_Embassy[i];
				num2 += 4;
			}
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Embassy, 0, 0);
		GUIManager.Instance.BuildingData.UpdateBuildState(5, 255);
	}

	// Token: 0x06000500 RID: 1280 RVA: 0x0006CD38 File Offset: 0x0006AF38
	public void SendInforce()
	{
		if (GUIManager.Instance.ShowUILock(EUILock.Inforce))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_SEND_INFORCE;
			messagePacket.AddSeqId();
			messagePacket.Send(false);
		}
	}

	// Token: 0x06000501 RID: 1281 RVA: 0x0006CD7C File Offset: 0x0006AF7C
	public void RecvSendInforce(MessagePacket MP)
	{
		GUIManager.Instance.HideUILock(EUILock.Expedition);
		switch (MP.ReadByte(-1))
		{
		case 0:
		{
			byte b = MP.ReadByte(-1);
			if (b >= 8)
			{
				return;
			}
			this.MarchEventData[(int)b].Type = EMarchEventType.EMET_InforceMarching;
			if (this.MarchEventData[(int)b].Type >= EMarchEventType.EMET_AttackMarching && this.MarchEventData[(int)b].Type <= EMarchEventType.EMET_RallyAttack && this.MarchEventData[(int)b].Type != EMarchEventType.EMET_GatherMarching && this.MarchEventData[(int)b].Type != EMarchEventType.EMET_CampMarching)
			{
				this.CancelShieldItemBuff();
			}
			this.MarchEventData[(int)b].Point.zoneID = MP.ReadUShort(-1);
			this.MarchEventData[(int)b].Point.pointID = MP.ReadByte(-1);
			this.MarchEventTime[(int)b].BeginTime = MP.ReadLong(-1);
			this.MarchEventTime[(int)b].RequireTime = MP.ReadUInt(-1);
			this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, true, this.MarchEventTime[(int)b].BeginTime, this.MarchEventTime[(int)b].RequireTime);
			this.MarchEventData[(int)b].PointKind = POINT_KIND.PK_CITY;
			this.MarchEventData[(int)b].DesPointLevel = MP.ReadByte(-1);
			this.MarchEventData[(int)b].DesPlayerName = MP.ReadString(13, -1);
			ushort num = MP.ReadUShort(-1);
			for (int i = 0; i < 16; i++)
			{
				if ((num >> i & 1) == 1)
				{
					this.MarchEventData[(int)b].TroopData[i / 4][i % 4] = MP.ReadUInt(-1);
					this.RoleAttr.m_Soldier[i] -= this.MarchEventData[(int)b].TroopData[i / 4][i % 4];
					this.SoldierTotal -= (long)((ulong)this.MarchEventData[(int)b].TroopData[i / 4][i % 4]);
				}
			}
			for (int j = 0; j < 5; j++)
			{
				this.MarchEventData[(int)b].HeroID[j] = 0;
			}
			Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
			if (door != null)
			{
				if (door.m_eMapMode == EUIOriginMapMode.OriginMap)
				{
					door.CloseMenu(false);
				}
				else
				{
					DataManager.msgBuffer[0] = 81;
					GameConstants.GetBytes((ushort)b, DataManager.msgBuffer, 1);
					GameManager.notifyObservers(1, 0, DataManager.msgBuffer);
				}
			}
			this.CheckTroolCount();
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(3872u), 21, true);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0, 0);
			this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, b);
			this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
			break;
		}
		case 1:
			GUIManager.Instance.MsgStr.ClearString();
			GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)DataManager.Instance.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_MARCH_NUM)), 1, false);
			GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3959u));
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
			break;
		case 2:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(9771u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
			break;
		case 3:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826u), this.mStringTable.GetStringByID(4827u), this.mStringTable.GetStringByID(4828u), null, 0, 0, false, false, false, false, false);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 1, 0);
			break;
		case 4:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5715u), this.mStringTable.GetStringByID(5716u), this.mStringTable.GetStringByID(5717u), null, 0, 0, false, false, false, false, false);
			break;
		case 5:
			if (this.bWonderFight)
			{
				if (this.WarlobbyDetail != null)
				{
					GUIManager.Instance.MsgStr.ClearString();
					GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort)this.WarlobbyDetail.UIWonderID, 0));
					GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8568u));
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565u), null, 0, 0, false, false, false, false, false);
				}
			}
			else
			{
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5745u), this.mStringTable.GetStringByID(5746u), this.mStringTable.GetStringByID(5747u), null, 0, 0, false, false, false, false, false);
			}
			break;
		case 6:
			if (this.bWonderFight)
			{
				if (this.WarlobbyDetail != null)
				{
					GUIManager.Instance.MsgStr.ClearString();
					GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort)this.WarlobbyDetail.UIWonderID, 0));
					GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8567u));
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565u), null, 0, 0, false, false, false, false, false);
				}
			}
			else
			{
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5812u), this.mStringTable.GetStringByID(5813u), this.mStringTable.GetStringByID(5814u), null, 0, 0, false, false, false, false, false);
			}
			break;
		case 7:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4834u), this.mStringTable.GetStringByID(5806u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
			break;
		case 8:
			if (this.bWonderFight)
			{
				if (this.WarlobbyDetail != null)
				{
					GUIManager.Instance.MsgStr.ClearString();
					GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort)this.WarlobbyDetail.UIWonderID, 0));
					GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8570u));
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565u), null, 0, 0, false, false, false, false, false);
				}
			}
			else
			{
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4837u), this.mStringTable.GetStringByID(4838u), this.mStringTable.GetStringByID(4839u), null, 0, 0, false, false, false, false, false);
			}
			break;
		case 9:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826u), this.mStringTable.GetStringByID(119u), this.mStringTable.GetStringByID(4828u), null, 0, 0, false, false, false, false, false);
			break;
		case 10:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(9771u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
			break;
		case 11:
			if (this.WarlobbyDetail != null)
			{
				GUIManager.Instance.MsgStr.ClearString();
				GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort)this.WarlobbyDetail.UIWonderID, 0));
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8569u));
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565u), null, 0, 0, false, false, false, false, false);
			}
			break;
		case 12:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826u), this.mStringTable.GetStringByID(4827u), this.mStringTable.GetStringByID(4828u), null, 0, 0, false, false, false, false, false);
			break;
		case 13:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826u), this.mStringTable.GetStringByID(4827u), this.mStringTable.GetStringByID(4828u), null, 0, 0, false, false, false, false, false);
			break;
		case 14:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826u), this.mStringTable.GetStringByID(4827u), this.mStringTable.GetStringByID(4828u), null, 0, 0, false, false, false, false, false);
			break;
		case 15:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826u), this.mStringTable.GetStringByID(9916u), this.mStringTable.GetStringByID(4828u), null, 0, 0, false, false, false, false, false);
			break;
		}
		GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_Expedition);
	}

	// Token: 0x06000502 RID: 1282 RVA: 0x0006D7D4 File Offset: 0x0006B9D4
	public void Send_DissMiss_Inforce()
	{
		if (GUIManager.Instance.ShowUILock(EUILock.Inforce))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_DISMISS_INFORCE;
			messagePacket.AddSeqId();
			messagePacket.Send(false);
		}
	}

	// Token: 0x06000503 RID: 1283 RVA: 0x0006D818 File Offset: 0x0006BA18
	public void RecvDimiss_Inforce(MessagePacket MP)
	{
		GUIManager.Instance.HideUILock(EUILock.Inforce);
		if (MP.ReadByte(-1) == 0)
		{
			Array.Clear(this.mSoldier_Embassy, 0, this.mSoldier_Embassy.Length);
			this.TotalSoldier_Embassy = 0u;
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Embassy, 1, 0);
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4855u), 21, true);
			GUIManager.Instance.BuildingData.UpdateBuildState(5, 255);
		}
	}

	// Token: 0x06000504 RID: 1284 RVA: 0x0006D89C File Offset: 0x0006BA9C
	public void RecvInforce_Arrived(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b >= 8)
		{
			return;
		}
		this.MarchEventData[(int)b].Point.zoneID = MP.ReadUShort(-1);
		this.MarchEventData[(int)b].Point.pointID = MP.ReadByte(-1);
		this.MarchEventData[(int)b].DesPointLevel = MP.ReadByte(-1);
		this.MarchEventData[(int)b].DesPlayerName = MP.ReadString(13, -1);
		this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, false, 0L, 0u);
		this.MarchEventData[(int)b].Type = EMarchEventType.EMET_InforceStanby;
		this.CheckTroolCount();
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0, 0);
		GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4832u), 21, true);
	}

	// Token: 0x06000505 RID: 1285 RVA: 0x0006D984 File Offset: 0x0006BB84
	public void SendAllyInforceInfo(string name)
	{
		if (GUIManager.Instance.ShowUILock(EUILock.Inforce))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_ALLY_INFORCE_INFO;
			messagePacket.AddSeqId();
			messagePacket.Add(name, 13);
			messagePacket.Send(false);
		}
	}

	// Token: 0x06000506 RID: 1286 RVA: 0x0006D9D0 File Offset: 0x0006BBD0
	public void RecvAllyInforceInfo(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		bool flag = false;
		Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
		switch (b)
		{
		case 0:
			this.m_InForcePoint.zoneID = MP.ReadUShort(-1);
			this.m_InForcePoint.pointID = MP.ReadByte(-1);
			if (DataManager.MapDataController.CheckLenght(GameConstants.getTileMapPosbyPointCode(this.m_InForcePoint.zoneID, this.m_InForcePoint.pointID)) == 0f)
			{
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4829u), this.mStringTable.GetStringByID(119u), null, null, 0, 0, false, false, false, false, false);
				GUIManager.Instance.HideUILock(EUILock.Inforce);
				return;
			}
			this.m_CurrTroopAmount = MP.ReadUInt(-1);
			this.m_InForceCapacity = MP.ReadUInt(-1);
			this.m_InForceMarchSpeedPlus = MP.ReadUInt(-1);
			this.m_CurrInForcePlayer = MP.ReadByte(-1);
			if (this.m_CurrTroopAmount >= this.m_InForceCapacity)
			{
				flag = true;
			}
			if (door)
			{
				if (this.ReinforceCheckType == eReinforceCheck.OpenReinforce)
				{
					door.m_GroundInfo.OpenReinforcePanel(true, false, true);
				}
				else if (this.ReinforceCheckType == eReinforceCheck.OpenReinforce_NoLoc)
				{
					door.m_GroundInfo.OpenReinforcePanel(true, true, false);
				}
				else if (this.ReinforceCheckType == eReinforceCheck.OpenUIExpedition)
				{
					if (!flag && this.m_CurrInForcePlayer < 30)
					{
						door.OpenMenu(EGUIWindow.UI_Expedition, 0, 2, true);
					}
				}
				else if (this.ReinforceCheckType == eReinforceCheck.OpenUIExpedition_FromList)
				{
					if (!flag && this.m_CurrInForcePlayer < 30)
					{
						door.OpenMenu(EGUIWindow.UI_Expedition, 1, 2, true);
					}
				}
				else if (this.ReinforceCheckType == eReinforceCheck.OpenUIExpedition_Marshal)
				{
					door.OpenMenu(EGUIWindow.UI_Expedition, 2, 2, true);
				}
			}
			if (this.ReinforceCheckType == eReinforceCheck.OpenUIExpedition || this.ReinforceCheckType == eReinforceCheck.OpenUIExpedition_FromList)
			{
				if (flag)
				{
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5812u), this.mStringTable.GetStringByID(5813u), null, null, 0, 0, false, false, false, false, false);
				}
				if (this.m_CurrInForcePlayer >= 30)
				{
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5745u), this.mStringTable.GetStringByID(5746u), null, null, 0, 0, false, false, false, false, false);
				}
			}
			break;
		case 1:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826u), this.mStringTable.GetStringByID(4827u), this.mStringTable.GetStringByID(4828u), null, 0, 0, false, false, false, false, false);
			break;
		case 2:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826u), this.mStringTable.GetStringByID(4827u), null, null, 0, 0, false, false, false, false, false);
			break;
		case 3:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4834u), this.mStringTable.GetStringByID(4835u), null, null, 0, 0, false, false, false, false, false);
			break;
		case 4:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826u), this.mStringTable.GetStringByID(4827u), null, null, 0, 0, false, false, false, false, false);
			break;
		}
		if (b != 0 && door)
		{
			door.m_GroundInfo.Close();
		}
		GUIManager.Instance.HideUILock(EUILock.Inforce);
	}

	// Token: 0x06000507 RID: 1287 RVA: 0x0006DD60 File Offset: 0x0006BF60
	public void RecvAllyInforceReturn(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b >= 8)
		{
			return;
		}
		this.MarchEventData[(int)b].Type = (EMarchEventType)MP.ReadByte(-1);
		this.MarchEventTime[(int)b].BeginTime = MP.ReadLong(-1);
		this.MarchEventTime[(int)b].RequireTime = MP.ReadUInt(-1);
		this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, true, this.MarchEventTime[(int)b].BeginTime, this.MarchEventTime[(int)b].RequireTime);
		this.CheckTroolCount();
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
		GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4854u), 14, true);
	}

	// Token: 0x06000508 RID: 1288 RVA: 0x0006DE24 File Offset: 0x0006C024
	public void SendBeginRally(ref ushort[] LeaderID, ref uint[] TroopData)
	{
		byte[] array = new byte[74];
		int num = 0;
		byte b = 0;
		ushort num2 = 0;
		int num3 = 1;
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_BEGIN_RALLY;
		messagePacket.AddSeqId();
		messagePacket.Add(this.RallyDesPoint.zoneID);
		messagePacket.Add(this.RallyDesPoint.pointID);
		messagePacket.Add(this.RallyCountDownIndex);
		for (int i = 0; i < LeaderID.Length; i++)
		{
			if (LeaderID[i] != 0)
			{
				b += 1;
				GameConstants.GetBytes(LeaderID[i], array, num);
				num += 2;
			}
		}
		for (int j = 0; j < TroopData.Length; j++)
		{
			if (TroopData[j] != 0u)
			{
				num2 |= (ushort)(num3 << j);
				GameConstants.GetBytes(TroopData[j], array, num);
				num += 4;
			}
		}
		messagePacket.Add(b);
		messagePacket.Add(num2);
		messagePacket.Add(array, 0, num);
		messagePacket.Send(false);
	}

	// Token: 0x06000509 RID: 1289 RVA: 0x0006DF30 File Offset: 0x0006C130
	public void RecvBeginRally(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b == 0 || b == 16)
		{
			byte b2 = MP.ReadByte(-1);
			if (b2 >= 8)
			{
				return;
			}
			this.MarchEventData[(int)b2].Type = EMarchEventType.EMET_RallyStanby;
			this.MarchEventData[(int)b2].bRallyHost = 1;
			if (b == 0)
			{
				this.CancelShieldItemBuff();
			}
			this.MarchEventTime[(int)b2].BeginTime = MP.ReadLong(-1);
			this.MarchEventTime[(int)b2].RequireTime = MP.ReadUInt(-1);
			this.MarchEventData[(int)b2].Point.zoneID = MP.ReadUShort(-1);
			this.MarchEventData[(int)b2].Point.pointID = MP.ReadByte(-1);
			this.MarchEventData[(int)b2].PointKind = POINT_KIND.PK_CITY;
			this.MarchEventData[(int)b2].DesPointLevel = MP.ReadByte(-1);
			this.MarchEventData[(int)b2].DesPlayerName = MP.ReadString(13, -1);
			if (b == 16)
			{
				this.MarchEventData[(int)b2].bRallyHost = 4;
			}
			byte b3 = MP.ReadByte(-1);
			ushort num = MP.ReadUShort(-1);
			for (int i = 0; i < this.MarchEventData[(int)b2].HeroID.Length; i++)
			{
				this.MarchEventData[(int)b2].HeroID[i] = 0;
				if (i < (int)b3)
				{
					ushort num2 = MP.ReadUShort(-1);
					this.MarchEventData[(int)b2].HeroID[i] = num2;
					this.TempFightHeroID[(int)num2] = 1;
				}
			}
			for (int j = 0; j < 16; j++)
			{
				if ((num >> j & 1) == 1)
				{
					this.MarchEventData[(int)b2].TroopData[j / 4][j % 4] = MP.ReadUInt(-1);
					this.RoleAttr.m_Soldier[j] -= this.MarchEventData[(int)b2].TroopData[j / 4][j % 4];
					this.SoldierTotal -= (long)((ulong)this.MarchEventData[(int)b2].TroopData[j / 4][j % 4]);
				}
			}
			DataManager.msgBuffer[0] = 81;
			GameConstants.GetBytes((ushort)b2, DataManager.msgBuffer, 1);
			GameManager.notifyObservers(1, 0, DataManager.msgBuffer);
			this.SetFightHeroData();
			GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
			this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b2, true, this.MarchEventTime[(int)b2].BeginTime, this.MarchEventTime[(int)b2].RequireTime);
			this.CheckTroolCount();
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
			GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(4904u), 15, true);
			if (this.WarhallProtocol != 2476)
			{
				this.WarhallProtocol = 0;
			}
			this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, b2);
			this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
		}
		else
		{
			switch (b)
			{
			case 1:
				GUIManager.Instance.MsgStr.ClearString();
				GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)this.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_MARCH_NUM)), 1, false);
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3959u));
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
				break;
			case 2:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4892u), this.mStringTable.GetStringByID(4893u), this.mStringTable.GetStringByID(4894u), null, 0, 0, false, false, false, false, false);
				break;
			case 3:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4895u), this.mStringTable.GetStringByID(4896u), this.mStringTable.GetStringByID(4897u), null, 0, 0, false, false, false, false, false);
				break;
			case 4:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5729u), this.mStringTable.GetStringByID(5730u), this.mStringTable.GetStringByID(5731u), null, 0, 0, false, false, false, false, false);
				break;
			case 5:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4910u), this.mStringTable.GetStringByID(4911u), this.mStringTable.GetStringByID(4912u), null, 0, 0, false, false, false, false, false);
				break;
			case 6:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5732u), this.mStringTable.GetStringByID(5733u), this.mStringTable.GetStringByID(5734u), null, 0, 0, false, false, false, false, false);
				break;
			case 7:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5715u), this.mStringTable.GetStringByID(5716u), this.mStringTable.GetStringByID(5717u), null, 0, 0, false, false, false, false, false);
				break;
			case 8:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4898u), this.mStringTable.GetStringByID(4899u), this.mStringTable.GetStringByID(4900u), null, 0, 0, false, false, false, false, false);
				break;
			case 9:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5735u), this.mStringTable.GetStringByID(5736u), this.mStringTable.GetStringByID(5737u), null, 0, 0, false, false, false, false, false);
				break;
			case 10:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4901u), this.mStringTable.GetStringByID(4902u), this.mStringTable.GetStringByID(4903u), null, 0, 0, false, false, false, false, false);
				break;
			case 11:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(9769u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
				break;
			case 12:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(9770u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
				break;
			case 13:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826u), this.mStringTable.GetStringByID(119u), this.mStringTable.GetStringByID(4828u), null, 0, 0, false, false, false, false, false);
				break;
			case 14:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(9771u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
				break;
			case 15:
			{
				ushort yolkIDbyPointCode = DataManager.mapDataController.getYolkIDbyPointCode(this.RallyDesPoint.zoneID, this.RallyDesPoint.pointID, 0);
				GUIManager.Instance.MsgStr.ClearString();
				GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName(yolkIDbyPointCode, 0));
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8564u));
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565u), null, 0, 0, false, false, false, false, false);
				break;
			}
			}
		}
		GUIManager.Instance.HideUILock(EUILock.Expedition);
		GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_Expedition);
	}

	// Token: 0x0600050A RID: 1290 RVA: 0x0006E7A8 File Offset: 0x0006C9A8
	public void RecvJoinRally(MessagePacket MP)
	{
		GUIManager.Instance.HideUILock(EUILock.Expedition);
		byte b = MP.ReadByte(-1);
		if (b == 0 || b == 15)
		{
			byte b2 = MP.ReadByte(-1);
			if (b2 >= 8)
			{
				return;
			}
			this.MarchEventData[(int)b2].Type = EMarchEventType.EMET_RallyMarching;
			if (b == 0)
			{
				this.CancelShieldItemBuff();
			}
			this.MarchEventTime[(int)b2].BeginTime = MP.ReadLong(-1);
			this.MarchEventTime[(int)b2].RequireTime = MP.ReadUInt(-1);
			this.RallyCountDown[(int)b2].BeginTime = MP.ReadLong(-1);
			this.RallyCountDown[(int)b2].RequireTime = MP.ReadUInt(-1);
			this.MarchEventData[(int)b2].Point.zoneID = MP.ReadUShort(-1);
			this.MarchEventData[(int)b2].Point.pointID = MP.ReadByte(-1);
			this.MarchEventData[(int)b2].PointKind = POINT_KIND.PK_CITY;
			this.MarchEventData[(int)b2].DesPointLevel = MP.ReadByte(-1);
			this.MarchEventData[(int)b2].DesPlayerName = MP.ReadString(13, -1);
			if (b == 15)
			{
				this.MarchEventData[(int)b2].bRallyHost = 3;
			}
			ushort num = MP.ReadUShort(-1);
			for (int i = 0; i < 5; i++)
			{
				this.MarchEventData[(int)b2].HeroID[i] = 0;
			}
			for (int j = 0; j < 16; j++)
			{
				if ((num >> j & 1) == 1)
				{
					this.MarchEventData[(int)b2].TroopData[j / 4][j % 4] = MP.ReadUInt(-1);
					this.RoleAttr.m_Soldier[j] -= this.MarchEventData[(int)b2].TroopData[j / 4][j % 4];
					this.SoldierTotal -= (long)((ulong)this.MarchEventData[(int)b2].TroopData[j / 4][j % 4]);
				}
			}
			this.JoinedRallyDataType[(int)b2].MarchIndex = b2;
			this.JoinedRallyDataType[(int)b2].State = 1;
			this.JoinedRallyDataType[(int)b2].MarchEventTime.BeginTime = this.RallyCountDown[(int)b2].BeginTime;
			this.JoinedRallyDataType[(int)b2].MarchEventTime.RequireTime = this.RallyCountDown[(int)b2].RequireTime;
			this.JoinedRallyDataType[(int)b2].RallyPoint.zoneID = this.MarchEventData[(int)b2].Point.zoneID;
			this.JoinedRallyDataType[(int)b2].RallyPoint.pointID = this.MarchEventData[(int)b2].Point.pointID;
			if (this.WarlobbyDetail != null)
			{
				if (this.WarlobbyDetail.EventTime.BeginTime > 0L)
				{
					this.WarlobbyDetail.SelfParticipateTroopIndex = b2;
					this.WarhallProtocol = 2487;
				}
				else
				{
					this.WarhallProtocol = 0;
				}
			}
			else
			{
				this.WarhallProtocol = 0;
			}
			Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
			if (door != null)
			{
				if (door.m_eMapMode == EUIOriginMapMode.OriginMap || door.m_eMapMode == EUIOriginMapMode.WorldMap)
				{
					door.CloseMenu(false);
				}
				else
				{
					DataManager.msgBuffer[0] = 81;
					GameConstants.GetBytes((ushort)b2, DataManager.msgBuffer, 1);
					GameManager.notifyObservers(1, 0, DataManager.msgBuffer);
				}
			}
			this.SetFightHeroData();
			GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
			this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b2, true, this.MarchEventTime[(int)b2].BeginTime, this.MarchEventTime[(int)b2].RequireTime);
			this.SetQueueBarData(EQueueBarIndex.JoinedRallyBegin + (int)b2, true, this.RallyCountDown[(int)b2].BeginTime, this.RallyCountDown[(int)b2].RequireTime);
			this.CheckTroolCount();
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
			this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, b2);
			this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
		}
		else
		{
			switch (b)
			{
			case 1:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5715u), this.mStringTable.GetStringByID(5716u), this.mStringTable.GetStringByID(5717u), null, 0, 0, false, false, false, false, false);
				break;
			case 2:
				GUIManager.Instance.MsgStr.ClearString();
				GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)this.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_MARCH_NUM)), 1, false);
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3959u));
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
				break;
			case 3:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4968u), this.mStringTable.GetStringByID(9769u), this.mStringTable.GetStringByID(4970u), null, 0, 0, false, false, false, false, false);
				break;
			case 4:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5888u), this.mStringTable.GetStringByID(5889u), this.mStringTable.GetStringByID(5890u), null, 0, 0, false, false, false, false, false);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 1, 0);
				break;
			case 5:
			case 10:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5885u), this.mStringTable.GetStringByID(5886u), this.mStringTable.GetStringByID(5887u), null, 0, 0, false, false, false, false, false);
				break;
			case 6:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5748u), this.mStringTable.GetStringByID(5749u), this.mStringTable.GetStringByID(5750u), null, 0, 0, false, false, false, false, false);
				break;
			case 7:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5882u), this.mStringTable.GetStringByID(5883u), this.mStringTable.GetStringByID(5884u), null, 0, 0, false, false, false, false, false);
				break;
			case 8:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4989u), this.mStringTable.GetStringByID(4990u), this.mStringTable.GetStringByID(4991u), null, 0, 0, false, false, false, false, false);
				break;
			case 9:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5742u), this.mStringTable.GetStringByID(5743u), this.mStringTable.GetStringByID(5744u), null, 0, 0, false, false, false, false, false);
				break;
			case 11:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(9771u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
				break;
			}
		}
		GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_Expedition);
	}

	// Token: 0x0600050B RID: 1291 RVA: 0x0006EF68 File Offset: 0x0006D168
	public void RecvArrivedRallyPoint(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b >= 8)
		{
			return;
		}
		this.MarchEventData[(int)b].Type = EMarchEventType.EMET_RallyStanby;
		this.MarchEventData[(int)b].Point.zoneID = MP.ReadUShort(-1);
		this.MarchEventData[(int)b].Point.pointID = MP.ReadByte(-1);
		this.MarchEventData[(int)b].DesPointLevel = MP.ReadByte(-1);
		this.MarchEventData[(int)b].DesPlayerName = MP.ReadString(13, -1);
		this.MarchEventTime[(int)b].BeginTime = MP.ReadLong(-1);
		this.MarchEventTime[(int)b].RequireTime = MP.ReadUInt(-1);
		this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, false, 0L, 0u);
		this.CheckTroolCount();
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
		GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4974u), 13, true);
	}

	// Token: 0x0600050C RID: 1292 RVA: 0x0006F074 File Offset: 0x0006D274
	public void RecvRallyAtkMarch(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b >= 8)
		{
			return;
		}
		this.MarchEventData[(int)b].Type = EMarchEventType.EMET_RallyAttack;
		this.JoinedRallyDataType[(int)b].RallyPoint = this.MarchEventData[(int)b].Point;
		this.MarchEventData[(int)b].Point.zoneID = MP.ReadUShort(-1);
		this.MarchEventData[(int)b].Point.pointID = MP.ReadByte(-1);
		this.MarchEventData[(int)b].DesPointLevel = MP.ReadByte(-1);
		this.MarchEventData[(int)b].DesPlayerName = MP.ReadString(13, -1);
		this.MarchEventTime[(int)b].BeginTime = MP.ReadLong(-1);
		this.MarchEventTime[(int)b].RequireTime = MP.ReadUInt(-1);
		this.MarchEventData[(int)b].PointKind = POINT_KIND.PK_CITY;
		this.SetFightHeroData();
		GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
		this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, false, 0L, 0u);
		this.JoinedRallyDataType[(int)b].State = 2;
		this.SetQueueBarData(EQueueBarIndex.JoinedRallyBegin + (int)b, true, this.MarchEventTime[(int)b].BeginTime, this.MarchEventTime[(int)b].RequireTime);
		this.CheckTroolCount();
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
	}

	// Token: 0x0600050D RID: 1293 RVA: 0x0006F1E4 File Offset: 0x0006D3E4
	public void RecvJoinedRallyData(MessagePacket MP)
	{
		Array.Clear(this.JoinedRallyDataType, 0, this.JoinedRallyDataType.Length);
		byte b = MP.ReadByte(-1);
		for (int i = 0; i < (int)b; i++)
		{
			byte b2 = MP.ReadByte(-1);
			if (b2 >= 8)
			{
				return;
			}
			this.JoinedRallyDataType[(int)b2].MarchIndex = b2;
			byte state = MP.ReadByte(-1);
			this.JoinedRallyDataType[(int)b2].State = state;
			this.JoinedRallyDataType[(int)b2].MarchEventTime.BeginTime = MP.ReadLong(-1);
			this.JoinedRallyDataType[(int)b2].MarchEventTime.RequireTime = MP.ReadUInt(-1);
			this.JoinedRallyDataType[(int)b2].RallyPoint.zoneID = MP.ReadUShort(-1);
			this.JoinedRallyDataType[(int)b2].RallyPoint.pointID = MP.ReadByte(-1);
			this.SetQueueBarData(EQueueBarIndex.JoinedRallyBegin + (int)this.JoinedRallyDataType[(int)b2].MarchIndex, true, this.JoinedRallyDataType[(int)b2].MarchEventTime.BeginTime, this.JoinedRallyDataType[(int)b2].MarchEventTime.RequireTime);
			DataManager.Instance.SetRecvQueueBarData((int)(22 + this.JoinedRallyDataType[(int)b2].MarchIndex));
		}
		this.CheckTroolCount();
	}

	// Token: 0x0600050E RID: 1294 RVA: 0x0006F340 File Offset: 0x0006D540
	public void RecvWarBegin(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b == 0)
		{
			GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(4904u), 15, true);
		}
		else if (b == 1)
		{
			string tmpS = MP.ReadString(13, -1);
			GUIManager.Instance.MsgStr.ClearString();
			GUIManager.Instance.MsgStr.StringToFormat(tmpS);
			GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(4905u));
			GUIManager.Instance.AddHUDMessage(GUIManager.Instance.MsgStr.ToString(), 15, true);
		}
	}

	// Token: 0x0600050F RID: 1295 RVA: 0x0006F3F0 File Offset: 0x0006D5F0
	public void RecvRefreshResources(MessagePacket MP)
	{
		for (int i = 0; i < 5; i++)
		{
			this.Resource[i].Stock = MP.ReadUInt(-1);
		}
		GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
	}

	// Token: 0x06000510 RID: 1296 RVA: 0x0006F42C File Offset: 0x0006D62C
	public void ShowLordProfile(string name)
	{
		if (this.mLordName == null)
		{
			this.mLordName = StringManager.Instance.SpawnString(30);
		}
		this.mLordName.ClearString();
		this.mLordName.Append(name);
		Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
		door.OpenMenu(EGUIWindow.UI_LordInfo, 2, 0, true);
	}

	// Token: 0x06000511 RID: 1297 RVA: 0x0006F48C File Offset: 0x0006D68C
	public void RecvLordProfile(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b < 1)
		{
			if (this.mLordProfile.AllianceTag == null)
			{
				this.mLordProfile.AllianceTag = StringManager.Instance.SpawnString(30);
			}
			if (this.mLordProfile.PlayerName == null)
			{
				this.mLordProfile.PlayerName = StringManager.Instance.SpawnString(30);
			}
			if (this.mLordProfile.Equips == null)
			{
				this.mLordProfile.Equips = new PlayerProfileEquip[8];
			}
			this.mLordProfile.AllianceTag.ClearString();
			this.mLordProfile.PlayerName.ClearString();
			this.mLordProfile.PlayerName.Append(this.mLordName);
			this.mLordProfile.Head = MP.ReadUShort(-1);
			MP.ReadStringPlus(3, this.mLordProfile.AllianceTag, -1);
			this.mLordProfile.KindomID = MP.ReadUShort(-1);
			this.mLordProfile.AlliID = MP.ReadUInt(-1);
			this.mLordProfile.AlliRank = MP.ReadByte(-1);
			this.mLordProfile.Kills = MP.ReadULong(-1);
			this.mLordProfile.Power = MP.ReadULong(-1);
			this.mLordProfile.VipPoint = MP.ReadUInt(-1);
			this.mLordProfile.Level = MP.ReadByte(-1);
			this.mLordProfile.Enhance = MP.ReadByte(-1);
			this.mLordProfile.Star = MP.ReadByte(-1);
			for (int i = 0; i < 8; i++)
			{
				this.mLordProfile.Equips[i].ItemID = MP.ReadUShort(-1);
				this.mLordProfile.Equips[i].color = MP.ReadByte(-1);
			}
			this.mLordProfile.Title = MP.ReadUShort(-1);
			this.mLordProfile.WorldTitle = MP.ReadUShort(-1);
			this.mLordProfile.TotalCastleStar = MP.ReadUShort(-1);
			this.mLordProfile.NobilityTitle = MP.ReadUShort(-1);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_LordInfo, 2, 1);
		}
		else
		{
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(154u), 255, true);
			GUIWindow guiwindow = GUIManager.Instance.FindMenu(EGUIWindow.UI_LordInfo);
			if (guiwindow != null)
			{
				guiwindow = GUIManager.Instance.FindMenu(EGUIWindow.Door);
				Door door = (Door)guiwindow;
				door.CloseMenu(false);
			}
			GUIManager.Instance.HideUILock(EUILock.LordInfo);
		}
	}

	// Token: 0x06000512 RID: 1298 RVA: 0x0006F71C File Offset: 0x0006D91C
	public void RecvLordStatistic(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b < 1)
		{
			this.mLordStat.BattleWin_Attack = MP.ReadUInt(-1);
			this.mLordStat.BattleLose_Attack = MP.ReadUInt(-1);
			this.mLordStat.BattleWin_Defense = MP.ReadUInt(-1);
			this.mLordStat.BattleLose_Defense = MP.ReadUInt(-1);
			this.mLordStat.KillSoldiers = MP.ReadLong(-1);
			this.mLordStat.KillTraps = MP.ReadLong(-1);
			this.mLordStat.LoseSoldiers = MP.ReadLong(-1);
			this.mLordStat.LoseTraps = MP.ReadLong(-1);
			MP.ReadUInt(-1);
			MP.ReadUInt(-1);
			this.mLordStat.SiteBeDestroyed = MP.ReadUInt(-1);
			this.mLordStat.DestroySite = MP.ReadUInt(-1);
			MP.ReadUInt(-1);
			MP.ReadUInt(-1);
			this.mLordStat.CaptiveLords = MP.ReadUInt(-1);
			this.mLordStat.KillLords = MP.ReadUInt(-1);
			this.mLordStat.LordBeCaptive = MP.ReadUInt(-1);
			this.mLordStat.LordBeKilled = MP.ReadUInt(-1);
			this.mLordStat.LordBeEscaped = MP.ReadUInt(-1);
			this.mLordStat.LordEscape = MP.ReadUInt(-1);
			MP.ReadUInt(-1);
			MP.ReadUInt(-1);
			MP.ReadUInt(-1);
			MP.ReadUInt(-1);
			MP.ReadUInt(-1);
			MP.ReadUInt(-1);
			MP.ReadUInt(-1);
			this.mLordStat.HelpAlliance_TurboCount = MP.ReadUInt(-1);
			this.mLordStat.GatherCount = MP.ReadLong(-1);
			this.mLordStat.ArenaRank = MP.ReadUInt(-1);
			this.mLordStat.ArenaHistoryRank = MP.ReadUInt(-1);
			this.mLordStat.ArenaWins = MP.ReadUInt(-1);
			this.mLordStat.DamageEnemiesPowerCount = MP.ReadULong(-1);
			this.mLordStat.SoldierBeHurtCount = MP.ReadLong(-1);
			this.mLordStat.HurtSoldierCount = MP.ReadLong(-1);
			this.mLordStat.SaveLordRewordCount = MP.ReadLong(-1);
			this.mLordStat.HelpAlliance_FoodCount = MP.ReadLong(-1);
			this.mLordStat.HelpAlliance_WoodCount = MP.ReadLong(-1);
			this.mLordStat.HelpAlliance_RockCount = MP.ReadLong(-1);
			this.mLordStat.HelpAlliance_OreCount = MP.ReadLong(-1);
			this.mLordStat.HelpAlliance_SilverCount = MP.ReadLong(-1);
			this.mLordStat.HelpAlliance_GoldCount = MP.ReadLong(-1);
			this.mLordStat.PetSkillUsed = MP.ReadUInt(-1);
			this.mLordStat.PetSkillBeenUsed = MP.ReadUInt(-1);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_LordInfo, 3, 0);
		}
	}

	// Token: 0x06000513 RID: 1299 RVA: 0x0006F9F0 File Offset: 0x0006DBF0
	public unsafe void SetScoutData(byte ScoutLevel, byte[] ScoutContent, ushort ScoutContentLen, byte bKind = 0)
	{
		int num = 0;
		Array.Clear(this.ScoutResource, 0, this.ScoutResource.Length);
		Array.Clear(this.ReinforceInfo, 0, this.ReinforceInfo.Length);
		if (ScoutLevel >= 1)
		{
			if (bKind == 0 || bKind == 3)
			{
				for (int i = 0; i < 4; i++)
				{
					this.ScoutResource[i] = GameConstants.ConvertBytesToUInt(ScoutContent, num);
					num += 4;
				}
			}
			this.DefenseNum = GameConstants.ConvertBytesToUInt(ScoutContent, num);
			num += 4;
		}
		if (ScoutLevel >= 2)
		{
			if (bKind == 0 || bKind == 3)
			{
				this.ScoutResource[4] = GameConstants.ConvertBytesToUInt(ScoutContent, num);
				num += 4;
				this.TrapsNum = GameConstants.ConvertBytesToUInt(ScoutContent, num);
				num += 4;
			}
			this.TroopsFlag = GameConstants.ConvertBytesToUShort(ScoutContent, num);
			num += 2;
		}
		if (ScoutLevel >= 3 && bKind != 1)
		{
			this.ReinforceNum = GameConstants.ConvertBytesToUInt(ScoutContent, num);
			num += 4;
		}
		if (ScoutLevel >= 4)
		{
			if (bKind == 0 || bKind == 3)
			{
				Array.Clear(this.TrapsInfo, 0, this.TrapsInfo.Length);
				this.TrapsFlag = GameConstants.ConvertBytesToUShort(ScoutContent, num);
				num += 2;
				this.ReinforceFlag = GameConstants.ConvertBytesToUShort(ScoutContent, num);
				num += 2;
				for (int j = 0; j < 12; j++)
				{
					if ((this.TrapsFlag >> j & 1) == 1)
					{
						this.TrapsInfo[j] = GameConstants.ConvertBytesToUInt(ScoutContent, num);
						num += 4;
					}
				}
			}
			if (bKind == 2)
			{
				this.ReinforceFlag = GameConstants.ConvertBytesToUShort(ScoutContent, num);
				num += 2;
			}
		}
		if (ScoutLevel >= 5)
		{
			Array.Clear(this.TroopsInfo, 0, this.TroopsInfo.Length);
			this.MainHero = GameConstants.ConvertBytesToUShort(ScoutContent, num);
			num += 2;
			this.MainHeroHome = ScoutContent[num];
			num++;
			for (int k = 0; k < 16; k++)
			{
				if ((this.TroopsFlag >> k & 1) == 1)
				{
					this.TroopsInfo[k] = GameConstants.ConvertBytesToUInt(ScoutContent, num);
					num += 4;
				}
			}
		}
		if (ScoutLevel >= 6)
		{
			if (bKind == 0 || bKind == 3)
			{
				this.WallStatus = ScoutContent[num];
				num++;
			}
			if (bKind != 1)
			{
				for (int l = 0; l < 16; l++)
				{
					if ((this.ReinforceFlag >> l & 1) == 1)
					{
						this.ReinforceInfo[l] = GameConstants.ConvertBytesToUInt(ScoutContent, num);
						num += 4;
					}
				}
			}
		}
		if (ScoutLevel >= 7)
		{
			if (bKind == 0 || bKind == 3)
			{
				this.MusterNum = GameConstants.ConvertBytesToUInt(ScoutContent, num);
				num += 4;
				this.MusterFlag = GameConstants.ConvertBytesToUShort(ScoutContent, num);
				num += 2;
				for (int m = 0; m < 16; m++)
				{
					if ((this.MusterFlag >> m & 1) == 1)
					{
						this.MusterInfo[m] = GameConstants.ConvertBytesToUInt(ScoutContent, num);
						num += 4;
					}
				}
			}
			if (bKind != 1)
			{
				this.ReinforcePlayerCount = ScoutContent[num];
				num++;
				int num2 = 0;
				while (num2 < (int)this.ReinforcePlayerCount && num2 < this.ReinforcePlayerName.Length)
				{
					this.ReinforcePlayerName[num2].Length = 0;
					fixed (string text = this.ReinforcePlayerName[num2].ToString())
					{
						fixed (char* ptr = text + RuntimeHelpers.OffsetToStringData / 2)
						{
							fixed (byte* bytes = &ScoutContent[num])
							{
								int charCount = Encoding.UTF8.GetCharCount(ScoutContent, num, 13);
								if (charCount <= this.ReinforcePlayerName[num2].MaxLength)
								{
									Encoding.UTF8.GetChars(bytes, 13, ptr, charCount);
									this.ReinforcePlayerName[num2].Length = charCount;
									ptr[charCount] = '\0';
								}
							}
							text = null;
							num += 13;
							num2++;
						}
					}
				}
			}
		}
		if (ScoutLevel >= 8)
		{
			Array.Clear(this.DefenseHero, 0, this.DefenseHero.Length);
			if (bKind == 0 || bKind == 3)
			{
				this.MainHeroInfo.HeroID = GameConstants.ConvertBytesToUShort(ScoutContent, num);
				num += 2;
				this.MainHeroInfo.Rank = ScoutContent[num];
				num++;
				this.MainHeroInfo.Star = ScoutContent[num];
				num++;
			}
			this.DefenseHeroCount = ScoutContent[num];
			num++;
			int num3 = 0;
			while (num3 < (int)this.DefenseHeroCount && num3 < this.DefenseHero.Length)
			{
				this.DefenseHero[num3].HeroID = GameConstants.ConvertBytesToUShort(ScoutContent, num);
				num += 2;
				this.DefenseHero[num3].Rank = ScoutContent[num];
				num++;
				this.DefenseHero[num3].Star = ScoutContent[num];
				num++;
				num3++;
			}
		}
		if (ScoutLevel >= 9 && (bKind == 0 || bKind == 3))
		{
			Array.Clear(this.BuildInfo, 0, this.BuildInfo.Length);
			this.BuildingCount = ScoutContent[num];
			num++;
			int num4 = 0;
			while (num4 < (int)this.BuildingCount && num4 < this.BuildInfo.Length)
			{
				this.BuildInfo[num4].BuildID = GameConstants.ConvertBytesToUShort(ScoutContent, num);
				num += 2;
				this.BuildInfo[num4].Lv = ScoutContent[num];
				num++;
				num4++;
			}
		}
		if (ScoutLevel >= 10)
		{
			if (bKind == 0 || bKind == 3)
			{
				Array.Clear(this.H_TroopsInfo, 0, this.H_TroopsInfo.Length);
				Array.Clear(this.H_TrapsInfo, 0, this.H_TrapsInfo.Length);
				Array.Clear(this.Strengthen_Info, 0, this.Strengthen_Info.Length);
				this.H_TrapsNum = 0u;
				this.H_TroopsNum = 0u;
				this.WallValue = GameConstants.ConvertBytesToUInt(ScoutContent, num);
				num += 4;
				this.WallMaxValue = GameConstants.ConvertBytesToUInt(ScoutContent, num);
				num += 4;
				this.H_TroopsFlag = GameConstants.ConvertBytesToUShort(ScoutContent, num);
				num += 2;
				for (int n = 0; n < 16; n++)
				{
					if ((this.H_TroopsFlag >> n & 1) == 1)
					{
						this.H_TroopsInfo[n] = GameConstants.ConvertBytesToUInt(ScoutContent, num);
						num += 4;
						this.H_TroopsNum += this.H_TroopsInfo[n];
					}
				}
				this.H_TrapsFlag = GameConstants.ConvertBytesToUShort(ScoutContent, num);
				num += 2;
				for (int num5 = 0; num5 < 12; num5++)
				{
					if ((this.H_TrapsFlag >> num5 & 1) == 1)
					{
						this.H_TrapsInfo[num5] = GameConstants.ConvertBytesToUInt(ScoutContent, num);
						num += 4;
						this.H_TrapsNum += this.H_TrapsInfo[num5];
					}
				}
			}
			if (bKind != 1)
			{
				this.StrengthenCount = ScoutContent[num];
				num++;
				int num6 = 0;
				while (num6 < (int)this.StrengthenCount && num6 < 14)
				{
					this.Strengthen_Info[num6].ItemID = GameConstants.ConvertBytesToUShort(ScoutContent, num);
					num += 2;
					this.Strengthen_Info[num6].Time = GameConstants.ConvertBytesToUInt(ScoutContent, num);
					num += 4;
					num6++;
				}
			}
		}
		if (bKind == 3)
		{
			return;
		}
		if (ScoutLevel >= 2 && bKind == 0)
		{
			if (num >= (int)ScoutContentLen)
			{
				return;
			}
			if (ScoutContent[num] == 0)
			{
				this.bCaveMainHero = false;
			}
			else
			{
				this.bCaveMainHero = true;
			}
			num++;
			this.CaveNum = GameConstants.ConvertBytesToUInt(ScoutContent, num);
			num += 4;
			this.CaveFlag = GameConstants.ConvertBytesToUShort(ScoutContent, num);
			num += 2;
			if (ScoutLevel >= 5)
			{
				for (int num7 = 0; num7 < 16; num7++)
				{
					if ((this.CaveFlag >> num7 & 1) == 1)
					{
						this.CaveInfo[num7] = GameConstants.ConvertBytesToUInt(ScoutContent, num);
						num += 4;
					}
				}
			}
		}
		if (ScoutLevel >= 3 && bKind == 0)
		{
			this.CantonmentMainHero = 0;
			if (num >= (int)ScoutContentLen)
			{
				return;
			}
			this.CantonmentNum = GameConstants.ConvertBytesToUInt(ScoutContent, num);
			num += 4;
			if (ScoutLevel >= 4)
			{
				this.CantonmentFlag = GameConstants.ConvertBytesToUShort(ScoutContent, num);
				num += 2;
			}
			if (ScoutLevel >= 6)
			{
				for (int num8 = 0; num8 < 16; num8++)
				{
					if ((this.CantonmentFlag >> num8 & 1) == 1)
					{
						this.CantonmentInfo[num8] = GameConstants.ConvertBytesToUInt(ScoutContent, num);
						num += 4;
					}
				}
			}
			if (ScoutLevel >= 7)
			{
				this.CantonmentPlayerName.Length = 0;
				fixed (string text2 = this.CantonmentPlayerName.ToString())
				{
					fixed (char* ptr2 = text2 + RuntimeHelpers.OffsetToStringData / 2)
					{
						fixed (byte* bytes2 = &ScoutContent[num])
						{
							int charCount2 = Encoding.UTF8.GetCharCount(ScoutContent, num, 13);
							if (charCount2 <= this.CantonmentPlayerName.MaxLength)
							{
								Encoding.UTF8.GetChars(bytes2, 13, ptr2, charCount2);
								this.CantonmentPlayerName.Length = charCount2;
								ptr2[charCount2] = '\0';
							}
						}
						text2 = null;
						num += 13;
					}
				}
			}
			if (ScoutLevel >= 8)
			{
				this.CantonmentMainHero = GameConstants.ConvertBytesToUShort(ScoutContent, num);
				num += 2;
				this.CantonmentHeroCount = ScoutContent[num];
				num++;
				int num9 = 0;
				while (num9 < (int)this.CantonmentHeroCount && num9 < this.CantonmentHero.Length)
				{
					this.CantonmentHero[num9].HeroID = GameConstants.ConvertBytesToUShort(ScoutContent, num);
					num += 2;
					this.CantonmentHero[num9].Rank = ScoutContent[num];
					num++;
					this.CantonmentHero[num9].Star = ScoutContent[num];
					num++;
					num9++;
				}
			}
		}
		if (ScoutLevel >= 9 && (bKind == 0 || bKind == 3))
		{
			byte b = ScoutContent[num];
			byte buildingCount = this.BuildingCount;
			this.BuildingCount += b;
			num++;
			int num10 = (int)buildingCount;
			while (num10 < (int)this.BuildingCount && num10 < this.BuildInfo.Length)
			{
				this.BuildInfo[num10].BuildID = GameConstants.ConvertBytesToUShort(ScoutContent, num);
				num += 2;
				this.BuildInfo[num10].Lv = ScoutContent[num];
				num++;
				num10++;
			}
		}
	}

	// Token: 0x06000514 RID: 1300 RVA: 0x000703D8 File Offset: 0x0006E5D8
	public void SendAllyPoint(string name)
	{
		if (GUIManager.Instance.ShowUILock(EUILock.AllyPoint))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_ALLYPOINT;
			messagePacket.AddSeqId();
			messagePacket.Add(name, 13);
			messagePacket.Send(false);
		}
	}

	// Token: 0x06000515 RID: 1301 RVA: 0x00070424 File Offset: 0x0006E624
	public void RecvAllyPoint(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b == 0)
		{
			this.AllyMemberLoc.zoneID = MP.ReadUShort(-1);
			this.AllyMemberLoc.pointID = MP.ReadByte(-1);
			if (DataManager.MapDataController.CheckLenght(GameConstants.getTileMapPosbyPointCode(this.AllyMemberLoc.zoneID, this.AllyMemberLoc.pointID)) == 0f)
			{
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4829u), this.mStringTable.GetStringByID(119u), null, null, 0, 0, false, false, false, false, false);
				GUIManager.Instance.HideUILock(EUILock.AllyPoint);
				return;
			}
			Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
			if (UILordInfo.OpenTransport)
			{
				door.OpenMenu(EGUIWindow.UI_Market_Help, 3, this.AllyMemberIdx, false);
				UILordInfo.OpenTransport = false;
			}
			else if (door && this.AllyMemberIdx >= 0 && this.AllyMemberIdx < this.AllianceMember.Length)
			{
				door.OpenMenu(EGUIWindow.UI_Market_Help, 2, this.AllyMemberIdx, false);
			}
		}
		else if (b == 1)
		{
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4032u), this.mStringTable.GetStringByID(3957u), this.mStringTable.GetStringByID(4033u), null, 0, 0, false, false, false, false, false);
		}
		else if (b == 4)
		{
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826u), this.mStringTable.GetStringByID(3957u), this.mStringTable.GetStringByID(4828u), null, 0, 0, false, false, false, false, false);
		}
		GUIManager.Instance.HideUILock(EUILock.AllyPoint);
	}

	// Token: 0x06000516 RID: 1302 RVA: 0x000705EC File Offset: 0x0006E7EC
	public void SendResPointLv(PointCode point)
	{
		if (GUIManager.Instance.ShowUILock(EUILock.ResPointOwnerLv))
		{
			MessagePacket messagePacket = new MessagePacket(1024);
			messagePacket.Protocol = Protocol._MSG_REQUEST_RESPOINT_OWNER_LV;
			messagePacket.AddSeqId();
			messagePacket.Add(point.zoneID);
			messagePacket.Add(point.pointID);
			messagePacket.Send(false);
		}
	}

	// Token: 0x06000517 RID: 1303 RVA: 0x00070648 File Offset: 0x0006E848
	public void RecvResPointOwnerLv(MessagePacket MP)
	{
		if (MP.ReadByte(-1) == 0)
		{
			byte lv = MP.ReadByte(-1);
			Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
			if (door)
			{
				door.m_GroundInfo.OpenDetectPanel(true, lv, false);
			}
		}
		GUIManager.Instance.HideUILock(EUILock.ResPointOwnerLv);
	}

	// Token: 0x06000518 RID: 1304 RVA: 0x000706A4 File Offset: 0x0006E8A4
	public void InitAltarTime()
	{
		this.m_AltarEffect.BeginTime = 0L;
		this.m_AltarEffect.RequireTime = 0u;
	}

	// Token: 0x06000519 RID: 1305 RVA: 0x000706C0 File Offset: 0x0006E8C0
	public void RecvAltarBuffTime(MessagePacket MP)
	{
		this.m_AltarEffect.BeginTime = MP.ReadLong(-1);
		this.m_AltarEffect.RequireTime = MP.ReadUInt(-1);
		this.AttribVal.UpdateAttrVal(UpdateAttrKind.Build);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Altar, 0, 0);
	}

	// Token: 0x0600051A RID: 1306 RVA: 0x0007070C File Offset: 0x0006E90C
	public void RecvAltarBuffClose()
	{
		this.m_AltarEffect.BeginTime = 0L;
		this.m_AltarEffect.RequireTime = 0u;
		this.AttribVal.UpdateAttrVal(UpdateAttrKind.Build);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Altar, 0, 0);
	}

	// Token: 0x0600051B RID: 1307 RVA: 0x00070744 File Offset: 0x0006E944
	public byte GetVIPLevel(uint vipPoint)
	{
		VIP_DataTbl recordByIndex = this.VIPLevelTable.GetRecordByIndex(0);
		this.UpdateFreeCompleteTime();
		for (int i = 0; i < this.VIPLevelTable.TableCount; i++)
		{
			recordByIndex = this.VIPLevelTable.GetRecordByIndex(i);
			if (vipPoint < recordByIndex.VIPPoint)
			{
				return (byte)recordByIndex.VIPLevel;
			}
		}
		return (byte)recordByIndex.VIPLevel;
	}

	// Token: 0x0600051C RID: 1308 RVA: 0x000707AC File Offset: 0x0006E9AC
	public WarlobbyData GetWarlobbyDataObj()
	{
		WarlobbyData warlobbyData = null;
		if (this.WarlobbyDataCountIdx == this.WarlobbyDataPool.Count)
		{
			int count = this.WarlobbyDataPool.Count;
			for (byte b = 0; b < 10; b += 1)
			{
				count = this.WarlobbyDataPool.Count;
				this.WarlobbyDataPool.Insert(count, new WarlobbyData(count));
			}
		}
		int warlobbyDataCountIdx = this.WarlobbyDataCountIdx;
		for (int i = 0; i < this.WarlobbyDataPool.Count; i++)
		{
			int index = (i + warlobbyDataCountIdx) % this.WarlobbyDataPool.Count;
			warlobbyData = this.WarlobbyDataPool[index];
			if (warlobbyData != null)
			{
				this.WarlobbyDataPool[index] = null;
				break;
			}
		}
		this.WarlobbyDataCountIdx++;
		warlobbyData.Empty();
		return warlobbyData;
	}

	// Token: 0x0600051D RID: 1309 RVA: 0x00070884 File Offset: 0x0006EA84
	public void ReleaseWarlobbyDataObj(WarlobbyData Data)
	{
		if (Data == null || this.WarlobbyDataCountIdx == 0)
		{
			return;
		}
		this.WarlobbyDataCountIdx--;
		this.WarlobbyDataPool[(int)Data.ListIndex] = Data;
	}

	// Token: 0x0600051E RID: 1310 RVA: 0x000708C4 File Offset: 0x0006EAC4
	public WarlobbyTroop GetWarlobbyTroopDataObj()
	{
		WarlobbyTroop warlobbyTroop = null;
		if (this.WarlobbyTroopDataCountIdx == this.WarlobbyTroopDataPool.Count)
		{
			int count = this.WarlobbyTroopDataPool.Count;
			for (byte b = 0; b < 10; b += 1)
			{
				count = this.WarlobbyTroopDataPool.Count;
				this.WarlobbyTroopDataPool.Insert(count, new WarlobbyTroop(count));
			}
		}
		int warlobbyTroopDataCountIdx = this.WarlobbyTroopDataCountIdx;
		for (int i = 0; i < this.WarlobbyTroopDataPool.Count; i++)
		{
			int index = (i + warlobbyTroopDataCountIdx) % this.WarlobbyTroopDataPool.Count;
			warlobbyTroop = this.WarlobbyTroopDataPool[index];
			if (warlobbyTroop != null)
			{
				this.WarlobbyTroopDataPool[index] = null;
				break;
			}
		}
		this.WarlobbyTroopDataCountIdx++;
		warlobbyTroop.Empty();
		return warlobbyTroop;
	}

	// Token: 0x0600051F RID: 1311 RVA: 0x0007099C File Offset: 0x0006EB9C
	public void ReleaseWarlobbyTroopDataObj(WarlobbyTroop Data)
	{
		if (Data == null || this.WarlobbyTroopDataCountIdx == 0)
		{
			return;
		}
		this.WarlobbyTroopDataCountIdx--;
		this.WarlobbyTroopDataPool[(int)Data.ListIndex] = Data;
	}

	// Token: 0x06000520 RID: 1312 RVA: 0x000709DC File Offset: 0x0006EBDC
	public void RecvWallDataNum(MessagePacket MP)
	{
		this.ActiveRallyRecNum = MP.ReadUInt(-1);
		this.BeingRallyRecNum = MP.ReadUInt(-1);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_WarLobby, 0, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 4, 0);
	}

	// Token: 0x06000521 RID: 1313 RVA: 0x00070A30 File Offset: 0x0006EC30
	private void sendMarshalList()
	{
		this.EmptyWarHall(false);
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.AddSeqId();
		messagePacket.Protocol = Protocol._MSG_REQUEST_WARHALL_LIST;
		messagePacket.Send(false);
	}

	// Token: 0x06000522 RID: 1314 RVA: 0x00070A68 File Offset: 0x0006EC68
	public void RecvWallHallData(MessagePacket MP)
	{
		this.WarhallProtocol = 2476;
		byte b = MP.ReadByte(-1);
		uint num = MP.ReadUInt(-1);
		bool flag = true;
		if ((int)b >= this.WarHall.Length)
		{
			return;
		}
		if (this.WarHall[(int)b] == null)
		{
			this.WarHall[(int)b] = new List<WarlobbyData>();
		}
		WarlobbyData warlobbyData;
		if ((ulong)num < (ulong)((long)this.WarHall[(int)b].Count))
		{
			if (this.WarHall[(int)b][(int)num] != null)
			{
				warlobbyData = this.WarHall[(int)b][(int)num];
			}
			else
			{
				warlobbyData = this.GetWarlobbyDataObj();
				this.WarHall[(int)b][(int)num] = warlobbyData;
			}
			flag = false;
		}
		else
		{
			int num2 = (int)((ulong)num - (ulong)((long)this.WarHall[(int)b].Count) + 1UL);
			for (int i = 0; i < num2; i++)
			{
				this.WarHall[(int)b].Add(this.GetWarlobbyDataObj());
			}
			warlobbyData = this.WarHall[(int)b][(int)num];
		}
		warlobbyData.PositionInfo = 0;
		warlobbyData.Init(MP);
		warlobbyData.AllyHomeKingdom = MP.ReadUShort(-1);
		if (warlobbyData.AllyNameID == this.RoleAttr.Name.GetHashCode(false))
		{
			this.Sponsor = (ushort)(num + 1u);
		}
		if (flag)
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 4, 0);
		}
		else
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 4, (int)num);
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_WarLobby, 0, 0);
		GameManager.OnRefresh(NetworkNews.Refresh_QBarTime, null);
	}

	// Token: 0x06000523 RID: 1315 RVA: 0x00070BE4 File Offset: 0x0006EDE4
	public void RecvWallHallDel(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		uint num = MP.ReadUInt(-1);
		if ((int)b >= this.WarHall.Length || this.WarHall[(int)b] == null)
		{
			return;
		}
		if ((ulong)num < (ulong)((long)this.WarHall[(int)b].Count))
		{
			this.ReleaseWarlobbyDataObj(this.WarHall[(int)b][(int)num]);
			this.WarHall[(int)b].RemoveAt((int)num);
		}
		if (b == 0 && this.Sponsor > 0 && (long)(this.Sponsor - 1) >= (long)((ulong)num))
		{
			if ((long)(this.Sponsor - 1) == (long)((ulong)num))
			{
				this.Sponsor = 0;
			}
			else
			{
				this.Sponsor -= 1;
			}
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_WarLobby, 0, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 4, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, 2, 100);
	}

	// Token: 0x06000524 RID: 1316 RVA: 0x00070CCC File Offset: 0x0006EECC
	public void RecvWallHallDetail(MessagePacket MP)
	{
		if (this.WarlobbyDetail == null)
		{
			this.WarlobbyDetail = this.GetWarlobbyDataObj();
		}
		this.WarlobbyDetail.PositionInfo = 1;
		this.WarlobbyDetail.Init(MP);
		this.WarlobbyDetail.ListDetailRecNum = MP.ReadByte(-1);
		this.WarlobbyDetail.SelfParticipateTroopIndex = MP.ReadByte(-1);
		this.WarlobbyDetail.AllyHomeKingdom = MP.ReadUShort(-1);
		if ((int)this.WarlobbyDetail.ListDetailRecNum < this.WarTroop.Count)
		{
			int num = this.WarTroop.Count - (int)this.WarlobbyDetail.ListDetailRecNum;
			for (int i = 0; i < num; i++)
			{
				this.ReleaseWarlobbyTroopDataObj(this.WarTroop[(int)this.WarlobbyDetail.ListDetailRecNum + i]);
				this.WarTroop[(int)this.WarlobbyDetail.ListDetailRecNum + i] = null;
			}
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0, 0);
		GameManager.OnRefresh(NetworkNews.Refresh_QBarTime, null);
	}

	// Token: 0x06000525 RID: 1317 RVA: 0x00070DD0 File Offset: 0x0006EFD0
	public void RecvWallHallDetailClose(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		GUIManager guimanager = GUIManager.Instance;
		if (guimanager.FindMenu(EGUIWindow.UI_Rally) != null)
		{
			guimanager.MsgStr.ClearString();
			CString cstring = StringManager.Instance.StaticString1024();
			cstring.Append(this.WarlobbyDetail.AllyName);
			if (this.WarlobbyDetail.WonderID != 255)
			{
				guimanager.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort)this.WarlobbyDetail.WonderID, 0));
			}
			else if (this.WarlobbyDetail.AttackOrDefense == 0)
			{
				guimanager.MsgStr.StringToFormat(this.WarlobbyDetail.EnemyName);
			}
			else
			{
				guimanager.MsgStr.StringToFormat(cstring);
			}
			switch (b)
			{
			case 0:
				guimanager.MsgStr.AppendFormat(this.mStringTable.GetStringByID(4980u));
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4979u), guimanager.MsgStr.ToString(), this.mStringTable.GetStringByID(4981u), null, 0, 0, false, false, false, false, false);
				if (this.WarlobbyDetail.Kind == 0 && this.WarlobbyDetail.AllyNameID == this.RoleAttr.Name.GetHashCode(false))
				{
					GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4061u), 14, true);
				}
				break;
			case 1:
				guimanager.MsgStr.AppendFormat(this.mStringTable.GetStringByID(4987u));
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4986u), guimanager.MsgStr.ToString(), this.mStringTable.GetStringByID(4988u), null, 0, 0, false, false, false, false, false);
				break;
			case 2:
				guimanager.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8575u));
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563u), guimanager.MsgStr.ToString(), this.mStringTable.GetStringByID(8565u), null, 0, 0, false, false, false, false, false);
				break;
			case 3:
				guimanager.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8573u));
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563u), guimanager.MsgStr.ToString(), this.mStringTable.GetStringByID(8565u), null, 0, 0, false, false, false, false, false);
				break;
			case 4:
				guimanager.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8598u));
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563u), guimanager.MsgStr.ToString(), this.mStringTable.GetStringByID(8565u), null, 0, 0, false, false, false, false, false);
				break;
			default:
				guimanager.MsgStr.AppendFormat("{0}");
				break;
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 1, 0);
		}
		else if (b == 0)
		{
			this.DelRallyUIStack();
			if (this.WarlobbyDetail != null && this.WarlobbyDetail.Kind == 0 && this.WarlobbyDetail.AllyNameID == this.RoleAttr.Name.GetHashCode(false))
			{
				GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4061u), 14, true);
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, -1, 100);
		}
		else
		{
			this.DelRallyUIStack();
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, -1, 100);
		}
		this.EmptyRallyDetail();
	}

	// Token: 0x06000526 RID: 1318 RVA: 0x00071198 File Offset: 0x0006F398
	public void RecvWallHallTroop(MessagePacket MP)
	{
		uint num = MP.ReadUInt(-1);
		WarlobbyTroop warlobbyTroop;
		if ((ulong)num < (ulong)((long)this.WarTroop.Count))
		{
			if (this.WarTroop[(int)num] != null)
			{
				warlobbyTroop = this.WarTroop[(int)num];
			}
			else
			{
				warlobbyTroop = this.GetWarlobbyTroopDataObj();
				this.WarTroop[(int)num] = warlobbyTroop;
			}
		}
		else
		{
			int num2 = (int)((ulong)num - (ulong)((long)this.WarTroop.Count) + 1UL);
			for (int i = 0; i < num2; i++)
			{
				this.WarTroop.Add(this.GetWarlobbyTroopDataObj());
			}
			warlobbyTroop = this.WarTroop[(int)num];
		}
		warlobbyTroop.Init(MP);
		this.WarTroopStatistic.UpdateTroop();
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, 2, 100);
		if (num == 0u)
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Expedition, 5, 0);
		}
	}

	// Token: 0x06000527 RID: 1319 RVA: 0x00071284 File Offset: 0x0006F484
	public void RecvWallHallTroopDel(MessagePacket MP)
	{
		uint num = MP.ReadUInt(-1);
		if ((ulong)num < (ulong)((long)this.WarTroop.Count))
		{
			WarlobbyTroop.DelIndex = (byte)num;
			this.WarTroopStatistic.UpdateTroop();
			this.ReleaseWarlobbyTroopDataObj(this.WarTroop[(int)num]);
			this.WarTroop.RemoveAt((int)num);
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, 2, 100);
	}

	// Token: 0x06000528 RID: 1320 RVA: 0x000712FC File Offset: 0x0006F4FC
	public void sendCancelRally()
	{
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_CANCEL_RALLY;
		messagePacket.AddSeqId();
		messagePacket.Send(false);
	}

	// Token: 0x06000529 RID: 1321 RVA: 0x00071330 File Offset: 0x0006F530
	public void RecvCancelRally(MessagePacket MP)
	{
		if (MP.ReadByte(-1) == 0)
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 1, 0);
			this.Sponsor = 0;
			this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, byte.MaxValue);
			this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
		}
	}

	// Token: 0x0600052A RID: 1322 RVA: 0x00071384 File Offset: 0x0006F584
	public void EmptyRallyDetail()
	{
		for (int i = 0; i < this.WarTroop.Count; i++)
		{
			this.ReleaseWarlobbyTroopDataObj(this.WarTroop[i]);
		}
		this.WarTroop.Clear();
		if (this.WarlobbyDetail != null)
		{
			this.WarlobbyDetail.Empty();
		}
	}

	// Token: 0x0600052B RID: 1323 RVA: 0x000713E0 File Offset: 0x0006F5E0
	public void RespKickWarhallAttackMember(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b > 0 && b == 2)
		{
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9922u), 255, true);
		}
	}

	// Token: 0x0600052C RID: 1324 RVA: 0x00071424 File Offset: 0x0006F624
	public void RespKickWarhallDefenceMember(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b > 0)
		{
			Debug.Log("Kick Error " + b);
		}
	}

	// Token: 0x0600052D RID: 1325 RVA: 0x00071458 File Offset: 0x0006F658
	public void EmptyWarHall(bool EmptyNum = true)
	{
		if (EmptyNum)
		{
			this.ActiveRallyRecNum = 0u;
			this.BeingRallyRecNum = 0u;
		}
		this.Sponsor = 0;
		for (int i = 0; i < this.WarHall.Length; i++)
		{
			if (this.WarHall[i] != null)
			{
				for (int j = 0; j < this.WarHall[i].Count; j++)
				{
					this.ReleaseWarlobbyDataObj(this.WarHall[i][j]);
				}
			}
		}
		if (this.WarHall[0] != null)
		{
			this.WarHall[0].Clear();
		}
		if (this.WarHall[1] != null)
		{
			this.WarHall[1].Clear();
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
	}

	// Token: 0x0600052E RID: 1326 RVA: 0x00071520 File Offset: 0x0006F720
	public void CheckWalHall_List()
	{
		if (this.WarhallProtocol != 2476)
		{
			this.sendMarshalList();
		}
		else if ((this.ActiveRallyRecNum > 0u && (this.WarHall[0] == null || (ulong)this.ActiveRallyRecNum != (ulong)((long)this.WarHall[0].Count))) || (this.BeingRallyRecNum > 0u && (this.WarHall[1] == null || (ulong)this.BeingRallyRecNum != (ulong)((long)this.WarHall[1].Count))) || (this.WarHall[0] != null && (ulong)this.ActiveRallyRecNum != (ulong)((long)this.WarHall[0].Count)) || (this.WarHall[1] != null && (ulong)this.BeingRallyRecNum != (ulong)((long)this.WarHall[1].Count)))
		{
			this.WarhallProtocol = 0;
			this.sendMarshalList();
		}
	}

	// Token: 0x0600052F RID: 1327 RVA: 0x0007160C File Offset: 0x0006F80C
	public void DelRallyUIStack()
	{
		Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
		if (door != null && door.m_WindowStack.Count > 0)
		{
			for (int i = door.m_WindowStack.Count - 1; i >= 0; i--)
			{
				if (door.m_WindowStack[i].m_eWindow == EGUIWindow.UI_Rally)
				{
					if (i == door.m_WindowStack.Count - 1)
					{
						door.CloseMenu(false);
					}
					else
					{
						door.m_WindowStack.RemoveAt(i);
					}
					break;
				}
			}
		}
	}

	// Token: 0x06000530 RID: 1328 RVA: 0x000716B0 File Offset: 0x0006F8B0
	public void RespWonderTeamInitDetail(MessagePacket MP)
	{
		if (this.WarlobbyDetail == null)
		{
			this.WarlobbyDetail = this.GetWarlobbyDataObj();
		}
		this.WarlobbyDetail.InitWonder(MP);
		this.WarlobbyDetail.ListDetailRecNum = MP.ReadByte(-1);
		this.WarlobbyDetail.SelfParticipateTroopIndex = MP.ReadByte(-1);
		this.WarlobbyDetail.AllyHomeKingdom = MP.ReadUShort(-1);
		this.WarlobbyDetail.AddCombatPower = MP.ReadUInt(-1);
		if ((int)this.WarlobbyDetail.ListDetailRecNum < this.WarTroop.Count)
		{
			int num = this.WarTroop.Count - (int)this.WarlobbyDetail.ListDetailRecNum;
			for (int i = 0; i < num; i++)
			{
				this.ReleaseWarlobbyTroopDataObj(this.WarTroop[(int)this.WarlobbyDetail.ListDetailRecNum + i]);
				this.WarTroop[(int)this.WarlobbyDetail.ListDetailRecNum + i] = null;
			}
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0, 0);
	}

	// Token: 0x06000531 RID: 1329 RVA: 0x000717B4 File Offset: 0x0006F9B4
	public void RespWonderTeamEnd(MessagePacket MP)
	{
		GUIManager guimanager = GUIManager.Instance;
		if (guimanager.FindMenu(EGUIWindow.UI_Rally) == null)
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, -1, 100);
			this.DelRallyUIStack();
			return;
		}
		byte b = MP.ReadByte(-1);
		if (b <= 2 && this.WarlobbyDetail != null)
		{
			guimanager.MsgStr.ClearString();
			guimanager.MsgStr.StringToFormat(DataManager.mapDataController.GetYolkName((ushort)this.WarlobbyDetail.WonderID, 0));
			if (b == 0)
			{
				guimanager.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8575u));
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563u), guimanager.MsgStr.ToString(), this.mStringTable.GetStringByID(8565u), null, 0, 0, false, false, false, false, false);
			}
			else if (b == 1)
			{
				guimanager.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8573u));
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563u), guimanager.MsgStr.ToString(), this.mStringTable.GetStringByID(8565u), null, 0, 0, false, false, false, false, false);
			}
			else
			{
				guimanager.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8598u));
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563u), guimanager.MsgStr.ToString(), this.mStringTable.GetStringByID(8565u), null, 0, 0, false, false, false, false, false);
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 1, 0);
		}
	}

	// Token: 0x06000532 RID: 1330 RVA: 0x00071964 File Offset: 0x0006FB64
	public void RespWonderTeamUpdate(MessagePacket MP)
	{
		uint num = MP.ReadUInt(-1);
		WarlobbyTroop warlobbyTroop;
		if ((ulong)num < (ulong)((long)this.WarTroop.Count))
		{
			if (this.WarTroop[(int)num] != null)
			{
				warlobbyTroop = this.WarTroop[(int)num];
			}
			else
			{
				warlobbyTroop = this.GetWarlobbyTroopDataObj();
				this.WarTroop[(int)num] = warlobbyTroop;
			}
		}
		else
		{
			int num2 = (int)((ulong)num - (ulong)((long)this.WarTroop.Count) + 1UL);
			for (int i = 0; i < num2; i++)
			{
				this.WarTroop.Add(this.GetWarlobbyTroopDataObj());
			}
			warlobbyTroop = this.WarTroop[(int)num];
		}
		warlobbyTroop.Init(MP);
		this.WarTroopStatistic.UpdateTroop();
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, 2, 100);
		if (num == 0u)
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Expedition, 5, 0);
		}
	}

	// Token: 0x06000533 RID: 1331 RVA: 0x00071A50 File Offset: 0x0006FC50
	public void RespTeamCombatUpdate(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if ((int)b < this.WarTroop.Count && this.WarTroop[(int)b] != null)
		{
			this.WarTroop[(int)b].CombatPower = MP.ReadUInt(-1);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0, 0);
		}
	}

	// Token: 0x06000534 RID: 1332 RVA: 0x00071AB0 File Offset: 0x0006FCB0
	public void RespWinderTeamDel(MessagePacket MP)
	{
		uint num = MP.ReadUInt(-1);
		if ((ulong)num < (ulong)((long)this.WarTroop.Count))
		{
			WarlobbyTroop.DelIndex = (byte)num;
			this.WarTroopStatistic.UpdateTroop();
			this.ReleaseWarlobbyTroopDataObj(this.WarTroop[(int)num]);
			this.WarTroop.RemoveAt((int)num);
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_BagFilter, 2, 100);
	}

	// Token: 0x06000535 RID: 1333 RVA: 0x00071B28 File Offset: 0x0006FD28
	public void RespWonderWarhallList(MessagePacket MP)
	{
		this.WarhallProtocol = 2476;
		byte b = MP.ReadByte(-1);
		uint num = MP.ReadUInt(-1);
		bool flag = true;
		if ((int)b >= this.WarHall.Length)
		{
			return;
		}
		if (this.WarHall[(int)b] == null)
		{
			this.WarHall[(int)b] = new List<WarlobbyData>();
		}
		WarlobbyData warlobbyData;
		if ((ulong)num < (ulong)((long)this.WarHall[(int)b].Count))
		{
			if (this.WarHall[(int)b][(int)num] != null)
			{
				warlobbyData = this.WarHall[(int)b][(int)num];
			}
			else
			{
				warlobbyData = this.GetWarlobbyDataObj();
				this.WarHall[(int)b][(int)num] = warlobbyData;
			}
			flag = false;
		}
		else
		{
			int num2 = (int)((ulong)num - (ulong)((long)this.WarHall[(int)b].Count) + 1UL);
			for (int i = 0; i < num2; i++)
			{
				this.WarHall[(int)b].Add(this.GetWarlobbyDataObj());
			}
			warlobbyData = this.WarHall[(int)b][(int)num];
		}
		warlobbyData.PositionInfo = 0;
		warlobbyData.Kind = MP.ReadByte(-1);
		warlobbyData.EventTime.BeginTime = MP.ReadLong(-1);
		warlobbyData.EventTime.RequireTime = MP.ReadUInt(-1);
		if (b == 0)
		{
			warlobbyData.InitWonderAttack(MP);
		}
		else
		{
			warlobbyData.InitWonderDefence(MP);
		}
		warlobbyData.AllyHomeKingdom = MP.ReadUShort(-1);
		if (warlobbyData.AllyNameID == this.RoleAttr.Name.GetHashCode(false))
		{
			this.Sponsor = (ushort)(num + 1u);
		}
		if (flag)
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 4, 0);
		}
		else
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 4, (int)num);
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_WarLobby, 0, 0);
		GameManager.OnRefresh(NetworkNews.Refresh_QBarTime, null);
	}

	// Token: 0x06000536 RID: 1334 RVA: 0x00071CE8 File Offset: 0x0006FEE8
	public void RespWonderListDetail(MessagePacket MP)
	{
		if (this.WarlobbyDetail == null)
		{
			this.WarlobbyDetail = this.GetWarlobbyDataObj();
		}
		byte b = MP.ReadByte(-1);
		this.WarlobbyDetail.Kind = MP.ReadByte(-1);
		this.WarlobbyDetail.EventTime.BeginTime = MP.ReadLong(-1);
		this.WarlobbyDetail.EventTime.RequireTime = MP.ReadUInt(-1);
		this.WarlobbyDetail.PositionInfo = 1;
		if (b == 0)
		{
			this.WarlobbyDetail.InitWonderAttack(MP);
		}
		else
		{
			this.WarlobbyDetail.InitWonderDefence(MP);
		}
		this.WarlobbyDetail.ListDetailRecNum = MP.ReadByte(-1);
		this.WarlobbyDetail.SelfParticipateTroopIndex = MP.ReadByte(-1);
		this.WarlobbyDetail.AllyHomeKingdom = MP.ReadUShort(-1);
		this.WarlobbyDetail.AddCombatPower = MP.ReadUInt(-1);
		if ((int)this.WarlobbyDetail.ListDetailRecNum < this.WarTroop.Count)
		{
			int num = this.WarTroop.Count - (int)this.WarlobbyDetail.ListDetailRecNum;
			for (int i = 0; i < num; i++)
			{
				this.ReleaseWarlobbyTroopDataObj(this.WarTroop[(int)this.WarlobbyDetail.ListDetailRecNum + i]);
				this.WarTroop[(int)this.WarlobbyDetail.ListDetailRecNum + i] = null;
			}
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0, 0);
		GameManager.OnRefresh(NetworkNews.Refresh_QBarTime, null);
	}

	// Token: 0x06000537 RID: 1335 RVA: 0x00071E60 File Offset: 0x00070060
	public void RecvNPCWallHallData(MessagePacket MP)
	{
		this.WarhallProtocol = 2476;
		byte b = 0;
		uint num = MP.ReadUInt(-1);
		if ((int)b >= this.WarHall.Length)
		{
			return;
		}
		WarlobbyData warlobbyData;
		bool warHallInstance = this.GetWarHallInstance(b, num, out warlobbyData);
		warlobbyData.PositionInfo = 0;
		warlobbyData.InitNpc(MP);
		if (warlobbyData.AllyNameID == this.RoleAttr.Name.GetHashCode(false))
		{
			this.Sponsor = (ushort)(num + 1u);
		}
		if (warHallInstance)
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 4, 0);
		}
		else
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 4, (int)num);
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_WarLobby, 0, 0);
		GameManager.OnRefresh(NetworkNews.Refresh_QBarTime, null);
	}

	// Token: 0x06000538 RID: 1336 RVA: 0x00071F10 File Offset: 0x00070110
	public void RecvNPCWallHallDetail(MessagePacket MP)
	{
		if (this.WarlobbyDetail == null)
		{
			this.WarlobbyDetail = this.GetWarlobbyDataObj();
		}
		this.WarlobbyDetail.PositionInfo = 1;
		this.WarlobbyDetail.InitNpc(MP);
		this.WarlobbyDetail.ListDetailRecNum = MP.ReadByte(-1);
		this.WarlobbyDetail.SelfParticipateTroopIndex = MP.ReadByte(-1);
		this.WarlobbyDetail.AllyHomeKingdom = MP.ReadUShort(-1);
		if ((int)this.WarlobbyDetail.ListDetailRecNum < this.WarTroop.Count)
		{
			int num = this.WarTroop.Count - (int)this.WarlobbyDetail.ListDetailRecNum;
			for (int i = 0; i < num; i++)
			{
				this.ReleaseWarlobbyTroopDataObj(this.WarTroop[(int)this.WarlobbyDetail.ListDetailRecNum + i]);
				this.WarTroop[(int)this.WarlobbyDetail.ListDetailRecNum + i] = null;
			}
			this.WarTroop.RemoveRange((int)this.WarlobbyDetail.ListDetailRecNum, num);
		}
		if (this.WarhallProtocol == 7313)
		{
			UIAlliance_Rally uialliance_Rally = GUIManager.Instance.FindMenu(EGUIWindow.UI_Rally) as UIAlliance_Rally;
			Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
			if (door != null)
			{
				if (uialliance_Rally == null)
				{
					this.WarhallProtocol = 0;
					door.OpenMenu(EGUIWindow.UI_Rally, 102, 0, false);
				}
				else if (!uialliance_Rally.gameObject.activeSelf)
				{
					door.CloseMenu(false);
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0, 0);
				}
				else
				{
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0, 0);
				}
			}
		}
		else
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0, 0);
		}
		GameManager.OnRefresh(NetworkNews.Refresh_QBarTime, null);
	}

	// Token: 0x06000539 RID: 1337 RVA: 0x000720CC File Offset: 0x000702CC
	private bool GetWarHallInstance(byte type, uint index, out WarlobbyData warlobbyData)
	{
		if (this.WarHall[(int)type] == null)
		{
			this.WarHall[(int)type] = new List<WarlobbyData>();
		}
		if ((ulong)index < (ulong)((long)this.WarHall[(int)type].Count))
		{
			if (this.WarHall[(int)type][(int)index] != null)
			{
				warlobbyData = this.WarHall[(int)type][(int)index];
			}
			else
			{
				warlobbyData = this.GetWarlobbyDataObj();
				this.WarHall[(int)type][(int)index] = warlobbyData;
			}
			return false;
		}
		int num = (int)((ulong)index - (ulong)((long)this.WarHall[(int)type].Count) + 1UL);
		for (int i = 0; i < num; i++)
		{
			this.WarHall[(int)type].Add(this.GetWarlobbyDataObj());
		}
		warlobbyData = this.WarHall[(int)type][(int)index];
		return true;
	}

	// Token: 0x0600053A RID: 1338 RVA: 0x00072198 File Offset: 0x00070398
	public void ResetLocalSave()
	{
		if (DataManager.StageDataController.isNotFirstInChapter != null)
		{
			Array.Clear(DataManager.StageDataController.isNotFirstInChapter, 0, DataManager.StageDataController.isNotFirstInChapter.Length);
		}
		if (DataManager.StageDataController.isNotFirstInLine != null)
		{
			Array.Clear(DataManager.StageDataController.isNotFirstInLine, 0, DataManager.StageDataController.isNotFirstInLine.Length);
		}
		DataManager.StageDataController.SaveisNotFirstInChapter();
	}

	// Token: 0x0600053B RID: 1339 RVA: 0x00072208 File Offset: 0x00070408
	public void RecvAllianceGift_Info(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b == 1 || b == 3)
		{
			this.mShowListIdx.Clear();
			this.mListGift.Clear();
		}
		byte b2 = MP.ReadByte(-1);
		AllianceBoxDataType val = default(AllianceBoxDataType);
		for (int i = 0; i < (int)b2; i++)
		{
			val.SN = MP.ReadUInt(-1);
			val.Status = MP.ReadByte(-1);
			val.RcvTime = MP.ReadLong(-1);
			val.BoxItemID = MP.ReadUShort(-1);
			val.Item.ItemID = MP.ReadUShort(-1);
			val.Item.Num = MP.ReadUShort(-1);
			val.Item.ItemRank = MP.ReadByte(-1);
			this.mShowListIdx.Add(val.SN);
			this.mListGift.Add(val.SN, val);
		}
		if (b == 2 || b == 3)
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 1, 0);
			GUIManager.Instance.HideUILock(EUILock.Alliance_Gift);
		}
	}

	// Token: 0x0600053C RID: 1340 RVA: 0x00072324 File Offset: 0x00070524
	public void RecvAllianceGift_Open(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b == 0 || b == 2)
		{
			if (this.RoleAlliance.GiftNum > 0)
			{
				this.RoleAlliance.GiftNum = this.RoleAlliance.GiftNum - 1;
			}
			this.mGift_UpdateSN = MP.ReadUInt(-1);
			AllianceBoxDataType val = this.mListGift[this.mGift_UpdateSN];
			if (this.mListGift.ContainsKey(this.mGift_UpdateSN))
			{
				val.Status = MP.ReadByte(-1);
				val.RcvTime = MP.ReadLong(-1);
				val.BoxItemID = MP.ReadUShort(-1);
				val.Item.ItemID = MP.ReadUShort(-1);
				val.Item.Num = MP.ReadUShort(-1);
				val.Item.ItemRank = MP.ReadByte(-1);
				this.mListGift.Remove(this.mGift_UpdateSN);
				this.mListGift.Add(this.mGift_UpdateSN, val);
				if (b == 0)
				{
					Equip recordByKey = this.EquipTable.GetRecordByKey(val.Item.ItemID);
					if (recordByKey.PropertiesInfo[0].Propertieskey != 6 && recordByKey.PropertiesInfo[0].Propertieskey != 7)
					{
						int num = (int)(this.GetCurItemQuantity(val.Item.ItemID, val.Item.ItemRank) + val.Item.Num);
						if (num <= 65535)
						{
							this.SetCurItemQuantity(val.Item.ItemID, (ushort)num, val.Item.ItemRank, 0L);
						}
						if (!this.bGetLeadItem && GUIManager.Instance.IsLeadItem(recordByKey.EquipKind))
						{
							this.bGetLeadItem = true;
						}
					}
					GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eMax);
					this.RoleAlliance.Money = MP.ReadUInt(-1);
					GameManager.OnRefresh(NetworkNews.Refresh, null);
				}
			}
			this.CDGiftTime = 300f;
			Array.Clear(GUIManager.Instance.m_SpeciallyEffect.mResValue, 0, GUIManager.Instance.m_SpeciallyEffect.mResValue.Length);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 2, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
		}
	}

	// Token: 0x0600053D RID: 1341 RVA: 0x00072570 File Offset: 0x00070770
	public void RecvAllianceGift_Delete(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		GUIManager.Instance.HideUILock(EUILock.Alliance_Gift);
		if (b == 0)
		{
			MP.ReadUShort(-1);
			ushort num = MP.ReadUShort(-1);
			for (int i = 0; i < (int)num; i++)
			{
				this.mGift_UpdateSN = MP.ReadUInt(-1);
				if (this.mListGift.ContainsKey(this.mGift_UpdateSN))
				{
					this.mListGift.Remove(this.mGift_UpdateSN);
					this.mShowListIdx.Remove(this.mGift_UpdateSN);
				}
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 7, (int)num);
		}
	}

	// Token: 0x0600053E RID: 1342 RVA: 0x0007261C File Offset: 0x0007081C
	public void RecvAllianceGift_CheckExpired(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = MP.ReadByte(-1);
		for (int i = 0; i < (int)b2; i++)
		{
			this.mGift_UpdateSN = MP.ReadUInt(-1);
			AllianceBoxDataType value = this.mListGift[this.mGift_UpdateSN];
			if (this.mListGift.ContainsKey(this.mGift_UpdateSN))
			{
				value.Status = MP.ReadByte(-1);
				value.RcvTime = MP.ReadLong(-1);
				value.BoxItemID = MP.ReadUShort(-1);
				value.Item.ItemID = MP.ReadUShort(-1);
				value.Item.Num = MP.ReadUShort(-1);
				value.Item.ItemRank = MP.ReadByte(-1);
				this.mListGift[this.mGift_UpdateSN] = value;
			}
		}
		if (b == 2 || b == 3)
		{
			GUIManager.Instance.HideUILock(EUILock.Alliance_Gift);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 1, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
		}
	}

	// Token: 0x0600053F RID: 1343 RVA: 0x00072734 File Offset: 0x00070934
	public void RecvAllianceGift_OpenAllBox(MessagePacket MP)
	{
		if (MP.ReadByte(-1) == 0)
		{
			GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eMax);
			this.RoleAlliance.Money = MP.ReadUInt(-1);
			byte b = MP.ReadByte(-1);
			byte b2 = MP.ReadByte(-1);
			for (int i = 0; i < (int)b2; i++)
			{
				if (this.RoleAlliance.GiftNum > 0)
				{
					this.RoleAlliance.GiftNum = this.RoleAlliance.GiftNum - 1;
				}
				this.mGift_UpdateSN = MP.ReadUInt(-1);
				AllianceBoxDataType value = this.mListGift[this.mGift_UpdateSN];
				if (this.mListGift.ContainsKey(this.mGift_UpdateSN))
				{
					value.Status = MP.ReadByte(-1);
					value.RcvTime = MP.ReadLong(-1);
					value.BoxItemID = MP.ReadUShort(-1);
					value.Item.ItemID = MP.ReadUShort(-1);
					value.Item.Num = MP.ReadUShort(-1);
					value.Item.ItemRank = MP.ReadByte(-1);
					this.mListGift[this.mGift_UpdateSN] = value;
				}
				Equip recordByKey = this.EquipTable.GetRecordByKey(value.Item.ItemID);
				if (recordByKey.PropertiesInfo[0].Propertieskey != 6 && recordByKey.PropertiesInfo[0].Propertieskey != 7)
				{
					int num = (int)(this.GetCurItemQuantity(value.Item.ItemID, value.Item.ItemRank) + value.Item.Num);
					if (num <= 65535)
					{
						this.SetCurItemQuantity(value.Item.ItemID, (ushort)num, value.Item.ItemRank, 0L);
					}
					if (!this.bGetLeadItem && GUIManager.Instance.IsLeadItem(recordByKey.EquipKind))
					{
						this.bGetLeadItem = true;
					}
				}
			}
			if (b == 2 || b == 3)
			{
				GUIManager.Instance.HideUILock(EUILock.Alliance_Gift);
				Array.Clear(GUIManager.Instance.m_SpeciallyEffect.mResValue, 0, GUIManager.Instance.m_SpeciallyEffect.mResValue.Length);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Gift, 9, 0);
				GUIManager.Instance.UpdateUI(EGUIWindow.Door, 17, 0);
				GameManager.OnRefresh(NetworkNews.Refresh, null);
			}
		}
		else
		{
			GUIManager.Instance.HideUILock(EUILock.Alliance_Gift);
		}
	}

	// Token: 0x06000540 RID: 1344 RVA: 0x000729AC File Offset: 0x00070BAC
	public void RecvAllianceWonder_Info(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		byte b2 = MP.ReadByte(-1);
		WonderData item = default(WonderData);
		if (b == 1 || b == 3)
		{
			this.m_Wonders.Clear();
		}
		for (int i = 0; i < (int)b2; i++)
		{
			item.KingdomID = MP.ReadUShort(-1);
			item.WonderID = MP.ReadByte(-1);
			item.OpenState = MP.ReadByte(-1);
			item.StateCountDown.BeginTime = MP.ReadLong(-1);
			item.StateCountDown.RequireTime = MP.ReadUInt(-1);
			int num = this.m_Wonders.BinarySearch(item, this.TC);
			if (num < 0)
			{
				this.m_Wonders.Insert(~num, item);
			}
		}
		if (b == 3 || b == 2)
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_Info, 6, 0);
		}
		this.AttribVal.UpdateAttrVal(UpdateAttrKind.Wonder);
	}

	// Token: 0x06000541 RID: 1345 RVA: 0x00072AA4 File Offset: 0x00070CA4
	public void Recv_MSG_RESP_CRYPT(MessagePacket MP)
	{
		this.m_CryptData.level = MP.ReadByte(-1);
		this.m_CryptData.money = MP.ReadUShort(-1);
		this.m_CryptData.startTime = MP.ReadLong(-1);
		this.m_CryptData.kind = MP.ReadByte(-1);
		GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Crypt, 0, 0);
		GUIManager.Instance.HideUILock(EUILock.Crypt);
	}

	// Token: 0x06000542 RID: 1346 RVA: 0x00072B1C File Offset: 0x00070D1C
	public void Recv_MSG_RESP_CRYPT_Start(MessagePacket MP)
	{
		if (MP.ReadByte(-1) == 0)
		{
			this.m_CryptData.level = MP.ReadByte(-1);
			this.m_CryptData.money = MP.ReadUShort(-1);
			this.m_CryptData.startTime = MP.ReadLong(-1);
			this.m_CryptData.kind = MP.ReadByte(-1);
			GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eMax);
			if (GUIManager.Instance.FindMenu(EGUIWindow.UI_CryptDig) != null)
			{
				Door door = (Door)GUIManager.Instance.FindMenu(EGUIWindow.Door);
				door.CloseMenu(false);
			}
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Item, null);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Crypt, 0, 0);
			GUIManager.Instance.HideUILock(EUILock.Crypt);
			GUIManager.Instance.BuildingData.UpdateBuildState(5, 255);
		}
	}

	// Token: 0x06000543 RID: 1347 RVA: 0x00072C00 File Offset: 0x00070E00
	public void Recv_MSG_RESP_CRYPT_Cancel(MessagePacket MP)
	{
		if (MP.ReadByte(-1) == 0)
		{
			this.m_CryptData.level = 0;
			this.m_CryptData.money = 0;
			this.m_CryptData.startTime = 0L;
			this.m_CryptData.kind = 0;
			GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eMax);
			if (GUIManager.Instance.FindMenu(EGUIWindow.UI_CryptDig) != null)
			{
				Door door = (Door)GUIManager.Instance.FindMenu(EGUIWindow.Door);
				door.CloseMenu(false);
			}
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Item, null);
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Crypt, 0, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_CryptDig, 0, 0);
		GUIManager.Instance.HideUILock(EUILock.Crypt);
		GUIManager.Instance.BuildingData.UpdateBuildState(5, 255);
	}

	// Token: 0x06000544 RID: 1348 RVA: 0x00072CDC File Offset: 0x00070EDC
	public void Recv_MSG_RESP_CRYPT_Reward(MessagePacket MP)
	{
		if (MP.ReadByte(-1) == 0)
		{
			this.m_CryptData.level = 0;
			this.m_CryptData.money = 0;
			this.m_CryptData.startTime = 0L;
			this.m_CryptData.kind = 0;
			uint diamond = this.RoleAttr.Diamond;
			GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eMax);
			if (GUIManager.Instance.FindMenu(EGUIWindow.UI_CryptDig) != null)
			{
				Door door = (Door)GUIManager.Instance.FindMenu(EGUIWindow.Door);
				door.CloseMenu(false);
			}
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			GameManager.OnRefresh(NetworkNews.Refresh_Item, null);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Crypt, 0, 0);
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(5898u), 255, true);
			GUIManager.Instance.HideUILock(EUILock.Crypt);
			GUIManager.Instance.BuildingData.UpdateBuildState(5, 255);
			AudioManager.Instance.PlayUISFX(UIKind.HUDTreasure);
			GUIManager.Instance.m_SpeciallyEffect.mDiamondValue = this.RoleAttr.Diamond - diamond;
			GUIManager.Instance.m_SpeciallyEffect.AddIconShow(false, GUIManager.Instance.mStartV2, SpeciallyEffect_Kind.Diamond, 0, 0, true, 2f);
		}
	}

	// Token: 0x06000545 RID: 1349 RVA: 0x00072E24 File Offset: 0x00071024
	public uint GetExpAddition(uint Exp)
	{
		uint effectBaseValByEffectID = DataManager.Instance.AttribVal.GetEffectBaseValByEffectID(304);
		return Exp * (10000u + effectBaseValByEffectID) / 10000u;
	}

	// Token: 0x06000546 RID: 1350 RVA: 0x00072E58 File Offset: 0x00071058
	public void SendAccountBind()
	{
		if (NewbieManager.IsNewbie)
		{
			return;
		}
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_ACCOUNT_BIND;
		messagePacket.AddSeqId();
		messagePacket.Send(false);
	}

	// Token: 0x06000547 RID: 1351 RVA: 0x00072E94 File Offset: 0x00071094
	public bool CheckMonsterResourceReady(ushort MonsterID)
	{
		MapMonster recordByKey = DataManager.mapDataController.MapMonsterTable.GetRecordByKey(MonsterID);
		if (recordByKey.Index != MonsterID)
		{
			return false;
		}
		Hero recordByKey2 = this.HeroTable.GetRecordByKey(recordByKey.ModelID);
		if (recordByKey2.HeroKey != recordByKey.ModelID)
		{
			return false;
		}
		CString cstring = StringManager.Instance.StaticString1024();
		cstring.ClearString();
		cstring.IntToFormat((long)recordByKey2.Modle, 5, false);
		cstring.AppendFormat("Role/hero_{0}");
		if (recordByKey2.Modle > 0 && !AssetManager.GetAssetBundleDownload(cstring, AssetPath.Role, AssetType.Hero, recordByKey2.Modle, false))
		{
			return false;
		}
		if (recordByKey.SoundPackNO != 0)
		{
			cstring = StringManager.Instance.StaticString1024();
			cstring.IntToFormat((long)recordByKey.SoundPackNO, 3, false);
			cstring.AppendFormat("Role/{0}");
			if (!AssetManager.GetAssetBundleDownload(cstring, AssetPath.Role, AssetType.HeroSFX, recordByKey.SoundPackNO, false))
			{
				return false;
			}
		}
		if (recordByKey.ParticlePackNO != 0)
		{
			cstring = StringManager.Instance.StaticString1024();
			cstring.IntToFormat((long)recordByKey.ParticlePackNO, 3, false);
			cstring.AppendFormat("Particle/Monster_Effects_{0}");
			if (!AssetManager.GetAssetBundleDownload(cstring, AssetPath.Particle, AssetType.Effects, recordByKey.ParticlePackNO, false))
			{
				return false;
			}
		}
		return true;
	}

	// Token: 0x06000548 RID: 1352 RVA: 0x00072FD0 File Offset: 0x000711D0
	public bool CheckHeroBattleResourceReady(HeroFightType type, ushort[] battleHeroID)
	{
		ushort inKey = 0;
		bool result = true;
		HeroTeam[] array = new HeroTeam[3];
		if (type == HeroFightType.HeroBattle)
		{
			LevelTableKind levelTableKind = DataManager.StageDataController.GetcurrentPointLevelID(out inKey, 0);
			Level recordByKey = DataManager.StageDataController.LevelTable[(int)levelTableKind].GetRecordByKey(inKey);
			for (int i = 0; i < 3; i++)
			{
				if (recordByKey.Team != null && recordByKey.Team[i] != 0)
				{
					array[i] = DataManager.Instance.TeamTable.GetRecordByKey(recordByKey.Team[i]);
					if (array[i].Arrays != null)
					{
						for (int j = 0; j < 20; j++)
						{
							ushort num = array[i].Arrays[j].Hero;
							if (num != 0)
							{
								if (!this.CheckHeroEffectRes(num))
								{
									result = false;
								}
								if (!this.CheckHero3DMesh(num))
								{
									result = false;
								}
								if (!this.CheckHeroSound(num))
								{
									result = false;
								}
							}
						}
					}
				}
			}
		}
		foreach (ushort num in battleHeroID)
		{
			ushort num;
			if (!this.CheckHeroEffectRes(num))
			{
				result = false;
			}
			if (!this.CheckHero3DMesh(num))
			{
				result = false;
			}
			if (!this.CheckHeroSound(num))
			{
				result = false;
			}
		}
		return result;
	}

	// Token: 0x06000549 RID: 1353 RVA: 0x00073128 File Offset: 0x00071328
	public static bool CheckGambleBattleResources()
	{
		GUIManager guimanager = GUIManager.Instance;
		DataManager dataManager = DataManager.Instance;
		ushort teamID = DataManager.MapDataController.MapMonsterTable.GetRecordByKey(GamblingManager.Instance.BattleMonsterID).MapTeamInfo[0].TeamID;
		HeroTeam recordByKey = DataManager.Instance.TeamTable.GetRecordByKey(teamID);
		bool result = true;
		for (int i = 0; i < 20; i++)
		{
			if (recordByKey.Arrays[i].Hero != 0)
			{
				if (!dataManager.CheckHero3DMesh(recordByKey.Arrays[i].Hero))
				{
					result = false;
				}
				if (!dataManager.CheckHeroEffectRes(recordByKey.Arrays[i].Hero))
				{
					result = false;
				}
				if (!dataManager.CheckHeroSound(recordByKey.Arrays[i].Hero))
				{
					result = false;
				}
			}
		}
		return result;
	}

	// Token: 0x0600054A RID: 1354 RVA: 0x00073218 File Offset: 0x00071418
	public static bool CheckHeroResourceReady(ushort heroID)
	{
		DataManager dataManager = DataManager.Instance;
		return dataManager.CheckHero3DMesh(heroID) && dataManager.CheckHeroEffectRes(heroID) && dataManager.CheckHeroSound(heroID);
	}

	// Token: 0x0600054B RID: 1355 RVA: 0x00073258 File Offset: 0x00071458
	public bool CheckHero3DMesh(ushort heroID)
	{
		if (heroID == 0)
		{
			return true;
		}
		Hero recordByKey = DataManager.Instance.HeroTable.GetRecordByKey(heroID);
		if (recordByKey.Modle == 0)
		{
			return true;
		}
		CString cstring = StringManager.Instance.StaticString1024();
		cstring.ClearString();
		cstring.IntToFormat((long)recordByKey.Modle, 5, false);
		cstring.AppendFormat("Role/hero_{0}");
		return AssetManager.GetAssetBundleDownload(cstring, AssetPath.Role, AssetType.Hero, recordByKey.Modle, false);
	}

	// Token: 0x0600054C RID: 1356 RVA: 0x000732D4 File Offset: 0x000714D4
	private bool CheckHeroEffectRes(ushort heroID)
	{
		if (heroID == 0)
		{
			return true;
		}
		Hero recordByKey = DataManager.Instance.HeroTable.GetRecordByKey(heroID);
		if (recordByKey.ParticlePackNo == 1 || recordByKey.ParticlePackNo == 0)
		{
			return true;
		}
		CString cstring = StringManager.Instance.StaticString1024();
		cstring.ClearString();
		cstring.IntToFormat((long)recordByKey.ParticlePackNo, 3, false);
		cstring.AppendFormat("Particle/Monster_Effects_{0}");
		return AssetManager.GetAssetBundleDownload(cstring, AssetPath.Particle, AssetType.Effects, recordByKey.ParticlePackNo, false);
	}

	// Token: 0x0600054D RID: 1357 RVA: 0x0007335C File Offset: 0x0007155C
	public bool CheckHeroSound(ushort heroID)
	{
		if (heroID == 0)
		{
			return true;
		}
		Hero recordByKey = DataManager.Instance.HeroTable.GetRecordByKey(heroID);
		if (recordByKey.AudioPackNo == 0)
		{
			return true;
		}
		CString cstring = StringManager.Instance.StaticString1024();
		cstring.ClearString();
		cstring.IntToFormat((long)recordByKey.AudioPackNo, 3, false);
		cstring.AppendFormat("Role/{0}");
		return AssetManager.GetAssetBundleDownload(cstring, AssetPath.Role, AssetType.HeroSFX, recordByKey.AudioPackNo, false);
	}

	// Token: 0x0600054E RID: 1358 RVA: 0x000733D8 File Offset: 0x000715D8
	public void Recv_TELEPORT_LEAVEFOREST(MessagePacket MP)
	{
		DataManager.mapDataController.updateCapitalPoint(MP.ReadUShort(-1), MP.ReadByte(-1), DataManager.mapDataController.OtherKingdomData.kingdomID, true);
		ushort num = MP.ReadUShort(-1);
		byte b = 0;
		ushort leaderID = DataManager.instance.GetLeaderID();
		Vector2 in_mapPos = GameConstants.getTileMapPosbySpriteID(this.RoleAttr.CapitalPoint);
		in_mapPos = GameConstants.MapPosToPointCode(in_mapPos);
		for (int i = 0; i < 8; i++)
		{
			if (((int)num & 1 << i) != 0)
			{
				b = (byte)i;
				this.MarchEventData[(int)b].Type = EMarchEventType.EMET_Standby;
				for (int j = 0; j < 5; j++)
				{
					ushort num2 = this.MarchEventData[(int)b].HeroID[j];
					if (num2 != 0)
					{
						if (num2 == leaderID)
						{
							if (DataManager.Instance.beCaptured.nowCaptureStat == LoadCaptureState.None)
							{
								this.TempFightHeroID[(int)num2] = 0;
							}
						}
						else
						{
							this.TempFightHeroID[(int)num2] = 0;
						}
					}
					this.MarchEventData[(int)b].HeroID[j] = 0;
				}
				for (int k = 0; k < 4; k++)
				{
					Array.Clear(this.MarchEventData[(int)b].TroopData[k], 0, this.MarchEventData[(int)b].TroopData[k].Length);
				}
				this.MarchEventData[(int)b].Point.zoneID = (ushort)in_mapPos.x;
				this.MarchEventData[(int)b].Point.pointID = (byte)in_mapPos.y;
				for (int l = 0; l < 5; l++)
				{
					this.MarchEventData[(int)b].ResourceGetCount[l] = 0u;
				}
				this.MarchEventData[(int)b].Crystal = 0u;
				this.MarchEventTime[(int)b].BeginTime = 0L;
				this.MarchEventTime[(int)b].RequireTime = 0u;
				this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, false, 0L, 0u);
				this.SetQueueBarData(EQueueBarIndex.JoinedRallyBegin + (int)b, false, 0L, 0u);
			}
		}
		if ((num & 256) != 0)
		{
			JailManage.MSG_RESP_LORD_HOME(null);
		}
		this.Resource[0].Stock = MP.ReadUInt(-1);
		this.Resource[1].Stock = MP.ReadUInt(-1);
		this.Resource[2].Stock = MP.ReadUInt(-1);
		this.Resource[3].Stock = MP.ReadUInt(-1);
		this.Resource[4].Stock = MP.ReadUInt(-1);
		GameManager.OnRefresh(NetworkNews.Refresh_Resource, null);
		GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eImmediately);
		this.CheckTroolCount();
		this.SetFightHeroData();
		GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_DevelopmentDetails, 2, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_HeroList_Soldier2, 0, 0);
		this.SoldierTotal = 0L;
		for (int m = 0; m < 16; m++)
		{
			this.RoleAttr.m_Soldier[m] = MP.ReadUInt(-1);
			this.SoldierTotal += (long)((ulong)this.RoleAttr.m_Soldier[m]);
		}
		GameManager.OnRefresh(NetworkNews.Refresh_Soldier, null);
		this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
		this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, b);
		byte b2 = MP.ReadByte(-1);
		if (b2 > 0)
		{
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(12627u), null, null, 0, 0, false, false, false, false, false);
		}
		else
		{
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(614u), this.mStringTable.GetStringByID(854u), null, null, 0, 0, false, false, false, false, false);
		}
		GUIManager.Instance.RemoveAllAttackState();
		this.m_WatchTowerData.Clear();
		this.tmp_WatchTowerData.Clear();
		this.WatchTowerDataCount = 0u;
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Watchtower, 1, 0);
	}

	// Token: 0x0600054F RID: 1359 RVA: 0x000737E8 File Offset: 0x000719E8
	public void RecvCompensation_Notice(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		uint num = MP.ReadUInt(-1);
		ECompensationKind ecompensationKind = (ECompensationKind)b;
		if (ecompensationKind != ECompensationKind.ECK_Maintain)
		{
			if (ecompensationKind == ECompensationKind.ECK_UpdateVersion)
			{
				if (!this.m_UpdateVersionCount && num != 0u)
				{
					this.m_UpdateVersion = num;
					this.m_UpdateVersionCount = true;
					GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_TreasureBox, 1, 2, false, 0);
				}
				else
				{
					this.m_UpdateVersion = num;
					UITreasureBox uitreasureBox = GUIManager.Instance.FindMenu(EGUIWindow.UI_TreasureBox) as UITreasureBox;
					if (uitreasureBox != null && uitreasureBox.mKind == 1 && uitreasureBox.mGetType == 2)
					{
						if (num != 0u)
						{
							GUIManager.Instance.UpdateUI(EGUIWindow.UI_TreasureBox, 3, 0);
						}
						else
						{
							GUIManager.Instance.CloseMenu(EGUIWindow.UI_TreasureBox);
							GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_UI_notAllowPopUps);
						}
					}
				}
			}
		}
		else if (!this.m_MaintainCount && num != 0u)
		{
			this.m_Maintain = num;
			this.m_MaintainCount = true;
			GUIManager.Instance.OpenUI_Queued_Restricted(EGUIWindow.UI_TreasureBox, 1, 1, false, 0);
		}
		else
		{
			this.m_Maintain = num;
			UITreasureBox uitreasureBox2 = GUIManager.Instance.FindMenu(EGUIWindow.UI_TreasureBox) as UITreasureBox;
			if (uitreasureBox2 != null && uitreasureBox2.mKind == 1 && uitreasureBox2.mGetType == 1)
			{
				if (num != 0u)
				{
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_TreasureBox, 2, 0);
				}
				else
				{
					GUIManager.Instance.CloseMenu(EGUIWindow.UI_TreasureBox);
					GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_UI_notAllowPopUps);
				}
			}
		}
	}

	// Token: 0x06000550 RID: 1360 RVA: 0x0007396C File Offset: 0x00071B6C
	public void SendGet_Compensation(byte mType)
	{
		GUIManager.Instance.ShowUILock(EUILock.TreasureBox);
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_GET_COMPENSATION;
		messagePacket.AddSeqId();
		messagePacket.Add(mType);
		messagePacket.Send(false);
	}

	// Token: 0x06000551 RID: 1361 RVA: 0x000739B4 File Offset: 0x00071BB4
	public void RecvGet_Compensation(MessagePacket MP)
	{
		GUIManager.Instance.HideUILock(EUILock.TreasureBox);
		if (MP.ReadByte(-1) == 0)
		{
			byte b = MP.ReadByte(-1);
			ECompensationKind ecompensationKind = (ECompensationKind)b;
			if (ecompensationKind != ECompensationKind.ECK_Maintain)
			{
				if (ecompensationKind == ECompensationKind.ECK_UpdateVersion)
				{
					this.m_UpdateVersionCount = false;
				}
			}
			else
			{
				this.m_MaintainCount = false;
			}
			uint num = MP.ReadUInt(-1);
			GUIManager.Instance.SetRoleAttrDiamond(num + this.RoleAttr.Diamond, 0, eSpentCredits.eMax);
			GUIManager.Instance.CloseMenu(EGUIWindow.UI_TreasureBox);
			GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_UI_notAllowPopUps);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			GUIManager.Instance.m_SpeciallyEffect.mDiamondValue = num;
			GUIManager.Instance.mStartV2 = new Vector2(GUIManager.Instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.x / 2f, GUIManager.Instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.y / 2f);
			GUIManager.Instance.m_SpeciallyEffect.AddIconShow(false, GUIManager.Instance.mStartV2, SpeciallyEffect_Kind.Diamond, 0, 0, true, 2f);
		}
		else
		{
			GUIManager.Instance.CloseMenu(EGUIWindow.UI_TreasureBox);
			GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_UI_notAllowPopUps);
		}
	}

	// Token: 0x06000552 RID: 1362 RVA: 0x00073AF8 File Offset: 0x00071CF8
	public void RemoveDoorUIStack(EGUIWindow mwin)
	{
		Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
		if (door == null)
		{
			return;
		}
		if (door.m_WindowStack.Count <= 1)
		{
			return;
		}
		for (int i = door.m_WindowStack.Count - 2; i >= 0; i--)
		{
			if (door.m_WindowStack[i].m_eWindow == mwin)
			{
				door.m_WindowStack.RemoveAt(i);
			}
		}
	}

	// Token: 0x06000553 RID: 1363 RVA: 0x00073B7C File Offset: 0x00071D7C
	public void RecvWonderOccupied(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b >= 8)
		{
			return;
		}
		byte b2 = MP.ReadByte(-1);
		byte b3 = MP.ReadByte(-1);
		ushort num = MP.ReadUShort(-1);
		EMarchEventType type = this.MarchEventData[(int)b].Type;
		this.MarchEventData[(int)b].Type = EMarchEventType.EMET_Camp;
		this.MarchEventData[(int)b].PointKind = POINT_KIND.PK_YOLK;
		this.MarchEventData[(int)b].DesPointLevel = b2;
		if (b2 < 40)
		{
			Vector2 yolkPointCode = DataManager.mapDataController.GetYolkPointCode((ushort)b2, 0);
			this.MarchEventData[(int)b].Point.zoneID = (ushort)yolkPointCode.x;
			this.MarchEventData[(int)b].Point.pointID = (byte)yolkPointCode.y;
		}
		this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, false, this.MarchEventTime[(int)b].BeginTime, this.MarchEventTime[(int)b].RequireTime);
		this.SetQueueBarData(EQueueBarIndex.JoinedRallyBegin + (int)b, false, 0L, 0u);
		for (int i = 0; i < 16; i++)
		{
			if ((num >> i & 1) == 1)
			{
				this.MarchEventData[(int)b].TroopData[i / 4][i % 4] = MP.ReadUInt(-1);
			}
		}
		DataManager.msgBuffer[0] = 81;
		GameConstants.GetBytes((ushort)b, DataManager.msgBuffer, 1);
		GameManager.notifyObservers(1, 0, DataManager.msgBuffer);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
		if (type == EMarchEventType.EMET_CampMarching)
		{
			GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(9909u), 13, true);
		}
		else if (b3 == 0)
		{
			GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(7727u), 13, true);
		}
	}

	// Token: 0x06000554 RID: 1364 RVA: 0x00073D5C File Offset: 0x00071F5C
	public void RecvWonderInforceArrived(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b >= 8)
		{
			return;
		}
		byte b2 = MP.ReadByte(-1);
		if (b2 < 40)
		{
			Vector2 yolkPointCode = DataManager.mapDataController.GetYolkPointCode((ushort)b2, 0);
			this.MarchEventData[(int)b].Point.zoneID = (ushort)yolkPointCode.x;
			this.MarchEventData[(int)b].Point.pointID = (byte)yolkPointCode.y;
		}
		this.MarchEventData[(int)b].Type = EMarchEventType.EMET_InforceStanby;
		this.MarchEventData[(int)b].PointKind = POINT_KIND.PK_YOLK;
		this.MarchEventData[(int)b].DesPointLevel = b2;
		this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, false, 0L, 0u);
		this.SetQueueBarData(EQueueBarIndex.JoinedRallyBegin + (int)b, false, 0L, 0u);
		ushort num = MP.ReadUShort(-1);
		for (int i = 0; i < 16; i++)
		{
			if ((num >> i & 1) == 1)
			{
				this.MarchEventData[(int)b].TroopData[i / 4][i % 4] = MP.ReadUInt(-1);
			}
		}
		DataManager.msgBuffer[0] = 81;
		GameConstants.GetBytes((ushort)b, DataManager.msgBuffer, 1);
		GameManager.notifyObservers(1, 0, DataManager.msgBuffer);
	}

	// Token: 0x06000555 RID: 1365 RVA: 0x00073E98 File Offset: 0x00072098
	public void RecvWonder_Send_Inforce(MessagePacket MP)
	{
		GUIManager.Instance.HideUILock(EUILock.Expedition);
		GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_Expedition);
		byte b = MP.ReadByte(-1);
		if (b == 0)
		{
			byte b2 = MP.ReadByte(-1);
			if (b2 >= 8)
			{
				return;
			}
			this.MarchEventTime[(int)b2].BeginTime = MP.ReadLong(-1);
			this.MarchEventTime[(int)b2].RequireTime = MP.ReadUInt(-1);
			byte b3 = MP.ReadByte(-1);
			if (b3 < 40)
			{
				Vector2 yolkPointCode = DataManager.mapDataController.GetYolkPointCode((ushort)b3, 0);
				this.MarchEventData[(int)b2].Point.zoneID = (ushort)yolkPointCode.x;
				this.MarchEventData[(int)b2].Point.pointID = (byte)yolkPointCode.y;
			}
			this.MarchEventData[(int)b2].Type = EMarchEventType.EMET_InforceMarching;
			this.MarchEventData[(int)b2].PointKind = POINT_KIND.PK_YOLK;
			this.MarchEventData[(int)b2].DesPointLevel = b3;
			this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b2, true, this.MarchEventTime[(int)b2].BeginTime, this.MarchEventTime[(int)b2].RequireTime);
			ushort num = MP.ReadUShort(-1);
			for (int i = 0; i < 16; i++)
			{
				if ((num >> i & 1) == 1)
				{
					this.MarchEventData[(int)b2].TroopData[i / 4][i % 4] = MP.ReadUInt(-1);
					this.RoleAttr.m_Soldier[i] -= this.MarchEventData[(int)b2].TroopData[i / 4][i % 4];
					this.SoldierTotal -= (long)((ulong)this.MarchEventData[(int)b2].TroopData[i / 4][i % 4]);
				}
			}
			if (this.WarlobbyDetail != null)
			{
				if (this.WarlobbyDetail.EventTime.BeginTime > 0L)
				{
					this.WarlobbyDetail.SelfParticipateTroopIndex = b2;
					this.WarhallProtocol = 2487;
				}
				else
				{
					this.WarhallProtocol = 0;
				}
			}
			else
			{
				this.WarhallProtocol = 0;
			}
			Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
			if (door != null)
			{
				if (door.m_eMapMode == EUIOriginMapMode.OriginMap)
				{
					door.CloseMenu(false);
				}
				else
				{
					DataManager.msgBuffer[0] = 81;
					GameConstants.GetBytes((ushort)b2, DataManager.msgBuffer, 1);
					GameManager.notifyObservers(1, 0, DataManager.msgBuffer);
				}
			}
			this.CancelShieldItemBuff();
			this.CheckTroolCount();
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(3872u), 21, true);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 0, 0);
		}
		else
		{
			switch (b)
			{
			case 1:
				GUIManager.Instance.MsgStr.ClearString();
				GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)DataManager.Instance.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_MARCH_NUM)), 1, false);
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3959u));
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
				break;
			case 2:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(9771u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
				break;
			case 3:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826u), this.mStringTable.GetStringByID(4827u), this.mStringTable.GetStringByID(4828u), null, 0, 0, false, false, false, false, false);
				GUIManager.Instance.UpdateUI(EGUIWindow.UI_Rally, 1, 0);
				break;
			case 4:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5715u), this.mStringTable.GetStringByID(5716u), this.mStringTable.GetStringByID(5717u), null, 0, 0, false, false, false, false, false);
				break;
			case 5:
				if (this.WarlobbyDetail != null)
				{
					GUIManager.Instance.MsgStr.ClearString();
					GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort)this.WarlobbyDetail.UIWonderID, 0));
					GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8568u));
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565u), null, 0, 0, false, false, false, false, false);
				}
				break;
			case 6:
				if (this.WarlobbyDetail != null)
				{
					GUIManager.Instance.MsgStr.ClearString();
					GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort)this.WarlobbyDetail.UIWonderID, 0));
					GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8567u));
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565u), null, 0, 0, false, false, false, false, false);
				}
				break;
			case 7:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4834u), this.mStringTable.GetStringByID(5806u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
				break;
			case 8:
				if (this.WarlobbyDetail != null)
				{
					GUIManager.Instance.MsgStr.ClearString();
					GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort)this.WarlobbyDetail.UIWonderID, 0));
					GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8570u));
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565u), null, 0, 0, false, false, false, false, false);
				}
				break;
			case 9:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826u), this.mStringTable.GetStringByID(119u), this.mStringTable.GetStringByID(4828u), null, 0, 0, false, false, false, false, false);
				break;
			case 10:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(9771u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
				break;
			case 11:
				if (this.WarlobbyDetail != null)
				{
					GUIManager.Instance.MsgStr.ClearString();
					GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName((ushort)this.WarlobbyDetail.UIWonderID, 0));
					GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8569u));
					GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565u), null, 0, 0, false, false, false, false, false);
				}
				break;
			case 12:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826u), this.mStringTable.GetStringByID(4827u), this.mStringTable.GetStringByID(4828u), null, 0, 0, false, false, false, false, false);
				break;
			case 13:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826u), this.mStringTable.GetStringByID(4827u), this.mStringTable.GetStringByID(4828u), null, 0, 0, false, false, false, false, false);
				break;
			case 14:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826u), this.mStringTable.GetStringByID(4827u), this.mStringTable.GetStringByID(4828u), null, 0, 0, false, false, false, false, false);
				break;
			case 15:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826u), this.mStringTable.GetStringByID(9916u), this.mStringTable.GetStringByID(4828u), null, 0, 0, false, false, false, false, false);
				break;
			}
		}
	}

	// Token: 0x06000556 RID: 1366 RVA: 0x000747B8 File Offset: 0x000729B8
	public void RecvWonder_Begin_Rally(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b == 0)
		{
			byte b2 = MP.ReadByte(-1);
			if (b2 >= 8)
			{
				return;
			}
			this.CancelShieldItemBuff();
			this.MarchEventTime[(int)b2].BeginTime = MP.ReadLong(-1);
			this.MarchEventTime[(int)b2].RequireTime = MP.ReadUInt(-1);
			byte b3 = MP.ReadByte(-1);
			this.MarchEventData[(int)b2].Type = EMarchEventType.EMET_RallyStanby;
			this.MarchEventData[(int)b2].PointKind = POINT_KIND.PK_YOLK;
			this.MarchEventData[(int)b2].DesPointLevel = b3;
			this.MarchEventData[(int)b2].bRallyHost = 1;
			if (b3 < 40)
			{
				Vector2 yolkPointCode = DataManager.mapDataController.GetYolkPointCode((ushort)b3, 0);
				this.MarchEventData[(int)b2].Point.zoneID = (ushort)yolkPointCode.x;
				this.MarchEventData[(int)b2].Point.pointID = (byte)yolkPointCode.y;
			}
			byte b4 = MP.ReadByte(-1);
			ushort num = MP.ReadUShort(-1);
			for (int i = 0; i < this.MarchEventData[(int)b2].HeroID.Length; i++)
			{
				this.MarchEventData[(int)b2].HeroID[i] = 0;
				if (i < (int)b4)
				{
					ushort num2 = MP.ReadUShort(-1);
					this.MarchEventData[(int)b2].HeroID[i] = num2;
					this.TempFightHeroID[(int)num2] = 1;
				}
			}
			for (int j = 0; j < 16; j++)
			{
				if ((num >> j & 1) == 1)
				{
					this.MarchEventData[(int)b2].TroopData[j / 4][j % 4] = MP.ReadUInt(-1);
					this.RoleAttr.m_Soldier[j] -= this.MarchEventData[(int)b2].TroopData[j / 4][j % 4];
					this.SoldierTotal -= (long)((ulong)this.MarchEventData[(int)b2].TroopData[j / 4][j % 4]);
				}
			}
			DataManager.msgBuffer[0] = 81;
			GameConstants.GetBytes((ushort)b2, DataManager.msgBuffer, 1);
			GameManager.notifyObservers(1, 0, DataManager.msgBuffer);
			this.SetFightHeroData();
			GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
			this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b2, true, this.MarchEventTime[(int)b2].BeginTime, this.MarchEventTime[(int)b2].RequireTime);
			this.CheckTroolCount();
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
			GUIManager.Instance.AddHUDMessage(DataManager.Instance.mStringTable.GetStringByID(4904u), 15, true);
			if (this.WarhallProtocol != 2476)
			{
				this.WarhallProtocol = 0;
			}
			this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Outer, b2);
			this.AttribVal.UpdateSoldierConsume(SoldierConsumeType.Inner, byte.MaxValue);
		}
		else
		{
			switch (b)
			{
			case 1:
				GUIManager.Instance.MsgStr.ClearString();
				GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)this.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_MARCH_NUM)), 1, false);
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3959u));
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
				break;
			case 2:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4892u), this.mStringTable.GetStringByID(4893u), this.mStringTable.GetStringByID(4894u), null, 0, 0, false, false, false, false, false);
				break;
			case 3:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4895u), this.mStringTable.GetStringByID(4896u), this.mStringTable.GetStringByID(4897u), null, 0, 0, false, false, false, false, false);
				break;
			case 4:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5729u), this.mStringTable.GetStringByID(5730u), this.mStringTable.GetStringByID(5731u), null, 0, 0, false, false, false, false, false);
				break;
			case 5:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4910u), this.mStringTable.GetStringByID(4911u), this.mStringTable.GetStringByID(4912u), null, 0, 0, false, false, false, false, false);
				break;
			case 6:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5732u), this.mStringTable.GetStringByID(5733u), this.mStringTable.GetStringByID(5734u), null, 0, 0, false, false, false, false, false);
				break;
			case 7:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5715u), this.mStringTable.GetStringByID(5716u), this.mStringTable.GetStringByID(5717u), null, 0, 0, false, false, false, false, false);
				break;
			case 8:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4898u), this.mStringTable.GetStringByID(4899u), this.mStringTable.GetStringByID(4900u), null, 0, 0, false, false, false, false, false);
				break;
			case 9:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(5735u), this.mStringTable.GetStringByID(5736u), this.mStringTable.GetStringByID(5737u), null, 0, 0, false, false, false, false, false);
				break;
			case 10:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4901u), this.mStringTable.GetStringByID(4902u), this.mStringTable.GetStringByID(4903u), null, 0, 0, false, false, false, false, false);
				break;
			case 11:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(9769u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
				break;
			case 12:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(9770u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
				break;
			case 13:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826u), this.mStringTable.GetStringByID(119u), this.mStringTable.GetStringByID(4828u), null, 0, 0, false, false, false, false, false);
				break;
			case 14:
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(9771u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
				break;
			case 15:
			{
				ushort yolkIDbyPointCode = DataManager.mapDataController.getYolkIDbyPointCode(this.RallyDesPoint.zoneID, this.RallyDesPoint.pointID, 0);
				GUIManager.Instance.MsgStr.ClearString();
				GUIManager.Instance.MsgStr.StringToFormat(DataManager.MapDataController.GetYolkName(yolkIDbyPointCode, 0));
				GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(8564u));
				GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(8563u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(8565u), null, 0, 0, false, false, false, false, false);
				break;
			}
			}
		}
		GUIManager.Instance.HideUILock(EUILock.Expedition);
		GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_Expedition);
	}

	// Token: 0x06000557 RID: 1367 RVA: 0x0007500C File Offset: 0x0007320C
	public void RecvWonder_Rally_Atkmarch(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b >= 8)
		{
			return;
		}
		byte b2 = MP.ReadByte(-1);
		if (b2 < 40)
		{
			Vector2 yolkPointCode = DataManager.mapDataController.GetYolkPointCode((ushort)b2, 0);
			this.MarchEventData[(int)b].Point.zoneID = (ushort)yolkPointCode.x;
			this.MarchEventData[(int)b].Point.pointID = (byte)yolkPointCode.y;
		}
		this.MarchEventData[(int)b].Type = EMarchEventType.EMET_RallyAttack;
		this.CancelShieldItemBuff();
		this.MarchEventTime[(int)b].BeginTime = MP.ReadLong(-1);
		this.MarchEventTime[(int)b].RequireTime = MP.ReadUInt(-1);
		this.MarchEventData[(int)b].PointKind = POINT_KIND.PK_YOLK;
		this.MarchEventData[(int)b].DesPointLevel = b2;
		this.SetFightHeroData();
		GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
		this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, false, 0L, 0u);
		this.JoinedRallyDataType[(int)b].State = 2;
		this.SetQueueBarData(EQueueBarIndex.JoinedRallyBegin + (int)b, true, this.MarchEventTime[(int)b].BeginTime, this.MarchEventTime[(int)b].RequireTime);
		this.CheckTroolCount();
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
	}

	// Token: 0x06000558 RID: 1368 RVA: 0x00075160 File Offset: 0x00073360
	public bool CheckLanguageTranslateByIdx(int Idx)
	{
		return true;
	}

	// Token: 0x06000559 RID: 1369 RVA: 0x00075164 File Offset: 0x00073364
	public void GetMaxActivityItem()
	{
		int hour = GameConstants.GetDateTime(this.ServerTime).ToUniversalTime().Hour;
		int num = 0;
		if (hour - 5 < 0)
		{
			num = -1;
			this.mActivityCDTime = (double)(18000 - (hour * 3600 + GameConstants.GetDateTime(this.ServerTime).ToUniversalTime().Minute * 60 + GameConstants.GetDateTime(this.ServerTime).ToUniversalTime().Second));
		}
		else
		{
			this.mActivityCDTime = (double)(86400 - (hour * 3600 + GameConstants.GetDateTime(this.ServerTime).ToUniversalTime().Minute * 60 + GameConstants.GetDateTime(this.ServerTime).ToUniversalTime().Second));
		}
		ushort num2 = 0;
		if (this.ActivitylistEquip.Count != 0 && this.mLordEquip != null && this.mLordEquip.ForgeActivity_mKind != 0)
		{
			num2 = this.ActivitylistEquip[(int)((ushort)(this.mLordEquip.ForgeActivity_mKind - 1))];
		}
		this.ActivityEquipListIdx.Clear();
		int num3 = 0;
		CString cstring = StringManager.Instance.StaticString1024();
		cstring.Append("UI/UI_forge_equip_pop");
		int num4 = 0;
		AssetBundle assetBundle = AssetManager.GetAssetBundle(cstring, out num4);
		if (assetBundle != null)
		{
			UnityEngine.Object[] array = assetBundle.LoadAll(typeof(Sprite));
			num3 = array.Length + 1;
		}
		bool[] array2 = new bool[num3];
		ushort[] array3 = new ushort[num3];
		this.ActivitylistEquip.Clear();
		ActivityEquip item = default(ActivityEquip);
		for (int i = 0; i < this.MallEquipmantTable.TableCount; i++)
		{
			MallEquipmant recordByIndex = this.MallEquipmantTable.GetRecordByIndex(i);
			int num5 = (int)(this.MallEquipmantTable.GetRecordByIndex(i).EquipData[1] * 30 + this.MallEquipmantTable.GetRecordByIndex(i).EquipData[2]);
			int num6 = GameConstants.GetDateTime(this.ServerTime).ToUniversalTime().Month * 30 + GameConstants.GetDateTime(this.ServerTime).ToUniversalTime().Day + num;
			if (((int)recordByIndex.EquipData[0] == GameConstants.GetDateTime(this.ServerTime).ToUniversalTime().Year - 2000 && num5 <= num6) || (int)recordByIndex.EquipData[0] < GameConstants.GetDateTime(this.ServerTime).ToUniversalTime().Year - 2000)
			{
				int num7 = this.ActivitylistEquip.BinarySearch(recordByIndex.EquipKey, this.mActSortItem);
				if (num7 < 0 && (int)recordByIndex.EquipIcon < array2.Length)
				{
					if (!array2[(int)recordByIndex.EquipIcon])
					{
						this.ActivitylistEquip.Insert(~num7, recordByIndex.EquipKey);
						array2[(int)recordByIndex.EquipIcon] = true;
						array3[(int)recordByIndex.EquipIcon] = recordByIndex.EquipKey;
					}
					else
					{
						item.Key = recordByIndex.EquipKey;
						item.Index = array3[(int)recordByIndex.EquipIcon];
						this.ActivityEquipListIdx.Add(item);
					}
				}
			}
		}
		if (this.mLordEquip != null && this.mLordEquip.ForgeActivity_mKind != 0)
		{
			for (int j = 0; j < this.ActivitylistEquip.Count; j++)
			{
				if (num2 == this.ActivitylistEquip[j])
				{
					this.mLordEquip.ForgeActivity_mKind = (byte)(j + 1);
				}
			}
		}
		if (num4 != 0)
		{
			AssetManager.UnloadAssetBundle(num4, true);
		}
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_Forge_ActivityItem, 3, (int)num2);
	}

	// Token: 0x0600055A RID: 1370 RVA: 0x00075544 File Offset: 0x00073744
	public bool CheckPrizeFlag(byte checkFlag)
	{
		return (this.RoleAttr.PrizeFlag >> (int)checkFlag & 1u) == 1u;
	}

	// Token: 0x0600055B RID: 1371 RVA: 0x0007555C File Offset: 0x0007375C
	public void SendModifyKingdomBullitin(string mstr)
	{
		GUIManager.Instance.ShowUILock(EUILock.KingdomBullitin);
		char[] array = mstr.ToCharArray();
		if (this.m_BannedWord != null)
		{
			this.m_BannedWord.CheckBannedWord(array);
		}
		byte[] bytes = Encoding.UTF8.GetBytes(array);
		MessagePacket messagePacket = new MessagePacket(1044);
		messagePacket.Protocol = Protocol._MSG_REQUEST_MODIFY_KINGDOM_BULLITIN;
		messagePacket.AddSeqId();
		messagePacket.Add((ushort)bytes.Length);
		messagePacket.Add(bytes, 0, 1024);
		byte data;
		if (ArabicTransfer.Instance.IsArabicStr(mstr))
		{
			data = 2;
		}
		else
		{
			data = 1;
		}
		messagePacket.Add(data);
		messagePacket.Send(false);
	}

	// Token: 0x0600055C RID: 1372 RVA: 0x00075600 File Offset: 0x00073800
	public unsafe void RecvModifyKingdomBullitin(MessagePacket MP)
	{
		if (MP.ReadByte(-1) == 0)
		{
			ushort vsize = MP.ReadUShort(-1);
			this.mKingdomClassifieds = MP.ReadString((int)vsize, -1);
			fixed (string text = this.mKingdomClassifieds)
			{
				fixed (char* ptr = text + RuntimeHelpers.OffsetToStringData / 2)
				{
					for (int i = 0; i < this.mKingdomClassifieds.Length; i++)
					{
						if (!this.isNotEmojiCharacter(this.mKingdomClassifieds[i]))
						{
							ptr[i] = ' ';
						}
					}
					text = null;
					this.mKingdomClassifiedsFlag = MP.ReadByte(-1);
					GUIManager.Instance.UpdateUI(EGUIWindow.UI_Kingdom_Classifieds, 0, 0);
				}
			}
		}
		GUIManager.Instance.HideUILock(EUILock.KingdomBullitin);
	}

	// Token: 0x0600055D RID: 1373 RVA: 0x000756AC File Offset: 0x000738AC
	public void SendKingdomBullitin_Info(bool forceNormal = false)
	{
		GUIManager.Instance.ShowUILock(EUILock.KingdomBullitin);
		MessagePacket messagePacket;
		if (forceNormal || DataManager.MapDataController.FocusKingdomID == 0 || DataManager.MapDataController.FocusKingdomID == DataManager.MapDataController.OtherKingdomData.kingdomID)
		{
			messagePacket = new MessagePacket(1024);
		}
		else
		{
			messagePacket = MessagePacket.GetGuestMessagePack();
		}
		messagePacket.Protocol = Protocol._MSG_REQUEST_KINGDOM_BULLITIN_INFO;
		messagePacket.AddSeqId();
		messagePacket.Send(false);
	}

	// Token: 0x0600055E RID: 1374 RVA: 0x00075728 File Offset: 0x00073928
	public void RecvKingdomBullitin(MessagePacket MP)
	{
		GUIManager.Instance.HideUILock(EUILock.KingdomBullitin);
		ushort vsize = MP.ReadUShort(-1);
		string a = this.mKingdomClassifieds;
		this.mKingdomClassifieds = MP.ReadString((int)vsize, -1);
		this.mKingdomClassifiedsFlag = MP.ReadByte(-1);
		if (a != this.mKingdomClassifieds)
		{
			this.bNeedTranslateClassifieds = true;
		}
		if (GUIManager.Instance.FindMenu(EGUIWindow.UI_Kingdom_Classifieds))
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Kingdom_Classifieds, 4, 0);
		}
		else
		{
			Door door = GUIManager.Instance.FindMenu(EGUIWindow.Door) as Door;
			if (door != null)
			{
				door.OpenMenu(EGUIWindow.UI_Kingdom_Classifieds, 0, 0, false);
			}
		}
	}

	// Token: 0x0600055F RID: 1375 RVA: 0x000757D8 File Offset: 0x000739D8
	public void RecvNewKingdomBullitin(MessagePacket MP)
	{
		this.mKingdomMsgTag = MP.ReadString(3, -1);
		this.mKingdomMsgName = MP.ReadString(12, -1);
		this.KingdomMsg.ClearString();
		CString cstring = StringManager.Instance.StaticString1024();
		CString cstring2 = StringManager.Instance.StaticString1024();
		CString cstring3 = StringManager.Instance.StaticString1024();
		cstring.ClearString();
		cstring2.ClearString();
		cstring3.ClearString();
		cstring2.Append(this.mKingdomMsgName);
		cstring3.Append(this.mKingdomMsgTag);
		GUIManager.Instance.FormatRoleNameForChat(cstring, cstring2, cstring3, 0, GUIManager.Instance.IsArabic);
		this.KingdomMsg.StringToFormat(cstring);
		this.KingdomMsg.AppendFormat(this.mStringTable.GetStringByID(1476u));
		this.AddSystemMessage(this.KingdomMsg, 5, -1L);
		if (GUIManager.Instance.FindMenu(EGUIWindow.UI_Kingdom_Classifieds))
		{
			this.SendKingdomBullitin_Info(false);
		}
	}

	// Token: 0x06000560 RID: 1376 RVA: 0x000758C8 File Offset: 0x00073AC8
	public void SendMailBullitin()
	{
		GUIManager.Instance.ShowUILock(EUILock.KingdomBullitin);
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_MAIL_BULLITIN;
		messagePacket.AddSeqId();
		messagePacket.Send(false);
	}

	// Token: 0x06000561 RID: 1377 RVA: 0x00075908 File Offset: 0x00073B08
	public void RecvMailBullitin(MessagePacket MP)
	{
		GUIManager.Instance.HideUILock(EUILock.KingdomBullitin);
		if (MP.ReadByte(-1) == 0)
		{
			GUIManager.Instance.SetRoleAttrDiamond(MP.ReadUInt(-1), 0, eSpentCredits.eMax);
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1452u), 255, true);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
		}
	}

	// Token: 0x06000562 RID: 1378 RVA: 0x0007596C File Offset: 0x00073B6C
	public void SendAmnesty()
	{
		GUIManager.Instance.ShowUILock(EUILock.Amnesty);
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_AMNESTY;
		messagePacket.AddSeqId();
		messagePacket.Send(false);
	}

	// Token: 0x06000563 RID: 1379 RVA: 0x000759AC File Offset: 0x00073BAC
	public void RecvAmnesty(MessagePacket MP)
	{
		GUIManager.Instance.HideUILock(EUILock.Amnesty);
		switch (MP.ReadByte(-1))
		{
		case 0:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1461u), 255, true);
			break;
		case 1:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1460u), 255, true);
			break;
		case 2:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9719u), 255, true);
			break;
		case 3:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1464u), 255, true);
			break;
		}
	}

	// Token: 0x06000564 RID: 1380 RVA: 0x00075A80 File Offset: 0x00073C80
	public bool CheckMoveingKingdom()
	{
		bool result = true;
		if (DataManager.MapDataController.FocusKingdomID == ActivityManager.Instance.KOWKingdomID)
		{
			ulong kingdomTime = DataManager.MapDataController.GetKingdomTime(DataManager.MapDataController.kingdomData.kingdomID);
			if (kingdomTime + 7776000UL - (ulong)this.ServerTime > 0UL)
			{
				result = false;
			}
		}
		else
		{
			ulong kingdomTime = DataManager.MapDataController.GetKingdomTime(DataManager.MapDataController.FocusKingdomID);
			if (kingdomTime + 7776000UL - (ulong)this.ServerTime > 0UL && kingdomTime > DataManager.MapDataController.kingdomData.kingdomTime && !DataManager.Instance.IsNewbie())
			{
				result = false;
			}
		}
		return result;
	}

	// Token: 0x06000565 RID: 1381 RVA: 0x00075B34 File Offset: 0x00073D34
	public void SendAllanceDismissLeader(long userid)
	{
		GUIManager.Instance.ShowUILock(EUILock.AllanceDismissLeader);
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_ALLIANCE_DISMISS_LEADER;
		messagePacket.AddSeqId();
		messagePacket.Add(userid);
		messagePacket.Send(false);
	}

	// Token: 0x06000566 RID: 1382 RVA: 0x00075B7C File Offset: 0x00073D7C
	public void RecvAllanceDismissLeader(MessagePacket MP)
	{
		GUIManager.Instance.HideUILock(EUILock.AllanceDismissLeader);
		switch (MP.ReadByte(-1))
		{
		case 0:
		{
			uint diamond = MP.ReadUInt(-1);
			GUIManager.Instance.SetRoleAttrDiamond(diamond, 0, eSpentCredits.eMax);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Alliance_List, 5, 0);
			break;
		}
		}
	}

	// Token: 0x06000567 RID: 1383 RVA: 0x00075C04 File Offset: 0x00073E04
	public void RecvAllance_Change_HomeKingdom(MessagePacket MP)
	{
		GUIManager.Instance.HideUILock(EUILock.AllianceChangHomeKingdom);
		switch (MP.ReadByte(-1))
		{
		case 0:
		{
			uint diamond = MP.ReadUInt(-1);
			GUIManager.Instance.SetRoleAttrDiamond(diamond, 0, eSpentCredits.eMax);
			GameManager.OnRefresh(NetworkNews.Refresh, null);
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9568u), 255, true);
			break;
		}
		case 2:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(9571u), 255, true);
			break;
		}
	}

	// Token: 0x06000568 RID: 1384 RVA: 0x00075CA8 File Offset: 0x00073EA8
	public bool HasNewbieShield()
	{
		return (this.RoleAttr.PrizeFlag & 1024u) != 0u;
	}

	// Token: 0x06000569 RID: 1385 RVA: 0x00075CC4 File Offset: 0x00073EC4
	public void SendTroopmemory_Setup(byte mIdx, TroopMemoryData mData)
	{
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_TROOPMEMORY_SETUP;
		messagePacket.AddSeqId();
		messagePacket.Add(mIdx);
		for (int i = 0; i < 5; i++)
		{
			messagePacket.Add(mData.Leader[i]);
		}
		messagePacket.Add(mData.MaxTroop);
		for (int j = 0; j < 16; j++)
		{
			messagePacket.Add(mData.TroopData[j]);
		}
		messagePacket.Add(mData.Label, 40);
		messagePacket.Send(false);
		GUIManager.Instance.ShowUILock(EUILock.SetTroopmemory);
	}

	// Token: 0x0600056A RID: 1386 RVA: 0x00075D68 File Offset: 0x00073F68
	public void RecvTroopmemory_Setup(MessagePacket MP)
	{
		GUIManager.Instance.HideUILock(EUILock.SetTroopmemory);
		switch (MP.ReadByte(-1))
		{
		case 0:
		{
			byte b = MP.ReadByte(-1);
			if (b >= 0 && b <= 4)
			{
				for (int i = 0; i < 5; i++)
				{
					this.mTroopMemoryData[(int)b].Leader[i] = MP.ReadUShort(-1);
				}
				this.mTroopMemoryData[(int)b].MaxTroop = MP.ReadUInt(-1);
				for (int j = 0; j < 16; j++)
				{
					int num = (3 - j % 4) * 4 + j / 4;
					this.mTroopMemoryData[(int)b].TroopData[num] = MP.ReadUInt(-1);
				}
				this.mTroopMemoryData[(int)b].Label = MP.ReadString(40, -1);
			}
			this.TeamName.ClearString();
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_Expedition, 2, 0);
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(935u), 255, true);
			break;
		}
		case 1:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(661u), 255, true);
			break;
		case 2:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(7226u), 255, true);
			break;
		case 3:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(5349u), 255, true);
			break;
		case 4:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(5349u), 255, true);
			break;
		}
	}

	// Token: 0x0600056B RID: 1387 RVA: 0x00075F34 File Offset: 0x00074134
	public void RecvTroopmemory_Data(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		for (int i = 0; i < (int)b; i++)
		{
			for (int j = 0; j < 5; j++)
			{
				this.mTroopMemoryData[i].Leader[j] = MP.ReadUShort(-1);
			}
			this.mTroopMemoryData[i].MaxTroop = MP.ReadUInt(-1);
			for (int k = 0; k < 16; k++)
			{
				int num = (3 - k % 4) * 4 + k / 4;
				this.mTroopMemoryData[i].TroopData[num] = MP.ReadUInt(-1);
			}
			this.mTroopMemoryData[i].Label = MP.ReadString(40, -1);
		}
	}

	// Token: 0x0600056C RID: 1388 RVA: 0x00075FFC File Offset: 0x000741FC
	public void SendWonderHost(ushort[] LeaderID, uint[] TroopData, byte WonderID)
	{
		MessagePacket messagePacket = new MessagePacket(1024);
		messagePacket.Protocol = Protocol._MSG_REQUEST_SEND_WONDERHOST;
		messagePacket.AddSeqId();
		for (int i = 0; i < LeaderID.Length; i++)
		{
			messagePacket.Add(LeaderID[i]);
		}
		for (int j = 0; j < TroopData.Length; j++)
		{
			messagePacket.Add(TroopData[j]);
		}
		messagePacket.Add(WonderID);
		messagePacket.Send(false);
	}

	// Token: 0x0600056D RID: 1389 RVA: 0x00076070 File Offset: 0x00074270
	public void RecvWonderHost(MessagePacket MP)
	{
		GUIManager.Instance.HideUILock(EUILock.Expedition);
		GUIManager.Instance.UIQueueLockRelease(EGUIQueueLock.UIQL_Expedition);
		switch (MP.ReadByte(-1))
		{
		case 0:
		{
			byte b = MP.ReadByte(-1);
			if (b >= 8)
			{
				return;
			}
			this.MarchEventData[(int)b].Type = EMarchEventType.EMET_CampMarching;
			this.CancelShieldItemBuff();
			for (int i = 0; i < 5; i++)
			{
				ushort num = MP.ReadUShort(-1);
				this.MarchEventData[(int)b].HeroID[i] = num;
				if (num != 0)
				{
					this.TempFightHeroID[(int)num] = 1;
				}
			}
			for (int j = 0; j < 4; j++)
			{
				for (int k = 0; k < 4; k++)
				{
					this.MarchEventData[(int)b].TroopData[j][k] = MP.ReadUInt(-1);
					this.RoleAttr.m_Soldier[j * 4 + k] -= this.MarchEventData[(int)b].TroopData[j][k];
					this.SoldierTotal -= (long)((ulong)this.MarchEventData[(int)b].TroopData[j][k]);
				}
			}
			byte b2 = MP.ReadByte(-1);
			if (b2 < 40)
			{
				Vector2 yolkPointCode = DataManager.mapDataController.GetYolkPointCode((ushort)b2, 0);
				this.MarchEventData[(int)b].Point.zoneID = (ushort)yolkPointCode.x;
				this.MarchEventData[(int)b].Point.pointID = (byte)yolkPointCode.y;
			}
			this.MarchEventData[(int)b].PointKind = POINT_KIND.PK_YOLK;
			this.MarchEventData[(int)b].bRallyHost = 2;
			this.MarchEventData[(int)b].DesPointLevel = b2;
			this.SetFightHeroData();
			GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
			this.CheckTroolCount();
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
			this.MarchEventTime[(int)b].BeginTime = MP.ReadLong(-1);
			this.MarchEventTime[(int)b].RequireTime = MP.ReadUInt(-1);
			this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, true, this.MarchEventTime[(int)b].BeginTime, this.MarchEventTime[(int)b].RequireTime);
			DataManager.msgBuffer[0] = 81;
			GameConstants.GetBytes((ushort)b, DataManager.msgBuffer, 1);
			GameManager.notifyObservers(1, 0, DataManager.msgBuffer);
			break;
		}
		case 1:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(8459u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
			break;
		case 2:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(7520u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
			break;
		case 3:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(7095u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
			break;
		case 4:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(11044u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
			break;
		case 5:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(8459u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
			break;
		case 6:
			GUIManager.Instance.MsgStr.ClearString();
			GUIManager.Instance.MsgStr.IntToFormat((long)((ulong)DataManager.Instance.AttribVal.GetEffectBaseVal(GATTR_ENUM.EGA_MARCH_NUM)), 1, false);
			GUIManager.Instance.MsgStr.AppendFormat(this.mStringTable.GetStringByID(3959u));
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), GUIManager.Instance.MsgStr.ToString(), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
			break;
		case 7:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(4826u), this.mStringTable.GetStringByID(119u), this.mStringTable.GetStringByID(4828u), null, 0, 0, false, false, false, false, false);
			break;
		case 8:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(9769u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
			break;
		case 9:
			GUIManager.Instance.OpenMessageBox(this.mStringTable.GetStringByID(3967u), this.mStringTable.GetStringByID(9771u), this.mStringTable.GetStringByID(4034u), null, 0, 0, false, false, false, false, false);
			break;
		}
	}

	// Token: 0x0600056E RID: 1390 RVA: 0x000765E4 File Offset: 0x000747E4
	public void RecvWinderhostReturn(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b >= 8)
		{
			return;
		}
		this.MarchEventTime[(int)b].BeginTime = MP.ReadLong(-1);
		this.MarchEventTime[(int)b].RequireTime = MP.ReadUInt(-1);
		this.MarchEventData[(int)b].PointKind = POINT_KIND.PK_YOLK;
		this.MarchEventData[(int)b].Type = EMarchEventType.EMET_CampReturn;
		this.MarchEventData[(int)b].bRallyHost = 2;
		this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, true, this.MarchEventTime[(int)b].BeginTime, this.MarchEventTime[(int)b].RequireTime);
		this.CheckTroolCount();
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
		GUIManager.Instance.AddHUDMessage(DataManager.instance.mStringTable.GetStringByID(9911u), 255, true);
	}

	// Token: 0x0600056F RID: 1391 RVA: 0x000766D0 File Offset: 0x000748D0
	public bool CheckDailyGift()
	{
		ActivityManager activityManager = ActivityManager.Instance;
		bool result = false;
		if (this.mDailyGift_Pic != 0)
		{
			if (activityManager.SPLastGetDailyGiftTime == 0L)
			{
				result = true;
			}
			else if (this.mDailyGift.BeginTime != 0L)
			{
				long num = activityManager.ServerEventTime - this.mDailyGift.BeginTime;
				int num2 = (int)(num / 86400L);
				long num3 = this.mDailyGift.BeginTime + (long)(num2 * 86400);
				if (activityManager.SPLastGetDailyGiftTime < num3)
				{
					result = true;
				}
			}
		}
		return result;
	}

	// Token: 0x06000570 RID: 1392 RVA: 0x00076758 File Offset: 0x00074958
	public void Recv_DailyGift(MessagePacket MP)
	{
		GUIManager.Instance.HideUILock(EUILock.TreasureBox);
		switch (MP.ReadByte(-1))
		{
		case 0:
		{
			ActivityManager.Instance.SetLastGetDailyGiftTime(MP.ReadLong(-1));
			ushort num = MP.ReadUShort(-1);
			ushort num2 = MP.ReadUShort(-1);
			MP.ReadByte(-1);
			uint num3 = MP.ReadUInt(-1);
			if (num3 != 0u)
			{
				this.RoleAttr.Diamond = this.RoleAttr.Diamond + num3;
			}
			uint num4 = MP.ReadUInt(-1);
			if (num4 != 0u)
			{
				this.RoleAlliance.Money = this.RoleAlliance.Money + num4;
			}
			Vector2 mV = new Vector2(GUIManager.Instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.x / 2f, GUIManager.Instance.m_SpeciallyEffect.mCanvasRT.sizeDelta.y / 2f);
			AudioManager.Instance.PlayUISFX(UIKind.HUDTreasure);
			Equip recordByKey = this.EquipTable.GetRecordByKey(num);
			if (recordByKey.EquipKind == 6 && recordByKey.PropertiesInfo[0].Propertieskey == 4 && recordByKey.PropertiesInfo[1].Propertieskey == 1)
			{
				GUIManager.Instance.m_SpeciallyEffect.AddIconShow(false, mV, SpeciallyEffect_Kind.TreasureBox2, 0, num, true, 2f);
			}
			else if (num3 != 0u)
			{
				GUIManager.Instance.m_SpeciallyEffect.mDiamondValue = num3;
				GUIManager.Instance.m_SpeciallyEffect.AddIconShow(false, mV, SpeciallyEffect_Kind.Diamond, 0, 0, true, 2f);
				GameManager.OnRefresh(NetworkNews.Refresh, null);
			}
			else if (num4 != 0u)
			{
				GUIManager.Instance.m_SpeciallyEffect.AddIconShow(false, mV, SpeciallyEffect_Kind.AllianceMoney, 0, 0, true, 2f);
				GameManager.OnRefresh(NetworkNews.Refresh_Alliance, null);
			}
			else
			{
				ushort num5 = this.GetCurItemQuantity(num, 0);
				if (num5 < 65535)
				{
					this.SetCurItemQuantity(num, num5 + num2, 0, 0L);
				}
				GUIManager.Instance.m_SpeciallyEffect.AddIconShow(false, mV, SpeciallyEffect_Kind.Item, 0, num, true, 2f);
			}
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_TreasureBox, 8, 0);
			break;
		}
		case 1:
			this.mDailyGift_Pic = 0;
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_TreasureBox, 8, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 23, 0);
			break;
		case 2:
			this.mDailyGift_Pic = 0;
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_TreasureBox, 8, 0);
			GUIManager.Instance.UpdateUI(EGUIWindow.Door, 23, 0);
			break;
		}
	}

	// Token: 0x06000571 RID: 1393 RVA: 0x000769DC File Offset: 0x00074BDC
	public void Recv_NPCCITY_RALLY_ATKMARCH(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		if (b >= 8)
		{
			return;
		}
		this.MarchEventData[(int)b].Type = EMarchEventType.EMET_RallyAttack;
		this.JoinedRallyDataType[(int)b].RallyPoint = this.MarchEventData[(int)b].Point;
		this.MarchEventData[(int)b].Point.zoneID = MP.ReadUShort(-1);
		this.MarchEventData[(int)b].Point.pointID = MP.ReadByte(-1);
		this.MarchEventData[(int)b].DesPointLevel = MP.ReadByte(-1);
		this.MarchEventData[(int)b].DesPlayerName = string.Empty;
		this.MarchEventTime[(int)b].BeginTime = MP.ReadLong(-1);
		this.MarchEventTime[(int)b].RequireTime = MP.ReadUInt(-1);
		this.MarchEventData[(int)b].PointKind = POINT_KIND.PK_CITY;
		this.SetFightHeroData();
		GameManager.OnRefresh(NetworkNews.Refresh_Hero, null);
		this.SetQueueBarData(EQueueBarIndex.MarchingBegin + (int)b, false, 0L, 0u);
		this.JoinedRallyDataType[(int)b].State = 2;
		this.SetQueueBarData(EQueueBarIndex.JoinedRallyBegin + (int)b, true, this.MarchEventTime[(int)b].BeginTime, this.MarchEventTime[(int)b].RequireTime);
		GUIManager.Instance.UpdateUI(EGUIWindow.UI_ArmyInfo, 0, 0);
		this.CheckTroolCount();
	}

	// Token: 0x06000572 RID: 1394 RVA: 0x00076B48 File Offset: 0x00074D48
	public void RecvActivityAsSummon(MessagePacket MP)
	{
		byte b = MP.ReadByte(-1);
		switch (b)
		{
		case 0:
			goto IL_13E;
		case 1:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(4753u), 255, true);
			goto IL_13E;
		case 2:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(1353u), 255, true);
			goto IL_13E;
		case 3:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(14511u), 255, true);
			goto IL_13E;
		case 4:
		case 6:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(8459u), 255, true);
			goto IL_13E;
		case 8:
			GUIManager.Instance.AddHUDMessage(this.mStringTable.GetStringByID(14515u), 255, true);
			goto IL_13E;
		}
		CString cstring = StringManager.Instance.StaticString1024();
		cstring.IntToFormat((long)b, 1, false);
		cstring.AppendFormat(this.mStringTable.GetStringByID(14502u));
		GUIManager.Instance.AddHUDMessage(cstring.ToString(), 255, true);
		IL_13E:
		if (b == 0)
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_SummonMonster, 0, 0);
		}
		else
		{
			GUIManager.Instance.UpdateUI(EGUIWindow.UI_SummonMonster, -1, 0);
		}
		GUIManager.Instance.HideUILock(EUILock.Battle);
	}

	// Token: 0x04000E47 RID: 3655
	public const short MAX_ITEMDATA = 800;

	// Token: 0x04000E48 RID: 3656
	public const uint MAX_MONEY = 4294967295u;

	// Token: 0x04000E49 RID: 3657
	public const byte MAX_TMPCHATNICK = 10;

	// Token: 0x04000E4A RID: 3658
	public const int TalkMax_Kingdom = 30;

	// Token: 0x04000E4B RID: 3659
	public const int TalkMax_Alliance = 2000;

	// Token: 0x04000E4C RID: 3660
	public const int BlackListMax = 100;

	// Token: 0x04000E4D RID: 3661
	public const int MessageBoardMax = 20;

	// Token: 0x04000E4E RID: 3662
	public const ushort EmojiSaveTotalCount = 512;

	// Token: 0x04000E4F RID: 3663
	public const byte EmojiSaveCount = 64;

	// Token: 0x04000E50 RID: 3664
	public const byte BattlingVer = 8;

	// Token: 0x04000E51 RID: 3665
	public const byte MailingVer = 7;

	// Token: 0x04000E52 RID: 3666
	public const byte LetterVer = 6;

	// Token: 0x04000E53 RID: 3667
	public const int MaxFightNpcData = 200;

	// Token: 0x04000E54 RID: 3668
	public const int MaxFightNpcHeroCount = 5;

	// Token: 0x04000E55 RID: 3669
	private const int TechDataMaxCount = 150;

	// Token: 0x04000E56 RID: 3670
	private const byte TalentDataMaxCount = 100;

	// Token: 0x04000E57 RID: 3671
	private const byte TalentSaveMax = 41;

	// Token: 0x04000E58 RID: 3672
	public const byte TalentQueueCountMax = 3;

	// Token: 0x04000E59 RID: 3673
	public bool bLoadingTableSuccess;

	// Token: 0x04000E5A RID: 3674
	public CExternalTableWithWordKey<Skill> SkillTable;

	// Token: 0x04000E5B RID: 3675
	public CExternalTableWithWordKey<AI> AITable;

	// Token: 0x04000E5C RID: 3676
	public CExternalTableWithWordKey<Buff> BuffTable;

	// Token: 0x04000E5D RID: 3677
	public StringTable mStringTable;

	// Token: 0x04000E5E RID: 3678
	public CExternalTableWithWordKey<SoldierData> SoldierDataTable;

	// Token: 0x04000E5F RID: 3679
	public CExternalTableWithWordKey<Hero> HeroTable;

	// Token: 0x04000E60 RID: 3680
	public CExternalTableWithWordKey<Enhance> EnhanceTable;

	// Token: 0x04000E61 RID: 3681
	public CExternalTableWithWordKey<Equip> EquipTable;

	// Token: 0x04000E62 RID: 3682
	public CExternalTableWithWordKey<HeroArray> ArrayTable;

	// Token: 0x04000E63 RID: 3683
	public CExternalTableWithWordKey<HeroTeam> TeamTable;

	// Token: 0x04000E64 RID: 3684
	public CExternalTableWithWordKey<RewardScore> RewardScoreTable;

	// Token: 0x04000E65 RID: 3685
	public CExternalTableWithWordKey<SkillCost> SkillCostTable;

	// Token: 0x04000E66 RID: 3686
	public CExternalTableWithWordKey<LevelUp> LevelUpTable;

	// Token: 0x04000E67 RID: 3687
	public CExternalTableWithWordKey<BuildLevelRequest> BuildsRequest;

	// Token: 0x04000E68 RID: 3688
	public CExternalTableWithWordKey<BuildLevelRequestGroup> BuildsLevelRequestGroup;

	// Token: 0x04000E69 RID: 3689
	public CExternalTableWithWordKey<BuildTypeData> BuildsTypeData;

	// Token: 0x04000E6A RID: 3690
	public CExternalTableWithWordKey<BuildManorData> BuildManorData;

	// Token: 0x04000E6B RID: 3691
	public CExternalTableWithWordKey<Effect> EffectData;

	// Token: 0x04000E6C RID: 3692
	public CExternalTableWithWordKey<StoreTbl> StoreData;

	// Token: 0x04000E6D RID: 3693
	public CExternalTableWithWordKey<PriceListTbl> PriceListData;

	// Token: 0x04000E6E RID: 3694
	public CExternalTableWithWordKey<PriceListTbl> PriceListDataEx;

	// Token: 0x04000E6F RID: 3695
	public CExternalTableWithWordKey<MarchPaltform> MarchPaltformTable;

	// Token: 0x04000E70 RID: 3696
	public CExternalTableWithWordKey<MarchOffset> MarchOffsetTable;

	// Token: 0x04000E71 RID: 3697
	public CExternalTableWithWordKey<TechTreeLayoutTbl> TechTreeLayout;

	// Token: 0x04000E72 RID: 3698
	public CExternalTableWithWordKey<TechDataTbl> TechData;

	// Token: 0x04000E73 RID: 3699
	public CExternalTableWithWordKey<TechLevelTbl> TechLevel;

	// Token: 0x04000E74 RID: 3700
	public CExternalTableWithWordKey<TechLevelExTbl> TechLevelEx;

	// Token: 0x04000E75 RID: 3701
	public CExternalTableWithWordKey<TechKindTbl> TechKindData;

	// Token: 0x04000E76 RID: 3702
	public CExternalTableWithWordKey<HUDTypeTbl> HUDTypeData;

	// Token: 0x04000E77 RID: 3703
	public CExternalTableWithWordKey<TalentTbl> TalentData;

	// Token: 0x04000E78 RID: 3704
	public CExternalTableWithWordKey<TalentLevelTbl> TalentLevel;

	// Token: 0x04000E79 RID: 3705
	public CExternalTableWithWordKey<TalentTreeLayoutTbl> TalentTreeLayout;

	// Token: 0x04000E7A RID: 3706
	public CExternalTableWithWordKey<Combo> ComboTable;

	// Token: 0x04000E7B RID: 3707
	public CExternalTableWithWordKey<CastleUpgradeRewardTbl> CastleUpgradeRewardTable;

	// Token: 0x04000E7C RID: 3708
	public CExternalTableWithWordKey<ItemBuff> ItemBuffTable;

	// Token: 0x04000E7D RID: 3709
	public CExternalTableWithWordKey<LordEnhanceTbl> LordEnhanceTable;

	// Token: 0x04000E7E RID: 3710
	public CExternalTableWithWordKey<VIP_DataTbl> VIPLevelTable;

	// Token: 0x04000E7F RID: 3711
	public CExternalTableWithWordKey<HeroTalkTbl> HeroTalkTable;

	// Token: 0x04000E80 RID: 3712
	public CExternalTableWithWordKey<LordEquipEffectData> LordEquipEffectTable;

	// Token: 0x04000E81 RID: 3713
	public CExternalTableWithWordKey<LordEquipEffectFilterData> LordEquipEffectFilter;

	// Token: 0x04000E82 RID: 3714
	public CExternalTableWithWordKey<EventEquipmant> EventEquipmantTable;

	// Token: 0x04000E83 RID: 3715
	public CExternalTableWithWordKey<MallEquipmant> MallEquipmantTable;

	// Token: 0x04000E84 RID: 3716
	public CExternalTableWithWordKey<NewbieData> NewbieTable;

	// Token: 0x04000E85 RID: 3717
	public CExternalTableWithWordKey<NewbieUI> NewbieUITable;

	// Token: 0x04000E86 RID: 3718
	public CExternalTableWithWordKey<ComboBox> ComboBoxTable;

	// Token: 0x04000E87 RID: 3719
	public CExternalTableWithWordKey<LotteryBox> LotteryBoxTable;

	// Token: 0x04000E88 RID: 3720
	public CExternalTableWithWordKey<GiftBox> GiftBoxTable;

	// Token: 0x04000E89 RID: 3721
	public CExternalTableWithWordKey<MonsterActivityScore> MonsterActivityScoreTable;

	// Token: 0x04000E8A RID: 3722
	public CExternalTableWithWordKey<LandWalkerData> LandWalkerData;

	// Token: 0x04000E8B RID: 3723
	public CExternalTableWithWordKey<AllianceLvUpData> AllianceLvUpData;

	// Token: 0x04000E8C RID: 3724
	public CExternalTableWithWordKey<ArenaReward> ArenaRewardData;

	// Token: 0x04000E8D RID: 3725
	public CExternalTableWithWordKey<ArenaHeroTopic> ArenaHeroTopicData;

	// Token: 0x04000E8E RID: 3726
	public CExternalTableWithWordKey<CoordData> CoordTable;

	// Token: 0x04000E8F RID: 3727
	public CExternalTableWithWordKey<CoordDisplayData> CoordDisplayTable;

	// Token: 0x04000E90 RID: 3728
	public CExternalTableWithWordKey<CoordResultData> CoordResultTable;

	// Token: 0x04000E91 RID: 3729
	public CExternalTableWithWordKey<TitleData> TitleData;

	// Token: 0x04000E92 RID: 3730
	public CExternalTableWithWordKey<TitleData> TitleDataW;

	// Token: 0x04000E93 RID: 3731
	public CExternalTableWithWordKey<TitleData> TitleDataN;

	// Token: 0x04000E94 RID: 3732
	public CExternalTableWithWordKey<TitleData> TitleDataF;

	// Token: 0x04000E95 RID: 3733
	public CExternalTableWithWordKey<TitleSortData> TitleSortData;

	// Token: 0x04000E96 RID: 3734
	public CExternalTableWithWordKey<KOFPrizeData> KOFPrize;

	// Token: 0x04000E97 RID: 3735
	public CExternalTableWithWordKey<NPCPrizeData> NPCPrize;

	// Token: 0x04000E98 RID: 3736
	public CExternalTableWithWordKey<MobilizationMissionData> AllianceMobilizationMission;

	// Token: 0x04000E99 RID: 3737
	public CExternalTableWithWordKey<MobilizationDegreeData> AllianceMobilizationDegreeInfo;

	// Token: 0x04000E9A RID: 3738
	public CExternalTableWithWordKey<MobilizationDegreeData>[] AllianceMobilizationDegreeInfos = new CExternalTableWithWordKey<MobilizationDegreeData>[4];

	// Token: 0x04000E9B RID: 3739
	public CExternalTableWithWordKey<AllianceMobilizationGoldMission> AllianceMobilizationGoldMissionTable;

	// Token: 0x04000E9C RID: 3740
	public CExternalTableWithWordKey<MonsterPriceTbl>[] GambleMonsterPriceTable = new CExternalTableWithWordKey<MonsterPriceTbl>[2];

	// Token: 0x04000E9D RID: 3741
	public CExternalTableWithWordKey<PushNotificationData> PushNotification;

	// Token: 0x04000E9E RID: 3742
	public CExternalTableWithWordKey<DegreeRange> AllianceMobilizationDegreeRange;

	// Token: 0x04000E9F RID: 3743
	public CExternalTableWithWordKey<MapEffect> MapEffectTB;

	// Token: 0x04000EA0 RID: 3744
	public CExternalTableWithWordKey<SummonInfo> SummonInfoData;

	// Token: 0x04000EA1 RID: 3745
	public CExternalTableWithWordKey<DonateAmountData> DonateAmountTable;

	// Token: 0x04000EA2 RID: 3746
	public CExternalTableWithWordKey<FusionData> FusionDataTable;

	// Token: 0x04000EA3 RID: 3747
	public CExternalTableWithWordKey<FastivalSpecialData> FastivalSpecialDataTable;

	// Token: 0x04000EA4 RID: 3748
	public CExternalTableWithWordKey<FusionData> FusionDataTable_Act;

	// Token: 0x04000EA5 RID: 3749
	public CExternalTableWithWordKey<PushCallBack> PushCallBackTable;

	// Token: 0x04000EA6 RID: 3750
	public CExternalTableWithWordKey<SpecialEffect> SpecialEffectTable;

	// Token: 0x04000EA7 RID: 3751
	public CExternalTableWithWordKey<LordEquipExtendData> LordEquipExtendTable;

	// Token: 0x04000EA8 RID: 3752
	public _ROLEINFO RoleAttr;

	// Token: 0x04000EA9 RID: 3753
	public AllianceInfo RoleAlliance;

	// Token: 0x04000EAA RID: 3754
	private long DailyResetTimer;

	// Token: 0x04000EAB RID: 3755
	public byte ServerVersionMajor;

	// Token: 0x04000EAC RID: 3756
	public byte ServerVersionMinor;

	// Token: 0x04000EAD RID: 3757
	public byte ShowTermsOfService;

	// Token: 0x04000EAE RID: 3758
	public ushort ServerVersionPatch;

	// Token: 0x04000EAF RID: 3759
	public GameplayKind GoToBattleOrWar;

	// Token: 0x04000EB0 RID: 3760
	public GameLanguage UserLanguage = GameLanguage.GL_Cht;

	// Token: 0x04000EB1 RID: 3761
	public long Battle_UserID;

	// Token: 0x04000EB2 RID: 3762
	public long ArenaBattle_UserID;

	// Token: 0x04000EB3 RID: 3763
	public HeroBattleData[] heroBattleData = new HeroBattleData[5];

	// Token: 0x04000EB4 RID: 3764
	public byte heroCount;

	// Token: 0x04000EB5 RID: 3765
	public long BattleCondition_UserID;

	// Token: 0x04000EB6 RID: 3766
	public HeroBattleData[] heroBattleConditionData = new HeroBattleData[5];

	// Token: 0x04000EB7 RID: 3767
	public SysSetting MySysSetting = default(SysSetting);

	// Token: 0x04000EB8 RID: 3768
	public ushort mSetNotice = ushort.MaxValue;

	// Token: 0x04000EB9 RID: 3769
	public ulong mNewPushSwitch;

	// Token: 0x04000EBA RID: 3770
	public byte mFirstSetSys;

	// Token: 0x04000EBB RID: 3771
	public BattleInfo battleInfo = default(BattleInfo);

	// Token: 0x04000EBC RID: 3772
	public short lastBattleResult = -1;

	// Token: 0x04000EBD RID: 3773
	public ulong BattleSeqID;

	// Token: 0x04000EBE RID: 3774
	public uint BattleEngine = 1u;

	// Token: 0x04000EBF RID: 3775
	public byte BattleFailureIndex;

	// Token: 0x04000EC0 RID: 3776
	public ushort BattleConditionKey;

	// Token: 0x04000EC1 RID: 3777
	public int MaxCurHeroData = 100;

	// Token: 0x04000EC2 RID: 3778
	public uint CurHeroDataCount;

	// Token: 0x04000EC3 RID: 3779
	public uint OwnedHeroDataCount;

	// Token: 0x04000EC4 RID: 3780
	public uint NoOwnedHeroDataCount;

	// Token: 0x04000EC5 RID: 3781
	public CHashTable<uint, CurHeroData> curHeroData;

	// Token: 0x04000EC6 RID: 3782
	public uint[] sortHeroData;

	// Token: 0x04000EC7 RID: 3783
	public HeroDAtaComparer heroDAtaComparer;

	// Token: 0x04000EC8 RID: 3784
	public byte mSkillPointMax;

	// Token: 0x04000EC9 RID: 3785
	public CurHeroData[] curTempHeroData = new CurHeroData[5];

	// Token: 0x04000ECA RID: 3786
	public ushort[] RankSoldiers = new ushort[]
	{
		0,
		80,
		320,
		800,
		1440,
		2560,
		4000,
		6000,
		10000,
		14000,
		18500,
		24000,
		32000
	};

	// Token: 0x04000ECB RID: 3787
	public ushort[] Hero_RankCost = new ushort[]
	{
		0,
		5,
		13,
		30,
		60,
		120,
		240,
		480,
		960,
		1800,
		3600,
		7200
	};

	// Token: 0x04000ECC RID: 3788
	public ushort[] Hero_StarCost = new ushort[]
	{
		0,
		15,
		60,
		300,
		1800
	};

	// Token: 0x04000ECD RID: 3789
	public List<ushort> LegionBattleHero;

	// Token: 0x04000ECE RID: 3790
	public int LegionBattleSildoers;

	// Token: 0x04000ECF RID: 3791
	public int Hero_Info_Page;

	// Token: 0x04000ED0 RID: 3792
	public bool Hero_Info_bHeroSkill;

	// Token: 0x04000ED1 RID: 3793
	public bool Hero_Info_bHeroInfo = true;

	// Token: 0x04000ED2 RID: 3794
	public CurHeroData PreviewHeroData = default(CurHeroData);

	// Token: 0x04000ED3 RID: 3795
	public CHashTable<ushort, ushort> curItemQuantity = new CHashTable<ushort, ushort>(800, false);

	// Token: 0x04000ED4 RID: 3796
	public short curItemDataCount;

	// Token: 0x04000ED5 RID: 3797
	public short sortItemDataCountMax;

	// Token: 0x04000ED6 RID: 3798
	public ItemDataComparer itemDataComparer = new ItemDataComparer();

	// Token: 0x04000ED7 RID: 3799
	public ushort[] sortItemData = new ushort[800];

	// Token: 0x04000ED8 RID: 3800
	public ushort[] sortItemDataStart = new ushort[31];

	// Token: 0x04000ED9 RID: 3801
	public ushort[] sortItemDataCount = new ushort[31];

	// Token: 0x04000EDA RID: 3802
	public byte ReflashMaterialItem;

	// Token: 0x04000EDB RID: 3803
	private byte BuyAndUse;

	// Token: 0x04000EDC RID: 3804
	public byte SortItemDataType = 16;

	// Token: 0x04000EDD RID: 3805
	public BagItemDataComparer bagitemDataComparer = new BagItemDataComparer();

	// Token: 0x04000EDE RID: 3806
	public ushort[] SortSotreData;

	// Token: 0x04000EDF RID: 3807
	public ushort[] SortSotreDataStart = new ushort[31];

	// Token: 0x04000EE0 RID: 3808
	public ushort[] SortSotreDataCount = new ushort[31];

	// Token: 0x04000EE1 RID: 3809
	public CHashTable<ushort, ushort> TotalShopItemData;

	// Token: 0x04000EE2 RID: 3810
	public QueueBarData[] queueBarData = new QueueBarData[37];

	// Token: 0x04000EE3 RID: 3811
	public byte[] sortedQueueBarData = new byte[37];

	// Token: 0x04000EE4 RID: 3812
	public QueueBarDataComparer queueBarDataComparer = new QueueBarDataComparer();

	// Token: 0x04000EE5 RID: 3813
	public byte curQueueBarDataCount;

	// Token: 0x04000EE6 RID: 3814
	public bool bNeedSortQueueBarData;

	// Token: 0x04000EE7 RID: 3815
	public long bRecvQueueBarData;

	// Token: 0x04000EE8 RID: 3816
	public bool bBeginReLogin;

	// Token: 0x04000EE9 RID: 3817
	public bool bNewQueue;

	// Token: 0x04000EEA RID: 3818
	public bool bOpenQueue = true;

	// Token: 0x04000EEB RID: 3819
	public bool bFirstOpenQueueBar = true;

	// Token: 0x04000EEC RID: 3820
	public HeroConditionComparer mHeroConditionComparer = new HeroConditionComparer();

	// Token: 0x04000EED RID: 3821
	public byte[] Medal;

	// Token: 0x04000EEE RID: 3822
	public int RewardCount;

	// Token: 0x04000EEF RID: 3823
	public byte[] RewardLen = new byte[4];

	// Token: 0x04000EF0 RID: 3824
	public ushort[] RewardData = new ushort[128];

	// Token: 0x04000EF1 RID: 3825
	public byte KingOldLv;

	// Token: 0x04000EF2 RID: 3826
	public uint KingOldExp;

	// Token: 0x04000EF3 RID: 3827
	public uint RWMoney;

	// Token: 0x04000EF4 RID: 3828
	public ushort[] heroId = new ushort[5];

	// Token: 0x04000EF5 RID: 3829
	public byte[] heroLv = new byte[5];

	// Token: 0x04000EF6 RID: 3830
	public uint[] heroExp = new uint[5];

	// Token: 0x04000EF7 RID: 3831
	public ushort QBMorale;

	// Token: 0x04000EF8 RID: 3832
	public uint QBMoney;

	// Token: 0x04000EF9 RID: 3833
	public byte QBTimes;

	// Token: 0x04000EFA RID: 3834
	public int QBRewardCount;

	// Token: 0x04000EFB RID: 3835
	public byte[] QBRewardLen = new byte[10];

	// Token: 0x04000EFC RID: 3836
	public ushort[] QBRewardData = new ushort[220];

	// Token: 0x04000EFD RID: 3837
	public byte ExpItemCount;

	// Token: 0x04000EFE RID: 3838
	public ItemSaveDataType[] QBExpItem = new ItemSaveDataType[6];

	// Token: 0x04000EFF RID: 3839
	public byte bRecvKingdom;

	// Token: 0x04000F00 RID: 3840
	public byte bSendKingdom;

	// Token: 0x04000F01 RID: 3841
	public int unReadIndex = -1;

	// Token: 0x04000F02 RID: 3842
	public int unReadCount;

	// Token: 0x04000F03 RID: 3843
	public bool bClearUnread;

	// Token: 0x04000F04 RID: 3844
	public bool bShowUnreadCount = true;

	// Token: 0x04000F05 RID: 3845
	public bool bOpenSetChannel = true;

	// Token: 0x04000F06 RID: 3846
	public byte NowChannel;

	// Token: 0x04000F07 RID: 3847
	public int NowKingdomIndex = -1;

	// Token: 0x04000F08 RID: 3848
	public float NowKingdomPos = -1f;

	// Token: 0x04000F09 RID: 3849
	public int NowAlliancePage = -1;

	// Token: 0x04000F0A RID: 3850
	public int NowAllianceIndex1 = -1;

	// Token: 0x04000F0B RID: 3851
	public int NowAllianceIndex2 = -1;

	// Token: 0x04000F0C RID: 3852
	public float NowAlliancePos1 = -1f;

	// Token: 0x04000F0D RID: 3853
	public float NowAlliancePos2 = -1f;

	// Token: 0x04000F0E RID: 3854
	public int SendAskKind = -1;

	// Token: 0x04000F0F RID: 3855
	public int ThisTimeCounts;

	// Token: 0x04000F10 RID: 3856
	public string chatusestr = "{0}：{1}";

	// Token: 0x04000F11 RID: 3857
	public string chatusestr2 = "{1}：{0}";

	// Token: 0x04000F12 RID: 3858
	public CString[] ChatStr = new CString[2];

	// Token: 0x04000F13 RID: 3859
	public CString[] ChatStrA = new CString[2];

	// Token: 0x04000F14 RID: 3860
	public CString ChatNameStr = new CString(100);

	// Token: 0x04000F15 RID: 3861
	public CString ChatMainStr = new CString(435);

	// Token: 0x04000F16 RID: 3862
	public string ColorL = "<color=#0000FF>(";

	// Token: 0x04000F17 RID: 3863
	public string ColorR = ")</color>";

	// Token: 0x04000F18 RID: 3864
	public float sendTimer;

	// Token: 0x04000F19 RID: 3865
	public float SendTalkTime = 3f;

	// Token: 0x04000F1A RID: 3866
	public byte[] tmpChatAllyRank = new byte[10];

	// Token: 0x04000F1B RID: 3867
	public CString[] tmpChatNickName = new CString[10];

	// Token: 0x04000F1C RID: 3868
	public ushort[] tmpChatKingdom = new ushort[10];

	// Token: 0x04000F1D RID: 3869
	public ushort[] tmpChatWTitleID = new ushort[10];

	// Token: 0x04000F1E RID: 3870
	public ushort[] tmpChatNTitleID = new ushort[10];

	// Token: 0x04000F1F RID: 3871
	public byte[] tmpbCheckDirtyWord = new byte[10];

	// Token: 0x04000F20 RID: 3872
	public CString SystemMessageCString = new CString(1024);

	// Token: 0x04000F21 RID: 3873
	public List<float> Height_Kingdom = new List<float>();

	// Token: 0x04000F22 RID: 3874
	public ObjectPool<TalkDataType> TalkData_KPool;

	// Token: 0x04000F23 RID: 3875
	public List<TalkDataType> TalkData_Kingdom = new List<TalkDataType>(30);

	// Token: 0x04000F24 RID: 3876
	public bool bChangeKingdomClear;

	// Token: 0x04000F25 RID: 3877
	public byte KindomRecvType;

	// Token: 0x04000F26 RID: 3878
	public long AskAllianceTime;

	// Token: 0x04000F27 RID: 3879
	public long LastTime;

	// Token: 0x04000F28 RID: 3880
	public byte AskOldData;

	// Token: 0x04000F29 RID: 3881
	public long TopID;

	// Token: 0x04000F2A RID: 3882
	public long MiddleTopID;

	// Token: 0x04000F2B RID: 3883
	public long MiddleBottomID;

	// Token: 0x04000F2C RID: 3884
	public int TopIndex;

	// Token: 0x04000F2D RID: 3885
	public int MiddleTopIndex = -1;

	// Token: 0x04000F2E RID: 3886
	public int MiddleBottomIndex = -1;

	// Token: 0x04000F2F RID: 3887
	public int LastTimeIndex = -1;

	// Token: 0x04000F30 RID: 3888
	public List<float> Height_Alliance = new List<float>();

	// Token: 0x04000F31 RID: 3889
	public int APoolIndex;

	// Token: 0x04000F32 RID: 3890
	public ObjectPool<TalkDataType> TalkData_APool;

	// Token: 0x04000F33 RID: 3891
	public List<TalkDataType> TalkData_Alliance = new List<TalkDataType>(2000);

	// Token: 0x04000F34 RID: 3892
	public List<TalkDataType> tmpAllianc = new List<TalkDataType>(10);

	// Token: 0x04000F35 RID: 3893
	public int mAllianceInfoScroll_Idx;

	// Token: 0x04000F36 RID: 3894
	public float mAllianceInfoScroll_Y;

	// Token: 0x04000F37 RID: 3895
	public List<AllianceHelpRecordCMsgDataType> mHelpDataList = new List<AllianceHelpRecordCMsgDataType>(200);

	// Token: 0x04000F38 RID: 3896
	public uint DailyHelpGetAllianceMoney;

	// Token: 0x04000F39 RID: 3897
	public PlayHelpDataType[] mPlayHelpDataType = new PlayHelpDataType[2];

	// Token: 0x04000F3A RID: 3898
	public long LastTimeAllianceMoney;

	// Token: 0x04000F3B RID: 3899
	public byte mOpenPage;

	// Token: 0x04000F3C RID: 3900
	public bool bSetAllianceScroll;

	// Token: 0x04000F3D RID: 3901
	public ushort AllianceMoneyBonusRate = 100;

	// Token: 0x04000F3E RID: 3902
	public bool bSendtoGetGift = true;

	// Token: 0x04000F3F RID: 3903
	public List<uint> mShowListIdx = new List<uint>();

	// Token: 0x04000F40 RID: 3904
	public CHashTable<uint, AllianceBoxDataType> mListGift = new CHashTable<uint, AllianceBoxDataType>(300, true);

	// Token: 0x04000F41 RID: 3905
	public SortGiftComparer mSortGift = new SortGiftComparer();

	// Token: 0x04000F42 RID: 3906
	public uint mGift_UpdateSN;

	// Token: 0x04000F43 RID: 3907
	public ushort mShowListUnOpenIdx;

	// Token: 0x04000F44 RID: 3908
	public float CDGiftTime = 300f;

	// Token: 0x04000F45 RID: 3909
	public bool bCDStart = true;

	// Token: 0x04000F46 RID: 3910
	public bool bGetLeadItem;

	// Token: 0x04000F47 RID: 3911
	private string BlackListName = "BlackList";

	// Token: 0x04000F48 RID: 3912
	public ObjectPool<BlackListDataType> TalkData_BPool;

	// Token: 0x04000F49 RID: 3913
	public CHashTable<int, BlackListDataType> TalkData_BlackList = new CHashTable<int, BlackListDataType>(100, true);

	// Token: 0x04000F4A RID: 3914
	public ObjectPool<MessageBoard> MessageBoard_Pool;

	// Token: 0x04000F4B RID: 3915
	public List<MessageBoard> MessageBoardList = new List<MessageBoard>(20);

	// Token: 0x04000F4C RID: 3916
	public ObjectPool<MessageBoard> MessageBoard_Pool_Self;

	// Token: 0x04000F4D RID: 3917
	public List<MessageBoard> MessageBoardList_Self = new List<MessageBoard>(20);

	// Token: 0x04000F4E RID: 3918
	public uint SendAllianceID;

	// Token: 0x04000F4F RID: 3919
	public uint PreSendAllianceID;

	// Token: 0x04000F50 RID: 3920
	public long SendMessageID;

	// Token: 0x04000F51 RID: 3921
	public byte FindBlack;

	// Token: 0x04000F52 RID: 3922
	public int MessageBoardScroll_Idx;

	// Token: 0x04000F53 RID: 3923
	public float MessageBoardScroll_Y;

	// Token: 0x04000F54 RID: 3924
	public BannedWord m_BannedWord;

	// Token: 0x04000F55 RID: 3925
	private string EmojiSaveName = "EmojiSave";

	// Token: 0x04000F56 RID: 3926
	public byte[] EmojiSave;

	// Token: 0x04000F57 RID: 3927
	public int EmojiOnGICount = -1;

	// Token: 0x04000F58 RID: 3928
	public bool bNeedInitialEmojiSave;

	// Token: 0x04000F59 RID: 3929
	public MailData Mailing;

	// Token: 0x04000F5A RID: 3930
	public MyFavorite DoMeAFavor;

	// Token: 0x04000F5B RID: 3931
	private MyFavorite DoFavor;

	// Token: 0x04000F5C RID: 3932
	public bool Outlooking;

	// Token: 0x04000F5D RID: 3933
	public List<CombatReportContent> CombatReports = new List<CombatReportContent>(100);

	// Token: 0x04000F5E RID: 3934
	public CombatReport[] CombatReportSave = new CombatReport[100];

	// Token: 0x04000F5F RID: 3935
	public CombatReport[] CombatReport;

	// Token: 0x04000F60 RID: 3936
	public static DataManager.MailDataComparer MailDC = new DataManager.MailDataComparer();

	// Token: 0x04000F61 RID: 3937
	public MailContent[] MailReport = new MailContent[100];

	// Token: 0x04000F62 RID: 3938
	public CombatReportContent Combat = new CombatReportContent();

	// Token: 0x04000F63 RID: 3939
	public CombatReport CombatReportType = new CombatReport(0u, CombatCollectReport.CCR_BATTLE);

	// Token: 0x04000F64 RID: 3940
	public BinaryFormatter BF = new BinaryFormatter();

	// Token: 0x04000F65 RID: 3941
	public DataManager.SerialKiller SK = new DataManager.SerialKiller();

	// Token: 0x04000F66 RID: 3942
	public MailBox MIB;

	// Token: 0x04000F67 RID: 3943
	public ResourceData[] Resource = new ResourceData[5];

	// Token: 0x04000F68 RID: 3944
	public PetResourceData PetResource = new PetResourceData();

	// Token: 0x04000F69 RID: 3945
	public byte SoldierKind;

	// Token: 0x04000F6A RID: 3946
	public byte SoldierRank;

	// Token: 0x04000F6B RID: 3947
	public long SoldierBeginTime;

	// Token: 0x04000F6C RID: 3948
	public uint SoldierNeedTime;

	// Token: 0x04000F6D RID: 3949
	public long SoldierTotal;

	// Token: 0x04000F6E RID: 3950
	public uint SoldierQuantity;

	// Token: 0x04000F6F RID: 3951
	public uint SoldierTrainingQty;

	// Token: 0x04000F70 RID: 3952
	public uint tmpSoldierTrainingQty;

	// Token: 0x04000F71 RID: 3953
	public bool bSoldierSave;

	// Token: 0x04000F72 RID: 3954
	public ushort GuideSoldierNum;

	// Token: 0x04000F73 RID: 3955
	public uint HospitalTotal;

	// Token: 0x04000F74 RID: 3956
	public uint[] mSoldier_Hospital = new uint[16];

	// Token: 0x04000F75 RID: 3957
	public uint[] mTreatmentSoldier = new uint[16];

	// Token: 0x04000F76 RID: 3958
	public uint TreatmentQuantity;

	// Token: 0x04000F77 RID: 3959
	public uint TreatmentQty;

	// Token: 0x04000F78 RID: 3960
	public byte TrapKind;

	// Token: 0x04000F79 RID: 3961
	public byte TrapRank;

	// Token: 0x04000F7A RID: 3962
	public long TrapBeginTime;

	// Token: 0x04000F7B RID: 3963
	public uint TrapNeedTime;

	// Token: 0x04000F7C RID: 3964
	public uint TrapTotal;

	// Token: 0x04000F7D RID: 3965
	public uint TrapHospitalTotal;

	// Token: 0x04000F7E RID: 3966
	public uint TrapQuantity;

	// Token: 0x04000F7F RID: 3967
	public uint TrapTrainingQty;

	// Token: 0x04000F80 RID: 3968
	public uint[] mTrapQty = new uint[12];

	// Token: 0x04000F81 RID: 3969
	public uint[] mTrap_Hospital = new uint[12];

	// Token: 0x04000F82 RID: 3970
	public uint[] mRepairTrap = new uint[12];

	// Token: 0x04000F83 RID: 3971
	public uint Trap_TreatmentQuantity;

	// Token: 0x04000F84 RID: 3972
	public uint Trap_TreatmentQty;

	// Token: 0x04000F85 RID: 3973
	public uint WatchTowerDataCount;

	// Token: 0x04000F86 RID: 3974
	public bool bReSetWTD;

	// Token: 0x04000F87 RID: 3975
	public List<WatchTowerData> tmp_WatchTowerData = new List<WatchTowerData>(30);

	// Token: 0x04000F88 RID: 3976
	public List<WatchTowerSortData> m_WatchTowerData = new List<WatchTowerSortData>(30);

	// Token: 0x04000F89 RID: 3977
	public WatchTowerData[] mtmpIdx = new WatchTowerData[8];

	// Token: 0x04000F8A RID: 3978
	public WatchTowerComparer mWatchTowerComparer = new WatchTowerComparer();

	// Token: 0x04000F8B RID: 3979
	public WatchTowerComparer_LindID mWatchTowerComparer_LindID = new WatchTowerComparer_LindID();

	// Token: 0x04000F8C RID: 3980
	public bool bSetExpediton;

	// Token: 0x04000F8D RID: 3981
	public uint[] mExpeditionSoldierList = new uint[16];

	// Token: 0x04000F8E RID: 3982
	public int mMapId;

	// Token: 0x04000F8F RID: 3983
	public int mScroll_Idx;

	// Token: 0x04000F90 RID: 3984
	public float mScroll_Y;

	// Token: 0x04000F91 RID: 3985
	public byte mcollectionKind = byte.MaxValue;

	// Token: 0x04000F92 RID: 3986
	public byte mWarlobby_Kind = byte.MaxValue;

	// Token: 0x04000F93 RID: 3987
	public bool bFirstOpenWarlobbyTroopSelect;

	// Token: 0x04000F94 RID: 3988
	public int m_WTList_Idx;

	// Token: 0x04000F95 RID: 3989
	public int m_WTInfo_Status;

	// Token: 0x04000F96 RID: 3990
	public ushort m_WTInfo_KID;

	// Token: 0x04000F97 RID: 3991
	public PointCode m_WT_Point;

	// Token: 0x04000F98 RID: 3992
	public ushort m_WT_MH;

	// Token: 0x04000F99 RID: 3993
	public string m_WT_Name;

	// Token: 0x04000F9A RID: 3994
	public string m_WT_AllianceName;

	// Token: 0x04000F9B RID: 3995
	public uint m_WT_TotalForce;

	// Token: 0x04000F9C RID: 3996
	public byte m_WT_HeroNum;

	// Token: 0x04000F9D RID: 3997
	public ushort m_WT_TrooFlag;

	// Token: 0x04000F9E RID: 3998
	public byte m_WT_WithSupremeLeader;

	// Token: 0x04000F9F RID: 3999
	public uint m_WT_TroopTotal;

	// Token: 0x04000FA0 RID: 4000
	public uint[] m_WT_TroopData = new uint[16];

	// Token: 0x04000FA1 RID: 4001
	public ushort[] m_WT_HeroID = new ushort[5];

	// Token: 0x04000FA2 RID: 4002
	public WatchTowerHeroRank[] m_WT_HeroRank = new WatchTowerHeroRank[5];

	// Token: 0x04000FA3 RID: 4003
	public ushort m_WT_KingdomID;

	// Token: 0x04000FA4 RID: 4004
	public ushort m_WT_PetID;

	// Token: 0x04000FA5 RID: 4005
	public byte m_WT_PetEnhance;

	// Token: 0x04000FA6 RID: 4006
	public ushort m_WT_PetSkillID;

	// Token: 0x04000FA7 RID: 4007
	public byte m_WT_PetSkillLv;

	// Token: 0x04000FA8 RID: 4008
	private List<WarlobbyData> WarlobbyDataPool = new List<WarlobbyData>();

	// Token: 0x04000FA9 RID: 4009
	private List<WarlobbyTroop> WarlobbyTroopDataPool = new List<WarlobbyTroop>();

	// Token: 0x04000FAA RID: 4010
	private int WarlobbyDataCountIdx;

	// Token: 0x04000FAB RID: 4011
	private int WarlobbyTroopDataCountIdx;

	// Token: 0x04000FAC RID: 4012
	public uint ActiveRallyRecNum;

	// Token: 0x04000FAD RID: 4013
	public uint BeingRallyRecNum;

	// Token: 0x04000FAE RID: 4014
	public byte WarhallDetailType;

	// Token: 0x04000FAF RID: 4015
	public ushort Sponsor;

	// Token: 0x04000FB0 RID: 4016
	public ushort WarhallProtocol;

	// Token: 0x04000FB1 RID: 4017
	public List<WarlobbyData>[] WarHall = new List<WarlobbyData>[2];

	// Token: 0x04000FB2 RID: 4018
	public List<WarlobbyTroop> WarTroop = new List<WarlobbyTroop>();

	// Token: 0x04000FB3 RID: 4019
	public WarlobbyData WarlobbyDetail;

	// Token: 0x04000FB4 RID: 4020
	public bool bWonderFight = true;

	// Token: 0x04000FB5 RID: 4021
	public _TroopStatistic WarTroopStatistic = new _TroopStatistic(1);

	// Token: 0x04000FB6 RID: 4022
	public uint[] mSoldier_Embassy = new uint[16];

	// Token: 0x04000FB7 RID: 4023
	public uint TotalSoldier_Embassy;

	// Token: 0x04000FB8 RID: 4024
	private byte _MaxMarchEventNum;

	// Token: 0x04000FB9 RID: 4025
	public MarchEventDataType[] MarchEventData;

	// Token: 0x04000FBA RID: 4026
	public TimeEventDataType[] MarchEventTime;

	// Token: 0x04000FBB RID: 4027
	public TimeEventDataType[] RallyCountDown;

	// Token: 0x04000FBC RID: 4028
	public ClientJoinedRallyDataType[] JoinedRallyDataType;

	// Token: 0x04000FBD RID: 4029
	public byte[] TempFightHeroID;

	// Token: 0x04000FBE RID: 4030
	public uint[] FightHeroID;

	// Token: 0x04000FBF RID: 4031
	public uint[] NonFightHeroID;

	// Token: 0x04000FC0 RID: 4032
	public uint FightHeroCount;

	// Token: 0x04000FC1 RID: 4033
	public uint NonFightHeroCount;

	// Token: 0x04000FC2 RID: 4034
	public uint[] SortNonFightHeroID;

	// Token: 0x04000FC3 RID: 4035
	public uint[] SortFightHeroID;

	// Token: 0x04000FC4 RID: 4036
	public SortNonFightHeroIDComparer sortNonFightHeroIDComparer;

	// Token: 0x04000FC5 RID: 4037
	public ushort[] SelectHeroID;

	// Token: 0x04000FC6 RID: 4038
	private string BattleHeroIDList = "BattleHeroIDList";

	// Token: 0x04000FC7 RID: 4039
	private string BindMail = "BindMail";

	// Token: 0x04000FC8 RID: 4040
	public long m_FightNpcDataUserID;

	// Token: 0x04000FC9 RID: 4041
	private CHashTable<ushort, FightNpcData> _m_FightNpcData;

	// Token: 0x04000FCA RID: 4042
	public e_BuildType OriginalBuildType;

	// Token: 0x04000FCB RID: 4043
	public byte OpenBagFilterByBuildingWindow;

	// Token: 0x04000FCC RID: 4044
	public byte OpenBuildingWindowUpdateNoClose;

	// Token: 0x04000FCD RID: 4045
	public Vector3 WorldCameraPos;

	// Token: 0x04000FCE RID: 4046
	public float WorldCameraLimit;

	// Token: 0x04000FCF RID: 4047
	public bool bWorldF = true;

	// Token: 0x04000FD0 RID: 4048
	public Vector3 WorldCameraTransitionsPos = GameConstants.GoldGuy;

	// Token: 0x04000FD1 RID: 4049
	public AllianceMemberClientDataType[] AllianceMember;

	// Token: 0x04000FD2 RID: 4050
	public AllianceMemberComparer allianceMemberComparer;

	// Token: 0x04000FD3 RID: 4051
	public int m_RecvDataIdx;

	// Token: 0x04000FD4 RID: 4052
	private byte m_IsAllianceMemberDataFinish;

	// Token: 0x04000FD5 RID: 4053
	public int m_RemoveIndex = -1;

	// Token: 0x04000FD6 RID: 4054
	public string m_DemiseName;

	// Token: 0x04000FD7 RID: 4055
	public CString m_TempDemiseStr = StringManager.Instance.SpawnString(50);

	// Token: 0x04000FD8 RID: 4056
	public ushort FreeCompletePeriod;

	// Token: 0x04000FD9 RID: 4057
	private ushort[] PriceListDataTypeStart;

	// Token: 0x04000FDA RID: 4058
	private byte[] PriceListDataTypeCount;

	// Token: 0x04000FDB RID: 4059
	public byte CurSelectLanguage;

	// Token: 0x04000FDC RID: 4060
	public ushort CurSelectBadge;

	// Token: 0x04000FDD RID: 4061
	public int SetSelectLanguage;

	// Token: 0x04000FDE RID: 4062
	public int SetSelectRequest;

	// Token: 0x04000FDF RID: 4063
	public AlliancePublic AllianceView;

	// Token: 0x04000FE0 RID: 4064
	private EQueueBarIndex[] QueueIndexbyUesItemTarget = new EQueueBarIndex[]
	{
		EQueueBarIndex.MAX,
		EQueueBarIndex.Building,
		EQueueBarIndex.Training,
		EQueueBarIndex.HeroEnhance,
		EQueueBarIndex.HeroEvolution,
		EQueueBarIndex.Researching,
		EQueueBarIndex.Treatmenting,
		EQueueBarIndex.Manufacturing,
		EQueueBarIndex.TrapRepair,
		EQueueBarIndex.Forging,
		EQueueBarIndex.WallRepair,
		EQueueBarIndex.AffairMission,
		EQueueBarIndex.AllianceMission,
		EQueueBarIndex.Building,
		EQueueBarIndex.Building,
		EQueueBarIndex.Building,
		EQueueBarIndex.VIPMission,
		EQueueBarIndex.Building,
		EQueueBarIndex.PetEvolution
	};

	// Token: 0x04000FE1 RID: 4065
	private byte TechnologySendFinish;

	// Token: 0x04000FE2 RID: 4066
	private ushort[] TechnologyLayoutTypeStart;

	// Token: 0x04000FE3 RID: 4067
	private byte[] TechnologyLayoutTypeCount;

	// Token: 0x04000FE4 RID: 4068
	public byte[] sortTechKindIndex;

	// Token: 0x04000FE5 RID: 4069
	private _TechKindComparer TechKindComparer = new _TechKindComparer();

	// Token: 0x04000FE6 RID: 4070
	private ushort[] TechKindLevelMax;

	// Token: 0x04000FE7 RID: 4071
	private uint[] TechLevelupExSearchTable;

	// Token: 0x04000FE8 RID: 4072
	private ushort[] TalentLevelMax;

	// Token: 0x04000FE9 RID: 4073
	public long KingCoolEndTime;

	// Token: 0x04000FEA RID: 4074
	public CString[] PlayerName_War = new CString[2];

	// Token: 0x04000FEB RID: 4075
	public long[] MaxValue_War = new long[3];

	// Token: 0x04000FEC RID: 4076
	public long[] NowValue_War = new long[3];

	// Token: 0x04000FED RID: 4077
	public ushort[] KindomID_War = new ushort[2];

	// Token: 0x04000FEE RID: 4078
	public CString[] AllianceTag_War = new CString[2];

	// Token: 0x04000FEF RID: 4079
	public long CastleTrapsDestroyedCount;

	// Token: 0x04000FF0 RID: 4080
	public TroopLeaderType[] pLeftLeaderData = new TroopLeaderType[5];

	// Token: 0x04000FF1 RID: 4081
	public TroopLeaderType[] pRightLeaderData = new TroopLeaderType[5];

	// Token: 0x04000FF2 RID: 4082
	public byte War_LeftHeroNum;

	// Token: 0x04000FF3 RID: 4083
	public byte War_RightHeroNum;

	// Token: 0x04000FF4 RID: 4084
	public ushort War_LeftLordID;

	// Token: 0x04000FF5 RID: 4085
	public ushort War_RightLordID;

	// Token: 0x04000FF6 RID: 4086
	public byte War_LeftCastleLv;

	// Token: 0x04000FF7 RID: 4087
	public byte War_RightCastleLv;

	// Token: 0x04000FF8 RID: 4088
	public uint[,] pLeftTroopForce = new uint[4, 4];

	// Token: 0x04000FF9 RID: 4089
	public uint[,] pRightTroopForce = new uint[4, 4];

	// Token: 0x04000FFA RID: 4090
	public uint[,] pCastleInfo = new uint[3, 4];

	// Token: 0x04000FFB RID: 4091
	public uint CurWallHp;

	// Token: 0x04000FFC RID: 4092
	public uint MaxWallHp;

	// Token: 0x04000FFD RID: 4093
	public byte War_WallLevel;

	// Token: 0x04000FFE RID: 4094
	public byte bSiege;

	// Token: 0x04000FFF RID: 4095
	public bool bWarAttacker;

	// Token: 0x04001000 RID: 4096
	public byte WarType;

	// Token: 0x04001001 RID: 4097
	public ushort War_RndSeed = 1;

	// Token: 0x04001002 RID: 4098
	public ushort War_RndGap = 2;

	// Token: 0x04001003 RID: 4099
	public byte War_LordCapture;

	// Token: 0x04001004 RID: 4100
	public ushort War_MapKind = 1;

	// Token: 0x04001005 RID: 4101
	public byte War_MapTheme = 1;

	// Token: 0x04001006 RID: 4102
	public uint DramaTriggerFlag;

	// Token: 0x04001007 RID: 4103
	public ulong[] WarMoraleValue = new ulong[2];

	// Token: 0x04001008 RID: 4104
	public ulong[] WarLoseCount = new ulong[2];

	// Token: 0x04001009 RID: 4105
	public bool bWarMoraleSpecialCale;

	// Token: 0x0400100A RID: 4106
	public int[] WarMorale = new int[2];

	// Token: 0x0400100B RID: 4107
	public CombatCastleDefAttrDataType War_WallAttr = default(CombatCastleDefAttrDataType);

	// Token: 0x0400100C RID: 4108
	public uint[] War_LeftAttackAttr = new uint[4];

	// Token: 0x0400100D RID: 4109
	public uint[] War_LeftDefenseAttr = new uint[4];

	// Token: 0x0400100E RID: 4110
	public uint[] War_LeftHealthAttr = new uint[4];

	// Token: 0x0400100F RID: 4111
	public uint[] War_RightAttackAttr = new uint[4];

	// Token: 0x04001010 RID: 4112
	public uint[] War_RightDefenseAttr = new uint[4];

	// Token: 0x04001011 RID: 4113
	public uint[] War_RightHealthAttr = new uint[4];

	// Token: 0x04001012 RID: 4114
	public uint BattleSimVer;

	// Token: 0x04001013 RID: 4115
	public uint BattlePatchNo;

	// Token: 0x04001014 RID: 4116
	public uint PetVersionNo;

	// Token: 0x04001015 RID: 4117
	public AssetBundle TableAB;

	// Token: 0x04001016 RID: 4118
	private int TableABKey;

	// Token: 0x04001017 RID: 4119
	private long _ServerTime;

	// Token: 0x04001018 RID: 4120
	private float _DeltaTimer;

	// Token: 0x04001019 RID: 4121
	private float _DeltaTime;

	// Token: 0x0400101A RID: 4122
	private static DataManager instance = null;

	// Token: 0x0400101B RID: 4123
	private static MapManager mapDataController = null;

	// Token: 0x0400101C RID: 4124
	private static StageManager stageDataController = null;

	// Token: 0x0400101D RID: 4125
	public byte[] AllTechData;

	// Token: 0x0400101E RID: 4126
	public ushort ResearchTech;

	// Token: 0x0400101F RID: 4127
	public ushort CheckResearchTech;

	// Token: 0x04001020 RID: 4128
	public byte[] AllTalentData;

	// Token: 0x04001021 RID: 4129
	public DataManager._SaveTalentData[] SaveTalentData;

	// Token: 0x04001022 RID: 4130
	private byte[][] ConsumeTalentPoint;

	// Token: 0x04001023 RID: 4131
	private DataManager._PreTalentData[] PreTalentTable;

	// Token: 0x04001024 RID: 4132
	public byte NoUseTalent;

	// Token: 0x04001025 RID: 4133
	public byte RecvSaveIndexStart;

	// Token: 0x04001026 RID: 4134
	public ushort RoleTalentPoint;

	// Token: 0x04001027 RID: 4135
	public ushort tmpRoleTotalTalent;

	// Token: 0x04001028 RID: 4136
	public byte TalentQueueCount;

	// Token: 0x04001029 RID: 4137
	public byte TalentSaveQueueCount;

	// Token: 0x0400102A RID: 4138
	public byte TalentSaveZero;

	// Token: 0x0400102B RID: 4139
	public byte CehckSendIdx;

	// Token: 0x0400102C RID: 4140
	public byte CheckRecvIdx;

	// Token: 0x0400102D RID: 4141
	private byte[] CheckSendCount = new byte[4];

	// Token: 0x0400102E RID: 4142
	private DataManager._TalentUpdateQueue[][] TalentAddQueue = new DataManager._TalentUpdateQueue[4][];

	// Token: 0x0400102F RID: 4143
	private DataManager._TalentUpdateQueue[] TalentSaveQueue = new DataManager._TalentUpdateQueue[100];

	// Token: 0x04001030 RID: 4144
	public AttribValManager AttribVal = new AttribValManager();

	// Token: 0x04001031 RID: 4145
	private static MissionManager missionDataManager = null;

	// Token: 0x04001032 RID: 4146
	private static GamePlayAchievementManager achievementMgr;

	// Token: 0x04001033 RID: 4147
	private static FBMissionManager FBmissionDataManager = null;

	// Token: 0x04001034 RID: 4148
	public KingReward KingGift = new KingReward();

	// Token: 0x04001035 RID: 4149
	public MailBox OpenMail;

	// Token: 0x04001036 RID: 4150
	public float Letter_Y = -1f;

	// Token: 0x04001037 RID: 4151
	public int Letter_Idx = -1;

	// Token: 0x04001038 RID: 4152
	public float Letter_PluralY = -1f;

	// Token: 0x04001039 RID: 4153
	public int Letter_PluralIdx = -1;

	// Token: 0x0400103A RID: 4154
	public string Letter_ReplyName;

	// Token: 0x0400103B RID: 4155
	public string Letter_ReplyTitle;

	// Token: 0x0400103C RID: 4156
	public string Letter_ReplyEditor;

	// Token: 0x0400103D RID: 4157
	public CString Letter_ReplyName_KTN;

	// Token: 0x0400103E RID: 4158
	public CString Letter_ReplyTitle_Alliance;

	// Token: 0x0400103F RID: 4159
	public uint Letter_ReplyID;

	// Token: 0x04001040 RID: 4160
	public bool bPlural;

	// Token: 0x04001041 RID: 4161
	public bool bNoPlural;

	// Token: 0x04001042 RID: 4162
	public uint Letter_PluralReplyID;

	// Token: 0x04001043 RID: 4163
	public string Letter_PluralSenderName;

	// Token: 0x04001044 RID: 4164
	public bool bMailAddBookMark;

	// Token: 0x04001045 RID: 4165
	public List<uint> BlockedMail = new List<uint>();

	// Token: 0x04001046 RID: 4166
	public long BlackoutMail;

	// Token: 0x04001047 RID: 4167
	public int BlackoutCount;

	// Token: 0x04001048 RID: 4168
	public float LetterFs_Y = -1f;

	// Token: 0x04001049 RID: 4169
	public uint mFs_Serial;

	// Token: 0x0400104A RID: 4170
	public uint m_WallRepairBeginValue;

	// Token: 0x0400104B RID: 4171
	public uint m_WallRepairNowValue;

	// Token: 0x0400104C RID: 4172
	public uint m_WallRepairMaxValue;

	// Token: 0x0400104D RID: 4173
	public float m_WallRepairRate;

	// Token: 0x0400104E RID: 4174
	public float m_WallTickTime;

	// Token: 0x0400104F RID: 4175
	public float m_WallTempRate;

	// Token: 0x04001050 RID: 4176
	public long m_WallBeginTime;

	// Token: 0x04001051 RID: 4177
	public long m_WallTargetTime;

	// Token: 0x04001052 RID: 4178
	public bool bNeedShowWallQueueBar;

	// Token: 0x04001053 RID: 4179
	public ushort[] m_DefendersID;

	// Token: 0x04001054 RID: 4180
	public BookMark RoleBookMark = new BookMark();

	// Token: 0x04001055 RID: 4181
	public static byte[] DataBuffer = new byte[32];

	// Token: 0x04001056 RID: 4182
	public static byte[] msgBuffer = new byte[32];

	// Token: 0x04001057 RID: 4183
	public static byte[] refreshBuffer = new byte[30];

	// Token: 0x04001058 RID: 4184
	public FS_Detail mFS_DetailData = default(FS_Detail);

	// Token: 0x04001059 RID: 4185
	public byte[] mFs_Main = new byte[2];

	// Token: 0x0400105A RID: 4186
	public byte mFs_Side;

	// Token: 0x0400105B RID: 4187
	public FS_Info[] mFs_Info_A = new FS_Info[30];

	// Token: 0x0400105C RID: 4188
	public FS_Info[] mFs_Info_D = new FS_Info[30];

	// Token: 0x0400105D RID: 4189
	public byte mFs_A_Count;

	// Token: 0x0400105E RID: 4190
	public byte mFs_D_Count;

	// Token: 0x0400105F RID: 4191
	public byte mSaveInfo;

	// Token: 0x04001060 RID: 4192
	public byte mFs_A_MHIdx = 5;

	// Token: 0x04001061 RID: 4193
	public byte mFs_D_MHIdx = 5;

	// Token: 0x04001062 RID: 4194
	public float BossOpen_Y;

	// Token: 0x04001063 RID: 4195
	public uint[] mFs_A_ST = new uint[16];

	// Token: 0x04001064 RID: 4196
	public uint[] mFs_A_SL = new uint[16];

	// Token: 0x04001065 RID: 4197
	public uint[] mFs_D_ST = new uint[16];

	// Token: 0x04001066 RID: 4198
	public uint[] mFs_D_SL = new uint[16];

	// Token: 0x04001067 RID: 4199
	public int MaxBuffTableCount;

	// Token: 0x04001068 RID: 4200
	public ItemBuffData[] m_RecvItemBuffData;

	// Token: 0x04001069 RID: 4201
	public byte[] m_SortBuffData;

	// Token: 0x0400106A RID: 4202
	public ItemBuffComparer itemBuffComparer;

	// Token: 0x0400106B RID: 4203
	public int m_BuffScrollIndex;

	// Token: 0x0400106C RID: 4204
	public float m_BuffScrollPos;

	// Token: 0x0400106D RID: 4205
	public byte m_BuffListOpenIcon;

	// Token: 0x0400106E RID: 4206
	public int m_BuffListUseCount;

	// Token: 0x0400106F RID: 4207
	public bool bHaveKvKBuff;

	// Token: 0x04001070 RID: 4208
	public bool bHaveWarBuff;

	// Token: 0x04001071 RID: 4209
	public bool bHaveWorldBattleBuff;

	// Token: 0x04001072 RID: 4210
	public bool bHaveNobilityBattleBuff;

	// Token: 0x04001073 RID: 4211
	public int m_RecvWarBuffIdx;

	// Token: 0x04001074 RID: 4212
	public int m_RecvWorldBattleIdx;

	// Token: 0x04001075 RID: 4213
	public int m_KingdomBattleIdx;

	// Token: 0x04001076 RID: 4214
	public int m_NobilityBattleIdx;

	// Token: 0x04001077 RID: 4215
	public int m_ShieldIdx;

	// Token: 0x04001078 RID: 4216
	public SearchPlayerDataType[] m_SearchPlayerData;

	// Token: 0x04001079 RID: 4217
	public byte m_RecvSearchPlayerCount;

	// Token: 0x0400107A RID: 4218
	public int m_SearchListScrollIndex;

	// Token: 0x0400107B RID: 4219
	public float m_SearchListScrollPos;

	// Token: 0x0400107C RID: 4220
	public string m_PreSearchName;

	// Token: 0x0400107D RID: 4221
	public bool bClaerSearchData;

	// Token: 0x0400107E RID: 4222
	public bool bSearchError;

	// Token: 0x0400107F RID: 4223
	public byte mLastSearchPage;

	// Token: 0x04001080 RID: 4224
	public bool mAllianceSearchView;

	// Token: 0x04001081 RID: 4225
	public CString mLordName;

	// Token: 0x04001082 RID: 4226
	public PlayerProfile mLordProfile;

	// Token: 0x04001083 RID: 4227
	public LordStatisticalData mLordStat;

	// Token: 0x04001084 RID: 4228
	public LordEquipData mLordEquip;

	// Token: 0x04001085 RID: 4229
	public PointCode AllyMemberLoc;

	// Token: 0x04001086 RID: 4230
	public int AllyMemberIdx;

	// Token: 0x04001087 RID: 4231
	public TimeEventDataType m_AltarEffect;

	// Token: 0x04001088 RID: 4232
	public uint[] ScoutResource = new uint[5];

	// Token: 0x04001089 RID: 4233
	public uint DefenseNum;

	// Token: 0x0400108A RID: 4234
	public uint ReinforceNum;

	// Token: 0x0400108B RID: 4235
	public uint TrapsNum;

	// Token: 0x0400108C RID: 4236
	public uint MusterNum;

	// Token: 0x0400108D RID: 4237
	public uint H_TrapsNum;

	// Token: 0x0400108E RID: 4238
	public uint H_TroopsNum;

	// Token: 0x0400108F RID: 4239
	public uint WallValue;

	// Token: 0x04001090 RID: 4240
	public uint WallMaxValue;

	// Token: 0x04001091 RID: 4241
	public uint CaveNum;

	// Token: 0x04001092 RID: 4242
	public uint CantonmentNum;

	// Token: 0x04001093 RID: 4243
	public ushort TroopsFlag;

	// Token: 0x04001094 RID: 4244
	public ushort TrapsFlag;

	// Token: 0x04001095 RID: 4245
	public ushort ReinforceFlag;

	// Token: 0x04001096 RID: 4246
	public ushort MusterFlag;

	// Token: 0x04001097 RID: 4247
	public ushort H_TroopsFlag;

	// Token: 0x04001098 RID: 4248
	public ushort H_TrapsFlag;

	// Token: 0x04001099 RID: 4249
	public ushort CaveFlag;

	// Token: 0x0400109A RID: 4250
	public ushort CantonmentFlag;

	// Token: 0x0400109B RID: 4251
	public byte TroopsCount;

	// Token: 0x0400109C RID: 4252
	public byte TrapsCount;

	// Token: 0x0400109D RID: 4253
	public byte H_TroopsCount;

	// Token: 0x0400109E RID: 4254
	public byte H_TrapsCount;

	// Token: 0x0400109F RID: 4255
	public byte ReinforceCount;

	// Token: 0x040010A0 RID: 4256
	public byte MusterCount;

	// Token: 0x040010A1 RID: 4257
	public byte DefenseHeroCount;

	// Token: 0x040010A2 RID: 4258
	public byte BuildingCount;

	// Token: 0x040010A3 RID: 4259
	public byte ReinforcePlayerCount;

	// Token: 0x040010A4 RID: 4260
	public byte WallStatus;

	// Token: 0x040010A5 RID: 4261
	public byte StrengthenCount;

	// Token: 0x040010A6 RID: 4262
	public byte CantonmentHeroCount;

	// Token: 0x040010A7 RID: 4263
	public byte MainHeroHome;

	// Token: 0x040010A8 RID: 4264
	public uint[] TrapsInfo = new uint[12];

	// Token: 0x040010A9 RID: 4265
	public uint[] TroopsInfo = new uint[16];

	// Token: 0x040010AA RID: 4266
	public uint[] H_TrapsInfo = new uint[12];

	// Token: 0x040010AB RID: 4267
	public uint[] H_TroopsInfo = new uint[16];

	// Token: 0x040010AC RID: 4268
	public uint[] ReinforceInfo = new uint[16];

	// Token: 0x040010AD RID: 4269
	public uint[] MusterInfo = new uint[16];

	// Token: 0x040010AE RID: 4270
	public uint[] CaveInfo = new uint[16];

	// Token: 0x040010AF RID: 4271
	public uint[] CantonmentInfo = new uint[16];

	// Token: 0x040010B0 RID: 4272
	public ushort MainHero;

	// Token: 0x040010B1 RID: 4273
	public ushort CantonmentMainHero;

	// Token: 0x040010B2 RID: 4274
	public Scout_Hero_Info MainHeroInfo;

	// Token: 0x040010B3 RID: 4275
	public Scout_Hero_Info[] DefenseHero = new Scout_Hero_Info[5];

	// Token: 0x040010B4 RID: 4276
	public Scout_Hero_Info[] CantonmentHero = new Scout_Hero_Info[5];

	// Token: 0x040010B5 RID: 4277
	public Scout_Build_Info[] BuildInfo = new Scout_Build_Info[60];

	// Token: 0x040010B6 RID: 4278
	public Scout_Strengthen_Info[] Strengthen_Info = new Scout_Strengthen_Info[14];

	// Token: 0x040010B7 RID: 4279
	public CString[] ReinforcePlayerName = new CString[30];

	// Token: 0x040010B8 RID: 4280
	public CString CantonmentPlayerName;

	// Token: 0x040010B9 RID: 4281
	public bool bCaveMainHero;

	// Token: 0x040010BA RID: 4282
	public bool Prisoner_Requested;

	// Token: 0x040010BB RID: 4283
	public byte[] sortedPrisonerList = new byte[30];

	// Token: 0x040010BC RID: 4284
	public Prisoner[] PrisonerList = new Prisoner[30];

	// Token: 0x040010BD RID: 4285
	public byte PrisonerNum;

	// Token: 0x040010BE RID: 4286
	public byte PrisonerHighestLevel;

	// Token: 0x040010BF RID: 4287
	public LordBeenCapturedData beCaptured;

	// Token: 0x040010C0 RID: 4288
	public List<MapPrisoner> MapPrisoners;

	// Token: 0x040010C1 RID: 4289
	public bool bHeroBattleSave;

	// Token: 0x040010C2 RID: 4290
	public eReinforceCheck ReinforceCheckType;

	// Token: 0x040010C3 RID: 4291
	public uint m_CurrTroopAmount;

	// Token: 0x040010C4 RID: 4292
	public uint m_InForceCapacity;

	// Token: 0x040010C5 RID: 4293
	public uint m_InForceMarchSpeedPlus;

	// Token: 0x040010C6 RID: 4294
	public byte m_CurrInForcePlayer;

	// Token: 0x040010C7 RID: 4295
	public PointCode m_InForcePoint;

	// Token: 0x040010C8 RID: 4296
	public string m_InForceName;

	// Token: 0x040010C9 RID: 4297
	public PointCode RallyDesPoint;

	// Token: 0x040010CA RID: 4298
	public byte RallyCountDownIndex;

	// Token: 0x040010CB RID: 4299
	public PointCode ScoutDesPoint;

	// Token: 0x040010CC RID: 4300
	public ushort TreasureBox_ItemID;

	// Token: 0x040010CD RID: 4301
	public ushort TreasureBox_Num;

	// Token: 0x040010CE RID: 4302
	public byte TreasureBox_ItemRank;

	// Token: 0x040010CF RID: 4303
	public float TreasureBox_CDTime;

	// Token: 0x040010D0 RID: 4304
	public uint m_Maintain;

	// Token: 0x040010D1 RID: 4305
	public uint m_UpdateVersion;

	// Token: 0x040010D2 RID: 4306
	public bool m_MaintainCount;

	// Token: 0x040010D3 RID: 4307
	public bool m_UpdateVersionCount;

	// Token: 0x040010D4 RID: 4308
	public bool bGetFBPrize;

	// Token: 0x040010D5 RID: 4309
	public float leadup_CDTime;

	// Token: 0x040010D6 RID: 4310
	public CryptData m_CryptData;

	// Token: 0x040010D7 RID: 4311
	public List<WonderData> m_Wonders = new List<WonderData>();

	// Token: 0x040010D8 RID: 4312
	private WonderDataComparer TC = new WonderDataComparer();

	// Token: 0x040010D9 RID: 4313
	public List<ActivityEquip> ActivityEquipListIdx = new List<ActivityEquip>();

	// Token: 0x040010DA RID: 4314
	public List<ushort> ActivitylistEquip = new List<ushort>();

	// Token: 0x040010DB RID: 4315
	public ActItemComparer mActSortItem = new ActItemComparer();

	// Token: 0x040010DC RID: 4316
	public double mActivityCDTime = 86400.0;

	// Token: 0x040010DD RID: 4317
	public bool bWaitTranslateClassifieds;

	// Token: 0x040010DE RID: 4318
	public bool bTranslateClassifieds;

	// Token: 0x040010DF RID: 4319
	public bool bTranslateClassifiedsFailed;

	// Token: 0x040010E0 RID: 4320
	public bool bNeedTranslateClassifieds = true;

	// Token: 0x040010E1 RID: 4321
	public string mKingdomClassifieds;

	// Token: 0x040010E2 RID: 4322
	public ushort mKingdomClassifieds_L;

	// Token: 0x040010E3 RID: 4323
	public CString KingdomMsg;

	// Token: 0x040010E4 RID: 4324
	public string mKingdomMsgTag;

	// Token: 0x040010E5 RID: 4325
	public string mKingdomMsgName;

	// Token: 0x040010E6 RID: 4326
	public byte mKingdomClassifiedsFlag;

	// Token: 0x040010E7 RID: 4327
	public bool bWaitTranslate_AA;

	// Token: 0x040010E8 RID: 4328
	public bool bTranslate_AA_Info;

	// Token: 0x040010E9 RID: 4329
	public bool bTranslate_AA_InfoFailed;

	// Token: 0x040010EA RID: 4330
	public bool bNeedTranslate_AA_Info = true;

	// Token: 0x040010EB RID: 4331
	public ushort mAA_Info_L;

	// Token: 0x040010EC RID: 4332
	public bool bTranslate_AA_P;

	// Token: 0x040010ED RID: 4333
	public bool bTranslate_AA_PFailed;

	// Token: 0x040010EE RID: 4334
	public bool bNeedTranslate_AA_P = true;

	// Token: 0x040010EF RID: 4335
	public ushort mAA_P_L;

	// Token: 0x040010F0 RID: 4336
	public bool bTransAA;

	// Token: 0x040010F1 RID: 4337
	public float OwnedPagePosY;

	// Token: 0x040010F2 RID: 4338
	public float NoOwnedPagePosY;

	// Token: 0x040010F3 RID: 4339
	public float OwnedPageContentHeight;

	// Token: 0x040010F4 RID: 4340
	public float NoOwnedPageContentYHeight;

	// Token: 0x040010F5 RID: 4341
	public float[] OwnedPagePosYArray;

	// Token: 0x040010F6 RID: 4342
	public float[] NoOwnedPagePosYArray;

	// Token: 0x040010F7 RID: 4343
	public int[] OwnedPageIDArray;

	// Token: 0x040010F8 RID: 4344
	public int[] NoOwnedPageIDArray;

	// Token: 0x040010F9 RID: 4345
	public ScrollViewIndexValue OwnedPageScrollValue;

	// Token: 0x040010FA RID: 4346
	public ScrollViewIndexValue NoOwnedPageScrollValue;

	// Token: 0x040010FB RID: 4347
	public TroopMemoryData[] mTroopMemoryData = new TroopMemoryData[5];

	// Token: 0x040010FC RID: 4348
	public CString TeamName;

	// Token: 0x040010FD RID: 4349
	public bool bChangName;

	// Token: 0x040010FE RID: 4350
	public bool bChangHero;

	// Token: 0x040010FF RID: 4351
	public bool bChangSoldier;

	// Token: 0x04001100 RID: 4352
	public long mOpenExpeditionNum;

	// Token: 0x04001101 RID: 4353
	public DailyGift mDailyGift = default(DailyGift);

	// Token: 0x04001102 RID: 4354
	public ushort mDailyGift_Pic;

	// Token: 0x04001103 RID: 4355
	public byte mAllianceDisband = 60;

	// Token: 0x04001104 RID: 4356
	private MailBox MailTranslation;

	// Token: 0x04001105 RID: 4357
	public static string[] MailContent;

	// Token: 0x04001106 RID: 4358
	private static List<CString> MailData = new List<CString>(2);

	// Token: 0x04001107 RID: 4359
	private DataManager.eMsgState RecvItemState;

	// Token: 0x04001108 RID: 4360
	public ushort WorldTeleportItemCount;

	// Token: 0x04001109 RID: 4361
	public int WorldTeleportRank;

	// Token: 0x02000173 RID: 371
	private struct _TalentUpdateQueue
	{
		// Token: 0x0400110A RID: 4362
		public ushort TalentID;

		// Token: 0x0400110B RID: 4363
		public byte AddLevel;

		// Token: 0x0400110C RID: 4364
		public byte Type;
	}

	// Token: 0x02000174 RID: 372
	public struct _SaveTalentData
	{
		// Token: 0x06000573 RID: 1395 RVA: 0x00076CCC File Offset: 0x00074ECC
		public void Initial(byte id)
		{
			this.SaveIndex = id;
			this.RoleTalentPoint = 0;
			this.SaveTalentData = new byte[100];
			this.TagName = new CString((int)(GameConstants.MAX_TALENT_CACHE_NAME_BYTE + 1));
			this.DefaultTagName = new CString((int)(GameConstants.MAX_TALENT_CACHE_NAME_BYTE + 1));
			this.TagName.ClearString();
			this.DefaultTagName.ClearString();
			this.DefaultTagName.IntToFormat((long)id, 1, false);
			this.DefaultTagName.AppendFormat(DataManager.instance.mStringTable.GetStringByID(928u));
			this.NoUseTalent = 1;
		}

		// Token: 0x06000574 RID: 1396 RVA: 0x00076D64 File Offset: 0x00074F64
		public void InitSaveTalentData(MessagePacket MP)
		{
			this.NoUseTalent = 1;
			this.RoleTalentPoint = MP.ReadUShort(-1);
			MP.ReadStringPlus((int)GameConstants.MAX_TALENT_CACHE_NAME_BYTE, this.TagName, -1);
			MP.ReadBlock(this.SaveTalentData, 0, 100, -1);
			for (int i = 0; i < 100; i++)
			{
				if (this.SaveTalentData[i] > 0)
				{
					this.NoUseTalent = 0;
					break;
				}
			}
		}

		// Token: 0x06000575 RID: 1397 RVA: 0x00076DD4 File Offset: 0x00074FD4
		public void SetTagName(CString name)
		{
			this.TagName.ClearString();
			this.TagName.Append(name);
		}

		// Token: 0x06000576 RID: 1398 RVA: 0x00076DF0 File Offset: 0x00074FF0
		public CString GetTagName()
		{
			if (this.TagName.Length > 0)
			{
				return this.TagName;
			}
			return this.DefaultTagName;
		}

		// Token: 0x0400110D RID: 4365
		public byte SaveIndex;

		// Token: 0x0400110E RID: 4366
		public byte[] SaveTalentData;

		// Token: 0x0400110F RID: 4367
		public CString TagName;

		// Token: 0x04001110 RID: 4368
		public CString DefaultTagName;

		// Token: 0x04001111 RID: 4369
		public ushort RoleTalentPoint;

		// Token: 0x04001112 RID: 4370
		public byte NoUseTalent;
	}

	// Token: 0x02000175 RID: 373
	private class _PreTalentData
	{
		// Token: 0x04001113 RID: 4371
		public byte TalentID;

		// Token: 0x04001114 RID: 4372
		public byte Level;

		// Token: 0x04001115 RID: 4373
		public DataManager._PreTalentData Next;
	}

	// Token: 0x02000176 RID: 374
	public sealed class SerialKiller : SerializationBinder
	{
		// Token: 0x06000579 RID: 1401 RVA: 0x00076E20 File Offset: 0x00075020
		public override Type BindToType(string assemblyName, string typeName)
		{
			return Type.GetType(string.Format("{0}, {1}", typeName, Assembly.GetExecutingAssembly().FullName));
		}
	}

	// Token: 0x02000177 RID: 375
	public class MailDataComparer : IComparer<MailBox>
	{
		// Token: 0x0600057B RID: 1403 RVA: 0x00076E44 File Offset: 0x00075044
		public int Compare(MailBox x, MailBox y)
		{
			if (x.Serial == 0u)
			{
				return 1;
			}
			if (y.Serial == 0u || x.Timing > y.Timing || (x.Serial > y.Serial && x.Timing == y.Timing))
			{
				return -1;
			}
			return 1;
		}
	}

	// Token: 0x02000178 RID: 376
	public enum eMsgState
	{
		// Token: 0x04001117 RID: 4375
		EMS_Null,
		// Token: 0x04001118 RID: 4376
		EMS_Begin,
		// Token: 0x04001119 RID: 4377
		EMS_End,
		// Token: 0x0400111A RID: 4378
		EMS_BeginAndEnd
	}
}
